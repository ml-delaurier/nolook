var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var vd = Object.defineProperty;
var Td = (e) => {
  throw TypeError(e);
};
var Q0 = (e, t, a) => t in e ? vd(e, t, { enumerable: true, configurable: true, writable: true, value: a }) : e[t] = a;
var xd = (e, t) => {
  for (var a in t) vd(e, a, { get: t[a], enumerable: true });
};
var qi = (e, t, a) => Q0(e, typeof t != "symbol" ? t + "" : t, a), K0 = (e, t, a) => t.has(e) || Td("Cannot " + a);
var yp = (e, t, a) => t.has(e) ? Td("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e) : t.set(e, a);
var ge = (e, t, a) => (K0(e, t, "access private method"), a);
var dd = {};
xd(dd, { parsers: () => fd });
var fd = {};
xd(fd, { typescript: () => L4 });
var Z0 = () => () => {
}, Ia = Z0;
var ey = (e, t, a, o) => {
  if (!(e && t == null)) return t.replaceAll ? t.replaceAll(a, o) : a.global ? t.replace(a, o) : t.split(a).join(o);
}, Sr = ey;
var wm = "5.7";
var bt = [], ty = /* @__PURE__ */ new Map();
function ts(e) {
  return e !== void 0 ? e.length : 0;
}
function Un(e, t) {
  if (e !== void 0) for (let a = 0; a < e.length; a++) {
    let o = t(e[a], a);
    if (o) return o;
  }
}
function ny(e, t) {
  if (e !== void 0) for (let a = 0; a < e.length; a++) {
    let o = t(e[a], a);
    if (o !== void 0) return o;
  }
}
function Sd(e, t, a) {
  let o = [];
  B.assertEqual(e.length, t.length);
  for (let m = 0; m < e.length; m++) o.push(a(e[m], t[m], m));
  return o;
}
function Gp(e, t) {
  if (e !== void 0) {
    for (let a = 0; a < e.length; a++) if (!t(e[a], a)) return false;
  }
  return true;
}
function km(e, t, a) {
  if (e !== void 0) for (let o = 0; o < e.length; o++) {
    let m = e[o];
    if (t(m, o)) return m;
  }
}
function gp(e, t, a) {
  if (e === void 0) return -1;
  for (let o = a ?? 0; o < e.length; o++) if (t(e[o], o)) return o;
  return -1;
}
function ry(e, t, a = Hp) {
  if (e !== void 0) {
    for (let o = 0; o < e.length; o++) if (a(e[o], t)) return true;
  }
  return false;
}
function Gr(e, t) {
  if (e !== void 0) {
    let a = e.length, o = 0;
    for (; o < a && t(e[o]); ) o++;
    if (o < a) {
      let m = e.slice(0, o);
      for (o++; o < a; ) {
        let v = e[o];
        t(v) && m.push(v), o++;
      }
      return m;
    }
  }
  return e;
}
function Pp(e, t) {
  let a;
  if (e !== void 0) {
    a = [];
    for (let o = 0; o < e.length; o++) a.push(t(e[o], o));
  }
  return a;
}
function Em(e) {
  let t = [];
  for (let a = 0; a < e.length; a++) {
    let o = e[a];
    o && (Yr(o) ? Dn(t, o) : t.push(o));
  }
  return t;
}
function Am(e, t) {
  let a;
  if (e !== void 0) for (let o = 0; o < e.length; o++) {
    let m = t(e[o], o);
    m && (Yr(m) ? a = Dn(a, m) : a = An(a, m));
  }
  return a ?? bt;
}
function iy(e, t) {
  let a;
  if (e !== void 0) for (let o = 0; o < e.length; o++) {
    let m = e[o], v = t(m, o);
    (a || m !== v || Yr(v)) && (a || (a = e.slice(0, o)), Yr(v) ? Dn(a, v) : a.push(v));
  }
  return a ?? e;
}
function ay(e, t) {
  let a = [];
  if (e !== void 0) for (let o = 0; o < e.length; o++) {
    let m = t(e[o], o);
    m !== void 0 && a.push(m);
  }
  return a;
}
function Xt(e, t) {
  if (e !== void 0) if (t !== void 0) {
    for (let a = 0; a < e.length; a++) if (t(e[a])) return true;
  } else return e.length > 0;
  return false;
}
function Yp(e, t) {
  return t === void 0 || t.length === 0 ? e : e === void 0 || e.length === 0 ? t : [...e, ...t];
}
function _y(e, t, a = Hp) {
  if (e === void 0 || t === void 0) return e === t;
  if (e.length !== t.length) return false;
  for (let o = 0; o < e.length; o++) if (!a(e[o], t[o], o)) return false;
  return true;
}
function An(e, t) {
  return t === void 0 ? e : e === void 0 ? [t] : (e.push(t), e);
}
function Np(e, t) {
  return t < 0 ? e.length + t : t;
}
function Dn(e, t, a, o) {
  if (t === void 0 || t.length === 0) return e;
  if (e === void 0) return t.slice(a, o);
  a = a === void 0 ? 0 : Np(t, a), o = o === void 0 ? t.length : Np(t, o);
  for (let m = a; m < o && m < t.length; m++) t[m] !== void 0 && e.push(t[m]);
  return e;
}
function sy(e, t, a) {
  return ry(e, t, a) ? false : (e.push(t), true);
}
function oy(e, t, a) {
  return e !== void 0 ? (sy(e, t, a), e) : [t];
}
function cy(e, t) {
  return e.length === 0 ? bt : e.slice().sort(t);
}
function Xp(e) {
  return e === void 0 || e.length === 0 ? void 0 : e[0];
}
function Yi(e) {
  return e === void 0 || e.length === 0 ? void 0 : e[e.length - 1];
}
function ly(e) {
  return B.assert(e.length !== 0), e[e.length - 1];
}
function uy(e) {
  return e !== void 0 && e.length === 1 ? e[0] : void 0;
}
function py(e, t, a, o, m) {
  return fy(e, a(t), a, o);
}
function fy(e, t, a, o, m) {
  if (!Xt(e)) return -1;
  let v = 0, A = e.length - 1;
  for (; v <= A; ) {
    let P = v + (A - v >> 1), l = a(e[P], P);
    switch (o(l, t)) {
      case -1:
        v = P + 1;
        break;
      case 0:
        return P;
      case 1:
        A = P - 1;
        break;
    }
  }
  return ~v;
}
function dy(e, t, a, o, m) {
  if (e && e.length > 0) {
    let v = e.length;
    if (v > 0) {
      let A = 0, P = v - 1, l;
      for (arguments.length <= 2 ? (l = e[A], A++) : l = a; A <= P; ) l = t(l, e[A], A), A++;
      return l;
    }
  }
  return a;
}
var Cm = Object.prototype.hasOwnProperty;
function Cr(e, t) {
  return Cm.call(e, t);
}
function my(e) {
  let t = [];
  for (let a in e) Cm.call(e, a) && t.push(a);
  return t;
}
function hy() {
  let e = /* @__PURE__ */ new Map();
  return e.add = yy, e.remove = gy, e;
}
function yy(e, t) {
  let a = this.get(e);
  return a !== void 0 ? a.push(t) : this.set(e, a = [t]), a;
}
function gy(e, t) {
  let a = this.get(e);
  a !== void 0 && (Ay(a, t), a.length || this.delete(e));
}
function Yr(e) {
  return Array.isArray(e);
}
function bp(e) {
  return Yr(e) ? e : [e];
}
function by(e, t) {
  return e !== void 0 && t(e) ? e : void 0;
}
function kr(e, t) {
  return e !== void 0 && t(e) ? e : B.fail(`Invalid cast. The supplied value ${e} did not pass the test '${B.getFunctionName(t)}'.`);
}
function Fa(e) {
}
function vy() {
  return true;
}
function gt(e) {
  return e;
}
function wd(e) {
  let t;
  return () => (e && (t = e(), e = void 0), t);
}
function Kn(e) {
  let t = /* @__PURE__ */ new Map();
  return (a) => {
    let o = `${typeof a}:${a}`, m = t.get(o);
    return m === void 0 && !t.has(o) && (m = e(a), t.set(o, m)), m;
  };
}
function Hp(e, t) {
  return e === t;
}
function $p(e, t) {
  return e === t || e !== void 0 && t !== void 0 && e.toUpperCase() === t.toUpperCase();
}
function Ty(e, t) {
  return Hp(e, t);
}
function xy(e, t) {
  return e === t ? 0 : e === void 0 ? -1 : t === void 0 ? 1 : e < t ? -1 : 1;
}
function Dm(e, t) {
  return xy(e, t);
}
function Sy(e, t, a) {
  for (let o = 0; o < e.length; o++) t = Math.max(t, a(e[o]));
  return t;
}
function ns(e, t, a) {
  let o = Math.max(2, Math.floor(e.length * 0.34)), m = Math.floor(e.length * 0.4) + 1, v;
  for (let A of t) {
    let P = a(A);
    if (P !== void 0 && Math.abs(P.length - e.length) <= o) {
      if (P === e || P.length < 3 && P.toLowerCase() !== e.toLowerCase()) continue;
      let l = wy(e, P, m - 0.1);
      if (l === void 0) continue;
      B.assert(l < m), m = l, v = A;
    }
  }
  return v;
}
function wy(e, t, a) {
  let o = new Array(t.length + 1), m = new Array(t.length + 1), v = a + 0.01;
  for (let P = 0; P <= t.length; P++) o[P] = P;
  for (let P = 1; P <= e.length; P++) {
    let l = e.charCodeAt(P - 1), Q = Math.ceil(P > a ? P - a : 1), h = Math.floor(t.length > a + P ? a + P : t.length);
    m[0] = P;
    let y = P;
    for (let x = 1; x < Q; x++) m[x] = v;
    for (let x = Q; x <= h; x++) {
      let I = e[P - 1].toLowerCase() === t[x - 1].toLowerCase() ? o[x - 1] + 0.1 : o[x - 1] + 2, re = l === t.charCodeAt(x - 1) ? o[x - 1] : Math.min(o[x] + 1, m[x - 1] + 1, I);
      m[x] = re, y = Math.min(y, re);
    }
    for (let x = h + 1; x <= t.length; x++) m[x] = v;
    if (y > a) return;
    let g = o;
    o = m, m = g;
  }
  let A = o[t.length];
  return A > a ? void 0 : A;
}
function ky(e, t, a) {
  let o = e.length - t.length;
  return o >= 0 && (a ? $p(e.slice(o), t) : e.indexOf(t, o) === o);
}
function Ey(e, t) {
  e[t] = e[e.length - 1], e.pop();
}
function Ay(e, t) {
  return Cy(e, (a) => a === t);
}
function Cy(e, t) {
  for (let a = 0; a < e.length; a++) if (t(e[a])) return Ey(e, a), true;
  return false;
}
function ul(e, t, a) {
  return e.lastIndexOf(t, 0) === 0;
}
function Ip(e) {
  return e === void 0 ? void 0 : [e];
}
var B;
((e) => {
  let t = 0;
  e.currentLogLevel = 2, e.isDebugging = false;
  function a(L) {
    return e.currentLogLevel <= L;
  }
  e.shouldLog = a;
  function o(L, se) {
    e.loggingHost && a(L) && e.loggingHost.log(L, se);
  }
  function m(L) {
    o(3, L);
  }
  e.log = m, ((L) => {
    function se(Ke) {
      o(1, Ke);
    }
    L.error = se;
    function fe(Ke) {
      o(2, Ke);
    }
    L.warn = fe;
    function Te(Ke) {
      o(3, Ke);
    }
    L.log = Te;
    function He(Ke) {
      o(4, Ke);
    }
    L.trace = He;
  })(m = e.log || (e.log = {}));
  let v = {};
  function A() {
    return t;
  }
  e.getAssertionLevel = A;
  function P(L) {
    let se = t;
    if (t = L, L > se) for (let fe of my(v)) {
      let Te = v[fe];
      Te !== void 0 && e[fe] !== Te.assertion && L >= Te.level && (e[fe] = Te, v[fe] = void 0);
    }
  }
  e.setAssertionLevel = P;
  function l(L) {
    return t >= L;
  }
  e.shouldAssert = l;
  function Q(L, se) {
    return l(L) ? true : (v[se] = { level: L, assertion: e[se] }, e[se] = Fa, false);
  }
  function h(L, se) {
    debugger;
    let fe = new Error(L ? `Debug Failure. ${L}` : "Debug Failure.");
    throw Error.captureStackTrace && Error.captureStackTrace(fe, se || h), fe;
  }
  e.fail = h;
  function y(L, se, fe) {
    return h(`${se || "Unexpected node."}\r
Node ${Ot(L.kind)} was unexpected.`, fe || y);
  }
  e.failBadSyntaxKind = y;
  function g(L, se, fe, Te) {
    L || (se = se ? `False expression: ${se}` : "False expression.", fe && (se += `\r
Verbose Debug Information: ` + (typeof fe == "string" ? fe : fe())), h(se, Te || g));
  }
  e.assert = g;
  function x(L, se, fe, Te, He) {
    if (L !== se) {
      let Ke = fe ? Te ? `${fe} ${Te}` : fe : "";
      h(`Expected ${L} === ${se}. ${Ke}`, He || x);
    }
  }
  e.assertEqual = x;
  function I(L, se, fe, Te) {
    L >= se && h(`Expected ${L} < ${se}. ${fe || ""}`, Te || I);
  }
  e.assertLessThan = I;
  function re(L, se, fe) {
    L > se && h(`Expected ${L} <= ${se}`, fe || re);
  }
  e.assertLessThanOrEqual = re;
  function he(L, se, fe) {
    L < se && h(`Expected ${L} >= ${se}`, fe || he);
  }
  e.assertGreaterThanOrEqual = he;
  function ye(L, se, fe) {
    L == null && h(se, fe || ye);
  }
  e.assertIsDefined = ye;
  function de(L, se, fe) {
    return ye(L, se, fe || de), L;
  }
  e.checkDefined = de;
  function M(L, se, fe) {
    for (let Te of L) ye(Te, se, fe || M);
  }
  e.assertEachIsDefined = M;
  function ae(L, se, fe) {
    return M(L, se, fe || ae), L;
  }
  e.checkEachDefined = ae;
  function Oe(L, se = "Illegal value:", fe) {
    let Te = typeof L == "object" && Cr(L, "kind") && Cr(L, "pos") ? "SyntaxKind: " + Ot(L.kind) : JSON.stringify(L);
    return h(`${se} ${Te}`, fe || Oe);
  }
  e.assertNever = Oe;
  function V(L, se, fe, Te) {
    Q(1, "assertEachNode") && g(se === void 0 || Gp(L, se), fe || "Unexpected node.", () => `Node array did not pass test '${bn(se)}'.`, Te || V);
  }
  e.assertEachNode = V;
  function oe(L, se, fe, Te) {
    Q(1, "assertNode") && g(L !== void 0 && (se === void 0 || se(L)), fe || "Unexpected node.", () => `Node ${Ot(L == null ? void 0 : L.kind)} did not pass test '${bn(se)}'.`, Te || oe);
  }
  e.assertNode = oe;
  function W(L, se, fe, Te) {
    Q(1, "assertNotNode") && g(L === void 0 || se === void 0 || !se(L), fe || "Unexpected node.", () => `Node ${Ot(L.kind)} should not have passed test '${bn(se)}'.`, Te || W);
  }
  e.assertNotNode = W;
  function dt(L, se, fe, Te) {
    Q(1, "assertOptionalNode") && g(se === void 0 || L === void 0 || se(L), fe || "Unexpected node.", () => `Node ${Ot(L == null ? void 0 : L.kind)} did not pass test '${bn(se)}'.`, Te || dt);
  }
  e.assertOptionalNode = dt;
  function nr(L, se, fe, Te) {
    Q(1, "assertOptionalToken") && g(se === void 0 || L === void 0 || L.kind === se, fe || "Unexpected node.", () => `Node ${Ot(L == null ? void 0 : L.kind)} was not a '${Ot(se)}' token.`, Te || nr);
  }
  e.assertOptionalToken = nr;
  function gn(L, se, fe) {
    Q(1, "assertMissingNode") && g(L === void 0, se || "Unexpected node.", () => `Node ${Ot(L.kind)} was unexpected'.`, fe || gn);
  }
  e.assertMissingNode = gn;
  function rr(L) {
  }
  e.type = rr;
  function bn(L) {
    if (typeof L != "function") return "";
    if (Cr(L, "name")) return L.name;
    {
      let se = Function.prototype.toString.call(L), fe = /^function\s+([\w$]+)\s*\(/.exec(se);
      return fe ? fe[1] : "";
    }
  }
  e.getFunctionName = bn;
  function In(L) {
    return `{ name: ${cs(L.escapedName)}; flags: ${ct(L.flags)}; declarations: ${Pp(L.declarations, (se) => Ot(se.kind))} }`;
  }
  e.formatSymbol = In;
  function Ge(L = 0, se, fe) {
    let Te = Pr(se);
    if (L === 0) return Te.length > 0 && Te[0][0] === 0 ? Te[0][1] : "0";
    if (fe) {
      let He = [], Ke = L;
      for (let [st, Dt] of Te) {
        if (st > L) break;
        st !== 0 && st & L && (He.push(Dt), Ke &= ~st);
      }
      if (Ke === 0) return He.join("|");
    } else for (let [He, Ke] of Te) if (He === L) return Ke;
    return L.toString();
  }
  e.formatEnum = Ge;
  let ir = /* @__PURE__ */ new Map();
  function Pr(L) {
    let se = ir.get(L);
    if (se) return se;
    let fe = [];
    for (let He in L) {
      let Ke = L[He];
      typeof Ke == "number" && fe.push([Ke, He]);
    }
    let Te = cy(fe, (He, Ke) => Dm(He[0], Ke[0]));
    return ir.set(L, Te), Te;
  }
  function Ot(L) {
    return Ge(L, Ie, false);
  }
  e.formatSyntaxKind = Ot;
  function Bn(L) {
    return Ge(L, Mm, false);
  }
  e.formatSnippetKind = Bn;
  function On(L) {
    return Ge(L, Dr, false);
  }
  e.formatScriptKind = On;
  function Mt(L) {
    return Ge(L, on, true);
  }
  e.formatNodeFlags = Mt;
  function vt(L) {
    return Ge(L, Nm, true);
  }
  e.formatNodeCheckFlags = vt;
  function Qe(L) {
    return Ge(L, Qp, true);
  }
  e.formatModifierFlags = Qe;
  function qn(L) {
    return Ge(L, Om, true);
  }
  e.formatTransformFlags = qn;
  function $t(L) {
    return Ge(L, Jm, true);
  }
  e.formatEmitFlags = $t;
  function ct(L) {
    return Ge(L, Kp, true);
  }
  e.formatSymbolFlags = ct;
  function _t(L) {
    return Ge(L, nn, true);
  }
  e.formatTypeFlags = _t;
  function Ut(L) {
    return Ge(L, Im, true);
  }
  e.formatSignatureFlags = Ut;
  function Jt(L) {
    return Ge(L, Zp, true);
  }
  e.formatObjectFlags = Jt;
  function lt(L) {
    return Ge(L, Op, true);
  }
  e.formatFlowFlags = lt;
  function ar(L) {
    return Ge(L, Pm, true);
  }
  e.formatRelationComparisonResult = ar;
  function mt(L) {
    return Ge(L, CheckMode, true);
  }
  e.formatCheckMode = mt;
  function vn(L) {
    return Ge(L, SignatureCheckMode, true);
  }
  e.formatSignatureCheckMode = vn;
  function yt(L) {
    return Ge(L, TypeFacts, true);
  }
  e.formatTypeFacts = yt;
  let cn = false, nt;
  function Bt(L) {
    "__debugFlowFlags" in L || Object.defineProperties(L, { __tsDebuggerDisplay: { value() {
      let se = this.flags & 2 ? "FlowStart" : this.flags & 4 ? "FlowBranchLabel" : this.flags & 8 ? "FlowLoopLabel" : this.flags & 16 ? "FlowAssignment" : this.flags & 32 ? "FlowTrueCondition" : this.flags & 64 ? "FlowFalseCondition" : this.flags & 128 ? "FlowSwitchClause" : this.flags & 256 ? "FlowArrayMutation" : this.flags & 512 ? "FlowCall" : this.flags & 1024 ? "FlowReduceLabel" : this.flags & 1 ? "FlowUnreachable" : "UnknownFlow", fe = this.flags & -2048;
      return `${se}${fe ? ` (${lt(fe)})` : ""}`;
    } }, __debugFlowFlags: { get() {
      return Ge(this.flags, Op, true);
    } }, __debugToString: { value() {
      return mr(this);
    } } });
  }
  function rn(L) {
    return cn && (typeof Object.setPrototypeOf == "function" ? (nt || (nt = Object.create(Object.prototype), Bt(nt)), Object.setPrototypeOf(L, nt)) : Bt(L)), L;
  }
  e.attachFlowNodeDebugInfo = rn;
  let _r;
  function fr(L) {
    "__tsDebuggerDisplay" in L || Object.defineProperties(L, { __tsDebuggerDisplay: { value(se) {
      return se = String(se).replace(/(?:,[\s\w]+:[^,]+)+\]$/, "]"), `NodeArray ${se}`;
    } } });
  }
  function dr(L) {
    cn && (typeof Object.setPrototypeOf == "function" ? (_r || (_r = Object.create(Array.prototype), fr(_r)), Object.setPrototypeOf(L, _r)) : fr(L));
  }
  e.attachNodeArrayDebugInfo = dr;
  function zn() {
    if (cn) return;
    let L = /* @__PURE__ */ new WeakMap(), se = /* @__PURE__ */ new WeakMap();
    Object.defineProperties(At.getSymbolConstructor().prototype, { __tsDebuggerDisplay: { value() {
      let Te = this.flags & 33554432 ? "TransientSymbol" : "Symbol", He = this.flags & -33554433;
      return `${Te} '${Lp(this)}'${He ? ` (${ct(He)})` : ""}`;
    } }, __debugFlags: { get() {
      return ct(this.flags);
    } } }), Object.defineProperties(At.getTypeConstructor().prototype, { __tsDebuggerDisplay: { value() {
      let Te = this.flags & 67359327 ? `IntrinsicType ${this.intrinsicName}${this.debugIntrinsicName ? ` (${this.debugIntrinsicName})` : ""}` : this.flags & 98304 ? "NullableType" : this.flags & 384 ? `LiteralType ${JSON.stringify(this.value)}` : this.flags & 2048 ? `LiteralType ${this.value.negative ? "-" : ""}${this.value.base10Value}n` : this.flags & 8192 ? "UniqueESSymbolType" : this.flags & 32 ? "EnumType" : this.flags & 1048576 ? "UnionType" : this.flags & 2097152 ? "IntersectionType" : this.flags & 4194304 ? "IndexType" : this.flags & 8388608 ? "IndexedAccessType" : this.flags & 16777216 ? "ConditionalType" : this.flags & 33554432 ? "SubstitutionType" : this.flags & 262144 ? "TypeParameter" : this.flags & 524288 ? this.objectFlags & 3 ? "InterfaceType" : this.objectFlags & 4 ? "TypeReference" : this.objectFlags & 8 ? "TupleType" : this.objectFlags & 16 ? "AnonymousType" : this.objectFlags & 32 ? "MappedType" : this.objectFlags & 1024 ? "ReverseMappedType" : this.objectFlags & 256 ? "EvolvingArrayType" : "ObjectType" : "Type", He = this.flags & 524288 ? this.objectFlags & -1344 : 0;
      return `${Te}${this.symbol ? ` '${Lp(this.symbol)}'` : ""}${He ? ` (${Jt(He)})` : ""}`;
    } }, __debugFlags: { get() {
      return _t(this.flags);
    } }, __debugObjectFlags: { get() {
      return this.flags & 524288 ? Jt(this.objectFlags) : "";
    } }, __debugTypeToString: { value() {
      let Te = L.get(this);
      return Te === void 0 && (Te = this.checker.typeToString(this), L.set(this, Te)), Te;
    } } }), Object.defineProperties(At.getSignatureConstructor().prototype, { __debugFlags: { get() {
      return Ut(this.flags);
    } }, __debugSignatureToString: { value() {
      var Te;
      return (Te = this.checker) == null ? void 0 : Te.signatureToString(this);
    } } });
    let fe = [At.getNodeConstructor(), At.getIdentifierConstructor(), At.getTokenConstructor(), At.getSourceFileConstructor()];
    for (let Te of fe) Cr(Te.prototype, "__debugKind") || Object.defineProperties(Te.prototype, { __tsDebuggerDisplay: { value() {
      return `${Ua(this) ? "GeneratedIdentifier" : tt(this) ? `Identifier '${Pn(this)}'` : gi(this) ? `PrivateIdentifier '${Pn(this)}'` : Ya(this) ? `StringLiteral ${JSON.stringify(this.text.length < 10 ? this.text : this.text.slice(10) + "...")}` : ta(this) ? `NumericLiteral ${this.text}` : D1(this) ? `BigIntLiteral ${this.text}n` : Ef(this) ? "TypeParameterDeclaration" : ds(this) ? "ParameterDeclaration" : Af(this) ? "ConstructorDeclaration" : gl(this) ? "GetAccessorDeclaration" : hs(this) ? "SetAccessorDeclaration" : M1(this) ? "CallSignatureDeclaration" : J1(this) ? "ConstructSignatureDeclaration" : Cf(this) ? "IndexSignatureDeclaration" : L1(this) ? "TypePredicateNode" : Df(this) ? "TypeReferenceNode" : Pf(this) ? "FunctionTypeNode" : Nf(this) ? "ConstructorTypeNode" : Bb(this) ? "TypeQueryNode" : j1(this) ? "TypeLiteralNode" : qb(this) ? "ArrayTypeNode" : zb(this) ? "TupleTypeNode" : Fb(this) ? "OptionalTypeNode" : Vb(this) ? "RestTypeNode" : U1(this) ? "UnionTypeNode" : B1(this) ? "IntersectionTypeNode" : Wb(this) ? "ConditionalTypeNode" : Gb(this) ? "InferTypeNode" : q1(this) ? "ParenthesizedTypeNode" : Yb(this) ? "ThisTypeNode" : z1(this) ? "TypeOperatorNode" : Xb(this) ? "IndexedAccessTypeNode" : F1(this) ? "MappedTypeNode" : Hb(this) ? "LiteralTypeNode" : R1(this) ? "NamedTupleMember" : $b(this) ? "ImportTypeNode" : Ot(this.kind)}${this.flags ? ` (${Mt(this.flags)})` : ""}`;
    } }, __debugKind: { get() {
      return Ot(this.kind);
    } }, __debugNodeFlags: { get() {
      return Mt(this.flags);
    } }, __debugModifierFlags: { get() {
      return Qe(Y2(this));
    } }, __debugTransformFlags: { get() {
      return qn(this.transformFlags);
    } }, __debugIsParseTreeNode: { get() {
      return ml(this);
    } }, __debugEmitFlags: { get() {
      return $t(za(this));
    } }, __debugGetText: { value(He) {
      if (La(this)) return "";
      let Ke = se.get(this);
      if (Ke === void 0) {
        let st = dg(this), Dt = st && hi(st);
        Ke = Dt ? Ud(Dt, st, He) : "", se.set(this, Ke);
      }
      return Ke;
    } } });
    cn = true;
  }
  e.enableDebugInfo = zn;
  function Fn(L) {
    let se = L & 7, fe = se === 0 ? "in out" : se === 3 ? "[bivariant]" : se === 2 ? "in" : se === 1 ? "out" : se === 4 ? "[independent]" : "";
    return L & 8 ? fe += " (unmeasurable)" : L & 16 && (fe += " (unreliable)"), fe;
  }
  e.formatVariance = Fn;
  class Nr {
    __debugToString() {
      var se;
      switch (this.kind) {
        case 3:
          return ((se = this.debugInfo) == null ? void 0 : se.call(this)) || "(function mapper)";
        case 0:
          return `${this.source.__debugTypeToString()} -> ${this.target.__debugTypeToString()}`;
        case 1:
          return Sd(this.sources, this.targets || Pp(this.sources, () => "any"), (fe, Te) => `${fe.__debugTypeToString()} -> ${typeof Te == "string" ? Te : Te.__debugTypeToString()}`).join(", ");
        case 2:
          return Sd(this.sources, this.targets, (fe, Te) => `${fe.__debugTypeToString()} -> ${Te().__debugTypeToString()}`).join(", ");
        case 5:
        case 4:
          return `m1: ${this.mapper1.__debugToString().split(`
`).join(`
    `)}
m2: ${this.mapper2.__debugToString().split(`
`).join(`
    `)}`;
        default:
          return Oe(this);
      }
    }
  }
  e.DebugTypeMapper = Nr;
  function Vn(L) {
    return e.isDebugging ? Object.setPrototypeOf(L, Nr.prototype) : L;
  }
  e.attachDebugPrototypeIfDebug = Vn;
  function Ce(L) {
    return console.log(mr(L));
  }
  e.printControlFlowGraph = Ce;
  function mr(L) {
    let se = -1;
    function fe(u) {
      return u.id || (u.id = se, se--), u.id;
    }
    let Te;
    ((u) => {
      u.lr = "─", u.ud = "│", u.dr = "╭", u.dl = "╮", u.ul = "╯", u.ur = "╰", u.udr = "├", u.udl = "┤", u.dlr = "┬", u.ulr = "┴", u.udlr = "╫";
    })(Te || (Te = {}));
    let He;
    ((u) => {
      u[u.None = 0] = "None", u[u.Up = 1] = "Up", u[u.Down = 2] = "Down", u[u.Left = 4] = "Left", u[u.Right = 8] = "Right", u[u.UpDown = 3] = "UpDown", u[u.LeftRight = 12] = "LeftRight", u[u.UpLeft = 5] = "UpLeft", u[u.UpRight = 9] = "UpRight", u[u.DownLeft = 6] = "DownLeft", u[u.DownRight = 10] = "DownRight", u[u.UpDownLeft = 7] = "UpDownLeft", u[u.UpDownRight = 11] = "UpDownRight", u[u.UpLeftRight = 13] = "UpLeftRight", u[u.DownLeftRight = 14] = "DownLeftRight", u[u.UpDownLeftRight = 15] = "UpDownLeftRight", u[u.NoChildren = 16] = "NoChildren";
    })(He || (He = {}));
    let Ke = 2032, st = 882, Dt = /* @__PURE__ */ Object.create(null), Tt = [], Ir = Se(L, /* @__PURE__ */ new Set());
    for (let u of Tt) u.text = rt(u.flowNode, u.circular), be(u);
    let hr = We(Ir), Mn = Ze(hr);
    return Ye(Ir, 0), ln();
    function Wn(u) {
      return !!(u.flags & 128);
    }
    function Si(u) {
      return !!(u.flags & 12) && !!u.antecedent;
    }
    function R(u) {
      return !!(u.flags & Ke);
    }
    function $(u) {
      return !!(u.flags & st);
    }
    function K(u) {
      let Ne = [];
      for (let Me of u.edges) Me.source === u && Ne.push(Me.target);
      return Ne;
    }
    function xe(u) {
      let Ne = [];
      for (let Me of u.edges) Me.target === u && Ne.push(Me.source);
      return Ne;
    }
    function Se(u, Ne) {
      let Me = fe(u), U = Dt[Me];
      if (U && Ne.has(u)) return U.circular = true, U = { id: -1, flowNode: u, edges: [], text: "", lane: -1, endLane: -1, level: -1, circular: "circularity" }, Tt.push(U), U;
      if (Ne.add(u), !U) if (Dt[Me] = U = { id: Me, flowNode: u, edges: [], text: "", lane: -1, endLane: -1, level: -1, circular: false }, Tt.push(U), Si(u)) for (let ze of u.antecedent) we(U, ze, Ne);
      else R(u) && we(U, u.antecedent, Ne);
      return Ne.delete(u), U;
    }
    function we(u, Ne, Me) {
      let U = Se(Ne, Me), ze = { source: u, target: U };
      u.edges.push(ze), U.edges.push(ze);
    }
    function be(u) {
      if (u.level !== -1) return u.level;
      let Ne = 0;
      for (let Me of xe(u)) Ne = Math.max(Ne, be(Me) + 1);
      return u.level = Ne;
    }
    function We(u) {
      let Ne = 0;
      for (let Me of K(u)) Ne = Math.max(Ne, We(Me));
      return Ne + 1;
    }
    function Ze(u) {
      let Ne = J(Array(u), 0);
      for (let Me of Tt) Ne[Me.level] = Math.max(Ne[Me.level], Me.text.length);
      return Ne;
    }
    function Ye(u, Ne) {
      if (u.lane === -1) {
        u.lane = Ne, u.endLane = Ne;
        let Me = K(u);
        for (let U = 0; U < Me.length; U++) {
          U > 0 && Ne++;
          let ze = Me[U];
          Ye(ze, Ne), ze.endLane > u.endLane && (Ne = ze.endLane);
        }
        u.endLane = Ne;
      }
    }
    function Ee(u) {
      if (u & 2) return "Start";
      if (u & 4) return "Branch";
      if (u & 8) return "Loop";
      if (u & 16) return "Assignment";
      if (u & 32) return "True";
      if (u & 64) return "False";
      if (u & 128) return "SwitchClause";
      if (u & 256) return "ArrayMutation";
      if (u & 512) return "Call";
      if (u & 1024) return "ReduceLabel";
      if (u & 1) return "Unreachable";
      throw new Error();
    }
    function Tn(u) {
      let Ne = hi(u);
      return Ud(Ne, u, false);
    }
    function rt(u, Ne) {
      let Me = Ee(u.flags);
      if (Ne && (Me = `${Me}#${fe(u)}`), Wn(u)) {
        let U = [], { switchStatement: ze, clauseStart: an, clauseEnd: Ve } = u.node;
        for (let $e = an; $e < Ve; $e++) {
          let Pt = ze.caseBlock.clauses[$e];
          n6(Pt) ? U.push("default") : U.push(Tn(Pt.expression));
        }
        Me += ` (${U.join(", ")})`;
      } else $(u) && u.node && (Me += ` (${Tn(u.node)})`);
      return Ne === "circularity" ? `Circular(${Me})` : Me;
    }
    function ln() {
      let u = Mn.length, Ne = Sy(Tt, 0, (Ve) => Ve.lane) + 1, Me = J(Array(Ne), ""), U = Mn.map(() => Array(Ne)), ze = Mn.map(() => J(Array(Ne), 0));
      for (let Ve of Tt) {
        U[Ve.level][Ve.lane] = Ve;
        let $e = K(Ve);
        for (let kt = 0; kt < $e.length; kt++) {
          let Nt = $e[kt], qt = 8;
          Nt.lane === Ve.lane && (qt |= 4), kt > 0 && (qt |= 1), kt < $e.length - 1 && (qt |= 2), ze[Ve.level][Nt.lane] |= qt;
        }
        $e.length === 0 && (ze[Ve.level][Ve.lane] |= 16);
        let Pt = xe(Ve);
        for (let kt = 0; kt < Pt.length; kt++) {
          let Nt = Pt[kt], qt = 4;
          kt > 0 && (qt |= 1), kt < Pt.length - 1 && (qt |= 2), ze[Ve.level - 1][Nt.lane] |= qt;
        }
      }
      for (let Ve = 0; Ve < u; Ve++) for (let $e = 0; $e < Ne; $e++) {
        let Pt = Ve > 0 ? ze[Ve - 1][$e] : 0, kt = $e > 0 ? ze[Ve][$e - 1] : 0, Nt = ze[Ve][$e];
        Nt || (Pt & 8 && (Nt |= 12), kt & 2 && (Nt |= 3), ze[Ve][$e] = Nt);
      }
      for (let Ve = 0; Ve < u; Ve++) for (let $e = 0; $e < Me.length; $e++) {
        let Pt = ze[Ve][$e], kt = Pt & 4 ? "─" : " ", Nt = U[Ve][$e];
        Nt ? (an($e, Nt.text), Ve < u - 1 && (an($e, " "), an($e, qe(kt, Mn[Ve] - Nt.text.length)))) : Ve < u - 1 && an($e, qe(kt, Mn[Ve] + 1)), an($e, Zr(Pt)), an($e, Pt & 8 && Ve < u - 1 && !U[Ve + 1][$e] ? "─" : " ");
      }
      return `
${Me.join(`
`)}
`;
      function an(Ve, $e) {
        Me[Ve] += $e;
      }
    }
    function Zr(u) {
      switch (u) {
        case 3:
          return "│";
        case 12:
          return "─";
        case 5:
          return "╯";
        case 9:
          return "╰";
        case 6:
          return "╮";
        case 10:
          return "╭";
        case 7:
          return "┤";
        case 11:
          return "├";
        case 13:
          return "┴";
        case 14:
          return "┬";
        case 15:
          return "╫";
      }
      return " ";
    }
    function J(u, Ne) {
      if (u.fill) u.fill(Ne);
      else for (let Me = 0; Me < u.length; Me++) u[Me] = Ne;
      return u;
    }
    function qe(u, Ne) {
      if (u.repeat) return Ne > 0 ? u.repeat(Ne) : "";
      let Me = "";
      for (; Me.length < Ne; ) Me += u;
      return Me;
    }
  }
  e.formatControlFlowGraph = mr;
})(B || (B = {}));
var _l, Ie = ((e) => (e[e.Unknown = 0] = "Unknown", e[e.EndOfFileToken = 1] = "EndOfFileToken", e[e.SingleLineCommentTrivia = 2] = "SingleLineCommentTrivia", e[e.MultiLineCommentTrivia = 3] = "MultiLineCommentTrivia", e[e.NewLineTrivia = 4] = "NewLineTrivia", e[e.WhitespaceTrivia = 5] = "WhitespaceTrivia", e[e.ShebangTrivia = 6] = "ShebangTrivia", e[e.ConflictMarkerTrivia = 7] = "ConflictMarkerTrivia", e[e.NonTextFileMarkerTrivia = 8] = "NonTextFileMarkerTrivia", e[e.NumericLiteral = 9] = "NumericLiteral", e[e.BigIntLiteral = 10] = "BigIntLiteral", e[e.StringLiteral = 11] = "StringLiteral", e[e.JsxText = 12] = "JsxText", e[e.JsxTextAllWhiteSpaces = 13] = "JsxTextAllWhiteSpaces", e[e.RegularExpressionLiteral = 14] = "RegularExpressionLiteral", e[e.NoSubstitutionTemplateLiteral = 15] = "NoSubstitutionTemplateLiteral", e[e.TemplateHead = 16] = "TemplateHead", e[e.TemplateMiddle = 17] = "TemplateMiddle", e[e.TemplateTail = 18] = "TemplateTail", e[e.OpenBraceToken = 19] = "OpenBraceToken", e[e.CloseBraceToken = 20] = "CloseBraceToken", e[e.OpenParenToken = 21] = "OpenParenToken", e[e.CloseParenToken = 22] = "CloseParenToken", e[e.OpenBracketToken = 23] = "OpenBracketToken", e[e.CloseBracketToken = 24] = "CloseBracketToken", e[e.DotToken = 25] = "DotToken", e[e.DotDotDotToken = 26] = "DotDotDotToken", e[e.SemicolonToken = 27] = "SemicolonToken", e[e.CommaToken = 28] = "CommaToken", e[e.QuestionDotToken = 29] = "QuestionDotToken", e[e.LessThanToken = 30] = "LessThanToken", e[e.LessThanSlashToken = 31] = "LessThanSlashToken", e[e.GreaterThanToken = 32] = "GreaterThanToken", e[e.LessThanEqualsToken = 33] = "LessThanEqualsToken", e[e.GreaterThanEqualsToken = 34] = "GreaterThanEqualsToken", e[e.EqualsEqualsToken = 35] = "EqualsEqualsToken", e[e.ExclamationEqualsToken = 36] = "ExclamationEqualsToken", e[e.EqualsEqualsEqualsToken = 37] = "EqualsEqualsEqualsToken", e[e.ExclamationEqualsEqualsToken = 38] = "ExclamationEqualsEqualsToken", e[e.EqualsGreaterThanToken = 39] = "EqualsGreaterThanToken", e[e.PlusToken = 40] = "PlusToken", e[e.MinusToken = 41] = "MinusToken", e[e.AsteriskToken = 42] = "AsteriskToken", e[e.AsteriskAsteriskToken = 43] = "AsteriskAsteriskToken", e[e.SlashToken = 44] = "SlashToken", e[e.PercentToken = 45] = "PercentToken", e[e.PlusPlusToken = 46] = "PlusPlusToken", e[e.MinusMinusToken = 47] = "MinusMinusToken", e[e.LessThanLessThanToken = 48] = "LessThanLessThanToken", e[e.GreaterThanGreaterThanToken = 49] = "GreaterThanGreaterThanToken", e[e.GreaterThanGreaterThanGreaterThanToken = 50] = "GreaterThanGreaterThanGreaterThanToken", e[e.AmpersandToken = 51] = "AmpersandToken", e[e.BarToken = 52] = "BarToken", e[e.CaretToken = 53] = "CaretToken", e[e.ExclamationToken = 54] = "ExclamationToken", e[e.TildeToken = 55] = "TildeToken", e[e.AmpersandAmpersandToken = 56] = "AmpersandAmpersandToken", e[e.BarBarToken = 57] = "BarBarToken", e[e.QuestionToken = 58] = "QuestionToken", e[e.ColonToken = 59] = "ColonToken", e[e.AtToken = 60] = "AtToken", e[e.QuestionQuestionToken = 61] = "QuestionQuestionToken", e[e.BacktickToken = 62] = "BacktickToken", e[e.HashToken = 63] = "HashToken", e[e.EqualsToken = 64] = "EqualsToken", e[e.PlusEqualsToken = 65] = "PlusEqualsToken", e[e.MinusEqualsToken = 66] = "MinusEqualsToken", e[e.AsteriskEqualsToken = 67] = "AsteriskEqualsToken", e[e.AsteriskAsteriskEqualsToken = 68] = "AsteriskAsteriskEqualsToken", e[e.SlashEqualsToken = 69] = "SlashEqualsToken", e[e.PercentEqualsToken = 70] = "PercentEqualsToken", e[e.LessThanLessThanEqualsToken = 71] = "LessThanLessThanEqualsToken", e[e.GreaterThanGreaterThanEqualsToken = 72] = "GreaterThanGreaterThanEqualsToken", e[e.GreaterThanGreaterThanGreaterThanEqualsToken = 73] = "GreaterThanGreaterThanGreaterThanEqualsToken", e[e.AmpersandEqualsToken = 74] = "AmpersandEqualsToken", e[e.BarEqualsToken = 75] = "BarEqualsToken", e[e.BarBarEqualsToken = 76] = "BarBarEqualsToken", e[e.AmpersandAmpersandEqualsToken = 77] = "AmpersandAmpersandEqualsToken", e[e.QuestionQuestionEqualsToken = 78] = "QuestionQuestionEqualsToken", e[e.CaretEqualsToken = 79] = "CaretEqualsToken", e[e.Identifier = 80] = "Identifier", e[e.PrivateIdentifier = 81] = "PrivateIdentifier", e[e.JSDocCommentTextToken = 82] = "JSDocCommentTextToken", e[e.BreakKeyword = 83] = "BreakKeyword", e[e.CaseKeyword = 84] = "CaseKeyword", e[e.CatchKeyword = 85] = "CatchKeyword", e[e.ClassKeyword = 86] = "ClassKeyword", e[e.ConstKeyword = 87] = "ConstKeyword", e[e.ContinueKeyword = 88] = "ContinueKeyword", e[e.DebuggerKeyword = 89] = "DebuggerKeyword", e[e.DefaultKeyword = 90] = "DefaultKeyword", e[e.DeleteKeyword = 91] = "DeleteKeyword", e[e.DoKeyword = 92] = "DoKeyword", e[e.ElseKeyword = 93] = "ElseKeyword", e[e.EnumKeyword = 94] = "EnumKeyword", e[e.ExportKeyword = 95] = "ExportKeyword", e[e.ExtendsKeyword = 96] = "ExtendsKeyword", e[e.FalseKeyword = 97] = "FalseKeyword", e[e.FinallyKeyword = 98] = "FinallyKeyword", e[e.ForKeyword = 99] = "ForKeyword", e[e.FunctionKeyword = 100] = "FunctionKeyword", e[e.IfKeyword = 101] = "IfKeyword", e[e.ImportKeyword = 102] = "ImportKeyword", e[e.InKeyword = 103] = "InKeyword", e[e.InstanceOfKeyword = 104] = "InstanceOfKeyword", e[e.NewKeyword = 105] = "NewKeyword", e[e.NullKeyword = 106] = "NullKeyword", e[e.ReturnKeyword = 107] = "ReturnKeyword", e[e.SuperKeyword = 108] = "SuperKeyword", e[e.SwitchKeyword = 109] = "SwitchKeyword", e[e.ThisKeyword = 110] = "ThisKeyword", e[e.ThrowKeyword = 111] = "ThrowKeyword", e[e.TrueKeyword = 112] = "TrueKeyword", e[e.TryKeyword = 113] = "TryKeyword", e[e.TypeOfKeyword = 114] = "TypeOfKeyword", e[e.VarKeyword = 115] = "VarKeyword", e[e.VoidKeyword = 116] = "VoidKeyword", e[e.WhileKeyword = 117] = "WhileKeyword", e[e.WithKeyword = 118] = "WithKeyword", e[e.ImplementsKeyword = 119] = "ImplementsKeyword", e[e.InterfaceKeyword = 120] = "InterfaceKeyword", e[e.LetKeyword = 121] = "LetKeyword", e[e.PackageKeyword = 122] = "PackageKeyword", e[e.PrivateKeyword = 123] = "PrivateKeyword", e[e.ProtectedKeyword = 124] = "ProtectedKeyword", e[e.PublicKeyword = 125] = "PublicKeyword", e[e.StaticKeyword = 126] = "StaticKeyword", e[e.YieldKeyword = 127] = "YieldKeyword", e[e.AbstractKeyword = 128] = "AbstractKeyword", e[e.AccessorKeyword = 129] = "AccessorKeyword", e[e.AsKeyword = 130] = "AsKeyword", e[e.AssertsKeyword = 131] = "AssertsKeyword", e[e.AssertKeyword = 132] = "AssertKeyword", e[e.AnyKeyword = 133] = "AnyKeyword", e[e.AsyncKeyword = 134] = "AsyncKeyword", e[e.AwaitKeyword = 135] = "AwaitKeyword", e[e.BooleanKeyword = 136] = "BooleanKeyword", e[e.ConstructorKeyword = 137] = "ConstructorKeyword", e[e.DeclareKeyword = 138] = "DeclareKeyword", e[e.GetKeyword = 139] = "GetKeyword", e[e.InferKeyword = 140] = "InferKeyword", e[e.IntrinsicKeyword = 141] = "IntrinsicKeyword", e[e.IsKeyword = 142] = "IsKeyword", e[e.KeyOfKeyword = 143] = "KeyOfKeyword", e[e.ModuleKeyword = 144] = "ModuleKeyword", e[e.NamespaceKeyword = 145] = "NamespaceKeyword", e[e.NeverKeyword = 146] = "NeverKeyword", e[e.OutKeyword = 147] = "OutKeyword", e[e.ReadonlyKeyword = 148] = "ReadonlyKeyword", e[e.RequireKeyword = 149] = "RequireKeyword", e[e.NumberKeyword = 150] = "NumberKeyword", e[e.ObjectKeyword = 151] = "ObjectKeyword", e[e.SatisfiesKeyword = 152] = "SatisfiesKeyword", e[e.SetKeyword = 153] = "SetKeyword", e[e.StringKeyword = 154] = "StringKeyword", e[e.SymbolKeyword = 155] = "SymbolKeyword", e[e.TypeKeyword = 156] = "TypeKeyword", e[e.UndefinedKeyword = 157] = "UndefinedKeyword", e[e.UniqueKeyword = 158] = "UniqueKeyword", e[e.UnknownKeyword = 159] = "UnknownKeyword", e[e.UsingKeyword = 160] = "UsingKeyword", e[e.FromKeyword = 161] = "FromKeyword", e[e.GlobalKeyword = 162] = "GlobalKeyword", e[e.BigIntKeyword = 163] = "BigIntKeyword", e[e.OverrideKeyword = 164] = "OverrideKeyword", e[e.OfKeyword = 165] = "OfKeyword", e[e.QualifiedName = 166] = "QualifiedName", e[e.ComputedPropertyName = 167] = "ComputedPropertyName", e[e.TypeParameter = 168] = "TypeParameter", e[e.Parameter = 169] = "Parameter", e[e.Decorator = 170] = "Decorator", e[e.PropertySignature = 171] = "PropertySignature", e[e.PropertyDeclaration = 172] = "PropertyDeclaration", e[e.MethodSignature = 173] = "MethodSignature", e[e.MethodDeclaration = 174] = "MethodDeclaration", e[e.ClassStaticBlockDeclaration = 175] = "ClassStaticBlockDeclaration", e[e.Constructor = 176] = "Constructor", e[e.GetAccessor = 177] = "GetAccessor", e[e.SetAccessor = 178] = "SetAccessor", e[e.CallSignature = 179] = "CallSignature", e[e.ConstructSignature = 180] = "ConstructSignature", e[e.IndexSignature = 181] = "IndexSignature", e[e.TypePredicate = 182] = "TypePredicate", e[e.TypeReference = 183] = "TypeReference", e[e.FunctionType = 184] = "FunctionType", e[e.ConstructorType = 185] = "ConstructorType", e[e.TypeQuery = 186] = "TypeQuery", e[e.TypeLiteral = 187] = "TypeLiteral", e[e.ArrayType = 188] = "ArrayType", e[e.TupleType = 189] = "TupleType", e[e.OptionalType = 190] = "OptionalType", e[e.RestType = 191] = "RestType", e[e.UnionType = 192] = "UnionType", e[e.IntersectionType = 193] = "IntersectionType", e[e.ConditionalType = 194] = "ConditionalType", e[e.InferType = 195] = "InferType", e[e.ParenthesizedType = 196] = "ParenthesizedType", e[e.ThisType = 197] = "ThisType", e[e.TypeOperator = 198] = "TypeOperator", e[e.IndexedAccessType = 199] = "IndexedAccessType", e[e.MappedType = 200] = "MappedType", e[e.LiteralType = 201] = "LiteralType", e[e.NamedTupleMember = 202] = "NamedTupleMember", e[e.TemplateLiteralType = 203] = "TemplateLiteralType", e[e.TemplateLiteralTypeSpan = 204] = "TemplateLiteralTypeSpan", e[e.ImportType = 205] = "ImportType", e[e.ObjectBindingPattern = 206] = "ObjectBindingPattern", e[e.ArrayBindingPattern = 207] = "ArrayBindingPattern", e[e.BindingElement = 208] = "BindingElement", e[e.ArrayLiteralExpression = 209] = "ArrayLiteralExpression", e[e.ObjectLiteralExpression = 210] = "ObjectLiteralExpression", e[e.PropertyAccessExpression = 211] = "PropertyAccessExpression", e[e.ElementAccessExpression = 212] = "ElementAccessExpression", e[e.CallExpression = 213] = "CallExpression", e[e.NewExpression = 214] = "NewExpression", e[e.TaggedTemplateExpression = 215] = "TaggedTemplateExpression", e[e.TypeAssertionExpression = 216] = "TypeAssertionExpression", e[e.ParenthesizedExpression = 217] = "ParenthesizedExpression", e[e.FunctionExpression = 218] = "FunctionExpression", e[e.ArrowFunction = 219] = "ArrowFunction", e[e.DeleteExpression = 220] = "DeleteExpression", e[e.TypeOfExpression = 221] = "TypeOfExpression", e[e.VoidExpression = 222] = "VoidExpression", e[e.AwaitExpression = 223] = "AwaitExpression", e[e.PrefixUnaryExpression = 224] = "PrefixUnaryExpression", e[e.PostfixUnaryExpression = 225] = "PostfixUnaryExpression", e[e.BinaryExpression = 226] = "BinaryExpression", e[e.ConditionalExpression = 227] = "ConditionalExpression", e[e.TemplateExpression = 228] = "TemplateExpression", e[e.YieldExpression = 229] = "YieldExpression", e[e.SpreadElement = 230] = "SpreadElement", e[e.ClassExpression = 231] = "ClassExpression", e[e.OmittedExpression = 232] = "OmittedExpression", e[e.ExpressionWithTypeArguments = 233] = "ExpressionWithTypeArguments", e[e.AsExpression = 234] = "AsExpression", e[e.NonNullExpression = 235] = "NonNullExpression", e[e.MetaProperty = 236] = "MetaProperty", e[e.SyntheticExpression = 237] = "SyntheticExpression", e[e.SatisfiesExpression = 238] = "SatisfiesExpression", e[e.TemplateSpan = 239] = "TemplateSpan", e[e.SemicolonClassElement = 240] = "SemicolonClassElement", e[e.Block = 241] = "Block", e[e.EmptyStatement = 242] = "EmptyStatement", e[e.VariableStatement = 243] = "VariableStatement", e[e.ExpressionStatement = 244] = "ExpressionStatement", e[e.IfStatement = 245] = "IfStatement", e[e.DoStatement = 246] = "DoStatement", e[e.WhileStatement = 247] = "WhileStatement", e[e.ForStatement = 248] = "ForStatement", e[e.ForInStatement = 249] = "ForInStatement", e[e.ForOfStatement = 250] = "ForOfStatement", e[e.ContinueStatement = 251] = "ContinueStatement", e[e.BreakStatement = 252] = "BreakStatement", e[e.ReturnStatement = 253] = "ReturnStatement", e[e.WithStatement = 254] = "WithStatement", e[e.SwitchStatement = 255] = "SwitchStatement", e[e.LabeledStatement = 256] = "LabeledStatement", e[e.ThrowStatement = 257] = "ThrowStatement", e[e.TryStatement = 258] = "TryStatement", e[e.DebuggerStatement = 259] = "DebuggerStatement", e[e.VariableDeclaration = 260] = "VariableDeclaration", e[e.VariableDeclarationList = 261] = "VariableDeclarationList", e[e.FunctionDeclaration = 262] = "FunctionDeclaration", e[e.ClassDeclaration = 263] = "ClassDeclaration", e[e.InterfaceDeclaration = 264] = "InterfaceDeclaration", e[e.TypeAliasDeclaration = 265] = "TypeAliasDeclaration", e[e.EnumDeclaration = 266] = "EnumDeclaration", e[e.ModuleDeclaration = 267] = "ModuleDeclaration", e[e.ModuleBlock = 268] = "ModuleBlock", e[e.CaseBlock = 269] = "CaseBlock", e[e.NamespaceExportDeclaration = 270] = "NamespaceExportDeclaration", e[e.ImportEqualsDeclaration = 271] = "ImportEqualsDeclaration", e[e.ImportDeclaration = 272] = "ImportDeclaration", e[e.ImportClause = 273] = "ImportClause", e[e.NamespaceImport = 274] = "NamespaceImport", e[e.NamedImports = 275] = "NamedImports", e[e.ImportSpecifier = 276] = "ImportSpecifier", e[e.ExportAssignment = 277] = "ExportAssignment", e[e.ExportDeclaration = 278] = "ExportDeclaration", e[e.NamedExports = 279] = "NamedExports", e[e.NamespaceExport = 280] = "NamespaceExport", e[e.ExportSpecifier = 281] = "ExportSpecifier", e[e.MissingDeclaration = 282] = "MissingDeclaration", e[e.ExternalModuleReference = 283] = "ExternalModuleReference", e[e.JsxElement = 284] = "JsxElement", e[e.JsxSelfClosingElement = 285] = "JsxSelfClosingElement", e[e.JsxOpeningElement = 286] = "JsxOpeningElement", e[e.JsxClosingElement = 287] = "JsxClosingElement", e[e.JsxFragment = 288] = "JsxFragment", e[e.JsxOpeningFragment = 289] = "JsxOpeningFragment", e[e.JsxClosingFragment = 290] = "JsxClosingFragment", e[e.JsxAttribute = 291] = "JsxAttribute", e[e.JsxAttributes = 292] = "JsxAttributes", e[e.JsxSpreadAttribute = 293] = "JsxSpreadAttribute", e[e.JsxExpression = 294] = "JsxExpression", e[e.JsxNamespacedName = 295] = "JsxNamespacedName", e[e.CaseClause = 296] = "CaseClause", e[e.DefaultClause = 297] = "DefaultClause", e[e.HeritageClause = 298] = "HeritageClause", e[e.CatchClause = 299] = "CatchClause", e[e.ImportAttributes = 300] = "ImportAttributes", e[e.ImportAttribute = 301] = "ImportAttribute", e[e.AssertClause = 300] = "AssertClause", e[e.AssertEntry = 301] = "AssertEntry", e[e.ImportTypeAssertionContainer = 302] = "ImportTypeAssertionContainer", e[e.PropertyAssignment = 303] = "PropertyAssignment", e[e.ShorthandPropertyAssignment = 304] = "ShorthandPropertyAssignment", e[e.SpreadAssignment = 305] = "SpreadAssignment", e[e.EnumMember = 306] = "EnumMember", e[e.SourceFile = 307] = "SourceFile", e[e.Bundle = 308] = "Bundle", e[e.JSDocTypeExpression = 309] = "JSDocTypeExpression", e[e.JSDocNameReference = 310] = "JSDocNameReference", e[e.JSDocMemberName = 311] = "JSDocMemberName", e[e.JSDocAllType = 312] = "JSDocAllType", e[e.JSDocUnknownType = 313] = "JSDocUnknownType", e[e.JSDocNullableType = 314] = "JSDocNullableType", e[e.JSDocNonNullableType = 315] = "JSDocNonNullableType", e[e.JSDocOptionalType = 316] = "JSDocOptionalType", e[e.JSDocFunctionType = 317] = "JSDocFunctionType", e[e.JSDocVariadicType = 318] = "JSDocVariadicType", e[e.JSDocNamepathType = 319] = "JSDocNamepathType", e[e.JSDoc = 320] = "JSDoc", e[e.JSDocComment = 320] = "JSDocComment", e[e.JSDocText = 321] = "JSDocText", e[e.JSDocTypeLiteral = 322] = "JSDocTypeLiteral", e[e.JSDocSignature = 323] = "JSDocSignature", e[e.JSDocLink = 324] = "JSDocLink", e[e.JSDocLinkCode = 325] = "JSDocLinkCode", e[e.JSDocLinkPlain = 326] = "JSDocLinkPlain", e[e.JSDocTag = 327] = "JSDocTag", e[e.JSDocAugmentsTag = 328] = "JSDocAugmentsTag", e[e.JSDocImplementsTag = 329] = "JSDocImplementsTag", e[e.JSDocAuthorTag = 330] = "JSDocAuthorTag", e[e.JSDocDeprecatedTag = 331] = "JSDocDeprecatedTag", e[e.JSDocClassTag = 332] = "JSDocClassTag", e[e.JSDocPublicTag = 333] = "JSDocPublicTag", e[e.JSDocPrivateTag = 334] = "JSDocPrivateTag", e[e.JSDocProtectedTag = 335] = "JSDocProtectedTag", e[e.JSDocReadonlyTag = 336] = "JSDocReadonlyTag", e[e.JSDocOverrideTag = 337] = "JSDocOverrideTag", e[e.JSDocCallbackTag = 338] = "JSDocCallbackTag", e[e.JSDocOverloadTag = 339] = "JSDocOverloadTag", e[e.JSDocEnumTag = 340] = "JSDocEnumTag", e[e.JSDocParameterTag = 341] = "JSDocParameterTag", e[e.JSDocReturnTag = 342] = "JSDocReturnTag", e[e.JSDocThisTag = 343] = "JSDocThisTag", e[e.JSDocTypeTag = 344] = "JSDocTypeTag", e[e.JSDocTemplateTag = 345] = "JSDocTemplateTag", e[e.JSDocTypedefTag = 346] = "JSDocTypedefTag", e[e.JSDocSeeTag = 347] = "JSDocSeeTag", e[e.JSDocPropertyTag = 348] = "JSDocPropertyTag", e[e.JSDocThrowsTag = 349] = "JSDocThrowsTag", e[e.JSDocSatisfiesTag = 350] = "JSDocSatisfiesTag", e[e.JSDocImportTag = 351] = "JSDocImportTag", e[e.SyntaxList = 352] = "SyntaxList", e[e.NotEmittedStatement = 353] = "NotEmittedStatement", e[e.NotEmittedTypeElement = 354] = "NotEmittedTypeElement", e[e.PartiallyEmittedExpression = 355] = "PartiallyEmittedExpression", e[e.CommaListExpression = 356] = "CommaListExpression", e[e.SyntheticReferenceExpression = 357] = "SyntheticReferenceExpression", e[e.Count = 358] = "Count", e[e.FirstAssignment = 64] = "FirstAssignment", e[e.LastAssignment = 79] = "LastAssignment", e[e.FirstCompoundAssignment = 65] = "FirstCompoundAssignment", e[e.LastCompoundAssignment = 79] = "LastCompoundAssignment", e[e.FirstReservedWord = 83] = "FirstReservedWord", e[e.LastReservedWord = 118] = "LastReservedWord", e[e.FirstKeyword = 83] = "FirstKeyword", e[e.LastKeyword = 165] = "LastKeyword", e[e.FirstFutureReservedWord = 119] = "FirstFutureReservedWord", e[e.LastFutureReservedWord = 127] = "LastFutureReservedWord", e[e.FirstTypeNode = 182] = "FirstTypeNode", e[e.LastTypeNode = 205] = "LastTypeNode", e[e.FirstPunctuation = 19] = "FirstPunctuation", e[e.LastPunctuation = 79] = "LastPunctuation", e[e.FirstToken = 0] = "FirstToken", e[e.LastToken = 165] = "LastToken", e[e.FirstTriviaToken = 2] = "FirstTriviaToken", e[e.LastTriviaToken = 7] = "LastTriviaToken", e[e.FirstLiteralToken = 9] = "FirstLiteralToken", e[e.LastLiteralToken = 15] = "LastLiteralToken", e[e.FirstTemplateToken = 15] = "FirstTemplateToken", e[e.LastTemplateToken = 18] = "LastTemplateToken", e[e.FirstBinaryOperator = 30] = "FirstBinaryOperator", e[e.LastBinaryOperator = 79] = "LastBinaryOperator", e[e.FirstStatement = 243] = "FirstStatement", e[e.LastStatement = 259] = "LastStatement", e[e.FirstNode = 166] = "FirstNode", e[e.FirstJSDocNode = 309] = "FirstJSDocNode", e[e.LastJSDocNode = 351] = "LastJSDocNode", e[e.FirstJSDocTagNode = 327] = "FirstJSDocTagNode", e[e.LastJSDocTagNode = 351] = "LastJSDocTagNode", e[e.FirstContextualKeyword = 128] = "FirstContextualKeyword", e[e.LastContextualKeyword = 165] = "LastContextualKeyword", e))(Ie || {}), on = ((e) => (e[e.None = 0] = "None", e[e.Let = 1] = "Let", e[e.Const = 2] = "Const", e[e.Using = 4] = "Using", e[e.AwaitUsing = 6] = "AwaitUsing", e[e.NestedNamespace = 8] = "NestedNamespace", e[e.Synthesized = 16] = "Synthesized", e[e.Namespace = 32] = "Namespace", e[e.OptionalChain = 64] = "OptionalChain", e[e.ExportContext = 128] = "ExportContext", e[e.ContainsThis = 256] = "ContainsThis", e[e.HasImplicitReturn = 512] = "HasImplicitReturn", e[e.HasExplicitReturn = 1024] = "HasExplicitReturn", e[e.GlobalAugmentation = 2048] = "GlobalAugmentation", e[e.HasAsyncFunctions = 4096] = "HasAsyncFunctions", e[e.DisallowInContext = 8192] = "DisallowInContext", e[e.YieldContext = 16384] = "YieldContext", e[e.DecoratorContext = 32768] = "DecoratorContext", e[e.AwaitContext = 65536] = "AwaitContext", e[e.DisallowConditionalTypesContext = 131072] = "DisallowConditionalTypesContext", e[e.ThisNodeHasError = 262144] = "ThisNodeHasError", e[e.JavaScriptFile = 524288] = "JavaScriptFile", e[e.ThisNodeOrAnySubNodesHasError = 1048576] = "ThisNodeOrAnySubNodesHasError", e[e.HasAggregatedChildData = 2097152] = "HasAggregatedChildData", e[e.PossiblyContainsDynamicImport = 4194304] = "PossiblyContainsDynamicImport", e[e.PossiblyContainsImportMeta = 8388608] = "PossiblyContainsImportMeta", e[e.JSDoc = 16777216] = "JSDoc", e[e.Ambient = 33554432] = "Ambient", e[e.InWithStatement = 67108864] = "InWithStatement", e[e.JsonFile = 134217728] = "JsonFile", e[e.TypeCached = 268435456] = "TypeCached", e[e.Deprecated = 536870912] = "Deprecated", e[e.BlockScoped = 7] = "BlockScoped", e[e.Constant = 6] = "Constant", e[e.ReachabilityCheckFlags = 1536] = "ReachabilityCheckFlags", e[e.ReachabilityAndEmitFlags = 5632] = "ReachabilityAndEmitFlags", e[e.ContextFlags = 101441536] = "ContextFlags", e[e.TypeExcludesFlags = 81920] = "TypeExcludesFlags", e[e.PermanentlySetIncrementalFlags = 12582912] = "PermanentlySetIncrementalFlags", e[e.IdentifierHasExtendedUnicodeEscape = 256] = "IdentifierHasExtendedUnicodeEscape", e[e.IdentifierIsInJSDocNamespace = 4096] = "IdentifierIsInJSDocNamespace", e))(on || {}), Qp = ((e) => (e[e.None = 0] = "None", e[e.Public = 1] = "Public", e[e.Private = 2] = "Private", e[e.Protected = 4] = "Protected", e[e.Readonly = 8] = "Readonly", e[e.Override = 16] = "Override", e[e.Export = 32] = "Export", e[e.Abstract = 64] = "Abstract", e[e.Ambient = 128] = "Ambient", e[e.Static = 256] = "Static", e[e.Accessor = 512] = "Accessor", e[e.Async = 1024] = "Async", e[e.Default = 2048] = "Default", e[e.Const = 4096] = "Const", e[e.In = 8192] = "In", e[e.Out = 16384] = "Out", e[e.Decorator = 32768] = "Decorator", e[e.Deprecated = 65536] = "Deprecated", e[e.JSDocPublic = 8388608] = "JSDocPublic", e[e.JSDocPrivate = 16777216] = "JSDocPrivate", e[e.JSDocProtected = 33554432] = "JSDocProtected", e[e.JSDocReadonly = 67108864] = "JSDocReadonly", e[e.JSDocOverride = 134217728] = "JSDocOverride", e[e.SyntacticOrJSDocModifiers = 31] = "SyntacticOrJSDocModifiers", e[e.SyntacticOnlyModifiers = 65504] = "SyntacticOnlyModifiers", e[e.SyntacticModifiers = 65535] = "SyntacticModifiers", e[e.JSDocCacheOnlyModifiers = 260046848] = "JSDocCacheOnlyModifiers", e[e.JSDocOnlyModifiers = 65536] = "JSDocOnlyModifiers", e[e.NonCacheOnlyModifiers = 131071] = "NonCacheOnlyModifiers", e[e.HasComputedJSDocModifiers = 268435456] = "HasComputedJSDocModifiers", e[e.HasComputedFlags = 536870912] = "HasComputedFlags", e[e.AccessibilityModifier = 7] = "AccessibilityModifier", e[e.ParameterPropertyModifier = 31] = "ParameterPropertyModifier", e[e.NonPublicAccessibilityModifier = 6] = "NonPublicAccessibilityModifier", e[e.TypeScriptModifier = 28895] = "TypeScriptModifier", e[e.ExportDefault = 2080] = "ExportDefault", e[e.All = 131071] = "All", e[e.Modifier = 98303] = "Modifier", e))(Qp || {});
var Pm = ((e) => (e[e.None = 0] = "None", e[e.Succeeded = 1] = "Succeeded", e[e.Failed = 2] = "Failed", e[e.ReportsUnmeasurable = 8] = "ReportsUnmeasurable", e[e.ReportsUnreliable = 16] = "ReportsUnreliable", e[e.ReportsMask = 24] = "ReportsMask", e[e.ComplexityOverflow = 32] = "ComplexityOverflow", e[e.StackDepthOverflow = 64] = "StackDepthOverflow", e[e.Overflow = 96] = "Overflow", e))(Pm || {});
var Op = ((e) => (e[e.Unreachable = 1] = "Unreachable", e[e.Start = 2] = "Start", e[e.BranchLabel = 4] = "BranchLabel", e[e.LoopLabel = 8] = "LoopLabel", e[e.Assignment = 16] = "Assignment", e[e.TrueCondition = 32] = "TrueCondition", e[e.FalseCondition = 64] = "FalseCondition", e[e.SwitchClause = 128] = "SwitchClause", e[e.ArrayMutation = 256] = "ArrayMutation", e[e.Call = 512] = "Call", e[e.ReduceLabel = 1024] = "ReduceLabel", e[e.Referenced = 2048] = "Referenced", e[e.Shared = 4096] = "Shared", e[e.Label = 12] = "Label", e[e.Condition = 96] = "Condition", e))(Op || {});
var Kp = ((e) => (e[e.None = 0] = "None", e[e.FunctionScopedVariable = 1] = "FunctionScopedVariable", e[e.BlockScopedVariable = 2] = "BlockScopedVariable", e[e.Property = 4] = "Property", e[e.EnumMember = 8] = "EnumMember", e[e.Function = 16] = "Function", e[e.Class = 32] = "Class", e[e.Interface = 64] = "Interface", e[e.ConstEnum = 128] = "ConstEnum", e[e.RegularEnum = 256] = "RegularEnum", e[e.ValueModule = 512] = "ValueModule", e[e.NamespaceModule = 1024] = "NamespaceModule", e[e.TypeLiteral = 2048] = "TypeLiteral", e[e.ObjectLiteral = 4096] = "ObjectLiteral", e[e.Method = 8192] = "Method", e[e.Constructor = 16384] = "Constructor", e[e.GetAccessor = 32768] = "GetAccessor", e[e.SetAccessor = 65536] = "SetAccessor", e[e.Signature = 131072] = "Signature", e[e.TypeParameter = 262144] = "TypeParameter", e[e.TypeAlias = 524288] = "TypeAlias", e[e.ExportValue = 1048576] = "ExportValue", e[e.Alias = 2097152] = "Alias", e[e.Prototype = 4194304] = "Prototype", e[e.ExportStar = 8388608] = "ExportStar", e[e.Optional = 16777216] = "Optional", e[e.Transient = 33554432] = "Transient", e[e.Assignment = 67108864] = "Assignment", e[e.ModuleExports = 134217728] = "ModuleExports", e[e.All = -1] = "All", e[e.Enum = 384] = "Enum", e[e.Variable = 3] = "Variable", e[e.Value = 111551] = "Value", e[e.Type = 788968] = "Type", e[e.Namespace = 1920] = "Namespace", e[e.Module = 1536] = "Module", e[e.Accessor = 98304] = "Accessor", e[e.FunctionScopedVariableExcludes = 111550] = "FunctionScopedVariableExcludes", e[e.BlockScopedVariableExcludes = 111551] = "BlockScopedVariableExcludes", e[e.ParameterExcludes = 111551] = "ParameterExcludes", e[e.PropertyExcludes = 0] = "PropertyExcludes", e[e.EnumMemberExcludes = 900095] = "EnumMemberExcludes", e[e.FunctionExcludes = 110991] = "FunctionExcludes", e[e.ClassExcludes = 899503] = "ClassExcludes", e[e.InterfaceExcludes = 788872] = "InterfaceExcludes", e[e.RegularEnumExcludes = 899327] = "RegularEnumExcludes", e[e.ConstEnumExcludes = 899967] = "ConstEnumExcludes", e[e.ValueModuleExcludes = 110735] = "ValueModuleExcludes", e[e.NamespaceModuleExcludes = 0] = "NamespaceModuleExcludes", e[e.MethodExcludes = 103359] = "MethodExcludes", e[e.GetAccessorExcludes = 46015] = "GetAccessorExcludes", e[e.SetAccessorExcludes = 78783] = "SetAccessorExcludes", e[e.AccessorExcludes = 13247] = "AccessorExcludes", e[e.TypeParameterExcludes = 526824] = "TypeParameterExcludes", e[e.TypeAliasExcludes = 788968] = "TypeAliasExcludes", e[e.AliasExcludes = 2097152] = "AliasExcludes", e[e.ModuleMember = 2623475] = "ModuleMember", e[e.ExportHasLocal = 944] = "ExportHasLocal", e[e.BlockScoped = 418] = "BlockScoped", e[e.PropertyOrAccessor = 98308] = "PropertyOrAccessor", e[e.ClassMember = 106500] = "ClassMember", e[e.ExportSupportsDefaultModifier = 112] = "ExportSupportsDefaultModifier", e[e.ExportDoesNotSupportDefaultModifier = -113] = "ExportDoesNotSupportDefaultModifier", e[e.Classifiable = 2885600] = "Classifiable", e[e.LateBindingContainer = 6256] = "LateBindingContainer", e))(Kp || {});
var Nm = ((e) => (e[e.None = 0] = "None", e[e.TypeChecked = 1] = "TypeChecked", e[e.LexicalThis = 2] = "LexicalThis", e[e.CaptureThis = 4] = "CaptureThis", e[e.CaptureNewTarget = 8] = "CaptureNewTarget", e[e.SuperInstance = 16] = "SuperInstance", e[e.SuperStatic = 32] = "SuperStatic", e[e.ContextChecked = 64] = "ContextChecked", e[e.MethodWithSuperPropertyAccessInAsync = 128] = "MethodWithSuperPropertyAccessInAsync", e[e.MethodWithSuperPropertyAssignmentInAsync = 256] = "MethodWithSuperPropertyAssignmentInAsync", e[e.CaptureArguments = 512] = "CaptureArguments", e[e.EnumValuesComputed = 1024] = "EnumValuesComputed", e[e.LexicalModuleMergesWithClass = 2048] = "LexicalModuleMergesWithClass", e[e.LoopWithCapturedBlockScopedBinding = 4096] = "LoopWithCapturedBlockScopedBinding", e[e.ContainsCapturedBlockScopeBinding = 8192] = "ContainsCapturedBlockScopeBinding", e[e.CapturedBlockScopedBinding = 16384] = "CapturedBlockScopedBinding", e[e.BlockScopedBindingInLoop = 32768] = "BlockScopedBindingInLoop", e[e.NeedsLoopOutParameter = 65536] = "NeedsLoopOutParameter", e[e.AssignmentsMarked = 131072] = "AssignmentsMarked", e[e.ContainsConstructorReference = 262144] = "ContainsConstructorReference", e[e.ConstructorReference = 536870912] = "ConstructorReference", e[e.ContainsClassWithPrivateIdentifiers = 1048576] = "ContainsClassWithPrivateIdentifiers", e[e.ContainsSuperPropertyInStaticInitializer = 2097152] = "ContainsSuperPropertyInStaticInitializer", e[e.InCheckIdentifier = 4194304] = "InCheckIdentifier", e[e.PartiallyTypeChecked = 8388608] = "PartiallyTypeChecked", e[e.LazyFlags = 539358128] = "LazyFlags", e))(Nm || {}), nn = ((e) => (e[e.Any = 1] = "Any", e[e.Unknown = 2] = "Unknown", e[e.String = 4] = "String", e[e.Number = 8] = "Number", e[e.Boolean = 16] = "Boolean", e[e.Enum = 32] = "Enum", e[e.BigInt = 64] = "BigInt", e[e.StringLiteral = 128] = "StringLiteral", e[e.NumberLiteral = 256] = "NumberLiteral", e[e.BooleanLiteral = 512] = "BooleanLiteral", e[e.EnumLiteral = 1024] = "EnumLiteral", e[e.BigIntLiteral = 2048] = "BigIntLiteral", e[e.ESSymbol = 4096] = "ESSymbol", e[e.UniqueESSymbol = 8192] = "UniqueESSymbol", e[e.Void = 16384] = "Void", e[e.Undefined = 32768] = "Undefined", e[e.Null = 65536] = "Null", e[e.Never = 131072] = "Never", e[e.TypeParameter = 262144] = "TypeParameter", e[e.Object = 524288] = "Object", e[e.Union = 1048576] = "Union", e[e.Intersection = 2097152] = "Intersection", e[e.Index = 4194304] = "Index", e[e.IndexedAccess = 8388608] = "IndexedAccess", e[e.Conditional = 16777216] = "Conditional", e[e.Substitution = 33554432] = "Substitution", e[e.NonPrimitive = 67108864] = "NonPrimitive", e[e.TemplateLiteral = 134217728] = "TemplateLiteral", e[e.StringMapping = 268435456] = "StringMapping", e[e.Reserved1 = 536870912] = "Reserved1", e[e.Reserved2 = 1073741824] = "Reserved2", e[e.AnyOrUnknown = 3] = "AnyOrUnknown", e[e.Nullable = 98304] = "Nullable", e[e.Literal = 2944] = "Literal", e[e.Unit = 109472] = "Unit", e[e.Freshable = 2976] = "Freshable", e[e.StringOrNumberLiteral = 384] = "StringOrNumberLiteral", e[e.StringOrNumberLiteralOrUnique = 8576] = "StringOrNumberLiteralOrUnique", e[e.DefinitelyFalsy = 117632] = "DefinitelyFalsy", e[e.PossiblyFalsy = 117724] = "PossiblyFalsy", e[e.Intrinsic = 67359327] = "Intrinsic", e[e.StringLike = 402653316] = "StringLike", e[e.NumberLike = 296] = "NumberLike", e[e.BigIntLike = 2112] = "BigIntLike", e[e.BooleanLike = 528] = "BooleanLike", e[e.EnumLike = 1056] = "EnumLike", e[e.ESSymbolLike = 12288] = "ESSymbolLike", e[e.VoidLike = 49152] = "VoidLike", e[e.Primitive = 402784252] = "Primitive", e[e.DefinitelyNonNullable = 470302716] = "DefinitelyNonNullable", e[e.DisjointDomains = 469892092] = "DisjointDomains", e[e.UnionOrIntersection = 3145728] = "UnionOrIntersection", e[e.StructuredType = 3670016] = "StructuredType", e[e.TypeVariable = 8650752] = "TypeVariable", e[e.InstantiableNonPrimitive = 58982400] = "InstantiableNonPrimitive", e[e.InstantiablePrimitive = 406847488] = "InstantiablePrimitive", e[e.Instantiable = 465829888] = "Instantiable", e[e.StructuredOrInstantiable = 469499904] = "StructuredOrInstantiable", e[e.ObjectFlagsType = 3899393] = "ObjectFlagsType", e[e.Simplifiable = 25165824] = "Simplifiable", e[e.Singleton = 67358815] = "Singleton", e[e.Narrowable = 536624127] = "Narrowable", e[e.IncludesMask = 473694207] = "IncludesMask", e[e.IncludesMissingType = 262144] = "IncludesMissingType", e[e.IncludesNonWideningType = 4194304] = "IncludesNonWideningType", e[e.IncludesWildcard = 8388608] = "IncludesWildcard", e[e.IncludesEmptyObject = 16777216] = "IncludesEmptyObject", e[e.IncludesInstantiable = 33554432] = "IncludesInstantiable", e[e.IncludesConstrainedTypeVariable = 536870912] = "IncludesConstrainedTypeVariable", e[e.IncludesError = 1073741824] = "IncludesError", e[e.NotPrimitiveUnion = 36323331] = "NotPrimitiveUnion", e))(nn || {}), Zp = ((e) => (e[e.None = 0] = "None", e[e.Class = 1] = "Class", e[e.Interface = 2] = "Interface", e[e.Reference = 4] = "Reference", e[e.Tuple = 8] = "Tuple", e[e.Anonymous = 16] = "Anonymous", e[e.Mapped = 32] = "Mapped", e[e.Instantiated = 64] = "Instantiated", e[e.ObjectLiteral = 128] = "ObjectLiteral", e[e.EvolvingArray = 256] = "EvolvingArray", e[e.ObjectLiteralPatternWithComputedProperties = 512] = "ObjectLiteralPatternWithComputedProperties", e[e.ReverseMapped = 1024] = "ReverseMapped", e[e.JsxAttributes = 2048] = "JsxAttributes", e[e.JSLiteral = 4096] = "JSLiteral", e[e.FreshLiteral = 8192] = "FreshLiteral", e[e.ArrayLiteral = 16384] = "ArrayLiteral", e[e.PrimitiveUnion = 32768] = "PrimitiveUnion", e[e.ContainsWideningType = 65536] = "ContainsWideningType", e[e.ContainsObjectOrArrayLiteral = 131072] = "ContainsObjectOrArrayLiteral", e[e.NonInferrableType = 262144] = "NonInferrableType", e[e.CouldContainTypeVariablesComputed = 524288] = "CouldContainTypeVariablesComputed", e[e.CouldContainTypeVariables = 1048576] = "CouldContainTypeVariables", e[e.ClassOrInterface = 3] = "ClassOrInterface", e[e.RequiresWidening = 196608] = "RequiresWidening", e[e.PropagatingFlags = 458752] = "PropagatingFlags", e[e.InstantiatedMapped = 96] = "InstantiatedMapped", e[e.ObjectTypeKindMask = 1343] = "ObjectTypeKindMask", e[e.ContainsSpread = 2097152] = "ContainsSpread", e[e.ObjectRestType = 4194304] = "ObjectRestType", e[e.InstantiationExpressionType = 8388608] = "InstantiationExpressionType", e[e.SingleSignatureType = 134217728] = "SingleSignatureType", e[e.IsClassInstanceClone = 16777216] = "IsClassInstanceClone", e[e.IdenticalBaseTypeCalculated = 33554432] = "IdenticalBaseTypeCalculated", e[e.IdenticalBaseTypeExists = 67108864] = "IdenticalBaseTypeExists", e[e.IsGenericTypeComputed = 2097152] = "IsGenericTypeComputed", e[e.IsGenericObjectType = 4194304] = "IsGenericObjectType", e[e.IsGenericIndexType = 8388608] = "IsGenericIndexType", e[e.IsGenericType = 12582912] = "IsGenericType", e[e.ContainsIntersections = 16777216] = "ContainsIntersections", e[e.IsUnknownLikeUnionComputed = 33554432] = "IsUnknownLikeUnionComputed", e[e.IsUnknownLikeUnion = 67108864] = "IsUnknownLikeUnion", e[e.IsNeverIntersectionComputed = 16777216] = "IsNeverIntersectionComputed", e[e.IsNeverIntersection = 33554432] = "IsNeverIntersection", e[e.IsConstrainedTypeVariable = 67108864] = "IsConstrainedTypeVariable", e))(Zp || {});
var Im = ((e) => (e[e.None = 0] = "None", e[e.HasRestParameter = 1] = "HasRestParameter", e[e.HasLiteralTypes = 2] = "HasLiteralTypes", e[e.Abstract = 4] = "Abstract", e[e.IsInnerCallChain = 8] = "IsInnerCallChain", e[e.IsOuterCallChain = 16] = "IsOuterCallChain", e[e.IsUntypedSignatureInJSFile = 32] = "IsUntypedSignatureInJSFile", e[e.IsNonInferrable = 64] = "IsNonInferrable", e[e.IsSignatureCandidateForOverloadFailure = 128] = "IsSignatureCandidateForOverloadFailure", e[e.PropagatingFlags = 167] = "PropagatingFlags", e[e.CallChainFlags = 24] = "CallChainFlags", e))(Im || {});
var Dr = ((e) => (e[e.Unknown = 0] = "Unknown", e[e.JS = 1] = "JS", e[e.JSX = 2] = "JSX", e[e.TS = 3] = "TS", e[e.TSX = 4] = "TSX", e[e.External = 5] = "External", e[e.JSON = 6] = "JSON", e[e.Deferred = 7] = "Deferred", e))(Dr || {}), ys = ((e) => (e[e.ES3 = 0] = "ES3", e[e.ES5 = 1] = "ES5", e[e.ES2015 = 2] = "ES2015", e[e.ES2016 = 3] = "ES2016", e[e.ES2017 = 4] = "ES2017", e[e.ES2018 = 5] = "ES2018", e[e.ES2019 = 6] = "ES2019", e[e.ES2020 = 7] = "ES2020", e[e.ES2021 = 8] = "ES2021", e[e.ES2022 = 9] = "ES2022", e[e.ES2023 = 10] = "ES2023", e[e.ES2024 = 11] = "ES2024", e[e.ESNext = 99] = "ESNext", e[e.JSON = 100] = "JSON", e[e.Latest = 99] = "Latest", e))(ys || {}), Tl = ((e) => (e[e.Standard = 0] = "Standard", e[e.JSX = 1] = "JSX", e))(Tl || {});
var Nn = ((e) => (e.Ts = ".ts", e.Tsx = ".tsx", e.Dts = ".d.ts", e.Js = ".js", e.Jsx = ".jsx", e.Json = ".json", e.TsBuildInfo = ".tsbuildinfo", e.Mjs = ".mjs", e.Mts = ".mts", e.Dmts = ".d.mts", e.Cjs = ".cjs", e.Cts = ".cts", e.Dcts = ".d.cts", e))(Nn || {}), Om = ((e) => (e[e.None = 0] = "None", e[e.ContainsTypeScript = 1] = "ContainsTypeScript", e[e.ContainsJsx = 2] = "ContainsJsx", e[e.ContainsESNext = 4] = "ContainsESNext", e[e.ContainsES2022 = 8] = "ContainsES2022", e[e.ContainsES2021 = 16] = "ContainsES2021", e[e.ContainsES2020 = 32] = "ContainsES2020", e[e.ContainsES2019 = 64] = "ContainsES2019", e[e.ContainsES2018 = 128] = "ContainsES2018", e[e.ContainsES2017 = 256] = "ContainsES2017", e[e.ContainsES2016 = 512] = "ContainsES2016", e[e.ContainsES2015 = 1024] = "ContainsES2015", e[e.ContainsGenerator = 2048] = "ContainsGenerator", e[e.ContainsDestructuringAssignment = 4096] = "ContainsDestructuringAssignment", e[e.ContainsTypeScriptClassSyntax = 8192] = "ContainsTypeScriptClassSyntax", e[e.ContainsLexicalThis = 16384] = "ContainsLexicalThis", e[e.ContainsRestOrSpread = 32768] = "ContainsRestOrSpread", e[e.ContainsObjectRestOrSpread = 65536] = "ContainsObjectRestOrSpread", e[e.ContainsComputedPropertyName = 131072] = "ContainsComputedPropertyName", e[e.ContainsBlockScopedBinding = 262144] = "ContainsBlockScopedBinding", e[e.ContainsBindingPattern = 524288] = "ContainsBindingPattern", e[e.ContainsYield = 1048576] = "ContainsYield", e[e.ContainsAwait = 2097152] = "ContainsAwait", e[e.ContainsHoistedDeclarationOrCompletion = 4194304] = "ContainsHoistedDeclarationOrCompletion", e[e.ContainsDynamicImport = 8388608] = "ContainsDynamicImport", e[e.ContainsClassFields = 16777216] = "ContainsClassFields", e[e.ContainsDecorators = 33554432] = "ContainsDecorators", e[e.ContainsPossibleTopLevelAwait = 67108864] = "ContainsPossibleTopLevelAwait", e[e.ContainsLexicalSuper = 134217728] = "ContainsLexicalSuper", e[e.ContainsUpdateExpressionForIdentifier = 268435456] = "ContainsUpdateExpressionForIdentifier", e[e.ContainsPrivateIdentifierInExpression = 536870912] = "ContainsPrivateIdentifierInExpression", e[e.HasComputedFlags = -2147483648] = "HasComputedFlags", e[e.AssertTypeScript = 1] = "AssertTypeScript", e[e.AssertJsx = 2] = "AssertJsx", e[e.AssertESNext = 4] = "AssertESNext", e[e.AssertES2022 = 8] = "AssertES2022", e[e.AssertES2021 = 16] = "AssertES2021", e[e.AssertES2020 = 32] = "AssertES2020", e[e.AssertES2019 = 64] = "AssertES2019", e[e.AssertES2018 = 128] = "AssertES2018", e[e.AssertES2017 = 256] = "AssertES2017", e[e.AssertES2016 = 512] = "AssertES2016", e[e.AssertES2015 = 1024] = "AssertES2015", e[e.AssertGenerator = 2048] = "AssertGenerator", e[e.AssertDestructuringAssignment = 4096] = "AssertDestructuringAssignment", e[e.OuterExpressionExcludes = -2147483648] = "OuterExpressionExcludes", e[e.PropertyAccessExcludes = -2147483648] = "PropertyAccessExcludes", e[e.NodeExcludes = -2147483648] = "NodeExcludes", e[e.ArrowFunctionExcludes = -2072174592] = "ArrowFunctionExcludes", e[e.FunctionExcludes = -1937940480] = "FunctionExcludes", e[e.ConstructorExcludes = -1937948672] = "ConstructorExcludes", e[e.MethodOrAccessorExcludes = -2005057536] = "MethodOrAccessorExcludes", e[e.PropertyExcludes = -2013249536] = "PropertyExcludes", e[e.ClassExcludes = -2147344384] = "ClassExcludes", e[e.ModuleExcludes = -1941676032] = "ModuleExcludes", e[e.TypeExcludes = -2] = "TypeExcludes", e[e.ObjectLiteralExcludes = -2147278848] = "ObjectLiteralExcludes", e[e.ArrayLiteralOrCallOrNewExcludes = -2147450880] = "ArrayLiteralOrCallOrNewExcludes", e[e.VariableDeclarationListExcludes = -2146893824] = "VariableDeclarationListExcludes", e[e.ParameterExcludes = -2147483648] = "ParameterExcludes", e[e.CatchClauseExcludes = -2147418112] = "CatchClauseExcludes", e[e.BindingPatternExcludes = -2147450880] = "BindingPatternExcludes", e[e.ContainsLexicalThisOrSuper = 134234112] = "ContainsLexicalThisOrSuper", e[e.PropertyNamePropagatingFlags = 134234112] = "PropertyNamePropagatingFlags", e))(Om || {}), Mm = ((e) => (e[e.TabStop = 0] = "TabStop", e[e.Placeholder = 1] = "Placeholder", e[e.Choice = 2] = "Choice", e[e.Variable = 3] = "Variable", e))(Mm || {}), Jm = ((e) => (e[e.None = 0] = "None", e[e.SingleLine = 1] = "SingleLine", e[e.MultiLine = 2] = "MultiLine", e[e.AdviseOnEmitNode = 4] = "AdviseOnEmitNode", e[e.NoSubstitution = 8] = "NoSubstitution", e[e.CapturesThis = 16] = "CapturesThis", e[e.NoLeadingSourceMap = 32] = "NoLeadingSourceMap", e[e.NoTrailingSourceMap = 64] = "NoTrailingSourceMap", e[e.NoSourceMap = 96] = "NoSourceMap", e[e.NoNestedSourceMaps = 128] = "NoNestedSourceMaps", e[e.NoTokenLeadingSourceMaps = 256] = "NoTokenLeadingSourceMaps", e[e.NoTokenTrailingSourceMaps = 512] = "NoTokenTrailingSourceMaps", e[e.NoTokenSourceMaps = 768] = "NoTokenSourceMaps", e[e.NoLeadingComments = 1024] = "NoLeadingComments", e[e.NoTrailingComments = 2048] = "NoTrailingComments", e[e.NoComments = 3072] = "NoComments", e[e.NoNestedComments = 4096] = "NoNestedComments", e[e.HelperName = 8192] = "HelperName", e[e.ExportName = 16384] = "ExportName", e[e.LocalName = 32768] = "LocalName", e[e.InternalName = 65536] = "InternalName", e[e.Indented = 131072] = "Indented", e[e.NoIndentation = 262144] = "NoIndentation", e[e.AsyncFunctionBody = 524288] = "AsyncFunctionBody", e[e.ReuseTempVariableScope = 1048576] = "ReuseTempVariableScope", e[e.CustomPrologue = 2097152] = "CustomPrologue", e[e.NoHoisting = 4194304] = "NoHoisting", e[e.Iterator = 8388608] = "Iterator", e[e.NoAsciiEscaping = 16777216] = "NoAsciiEscaping", e))(Jm || {});
var Q_ = { RegularExpressionFlagsUnicode: 2, RegularExpressionFlagsSticky: 2, RegularExpressionFlagsDotAll: 5, RegularExpressionFlagsHasIndices: 9, RegularExpressionFlagsUnicodeSets: 11 };
var Lm = { reference: { args: [{ name: "types", optional: true, captureSpan: true }, { name: "lib", optional: true, captureSpan: true }, { name: "path", optional: true, captureSpan: true }, { name: "no-default-lib", optional: true }, { name: "resolution-mode", optional: true }, { name: "preserve", optional: true }], kind: 1 }, "amd-dependency": { args: [{ name: "path" }, { name: "name", optional: true }], kind: 1 }, "amd-module": { args: [{ name: "name" }], kind: 1 }, "ts-check": { kind: 2 }, "ts-nocheck": { kind: 2 }, jsx: { args: [{ name: "factory" }], kind: 4 }, jsxfrag: { args: [{ name: "factory" }], kind: 4 }, jsximportsource: { args: [{ name: "factory" }], kind: 4 }, jsxruntime: { args: [{ name: "factory" }], kind: 4 } }, Ga = ((e) => (e[e.ParseAll = 0] = "ParseAll", e[e.ParseNone = 1] = "ParseNone", e[e.ParseForTypeErrors = 2] = "ParseForTypeErrors", e[e.ParseForTypeInfo = 3] = "ParseForTypeInfo", e))(Ga || {});
var Ki = "/", Py = "\\", Ed = "://", Ny = /\\/g;
function Iy(e) {
  return e === 47 || e === 92;
}
function Oy(e, t) {
  return e.length > t.length && ky(e, t);
}
function ef(e) {
  return e.length > 0 && Iy(e.charCodeAt(e.length - 1));
}
function Ad(e) {
  return e >= 97 && e <= 122 || e >= 65 && e <= 90;
}
function My(e, t) {
  let a = e.charCodeAt(t);
  if (a === 58) return t + 1;
  if (a === 37 && e.charCodeAt(t + 1) === 51) {
    let o = e.charCodeAt(t + 2);
    if (o === 97 || o === 65) return t + 3;
  }
  return -1;
}
function Jy(e) {
  if (!e) return 0;
  let t = e.charCodeAt(0);
  if (t === 47 || t === 92) {
    if (e.charCodeAt(1) !== t) return 1;
    let o = e.indexOf(t === 47 ? Ki : Py, 2);
    return o < 0 ? e.length : o + 1;
  }
  if (Ad(t) && e.charCodeAt(1) === 58) {
    let o = e.charCodeAt(2);
    if (o === 47 || o === 92) return 3;
    if (e.length === 2) return 2;
  }
  let a = e.indexOf(Ed);
  if (a !== -1) {
    let o = a + Ed.length, m = e.indexOf(Ki, o);
    if (m !== -1) {
      let v = e.slice(0, a), A = e.slice(o, m);
      if (v === "file" && (A === "" || A === "localhost") && Ad(e.charCodeAt(m + 1))) {
        let P = My(e, m + 2);
        if (P !== -1) {
          if (e.charCodeAt(P) === 47) return ~(P + 1);
          if (P === e.length) return ~P;
        }
      }
      return ~(m + 1);
    }
    return ~e.length;
  }
  return 0;
}
function pl(e) {
  let t = Jy(e);
  return t < 0 ? ~t : t;
}
function jm(e, t, a) {
  if (e = fl(e), pl(e) === e.length) return "";
  e = Um(e);
  let m = e.slice(Math.max(pl(e), e.lastIndexOf(Ki) + 1)), v = void 0;
  return v ? m.slice(0, m.length - v.length) : m;
}
function Cd(e, t, a) {
  if (ul(t, ".") || (t = "." + t), e.length >= t.length && e.charCodeAt(e.length - t.length) === 46) {
    let o = e.slice(e.length - t.length);
    if (a(o, t)) return o;
  }
}
function Ly(e, t, a) {
  if (typeof t == "string") return Cd(e, t, a) || "";
  for (let o of t) {
    let m = Cd(e, o, a);
    if (m) return m;
  }
  return "";
}
function Rm(e, t, a) {
  if (t) return Ly(Um(e), t, Ty);
  let o = jm(e), m = o.lastIndexOf(".");
  return m >= 0 ? o.substring(m) : "";
}
function jy(e, t) {
  let a = e.substring(0, t), o = e.substring(t).split(Ki);
  return o.length && !Yi(o) && o.pop(), [a, ...o];
}
function Ry(e, t = "") {
  return e = qy(t, e), jy(e, pl(e));
}
function Uy(e, t) {
  return e.length === 0 ? "" : (e[0] && tf(e[0])) + e.slice(1, t).join(Ki);
}
function fl(e) {
  return e.includes("\\") ? e.replace(Ny, Ki) : e;
}
function By(e) {
  if (!Xt(e)) return [];
  let t = [e[0]];
  for (let a = 1; a < e.length; a++) {
    let o = e[a];
    if (o && o !== ".") {
      if (o === "..") {
        if (t.length > 1) {
          if (t[t.length - 1] !== "..") {
            t.pop();
            continue;
          }
        } else if (t[0]) continue;
      }
      t.push(o);
    }
  }
  return t;
}
function qy(e, ...t) {
  e && (e = fl(e));
  for (let a of t) a && (a = fl(a), !e || pl(a) !== 0 ? e = a : e = tf(e) + a);
  return e;
}
function zy(e) {
  if (e = fl(e), !Dd.test(e)) return e;
  let t = e.replace(/\/\.\//g, "/").replace(/^\.\//, "");
  if (t !== e && (e = t, !Dd.test(e))) return e;
  let a = Uy(By(Ry(e)));
  return a && ef(e) ? tf(a) : a;
}
function Um(e) {
  return ef(e) ? e.substr(0, e.length - 1) : e;
}
function tf(e) {
  return ef(e) ? e : e + Ki;
}
var Dd = /\/\/|(?:^|\/)\.\.?(?:$|\/)/;
function r(e, t, a, o, m, v, A) {
  return { code: e, category: t, key: a, message: o, reportsUnnecessary: m, elidedInCompatabilityPyramid: v, reportsDeprecated: A };
}
var E = { Unterminated_string_literal: r(1002, 1, "Unterminated_string_literal_1002", "Unterminated string literal."), Identifier_expected: r(1003, 1, "Identifier_expected_1003", "Identifier expected."), _0_expected: r(1005, 1, "_0_expected_1005", "'{0}' expected."), The_parser_expected_to_find_a_1_to_match_the_0_token_here: r(1007, 1, "The_parser_expected_to_find_a_1_to_match_the_0_token_here_1007", "The parser expected to find a '{1}' to match the '{0}' token here."), Asterisk_Slash_expected: r(1010, 1, "Asterisk_Slash_expected_1010", "'*/' expected."), An_element_access_expression_should_take_an_argument: r(1011, 1, "An_element_access_expression_should_take_an_argument_1011", "An element access expression should take an argument."), Unexpected_token: r(1012, 1, "Unexpected_token_1012", "Unexpected token."), super_must_be_followed_by_an_argument_list_or_member_access: r(1034, 1, "super_must_be_followed_by_an_argument_list_or_member_access_1034", "'super' must be followed by an argument list or member access."), Unexpected_token_A_constructor_method_accessor_or_property_was_expected: r(1068, 1, "Unexpected_token_A_constructor_method_accessor_or_property_was_expected_1068", "Unexpected token. A constructor, method, accessor, or property was expected."), Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces: r(1069, 1, "Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces_1069", "Unexpected token. A type parameter name was expected without curly braces."), Invalid_reference_directive_syntax: r(1084, 1, "Invalid_reference_directive_syntax_1084", "Invalid 'reference' directive syntax."), Expression_expected: r(1109, 1, "Expression_expected_1109", "Expression expected."), Type_expected: r(1110, 1, "Type_expected_1110", "Type expected."), Octal_literals_are_not_allowed_Use_the_syntax_0: r(1121, 1, "Octal_literals_are_not_allowed_Use_the_syntax_0_1121", "Octal literals are not allowed. Use the syntax '{0}'."), Digit_expected: r(1124, 1, "Digit_expected_1124", "Digit expected."), Hexadecimal_digit_expected: r(1125, 1, "Hexadecimal_digit_expected_1125", "Hexadecimal digit expected."), Unexpected_end_of_text: r(1126, 1, "Unexpected_end_of_text_1126", "Unexpected end of text."), Invalid_character: r(1127, 1, "Invalid_character_1127", "Invalid character."), Declaration_or_statement_expected: r(1128, 1, "Declaration_or_statement_expected_1128", "Declaration or statement expected."), Statement_expected: r(1129, 1, "Statement_expected_1129", "Statement expected."), case_or_default_expected: r(1130, 1, "case_or_default_expected_1130", "'case' or 'default' expected."), Property_or_signature_expected: r(1131, 1, "Property_or_signature_expected_1131", "Property or signature expected."), Enum_member_expected: r(1132, 1, "Enum_member_expected_1132", "Enum member expected."), Variable_declaration_expected: r(1134, 1, "Variable_declaration_expected_1134", "Variable declaration expected."), Argument_expression_expected: r(1135, 1, "Argument_expression_expected_1135", "Argument expression expected."), Property_assignment_expected: r(1136, 1, "Property_assignment_expected_1136", "Property assignment expected."), Expression_or_comma_expected: r(1137, 1, "Expression_or_comma_expected_1137", "Expression or comma expected."), Parameter_declaration_expected: r(1138, 1, "Parameter_declaration_expected_1138", "Parameter declaration expected."), Type_parameter_declaration_expected: r(1139, 1, "Type_parameter_declaration_expected_1139", "Type parameter declaration expected."), Type_argument_expected: r(1140, 1, "Type_argument_expected_1140", "Type argument expected."), Line_break_not_permitted_here: r(1142, 1, "Line_break_not_permitted_here_1142", "Line break not permitted here."), or_expected: r(1144, 1, "or_expected_1144", "'{' or ';' expected."), or_JSX_element_expected: r(1145, 1, "or_JSX_element_expected_1145", "'{' or JSX element expected."), Declaration_expected: r(1146, 1, "Declaration_expected_1146", "Declaration expected."), Unterminated_template_literal: r(1160, 1, "Unterminated_template_literal_1160", "Unterminated template literal."), Unterminated_regular_expression_literal: r(1161, 1, "Unterminated_regular_expression_literal_1161", "Unterminated regular expression literal."), Binary_digit_expected: r(1177, 1, "Binary_digit_expected_1177", "Binary digit expected."), Octal_digit_expected: r(1178, 1, "Octal_digit_expected_1178", "Octal digit expected."), Unexpected_token_expected: r(1179, 1, "Unexpected_token_expected_1179", "Unexpected token. '{' expected."), Property_destructuring_pattern_expected: r(1180, 1, "Property_destructuring_pattern_expected_1180", "Property destructuring pattern expected."), Array_element_destructuring_pattern_expected: r(1181, 1, "Array_element_destructuring_pattern_expected_1181", "Array element destructuring pattern expected."), Merge_conflict_marker_encountered: r(1185, 1, "Merge_conflict_marker_encountered_1185", "Merge conflict marker encountered."), An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive: r(1198, 1, "An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive_1198", "An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive."), Unterminated_Unicode_escape_sequence: r(1199, 1, "Unterminated_Unicode_escape_sequence_1199", "Unterminated Unicode escape sequence."), Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0: r(1209, 1, "Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0_1209", "Invalid optional chain from new expression. Did you mean to call '{0}()'?"), _0_tag_already_specified: r(1223, 1, "_0_tag_already_specified_1223", "'{0}' tag already specified."), A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods: r(1228, 1, "A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods_1228", "A type predicate is only allowed in return type position for functions and methods."), Keywords_cannot_contain_escape_characters: r(1260, 1, "Keywords_cannot_contain_escape_characters_1260", "Keywords cannot contain escape characters."), An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal: r(1351, 1, "An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal_1351", "An identifier or keyword cannot immediately follow a numeric literal."), A_bigint_literal_cannot_use_exponential_notation: r(1352, 1, "A_bigint_literal_cannot_use_exponential_notation_1352", "A bigint literal cannot use exponential notation."), A_bigint_literal_must_be_an_integer: r(1353, 1, "A_bigint_literal_must_be_an_integer_1353", "A bigint literal must be an integer."), An_enum_member_name_must_be_followed_by_a_or: r(1357, 1, "An_enum_member_name_must_be_followed_by_a_or_1357", "An enum member name must be followed by a ',', '=', or '}'."), Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here: r(1359, 1, "Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here_1359", "Identifier expected. '{0}' is a reserved word that cannot be used here."), Did_you_mean_0: r(1369, 3, "Did_you_mean_0_1369", "Did you mean '{0}'?"), Unexpected_token_Did_you_mean_or_rbrace: r(1381, 1, "Unexpected_token_Did_you_mean_or_rbrace_1381", "Unexpected token. Did you mean `{'}'}` or `&rbrace;`?"), Unexpected_token_Did_you_mean_or_gt: r(1382, 1, "Unexpected_token_Did_you_mean_or_gt_1382", "Unexpected token. Did you mean `{'>'}` or `&gt;`?"), Function_type_notation_must_be_parenthesized_when_used_in_a_union_type: r(1385, 1, "Function_type_notation_must_be_parenthesized_when_used_in_a_union_type_1385", "Function type notation must be parenthesized when used in a union type."), Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type: r(1386, 1, "Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type_1386", "Constructor type notation must be parenthesized when used in a union type."), Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type: r(1387, 1, "Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type_1387", "Function type notation must be parenthesized when used in an intersection type."), Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type: r(1388, 1, "Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type_1388", "Constructor type notation must be parenthesized when used in an intersection type."), _0_is_not_allowed_as_a_variable_declaration_name: r(1389, 1, "_0_is_not_allowed_as_a_variable_declaration_name_1389", "'{0}' is not allowed as a variable declaration name."), _0_is_not_allowed_as_a_parameter_name: r(1390, 1, "_0_is_not_allowed_as_a_parameter_name_1390", "'{0}' is not allowed as a parameter name."), Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters: r(1433, 1, "Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters_1433", "Neither decorators nor modifiers may be applied to 'this' parameters."), Unexpected_keyword_or_identifier: r(1434, 1, "Unexpected_keyword_or_identifier_1434", "Unexpected keyword or identifier."), Unknown_keyword_or_identifier_Did_you_mean_0: r(1435, 1, "Unknown_keyword_or_identifier_Did_you_mean_0_1435", "Unknown keyword or identifier. Did you mean '{0}'?"), Decorators_must_precede_the_name_and_all_keywords_of_property_declarations: r(1436, 1, "Decorators_must_precede_the_name_and_all_keywords_of_property_declarations_1436", "Decorators must precede the name and all keywords of property declarations."), Namespace_must_be_given_a_name: r(1437, 1, "Namespace_must_be_given_a_name_1437", "Namespace must be given a name."), Interface_must_be_given_a_name: r(1438, 1, "Interface_must_be_given_a_name_1438", "Interface must be given a name."), Type_alias_must_be_given_a_name: r(1439, 1, "Type_alias_must_be_given_a_name_1439", "Type alias must be given a name."), Variable_declaration_not_allowed_at_this_location: r(1440, 1, "Variable_declaration_not_allowed_at_this_location_1440", "Variable declaration not allowed at this location."), Cannot_start_a_function_call_in_a_type_annotation: r(1441, 1, "Cannot_start_a_function_call_in_a_type_annotation_1441", "Cannot start a function call in a type annotation."), Expected_for_property_initializer: r(1442, 1, "Expected_for_property_initializer_1442", "Expected '=' for property initializer."), Module_declaration_names_may_only_use_or_quoted_strings: r(1443, 1, "Module_declaration_names_may_only_use_or_quoted_strings_1443", `Module declaration names may only use ' or " quoted strings.`), resolution_mode_should_be_either_require_or_import: r(1453, 1, "resolution_mode_should_be_either_require_or_import_1453", "`resolution-mode` should be either `require` or `import`."), catch_or_finally_expected: r(1472, 1, "catch_or_finally_expected_1472", "'catch' or 'finally' expected."), An_instantiation_expression_cannot_be_followed_by_a_property_access: r(1477, 1, "An_instantiation_expression_cannot_be_followed_by_a_property_access_1477", "An instantiation expression cannot be followed by a property access."), Identifier_or_string_literal_expected: r(1478, 1, "Identifier_or_string_literal_expected_1478", "Identifier or string literal expected."), Octal_escape_sequences_are_not_allowed_Use_the_syntax_0: r(1487, 1, "Octal_escape_sequences_are_not_allowed_Use_the_syntax_0_1487", "Octal escape sequences are not allowed. Use the syntax '{0}'."), Escape_sequence_0_is_not_allowed: r(1488, 1, "Escape_sequence_0_is_not_allowed_1488", "Escape sequence '{0}' is not allowed."), Decimals_with_leading_zeros_are_not_allowed: r(1489, 1, "Decimals_with_leading_zeros_are_not_allowed_1489", "Decimals with leading zeros are not allowed."), File_appears_to_be_binary: r(1490, 1, "File_appears_to_be_binary_1490", "File appears to be binary."), Unknown_regular_expression_flag: r(1499, 1, "Unknown_regular_expression_flag_1499", "Unknown regular expression flag."), Duplicate_regular_expression_flag: r(1500, 1, "Duplicate_regular_expression_flag_1500", "Duplicate regular expression flag."), This_regular_expression_flag_is_only_available_when_targeting_0_or_later: r(1501, 1, "This_regular_expression_flag_is_only_available_when_targeting_0_or_later_1501", "This regular expression flag is only available when targeting '{0}' or later."), The_Unicode_u_flag_and_the_Unicode_Sets_v_flag_cannot_be_set_simultaneously: r(1502, 1, "The_Unicode_u_flag_and_the_Unicode_Sets_v_flag_cannot_be_set_simultaneously_1502", "The Unicode (u) flag and the Unicode Sets (v) flag cannot be set simultaneously."), Named_capturing_groups_are_only_available_when_targeting_ES2018_or_later: r(1503, 1, "Named_capturing_groups_are_only_available_when_targeting_ES2018_or_later_1503", "Named capturing groups are only available when targeting 'ES2018' or later."), Subpattern_flags_must_be_present_when_there_is_a_minus_sign: r(1504, 1, "Subpattern_flags_must_be_present_when_there_is_a_minus_sign_1504", "Subpattern flags must be present when there is a minus sign."), Incomplete_quantifier_Digit_expected: r(1505, 1, "Incomplete_quantifier_Digit_expected_1505", "Incomplete quantifier. Digit expected."), Numbers_out_of_order_in_quantifier: r(1506, 1, "Numbers_out_of_order_in_quantifier_1506", "Numbers out of order in quantifier."), There_is_nothing_available_for_repetition: r(1507, 1, "There_is_nothing_available_for_repetition_1507", "There is nothing available for repetition."), Unexpected_0_Did_you_mean_to_escape_it_with_backslash: r(1508, 1, "Unexpected_0_Did_you_mean_to_escape_it_with_backslash_1508", "Unexpected '{0}'. Did you mean to escape it with backslash?"), This_regular_expression_flag_cannot_be_toggled_within_a_subpattern: r(1509, 1, "This_regular_expression_flag_cannot_be_toggled_within_a_subpattern_1509", "This regular expression flag cannot be toggled within a subpattern."), k_must_be_followed_by_a_capturing_group_name_enclosed_in_angle_brackets: r(1510, 1, "k_must_be_followed_by_a_capturing_group_name_enclosed_in_angle_brackets_1510", "'\\k' must be followed by a capturing group name enclosed in angle brackets."), q_is_only_available_inside_character_class: r(1511, 1, "q_is_only_available_inside_character_class_1511", "'\\q' is only available inside character class."), c_must_be_followed_by_an_ASCII_letter: r(1512, 1, "c_must_be_followed_by_an_ASCII_letter_1512", "'\\c' must be followed by an ASCII letter."), Undetermined_character_escape: r(1513, 1, "Undetermined_character_escape_1513", "Undetermined character escape."), Expected_a_capturing_group_name: r(1514, 1, "Expected_a_capturing_group_name_1514", "Expected a capturing group name."), Named_capturing_groups_with_the_same_name_must_be_mutually_exclusive_to_each_other: r(1515, 1, "Named_capturing_groups_with_the_same_name_must_be_mutually_exclusive_to_each_other_1515", "Named capturing groups with the same name must be mutually exclusive to each other."), A_character_class_range_must_not_be_bounded_by_another_character_class: r(1516, 1, "A_character_class_range_must_not_be_bounded_by_another_character_class_1516", "A character class range must not be bounded by another character class."), Range_out_of_order_in_character_class: r(1517, 1, "Range_out_of_order_in_character_class_1517", "Range out of order in character class."), Anything_that_would_possibly_match_more_than_a_single_character_is_invalid_inside_a_negated_character_class: r(1518, 1, "Anything_that_would_possibly_match_more_than_a_single_character_is_invalid_inside_a_negated_characte_1518", "Anything that would possibly match more than a single character is invalid inside a negated character class."), Operators_must_not_be_mixed_within_a_character_class_Wrap_it_in_a_nested_class_instead: r(1519, 1, "Operators_must_not_be_mixed_within_a_character_class_Wrap_it_in_a_nested_class_instead_1519", "Operators must not be mixed within a character class. Wrap it in a nested class instead."), Expected_a_class_set_operand: r(1520, 1, "Expected_a_class_set_operand_1520", "Expected a class set operand."), q_must_be_followed_by_string_alternatives_enclosed_in_braces: r(1521, 1, "q_must_be_followed_by_string_alternatives_enclosed_in_braces_1521", "'\\q' must be followed by string alternatives enclosed in braces."), A_character_class_must_not_contain_a_reserved_double_punctuator_Did_you_mean_to_escape_it_with_backslash: r(1522, 1, "A_character_class_must_not_contain_a_reserved_double_punctuator_Did_you_mean_to_escape_it_with_backs_1522", "A character class must not contain a reserved double punctuator. Did you mean to escape it with backslash?"), Expected_a_Unicode_property_name: r(1523, 1, "Expected_a_Unicode_property_name_1523", "Expected a Unicode property name."), Unknown_Unicode_property_name: r(1524, 1, "Unknown_Unicode_property_name_1524", "Unknown Unicode property name."), Expected_a_Unicode_property_value: r(1525, 1, "Expected_a_Unicode_property_value_1525", "Expected a Unicode property value."), Unknown_Unicode_property_value: r(1526, 1, "Unknown_Unicode_property_value_1526", "Unknown Unicode property value."), Expected_a_Unicode_property_name_or_value: r(1527, 1, "Expected_a_Unicode_property_name_or_value_1527", "Expected a Unicode property name or value."), Any_Unicode_property_that_would_possibly_match_more_than_a_single_character_is_only_available_when_the_Unicode_Sets_v_flag_is_set: r(1528, 1, "Any_Unicode_property_that_would_possibly_match_more_than_a_single_character_is_only_available_when_t_1528", "Any Unicode property that would possibly match more than a single character is only available when the Unicode Sets (v) flag is set."), Unknown_Unicode_property_name_or_value: r(1529, 1, "Unknown_Unicode_property_name_or_value_1529", "Unknown Unicode property name or value."), Unicode_property_value_expressions_are_only_available_when_the_Unicode_u_flag_or_the_Unicode_Sets_v_flag_is_set: r(1530, 1, "Unicode_property_value_expressions_are_only_available_when_the_Unicode_u_flag_or_the_Unicode_Sets_v__1530", "Unicode property value expressions are only available when the Unicode (u) flag or the Unicode Sets (v) flag is set."), _0_must_be_followed_by_a_Unicode_property_value_expression_enclosed_in_braces: r(1531, 1, "_0_must_be_followed_by_a_Unicode_property_value_expression_enclosed_in_braces_1531", "'\\{0}' must be followed by a Unicode property value expression enclosed in braces."), There_is_no_capturing_group_named_0_in_this_regular_expression: r(1532, 1, "There_is_no_capturing_group_named_0_in_this_regular_expression_1532", "There is no capturing group named '{0}' in this regular expression."), This_backreference_refers_to_a_group_that_does_not_exist_There_are_only_0_capturing_groups_in_this_regular_expression: r(1533, 1, "This_backreference_refers_to_a_group_that_does_not_exist_There_are_only_0_capturing_groups_in_this_r_1533", "This backreference refers to a group that does not exist. There are only {0} capturing groups in this regular expression."), This_backreference_refers_to_a_group_that_does_not_exist_There_are_no_capturing_groups_in_this_regular_expression: r(1534, 1, "This_backreference_refers_to_a_group_that_does_not_exist_There_are_no_capturing_groups_in_this_regul_1534", "This backreference refers to a group that does not exist. There are no capturing groups in this regular expression."), This_character_cannot_be_escaped_in_a_regular_expression: r(1535, 1, "This_character_cannot_be_escaped_in_a_regular_expression_1535", "This character cannot be escaped in a regular expression."), Octal_escape_sequences_and_backreferences_are_not_allowed_in_a_character_class_If_this_was_intended_as_an_escape_sequence_use_the_syntax_0_instead: r(1536, 1, "Octal_escape_sequences_and_backreferences_are_not_allowed_in_a_character_class_If_this_was_intended__1536", "Octal escape sequences and backreferences are not allowed in a character class. If this was intended as an escape sequence, use the syntax '{0}' instead."), Decimal_escape_sequences_and_backreferences_are_not_allowed_in_a_character_class: r(1537, 1, "Decimal_escape_sequences_and_backreferences_are_not_allowed_in_a_character_class_1537", "Decimal escape sequences and backreferences are not allowed in a character class."), Unicode_escape_sequences_are_only_available_when_the_Unicode_u_flag_or_the_Unicode_Sets_v_flag_is_set: r(1538, 1, "Unicode_escape_sequences_are_only_available_when_the_Unicode_u_flag_or_the_Unicode_Sets_v_flag_is_se_1538", "Unicode escape sequences are only available when the Unicode (u) flag or the Unicode Sets (v) flag is set."), Interface_name_cannot_be_0: r(2427, 1, "Interface_name_cannot_be_0_2427", "Interface name cannot be '{0}'."), Type_alias_name_cannot_be_0: r(2457, 1, "Type_alias_name_cannot_be_0_2457", "Type alias name cannot be '{0}'."), An_AMD_module_cannot_have_multiple_name_assignments: r(2458, 1, "An_AMD_module_cannot_have_multiple_name_assignments_2458", "An AMD module cannot have multiple name assignments."), JSX_expressions_must_have_one_parent_element: r(2657, 1, "JSX_expressions_must_have_one_parent_element_2657", "JSX expressions must have one parent element."), super_may_not_use_type_arguments: r(2754, 1, "super_may_not_use_type_arguments_2754", "'super' may not use type arguments."), Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_destructuring_assignment_you_might_need_to_wrap_the_whole_assignment_in_parentheses: r(2809, 1, "Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_d_2809", "Declaration or statement expected. This '=' follows a block of statements, so if you intended to write a destructuring assignment, you might need to wrap the whole assignment in parentheses."), Namespace_name_cannot_be_0: r(2819, 1, "Namespace_name_cannot_be_0_2819", "Namespace name cannot be '{0}'."), Numeric_separators_are_not_allowed_here: r(6188, 1, "Numeric_separators_are_not_allowed_here_6188", "Numeric separators are not allowed here."), Multiple_consecutive_numeric_separators_are_not_permitted: r(6189, 1, "Multiple_consecutive_numeric_separators_are_not_permitted_6189", "Multiple consecutive numeric separators are not permitted."), A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags: r(8033, 1, "A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags_8033", "A JSDoc '@typedef' comment may not contain multiple '@type' tags."), The_tag_was_first_specified_here: r(8034, 1, "The_tag_was_first_specified_here_8034", "The tag was first specified here."), A_JSDoc_template_tag_may_not_follow_a_typedef_callback_or_overload_tag: r(8039, 1, "A_JSDoc_template_tag_may_not_follow_a_typedef_callback_or_overload_tag_8039", "A JSDoc '@template' tag may not follow a '@typedef', '@callback', or '@overload' tag"), Expected_corresponding_JSX_closing_tag_for_0: r(17002, 1, "Expected_corresponding_JSX_closing_tag_for_0_17002", "Expected corresponding JSX closing tag for '{0}'."), An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: r(17006, 1, "An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_ex_17006", "An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses."), A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: r(17007, 1, "A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Con_17007", "A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses."), JSX_element_0_has_no_corresponding_closing_tag: r(17008, 1, "JSX_element_0_has_no_corresponding_closing_tag_17008", "JSX element '{0}' has no corresponding closing tag."), JSX_fragment_has_no_corresponding_closing_tag: r(17014, 1, "JSX_fragment_has_no_corresponding_closing_tag_17014", "JSX fragment has no corresponding closing tag."), Expected_corresponding_closing_tag_for_JSX_fragment: r(17015, 1, "Expected_corresponding_closing_tag_for_JSX_fragment_17015", "Expected corresponding closing tag for JSX fragment."), Unicode_escape_sequence_cannot_appear_here: r(17021, 1, "Unicode_escape_sequence_cannot_appear_here_17021", "Unicode escape sequence cannot appear here."), Private_identifiers_cannot_be_used_as_parameters: r(18009, 1, "Private_identifiers_cannot_be_used_as_parameters_18009", "Private identifiers cannot be used as parameters."), Private_identifiers_are_not_allowed_outside_class_bodies: r(18016, 1, "Private_identifiers_are_not_allowed_outside_class_bodies_18016", "Private identifiers are not allowed outside class bodies."), can_only_be_used_at_the_start_of_a_file: r(18026, 1, "can_only_be_used_at_the_start_of_a_file_18026", "'#!' can only be used at the start of a file."), Private_identifiers_are_not_allowed_in_variable_declarations: r(18029, 1, "Private_identifiers_are_not_allowed_in_variable_declarations_18029", "Private identifiers are not allowed in variable declarations."), An_optional_chain_cannot_contain_private_identifiers: r(18030, 1, "An_optional_chain_cannot_contain_private_identifiers_18030", "An optional chain cannot contain private identifiers.") };
function wt(e) {
  return e >= 80;
}
function Fy(e) {
  return e === 32 || wt(e);
}
var nf = { abstract: 128, accessor: 129, any: 133, as: 130, asserts: 131, assert: 132, bigint: 163, boolean: 136, break: 83, case: 84, catch: 85, class: 86, continue: 88, const: 87, constructor: 137, debugger: 89, declare: 138, default: 90, delete: 91, do: 92, else: 93, enum: 94, export: 95, extends: 96, false: 97, finally: 98, for: 99, from: 161, function: 100, get: 139, if: 101, implements: 119, import: 102, in: 103, infer: 140, instanceof: 104, interface: 120, intrinsic: 141, is: 142, keyof: 143, let: 121, module: 144, namespace: 145, never: 146, new: 105, null: 106, number: 150, object: 151, package: 122, private: 123, protected: 124, public: 125, override: 164, out: 147, readonly: 148, require: 149, global: 162, return: 107, satisfies: 152, set: 153, static: 126, string: 154, super: 108, switch: 109, symbol: 155, this: 110, throw: 111, true: 112, try: 113, type: 156, typeof: 114, undefined: 157, unique: 158, unknown: 159, using: 160, var: 115, void: 116, while: 117, with: 118, yield: 127, async: 134, await: 135, of: 165 }, Vy = new Map(Object.entries(nf)), Bm = new Map(Object.entries({ ...nf, "{": 19, "}": 20, "(": 21, ")": 22, "[": 23, "]": 24, ".": 25, "...": 26, ";": 27, ",": 28, "<": 30, ">": 32, "<=": 33, ">=": 34, "==": 35, "!=": 36, "===": 37, "!==": 38, "=>": 39, "+": 40, "-": 41, "**": 43, "*": 42, "/": 44, "%": 45, "++": 46, "--": 47, "<<": 48, "</": 31, ">>": 49, ">>>": 50, "&": 51, "|": 52, "^": 53, "!": 54, "~": 55, "&&": 56, "||": 57, "?": 58, "??": 61, "?.": 29, ":": 59, "=": 64, "+=": 65, "-=": 66, "*=": 67, "**=": 68, "/=": 69, "%=": 70, "<<=": 71, ">>=": 72, ">>>=": 73, "&=": 74, "|=": 75, "^=": 79, "||=": 76, "&&=": 77, "??=": 78, "@": 60, "#": 63, "`": 62 })), qm = /* @__PURE__ */ new Map([[100, 1], [103, 2], [105, 4], [109, 8], [115, 16], [117, 32], [118, 64], [121, 128]]), Wy = /* @__PURE__ */ new Map([[1, Q_.RegularExpressionFlagsHasIndices], [16, Q_.RegularExpressionFlagsDotAll], [32, Q_.RegularExpressionFlagsUnicode], [64, Q_.RegularExpressionFlagsUnicodeSets], [128, Q_.RegularExpressionFlagsSticky]]), Gy = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500], Yy = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6e3, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43e3, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500], Xy = [65, 90, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 895, 895, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1488, 1514, 1519, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2144, 2154, 2160, 2183, 2185, 2190, 2208, 2249, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2432, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2556, 2556, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2809, 2809, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3133, 3160, 3162, 3165, 3165, 3168, 3169, 3200, 3200, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3293, 3294, 3296, 3297, 3313, 3314, 3332, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3412, 3414, 3423, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5880, 5888, 5905, 5919, 5937, 5952, 5969, 5984, 5996, 5998, 6e3, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6264, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6430, 6480, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6988, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7401, 7404, 7406, 7411, 7413, 7414, 7418, 7418, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12443, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12735, 12784, 12799, 13312, 19903, 19968, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42653, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42954, 42960, 42961, 42963, 42963, 42965, 42969, 42994, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43261, 43262, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43488, 43492, 43494, 43503, 43514, 43518, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43646, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43881, 43888, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66176, 66204, 66208, 66256, 66304, 66335, 66349, 66378, 66384, 66421, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66928, 66938, 66940, 66954, 66956, 66962, 66964, 66965, 66967, 66977, 66979, 66993, 66995, 67001, 67003, 67004, 67072, 67382, 67392, 67413, 67424, 67431, 67456, 67461, 67463, 67504, 67506, 67514, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68096, 68112, 68115, 68117, 68119, 68121, 68149, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68324, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68899, 69248, 69289, 69296, 69297, 69376, 69404, 69415, 69415, 69424, 69445, 69488, 69505, 69552, 69572, 69600, 69622, 69635, 69687, 69745, 69746, 69749, 69749, 69763, 69807, 69840, 69864, 69891, 69926, 69956, 69956, 69959, 69959, 69968, 70002, 70006, 70006, 70019, 70066, 70081, 70084, 70106, 70106, 70108, 70108, 70144, 70161, 70163, 70187, 70207, 70208, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70366, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70461, 70461, 70480, 70480, 70493, 70497, 70656, 70708, 70727, 70730, 70751, 70753, 70784, 70831, 70852, 70853, 70855, 70855, 71040, 71086, 71128, 71131, 71168, 71215, 71236, 71236, 71296, 71338, 71352, 71352, 71424, 71450, 71488, 71494, 71680, 71723, 71840, 71903, 71935, 71942, 71945, 71945, 71948, 71955, 71957, 71958, 71960, 71983, 71999, 71999, 72001, 72001, 72096, 72103, 72106, 72144, 72161, 72161, 72163, 72163, 72192, 72192, 72203, 72242, 72250, 72250, 72272, 72272, 72284, 72329, 72349, 72349, 72368, 72440, 72704, 72712, 72714, 72750, 72768, 72768, 72818, 72847, 72960, 72966, 72968, 72969, 72971, 73008, 73030, 73030, 73056, 73061, 73063, 73064, 73066, 73097, 73112, 73112, 73440, 73458, 73474, 73474, 73476, 73488, 73490, 73523, 73648, 73648, 73728, 74649, 74752, 74862, 74880, 75075, 77712, 77808, 77824, 78895, 78913, 78918, 82944, 83526, 92160, 92728, 92736, 92766, 92784, 92862, 92880, 92909, 92928, 92975, 92992, 92995, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94032, 94032, 94099, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101589, 101632, 101640, 110576, 110579, 110581, 110587, 110589, 110590, 110592, 110882, 110898, 110898, 110928, 110930, 110933, 110933, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 122624, 122654, 122661, 122666, 122928, 122989, 123136, 123180, 123191, 123197, 123214, 123214, 123536, 123565, 123584, 123627, 124112, 124139, 124896, 124902, 124904, 124907, 124909, 124910, 124912, 124926, 124928, 125124, 125184, 125251, 125259, 125259, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173791, 173824, 177977, 177984, 178205, 178208, 183969, 183984, 191456, 191472, 192093, 194560, 195101, 196608, 201546, 201552, 205743], Hy = [48, 57, 65, 90, 95, 95, 97, 122, 170, 170, 181, 181, 183, 183, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 895, 895, 902, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1519, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2045, 2045, 2048, 2093, 2112, 2139, 2144, 2154, 2160, 2183, 2185, 2190, 2200, 2273, 2275, 2403, 2406, 2415, 2417, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2556, 2556, 2558, 2558, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2809, 2815, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2901, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3072, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3132, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3162, 3165, 3165, 3168, 3171, 3174, 3183, 3200, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3293, 3294, 3296, 3299, 3302, 3311, 3313, 3315, 3328, 3340, 3342, 3344, 3346, 3396, 3398, 3400, 3402, 3406, 3412, 3415, 3423, 3427, 3430, 3439, 3450, 3455, 3457, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3558, 3567, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3773, 3776, 3780, 3782, 3782, 3784, 3790, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4969, 4977, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5880, 5888, 5909, 5919, 5940, 5952, 5971, 5984, 5996, 5998, 6e3, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6159, 6169, 6176, 6264, 6272, 6314, 6320, 6389, 6400, 6430, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6832, 6845, 6847, 6862, 6912, 6988, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7376, 7378, 7380, 7418, 7424, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8472, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12447, 12449, 12543, 12549, 12591, 12593, 12686, 12704, 12735, 12784, 12799, 13312, 19903, 19968, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42737, 42775, 42783, 42786, 42888, 42891, 42954, 42960, 42961, 42963, 42963, 42965, 42969, 42994, 43047, 43052, 43052, 43072, 43123, 43136, 43205, 43216, 43225, 43232, 43255, 43259, 43259, 43261, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43488, 43518, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43881, 43888, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65071, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 65856, 65908, 66045, 66045, 66176, 66204, 66208, 66256, 66272, 66272, 66304, 66335, 66349, 66378, 66384, 66426, 66432, 66461, 66464, 66499, 66504, 66511, 66513, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66928, 66938, 66940, 66954, 66956, 66962, 66964, 66965, 66967, 66977, 66979, 66993, 66995, 67001, 67003, 67004, 67072, 67382, 67392, 67413, 67424, 67431, 67456, 67461, 67463, 67504, 67506, 67514, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68099, 68101, 68102, 68108, 68115, 68117, 68119, 68121, 68149, 68152, 68154, 68159, 68159, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68326, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68903, 68912, 68921, 69248, 69289, 69291, 69292, 69296, 69297, 69373, 69404, 69415, 69415, 69424, 69456, 69488, 69509, 69552, 69572, 69600, 69622, 69632, 69702, 69734, 69749, 69759, 69818, 69826, 69826, 69840, 69864, 69872, 69881, 69888, 69940, 69942, 69951, 69956, 69959, 69968, 70003, 70006, 70006, 70016, 70084, 70089, 70092, 70094, 70106, 70108, 70108, 70144, 70161, 70163, 70199, 70206, 70209, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70378, 70384, 70393, 70400, 70403, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70459, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70730, 70736, 70745, 70750, 70753, 70784, 70853, 70855, 70855, 70864, 70873, 71040, 71093, 71096, 71104, 71128, 71133, 71168, 71232, 71236, 71236, 71248, 71257, 71296, 71352, 71360, 71369, 71424, 71450, 71453, 71467, 71472, 71481, 71488, 71494, 71680, 71738, 71840, 71913, 71935, 71942, 71945, 71945, 71948, 71955, 71957, 71958, 71960, 71989, 71991, 71992, 71995, 72003, 72016, 72025, 72096, 72103, 72106, 72151, 72154, 72161, 72163, 72164, 72192, 72254, 72263, 72263, 72272, 72345, 72349, 72349, 72368, 72440, 72704, 72712, 72714, 72758, 72760, 72768, 72784, 72793, 72818, 72847, 72850, 72871, 72873, 72886, 72960, 72966, 72968, 72969, 72971, 73014, 73018, 73018, 73020, 73021, 73023, 73031, 73040, 73049, 73056, 73061, 73063, 73064, 73066, 73102, 73104, 73105, 73107, 73112, 73120, 73129, 73440, 73462, 73472, 73488, 73490, 73530, 73534, 73538, 73552, 73561, 73648, 73648, 73728, 74649, 74752, 74862, 74880, 75075, 77712, 77808, 77824, 78895, 78912, 78933, 82944, 83526, 92160, 92728, 92736, 92766, 92768, 92777, 92784, 92862, 92864, 92873, 92880, 92909, 92912, 92916, 92928, 92982, 92992, 92995, 93008, 93017, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94031, 94087, 94095, 94111, 94176, 94177, 94179, 94180, 94192, 94193, 94208, 100343, 100352, 101589, 101632, 101640, 110576, 110579, 110581, 110587, 110589, 110590, 110592, 110882, 110898, 110898, 110928, 110930, 110933, 110933, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113821, 113822, 118528, 118573, 118576, 118598, 119141, 119145, 119149, 119154, 119163, 119170, 119173, 119179, 119210, 119213, 119362, 119364, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 120782, 120831, 121344, 121398, 121403, 121452, 121461, 121461, 121476, 121476, 121499, 121503, 121505, 121519, 122624, 122654, 122661, 122666, 122880, 122886, 122888, 122904, 122907, 122913, 122915, 122916, 122918, 122922, 122928, 122989, 123023, 123023, 123136, 123180, 123184, 123197, 123200, 123209, 123214, 123214, 123536, 123566, 123584, 123641, 124112, 124153, 124896, 124902, 124904, 124907, 124909, 124910, 124912, 124926, 124928, 125124, 125136, 125142, 125184, 125259, 125264, 125273, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 130032, 130041, 131072, 173791, 173824, 177977, 177984, 178205, 178208, 183969, 183984, 191456, 191472, 192093, 194560, 195101, 196608, 201546, 201552, 205743, 917760, 917999], $y = /^\/\/\/?\s*@(ts-expect-error|ts-ignore)/, Qy = /^(?:\/|\*)*\s*@(ts-expect-error|ts-ignore)/, Ky = /@(?:see|link)/i;
function dl(e, t) {
  if (e < t[0]) return false;
  let a = 0, o = t.length, m;
  for (; a + 1 < o; ) {
    if (m = a + (o - a) / 2, m -= m % 2, t[m] <= e && e <= t[m + 1]) return true;
    e < t[m] ? o = m : a = m + 2;
  }
  return false;
}
function Zy(e, t) {
  return t >= 2 ? dl(e, Xy) : dl(e, Gy);
}
function eg(e, t) {
  return t >= 2 ? dl(e, Hy) : dl(e, Yy);
}
function zm(e) {
  let t = [];
  return e.forEach((a, o) => {
    t[a] = o;
  }), t;
}
var tg = zm(Bm);
function it(e) {
  return tg[e];
}
function Fm(e) {
  return Bm.get(e);
}
zm(qm);
function Pd(e) {
  return qm.get(e);
}
function Vm(e) {
  let t = [], a = 0, o = 0;
  for (; a < e.length; ) {
    let m = e.charCodeAt(a);
    switch (a++, m) {
      case 13:
        e.charCodeAt(a) === 10 && a++;
      case 10:
        t.push(o), o = a;
        break;
      default:
        m > 127 && Cn(m) && (t.push(o), o = a);
        break;
    }
  }
  return t.push(o), t;
}
function ng(e, t, a, o, m) {
  (t < 0 || t >= e.length) && (m ? t = t < 0 ? 0 : t >= e.length ? e.length - 1 : t : B.fail(`Bad line number. Line: ${t}, lineStarts.length: ${e.length} , line map is correct? ${o !== void 0 ? _y(e, Vm(o)) : "unknown"}`));
  let v = e[t] + a;
  return m ? v > e[t + 1] ? e[t + 1] : typeof o == "string" && v > o.length ? o.length : v : (t < e.length - 1 ? B.assert(v < e[t + 1]) : o !== void 0 && B.assert(v <= o.length), v);
}
function Mp(e) {
  return e.lineMap || (e.lineMap = Vm(e.text));
}
function rg(e, t) {
  let a = ig(e, t);
  return { line: a, character: t - e[a] };
}
function ig(e, t, a) {
  let o = py(e, t, gt, Dm);
  return o < 0 && (o = ~o - 1, B.assert(o !== -1, "position cannot precede the beginning of the file")), o;
}
function Wm(e, t) {
  return rg(Mp(e), t);
}
function Ba(e) {
  return rs(e) || Cn(e);
}
function rs(e) {
  return e === 32 || e === 9 || e === 11 || e === 12 || e === 160 || e === 133 || e === 5760 || e >= 8192 && e <= 8203 || e === 8239 || e === 8287 || e === 12288 || e === 65279;
}
function Cn(e) {
  return e === 10 || e === 13 || e === 8232 || e === 8233;
}
function fi(e) {
  return e >= 48 && e <= 57;
}
function vp(e) {
  return fi(e) || e >= 65 && e <= 70 || e >= 97 && e <= 102;
}
function rf(e) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122;
}
function Gm(e) {
  return rf(e) || fi(e) || e === 95;
}
function Tp(e) {
  return e >= 48 && e <= 55;
}
function Ar(e, t, a, o, m) {
  if (fs(t)) return t;
  let v = false;
  for (; ; ) {
    let A = e.charCodeAt(t);
    switch (A) {
      case 13:
        e.charCodeAt(t + 1) === 10 && t++;
      case 10:
        if (t++, a) return t;
        v = !!m;
        continue;
      case 9:
      case 11:
      case 12:
      case 32:
        t++;
        continue;
      case 47:
        if (o) break;
        if (e.charCodeAt(t + 1) === 47) {
          for (t += 2; t < e.length && !Cn(e.charCodeAt(t)); ) t++;
          v = false;
          continue;
        }
        if (e.charCodeAt(t + 1) === 42) {
          for (t += 2; t < e.length; ) {
            if (e.charCodeAt(t) === 42 && e.charCodeAt(t + 1) === 47) {
              t += 2;
              break;
            }
            t++;
          }
          v = false;
          continue;
        }
        break;
      case 60:
      case 124:
      case 61:
      case 62:
        if (Wi(e, t)) {
          t = Ma(e, t), v = false;
          continue;
        }
        break;
      case 35:
        if (t === 0 && Ym(e, t)) {
          t = Xm(e, t), v = false;
          continue;
        }
        break;
      case 42:
        if (v) {
          t++, v = false;
          continue;
        }
        break;
      default:
        if (A > 127 && Ba(A)) {
          t++;
          continue;
        }
        break;
    }
    return t;
  }
}
var sl = 7;
function Wi(e, t) {
  if (B.assert(t >= 0), t === 0 || Cn(e.charCodeAt(t - 1))) {
    let a = e.charCodeAt(t);
    if (t + sl < e.length) {
      for (let o = 0; o < sl; o++) if (e.charCodeAt(t + o) !== a) return false;
      return a === 61 || e.charCodeAt(t + sl) === 32;
    }
  }
  return false;
}
function Ma(e, t, a) {
  a && a(E.Merge_conflict_marker_encountered, t, sl);
  let o = e.charCodeAt(t), m = e.length;
  if (o === 60 || o === 62) for (; t < m && !Cn(e.charCodeAt(t)); ) t++;
  else for (B.assert(o === 124 || o === 61); t < m; ) {
    let v = e.charCodeAt(t);
    if ((v === 61 || v === 62) && v !== o && Wi(e, t)) break;
    t++;
  }
  return t;
}
var af = /^#!.*/;
function Ym(e, t) {
  return B.assert(t === 0), af.test(e);
}
function Xm(e, t) {
  let a = af.exec(e)[0];
  return t = t + a.length, t;
}
function xl(e, t, a, o, m, v, A) {
  let P, l, Q, h, y = false, g = o, x = A;
  if (a === 0) {
    g = true;
    let I = _f(t);
    I && (a = I.length);
  }
  e: for (; a >= 0 && a < t.length; ) {
    let I = t.charCodeAt(a);
    switch (I) {
      case 13:
        t.charCodeAt(a + 1) === 10 && a++;
      case 10:
        if (a++, o) break e;
        g = true, y && (h = true);
        continue;
      case 9:
      case 11:
      case 12:
      case 32:
        a++;
        continue;
      case 47:
        let re = t.charCodeAt(a + 1), he = false;
        if (re === 47 || re === 42) {
          let ye = re === 47 ? 2 : 3, de = a;
          if (a += 2, re === 47) for (; a < t.length; ) {
            if (Cn(t.charCodeAt(a))) {
              he = true;
              break;
            }
            a++;
          }
          else for (; a < t.length; ) {
            if (t.charCodeAt(a) === 42 && t.charCodeAt(a + 1) === 47) {
              a += 2;
              break;
            }
            a++;
          }
          if (g) {
            if (y && (x = m(P, l, Q, h, v, x), !e && x)) return x;
            P = de, l = a, Q = ye, h = he, y = true;
          }
          continue;
        }
        break e;
      default:
        if (I > 127 && Ba(I)) {
          y && Cn(I) && (h = true), a++;
          continue;
        }
        break e;
    }
  }
  return y && (x = m(P, l, Q, h, v, x)), x;
}
function Hm(e, t, a, o) {
  return xl(false, e, t, false, a, o);
}
function $m(e, t, a, o) {
  return xl(false, e, t, true, a, o);
}
function ag(e, t, a, o, m) {
  return xl(true, e, t, false, a, o, m);
}
function _g(e, t, a, o, m) {
  return xl(true, e, t, true, a, o, m);
}
function Qm(e, t, a, o, m, v = []) {
  return v.push({ kind: a, pos: e, end: t, hasTrailingNewLine: o }), v;
}
function Jp(e, t) {
  return ag(e, t, Qm, void 0, void 0);
}
function sg(e, t) {
  return _g(e, t, Qm, void 0, void 0);
}
function _f(e) {
  let t = af.exec(e);
  if (t) return t[0];
}
function Zn(e, t) {
  return rf(e) || e === 36 || e === 95 || e > 127 && Zy(e, t);
}
function Er(e, t, a) {
  return Gm(e) || e === 36 || false || e > 127 && eg(e, t);
}
function og(e, t, a) {
  let o = Gi(e, 0);
  if (!Zn(o, t)) return false;
  for (let m = Ft(o); m < e.length; m += Ft(o)) if (!Er(o = Gi(e, m), t)) return false;
  return true;
}
function sf(e, t, a = 0, o, m, v, A) {
  var P = o, l, Q, h, y, g, x, I, re, he = 0, ye = 0, de = 0;
  Dt(P, v, A);
  var M = { getTokenFullStart: () => h, getStartPos: () => h, getTokenEnd: () => l, getTextPos: () => l, getToken: () => g, getTokenStart: () => y, getTokenPos: () => y, getTokenText: () => P.substring(y, l), getTokenValue: () => x, hasUnicodeEscape: () => (I & 1024) !== 0, hasExtendedUnicodeEscape: () => (I & 8) !== 0, hasPrecedingLineBreak: () => (I & 1) !== 0, hasPrecedingJSDocComment: () => (I & 2) !== 0, hasPrecedingJSDocLeadingAsterisks: () => (I & 32768) !== 0, isIdentifier: () => g === 80 || g > 118, isReservedWord: () => g >= 83 && g <= 118, isUnterminated: () => (I & 4) !== 0, getCommentDirectives: () => re, getNumericLiteralFlags: () => I & 25584, getTokenFlags: () => I, reScanGreaterToken: lt, reScanAsteriskEqualsToken: ar, reScanSlashToken: mt, reScanTemplateToken: Bt, reScanTemplateHeadOrNoSubstitutionTemplate: rn, scanJsxIdentifier: Nr, scanJsxAttributeValue: Vn, reScanJsxAttributeValue: Ce, reScanJsxToken: _r, reScanLessThanToken: fr, reScanHashToken: dr, reScanQuestionToken: zn, reScanInvalidIdentifier: Ut, scanJsxToken: Fn, scanJsDocToken: L, scanJSDocCommentTextToken: mr, scan: ct, getText: Ke, clearCommentDirectives: st, setText: Dt, setScriptTarget: ut, setLanguageVariant: Ir, setScriptKind: hr, setJSDocParsingMode: Mn, setOnError: Tt, resetTokenState: Wn, setTextPos: Wn, setSkipJsDocLeadingAsterisks: Si, tryScan: He, lookAhead: Te, scanRange: fe };
  return B.isDebugging && Object.defineProperty(M, "__debugShowCurrentPositionInText", { get: () => {
    let R = M.getText();
    return R.slice(0, M.getTokenFullStart()) + "║" + R.slice(M.getTokenFullStart());
  } }), M;
  function ae(R) {
    return Gi(P, R);
  }
  function Oe(R) {
    return R >= 0 && R < Q ? ae(R) : -1;
  }
  function V(R) {
    return P.charCodeAt(R);
  }
  function oe(R) {
    return R >= 0 && R < Q ? V(R) : -1;
  }
  function W(R, $ = l, K, xe) {
    if (m) {
      let Se = l;
      l = $, m(R, K || 0, xe), l = Se;
    }
  }
  function dt() {
    let R = l, $ = false, K = false, xe = "";
    for (; ; ) {
      let Se = V(l);
      if (Se === 95) {
        I |= 512, $ ? ($ = false, K = true, xe += P.substring(R, l)) : (I |= 16384, W(K ? E.Multiple_consecutive_numeric_separators_are_not_permitted : E.Numeric_separators_are_not_allowed_here, l, 1)), l++, R = l;
        continue;
      }
      if (fi(Se)) {
        $ = true, K = false, l++;
        continue;
      }
      break;
    }
    return V(l - 1) === 95 && (I |= 16384, W(E.Numeric_separators_are_not_allowed_here, l - 1, 1)), xe + P.substring(R, l);
  }
  function nr() {
    let R = l, $;
    if (V(l) === 48) if (l++, V(l) === 95) I |= 16896, W(E.Numeric_separators_are_not_allowed_here, l, 1), l--, $ = dt();
    else if (!rr()) I |= 8192, $ = "" + +x;
    else if (!x) $ = "0";
    else {
      x = "" + parseInt(x, 8), I |= 32;
      let be = g === 41, We = (be ? "-" : "") + "0o" + (+x).toString(8);
      return be && R--, W(E.Octal_literals_are_not_allowed_Use_the_syntax_0, R, l - R, We), 9;
    }
    else $ = dt();
    let K, xe;
    V(l) === 46 && (l++, K = dt());
    let Se = l;
    if (V(l) === 69 || V(l) === 101) {
      l++, I |= 16, (V(l) === 43 || V(l) === 45) && l++;
      let be = l, We = dt();
      We ? (xe = P.substring(Se, be) + We, Se = l) : W(E.Digit_expected);
    }
    let we;
    if (I & 512 ? (we = $, K && (we += "." + K), xe && (we += xe)) : we = P.substring(R, Se), I & 8192) return W(E.Decimals_with_leading_zeros_are_not_allowed, R, Se - R), x = "" + +we, 9;
    if (K !== void 0 || I & 16) return gn(R, K === void 0 && !!(I & 16)), x = "" + +we, 9;
    {
      x = we;
      let be = $t();
      return gn(R), be;
    }
  }
  function gn(R, $) {
    if (!Zn(ae(l), e)) return;
    let K = l, { length: xe } = vt();
    xe === 1 && P[K] === "n" ? W($ ? E.A_bigint_literal_cannot_use_exponential_notation : E.A_bigint_literal_must_be_an_integer, R, K - R + 1) : (W(E.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal, K, xe), l = K);
  }
  function rr() {
    let R = l, $ = true;
    for (; fi(oe(l)); ) Tp(V(l)) || ($ = false), l++;
    return x = P.substring(R, l), $;
  }
  function bn(R, $) {
    let K = Ge(R, false, $);
    return K ? parseInt(K, 16) : -1;
  }
  function In(R, $) {
    return Ge(R, true, $);
  }
  function Ge(R, $, K) {
    let xe = [], Se = false, we = false;
    for (; xe.length < R || $; ) {
      let be = V(l);
      if (K && be === 95) {
        I |= 512, Se ? (Se = false, we = true) : W(we ? E.Multiple_consecutive_numeric_separators_are_not_permitted : E.Numeric_separators_are_not_allowed_here, l, 1), l++;
        continue;
      }
      if (Se = K, be >= 65 && be <= 70) be += 32;
      else if (!(be >= 48 && be <= 57 || be >= 97 && be <= 102)) break;
      xe.push(be), l++, we = false;
    }
    return xe.length < R && (xe = []), V(l - 1) === 95 && W(E.Numeric_separators_are_not_allowed_here, l - 1, 1), String.fromCharCode(...xe);
  }
  function ir(R = false) {
    let $ = V(l);
    l++;
    let K = "", xe = l;
    for (; ; ) {
      if (l >= Q) {
        K += P.substring(xe, l), I |= 4, W(E.Unterminated_string_literal);
        break;
      }
      let Se = V(l);
      if (Se === $) {
        K += P.substring(xe, l), l++;
        break;
      }
      if (Se === 92 && !R) {
        K += P.substring(xe, l), K += Ot(3), xe = l;
        continue;
      }
      if ((Se === 10 || Se === 13) && !R) {
        K += P.substring(xe, l), I |= 4, W(E.Unterminated_string_literal);
        break;
      }
      l++;
    }
    return K;
  }
  function Pr(R) {
    let $ = V(l) === 96;
    l++;
    let K = l, xe = "", Se;
    for (; ; ) {
      if (l >= Q) {
        xe += P.substring(K, l), I |= 4, W(E.Unterminated_template_literal), Se = $ ? 15 : 18;
        break;
      }
      let we = V(l);
      if (we === 96) {
        xe += P.substring(K, l), l++, Se = $ ? 15 : 18;
        break;
      }
      if (we === 36 && l + 1 < Q && V(l + 1) === 123) {
        xe += P.substring(K, l), l += 2, Se = $ ? 16 : 17;
        break;
      }
      if (we === 92) {
        xe += P.substring(K, l), xe += Ot(1 | (R ? 2 : 0)), K = l;
        continue;
      }
      if (we === 13) {
        xe += P.substring(K, l), l++, l < Q && V(l) === 10 && l++, xe += `
`, K = l;
        continue;
      }
      l++;
    }
    return B.assert(Se !== void 0), x = xe, Se;
  }
  function Ot(R) {
    let $ = l;
    if (l++, l >= Q) return W(E.Unexpected_end_of_text), "";
    let K = V(l);
    switch (l++, K) {
      case 48:
        if (l >= Q || !fi(V(l))) return "\0";
      case 49:
      case 50:
      case 51:
        l < Q && Tp(V(l)) && l++;
      case 52:
      case 53:
      case 54:
      case 55:
        if (l < Q && Tp(V(l)) && l++, I |= 2048, R & 6) {
          let we = parseInt(P.substring($ + 1, l), 8);
          return R & 4 && !(R & 32) && K !== 48 ? W(E.Octal_escape_sequences_and_backreferences_are_not_allowed_in_a_character_class_If_this_was_intended_as_an_escape_sequence_use_the_syntax_0_instead, $, l - $, "\\x" + we.toString(16).padStart(2, "0")) : W(E.Octal_escape_sequences_are_not_allowed_Use_the_syntax_0, $, l - $, "\\x" + we.toString(16).padStart(2, "0")), String.fromCharCode(we);
        }
        return P.substring($, l);
      case 56:
      case 57:
        return I |= 2048, R & 6 ? (R & 4 && !(R & 32) ? W(E.Decimal_escape_sequences_and_backreferences_are_not_allowed_in_a_character_class, $, l - $) : W(E.Escape_sequence_0_is_not_allowed, $, l - $, P.substring($, l)), String.fromCharCode(K)) : P.substring($, l);
      case 98:
        return "\b";
      case 116:
        return "	";
      case 110:
        return `
`;
      case 118:
        return "\v";
      case 102:
        return "\f";
      case 114:
        return "\r";
      case 39:
        return "'";
      case 34:
        return '"';
      case 117:
        if (l < Q && V(l) === 123) {
          l -= 2;
          let we = Bn(!!(R & 6));
          return R & 17 || (I |= 2048, R & 6 && W(E.Unicode_escape_sequences_are_only_available_when_the_Unicode_u_flag_or_the_Unicode_Sets_v_flag_is_set, $, l - $)), we;
        }
        for (; l < $ + 6; l++) if (!(l < Q && vp(V(l)))) return I |= 2048, R & 6 && W(E.Hexadecimal_digit_expected), P.substring($, l);
        I |= 1024;
        let xe = parseInt(P.substring($ + 2, l), 16), Se = String.fromCharCode(xe);
        if (R & 16 && xe >= 55296 && xe <= 56319 && l + 6 < Q && P.substring(l, l + 2) === "\\u" && V(l + 2) !== 123) {
          let we = l, be = l + 2;
          for (; be < we + 6; be++) if (!vp(V(be))) return Se;
          let We = parseInt(P.substring(we + 2, be), 16);
          if (We >= 56320 && We <= 57343) return l = be, Se + String.fromCharCode(We);
        }
        return Se;
      case 120:
        for (; l < $ + 4; l++) if (!(l < Q && vp(V(l)))) return I |= 2048, R & 6 && W(E.Hexadecimal_digit_expected), P.substring($, l);
        return I |= 4096, String.fromCharCode(parseInt(P.substring($ + 2, l), 16));
      case 13:
        l < Q && V(l) === 10 && l++;
      case 10:
      case 8232:
      case 8233:
        return "";
      default:
        return (R & 16 || R & 4 && !(R & 8) && Er(K, e)) && W(E.This_character_cannot_be_escaped_in_a_regular_expression, l - 2, 2), String.fromCharCode(K);
    }
  }
  function Bn(R) {
    let $ = l;
    l += 3;
    let K = l, xe = In(1, false), Se = xe ? parseInt(xe, 16) : -1, we = false;
    return Se < 0 ? (R && W(E.Hexadecimal_digit_expected), we = true) : Se > 1114111 && (R && W(E.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive, K, l - K), we = true), l >= Q ? (R && W(E.Unexpected_end_of_text), we = true) : V(l) === 125 ? l++ : (R && W(E.Unterminated_Unicode_escape_sequence), we = true), we ? (I |= 2048, P.substring($, l)) : (I |= 8, Nd(Se));
  }
  function On() {
    if (l + 5 < Q && V(l + 1) === 117) {
      let R = l;
      l += 2;
      let $ = bn(4, false);
      return l = R, $;
    }
    return -1;
  }
  function Mt() {
    if (ae(l + 1) === 117 && ae(l + 2) === 123) {
      let R = l;
      l += 3;
      let $ = In(1, false), K = $ ? parseInt($, 16) : -1;
      return l = R, K;
    }
    return -1;
  }
  function vt() {
    let R = "", $ = l;
    for (; l < Q; ) {
      let K = ae(l);
      if (Er(K, e)) l += Ft(K);
      else if (K === 92) {
        if (K = Mt(), K >= 0 && Er(K, e)) {
          R += Bn(true), $ = l;
          continue;
        }
        if (K = On(), !(K >= 0 && Er(K, e))) break;
        I |= 1024, R += P.substring($, l), R += Nd(K), l += 6, $ = l;
      } else break;
    }
    return R += P.substring($, l), R;
  }
  function Qe() {
    let R = x.length;
    if (R >= 2 && R <= 12) {
      let $ = x.charCodeAt(0);
      if ($ >= 97 && $ <= 122) {
        let K = Vy.get(x);
        if (K !== void 0) return g = K;
      }
    }
    return g = 80;
  }
  function qn(R) {
    let $ = "", K = false, xe = false;
    for (; ; ) {
      let Se = V(l);
      if (Se === 95) {
        I |= 512, K ? (K = false, xe = true) : W(xe ? E.Multiple_consecutive_numeric_separators_are_not_permitted : E.Numeric_separators_are_not_allowed_here, l, 1), l++;
        continue;
      }
      if (K = true, !fi(Se) || Se - 48 >= R) break;
      $ += P[l], l++, xe = false;
    }
    return V(l - 1) === 95 && W(E.Numeric_separators_are_not_allowed_here, l - 1, 1), $;
  }
  function $t() {
    return V(l) === 110 ? (x += "n", I & 384 && (x = bb(x) + "n"), l++, 10) : (x = "" + (I & 128 ? parseInt(x.slice(2), 2) : I & 256 ? parseInt(x.slice(2), 8) : +x), 9);
  }
  function ct() {
    for (h = l, I = 0; ; ) {
      if (y = l, l >= Q) return g = 1;
      let R = ae(l);
      if (l === 0 && R === 35 && Ym(P, l)) {
        if (l = Xm(P, l), t) continue;
        return g = 6;
      }
      switch (R) {
        case 10:
        case 13:
          if (I |= 1, t) {
            l++;
            continue;
          } else return R === 13 && l + 1 < Q && V(l + 1) === 10 ? l += 2 : l++, g = 4;
        case 9:
        case 11:
        case 12:
        case 32:
        case 160:
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8203:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          if (t) {
            l++;
            continue;
          } else {
            for (; l < Q && rs(V(l)); ) l++;
            return g = 5;
          }
        case 33:
          return V(l + 1) === 61 ? V(l + 2) === 61 ? (l += 3, g = 38) : (l += 2, g = 36) : (l++, g = 54);
        case 34:
        case 39:
          return x = ir(), g = 11;
        case 96:
          return g = Pr(false);
        case 37:
          return V(l + 1) === 61 ? (l += 2, g = 70) : (l++, g = 45);
        case 38:
          return V(l + 1) === 38 ? V(l + 2) === 61 ? (l += 3, g = 77) : (l += 2, g = 56) : V(l + 1) === 61 ? (l += 2, g = 74) : (l++, g = 51);
        case 40:
          return l++, g = 21;
        case 41:
          return l++, g = 22;
        case 42:
          if (V(l + 1) === 61) return l += 2, g = 67;
          if (V(l + 1) === 42) return V(l + 2) === 61 ? (l += 3, g = 68) : (l += 2, g = 43);
          if (l++, he && (I & 32768) === 0 && I & 1) {
            I |= 32768;
            continue;
          }
          return g = 42;
        case 43:
          return V(l + 1) === 43 ? (l += 2, g = 46) : V(l + 1) === 61 ? (l += 2, g = 65) : (l++, g = 40);
        case 44:
          return l++, g = 28;
        case 45:
          return V(l + 1) === 45 ? (l += 2, g = 47) : V(l + 1) === 61 ? (l += 2, g = 66) : (l++, g = 41);
        case 46:
          return fi(V(l + 1)) ? (nr(), g = 9) : V(l + 1) === 46 && V(l + 2) === 46 ? (l += 3, g = 26) : (l++, g = 25);
        case 47:
          if (V(l + 1) === 47) {
            for (l += 2; l < Q && !Cn(V(l)); ) l++;
            if (re = cn(re, P.slice(y, l), $y, y), t) continue;
            return g = 2;
          }
          if (V(l + 1) === 42) {
            l += 2;
            let be = V(l) === 42 && V(l + 1) !== 47, We = false, Ze = y;
            for (; l < Q; ) {
              let Ye = V(l);
              if (Ye === 42 && V(l + 1) === 47) {
                l += 2, We = true;
                break;
              }
              l++, Cn(Ye) && (Ze = l, I |= 1);
            }
            if (be && _t() && (I |= 2), re = cn(re, P.slice(Ze, l), Qy, Ze), We || W(E.Asterisk_Slash_expected), t) continue;
            return We || (I |= 4), g = 3;
          }
          return V(l + 1) === 61 ? (l += 2, g = 69) : (l++, g = 44);
        case 48:
          if (l + 2 < Q && (V(l + 1) === 88 || V(l + 1) === 120)) return l += 2, x = In(1, true), x || (W(E.Hexadecimal_digit_expected), x = "0"), x = "0x" + x, I |= 64, g = $t();
          if (l + 2 < Q && (V(l + 1) === 66 || V(l + 1) === 98)) return l += 2, x = qn(2), x || (W(E.Binary_digit_expected), x = "0"), x = "0b" + x, I |= 128, g = $t();
          if (l + 2 < Q && (V(l + 1) === 79 || V(l + 1) === 111)) return l += 2, x = qn(8), x || (W(E.Octal_digit_expected), x = "0"), x = "0o" + x, I |= 256, g = $t();
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return g = nr();
        case 58:
          return l++, g = 59;
        case 59:
          return l++, g = 27;
        case 60:
          if (Wi(P, l)) {
            if (l = Ma(P, l, W), t) continue;
            return g = 7;
          }
          return V(l + 1) === 60 ? V(l + 2) === 61 ? (l += 3, g = 71) : (l += 2, g = 48) : V(l + 1) === 61 ? (l += 2, g = 33) : a === 1 && V(l + 1) === 47 && V(l + 2) !== 42 ? (l += 2, g = 31) : (l++, g = 30);
        case 61:
          if (Wi(P, l)) {
            if (l = Ma(P, l, W), t) continue;
            return g = 7;
          }
          return V(l + 1) === 61 ? V(l + 2) === 61 ? (l += 3, g = 37) : (l += 2, g = 35) : V(l + 1) === 62 ? (l += 2, g = 39) : (l++, g = 64);
        case 62:
          if (Wi(P, l)) {
            if (l = Ma(P, l, W), t) continue;
            return g = 7;
          }
          return l++, g = 32;
        case 63:
          return V(l + 1) === 46 && !fi(V(l + 2)) ? (l += 2, g = 29) : V(l + 1) === 63 ? V(l + 2) === 61 ? (l += 3, g = 78) : (l += 2, g = 61) : (l++, g = 58);
        case 91:
          return l++, g = 23;
        case 93:
          return l++, g = 24;
        case 94:
          return V(l + 1) === 61 ? (l += 2, g = 79) : (l++, g = 53);
        case 123:
          return l++, g = 19;
        case 124:
          if (Wi(P, l)) {
            if (l = Ma(P, l, W), t) continue;
            return g = 7;
          }
          return V(l + 1) === 124 ? V(l + 2) === 61 ? (l += 3, g = 76) : (l += 2, g = 57) : V(l + 1) === 61 ? (l += 2, g = 75) : (l++, g = 52);
        case 125:
          return l++, g = 20;
        case 126:
          return l++, g = 55;
        case 64:
          return l++, g = 60;
        case 92:
          let $ = Mt();
          if ($ >= 0 && Zn($, e)) return x = Bn(true) + vt(), g = Qe();
          let K = On();
          return K >= 0 && Zn(K, e) ? (l += 6, I |= 1024, x = String.fromCharCode(K) + vt(), g = Qe()) : (W(E.Invalid_character), l++, g = 0);
        case 35:
          if (l !== 0 && P[l + 1] === "!") return W(E.can_only_be_used_at_the_start_of_a_file, l, 2), l++, g = 0;
          let xe = ae(l + 1);
          if (xe === 92) {
            l++;
            let be = Mt();
            if (be >= 0 && Zn(be, e)) return x = "#" + Bn(true) + vt(), g = 81;
            let We = On();
            if (We >= 0 && Zn(We, e)) return l += 6, I |= 1024, x = "#" + String.fromCharCode(We) + vt(), g = 81;
            l--;
          }
          return Zn(xe, e) ? (l++, Jt(xe, e)) : (x = "#", W(E.Invalid_character, l++, Ft(R))), g = 81;
        case 65533:
          return W(E.File_appears_to_be_binary, 0, 0), l = Q, g = 8;
        default:
          let Se = Jt(R, e);
          if (Se) return g = Se;
          if (rs(R)) {
            l += Ft(R);
            continue;
          } else if (Cn(R)) {
            I |= 1, l += Ft(R);
            continue;
          }
          let we = Ft(R);
          return W(E.Invalid_character, l, we), l += we, g = 0;
      }
    }
  }
  function _t() {
    switch (de) {
      case 0:
        return true;
      case 1:
        return false;
    }
    return ye !== 3 && ye !== 4 ? true : de === 3 ? false : Ky.test(P.slice(h, l));
  }
  function Ut() {
    B.assert(g === 0, "'reScanInvalidIdentifier' should only be called when the current token is 'SyntaxKind.Unknown'."), l = y = h, I = 0;
    let R = ae(l), $ = Jt(R, 99);
    return $ ? g = $ : (l += Ft(R), g);
  }
  function Jt(R, $) {
    let K = R;
    if (Zn(K, $)) {
      for (l += Ft(K); l < Q && Er(K = ae(l), $); ) l += Ft(K);
      return x = P.substring(y, l), K === 92 && (x += vt()), Qe();
    }
  }
  function lt() {
    if (g === 32) {
      if (V(l) === 62) return V(l + 1) === 62 ? V(l + 2) === 61 ? (l += 3, g = 73) : (l += 2, g = 50) : V(l + 1) === 61 ? (l += 2, g = 72) : (l++, g = 49);
      if (V(l) === 61) return l++, g = 34;
    }
    return g;
  }
  function ar() {
    return B.assert(g === 67, "'reScanAsteriskEqualsToken' should only be called on a '*='"), l = y + 1, g = 64;
  }
  function mt(R) {
    if (g === 44 || g === 69) {
      let $ = y + 1;
      l = $;
      let K = false, xe = false, Se = false;
      for (; ; ) {
        let be = oe(l);
        if (be === -1 || Cn(be)) {
          I |= 4;
          break;
        }
        if (K) K = false;
        else {
          if (be === 47 && !Se) break;
          be === 91 ? Se = true : be === 92 ? K = true : be === 93 ? Se = false : !Se && be === 40 && oe(l + 1) === 63 && oe(l + 2) === 60 && oe(l + 3) !== 61 && oe(l + 3) !== 33 && (xe = true);
        }
        l++;
      }
      let we = l;
      if (I & 4) {
        l = $, K = false;
        let be = 0, We = false, Ze = 0;
        for (; l < we; ) {
          let Ye = V(l);
          if (K) K = false;
          else if (Ye === 92) K = true;
          else if (Ye === 91) be++;
          else if (Ye === 93 && be) be--;
          else if (!be) {
            if (Ye === 123) We = true;
            else if (Ye === 125 && We) We = false;
            else if (!We) {
              if (Ye === 40) Ze++;
              else if (Ye === 41 && Ze) Ze--;
              else if (Ye === 41 || Ye === 93 || Ye === 125) break;
            }
          }
          l++;
        }
        for (; Ba(oe(l - 1)) || oe(l - 1) === 59; ) l--;
        W(E.Unterminated_regular_expression_literal, y, l - y);
      } else {
        l++;
        let be = 0;
        for (; ; ) {
          let We = Oe(l);
          if (We === -1 || !Er(We, e)) break;
          let Ze = Ft(We);
          if (R) {
            let Ye = Pd(We);
            Ye === void 0 ? W(E.Unknown_regular_expression_flag, l, Ze) : be & Ye ? W(E.Duplicate_regular_expression_flag, l, Ze) : ((be | Ye) & 96) === 96 ? W(E.The_Unicode_u_flag_and_the_Unicode_Sets_v_flag_cannot_be_set_simultaneously, l, Ze) : (be |= Ye, yt(Ye, Ze));
          }
          l += Ze;
        }
        R && fe($, we - $, () => {
          vn(be, true, xe);
        });
      }
      x = P.substring(y, l), g = 14;
    }
    return g;
  }
  function vn(R, $, K) {
    var xe = !!(R & 64), Se = !!(R & 96), we = Se || false, be = false, We = 0, Ze, Ye, Ee, Tn = [], rt;
    function ln(G) {
      for (; ; ) {
        if (Tn.push(rt), rt = void 0, Zr(G), rt = Tn.pop(), oe(l) !== 124) return;
        l++;
      }
    }
    function Zr(G) {
      let le = false;
      for (; ; ) {
        let Fe = l, ve = oe(l);
        switch (ve) {
          case -1:
            return;
          case 94:
          case 36:
            l++, le = false;
            break;
          case 92:
            switch (l++, oe(l)) {
              case 98:
              case 66:
                l++, le = false;
                break;
              default:
                qe(), le = true;
                break;
            }
            break;
          case 40:
            if (l++, oe(l) === 63) switch (l++, oe(l)) {
              case 61:
              case 33:
                l++, le = !we;
                break;
              case 60:
                let xt = l;
                switch (l++, oe(l)) {
                  case 61:
                  case 33:
                    l++, le = false;
                    break;
                  default:
                    Me(false), un(62), e < 5 && W(E.Named_capturing_groups_are_only_available_when_targeting_ES2018_or_later, xt, l - xt), We++, le = true;
                    break;
                }
                break;
              default:
                let Lt = l, pn = J(0);
                oe(l) === 45 && (l++, J(pn), l === Lt + 1 && W(E.Subpattern_flags_must_be_present_when_there_is_a_minus_sign, Lt, l - Lt)), un(58), le = true;
                break;
            }
            else We++, le = true;
            ln(true), un(41);
            break;
          case 123:
            l++;
            let j = l;
            rr();
            let ht = x;
            if (!we && !ht) {
              le = true;
              break;
            }
            if (oe(l) === 44) {
              l++, rr();
              let xt = x;
              if (ht) xt && Number.parseInt(ht) > Number.parseInt(xt) && (we || oe(l) === 125) && W(E.Numbers_out_of_order_in_quantifier, j, l - j);
              else if (xt || oe(l) === 125) W(E.Incomplete_quantifier_Digit_expected, j, 0);
              else {
                W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, Fe, 1, String.fromCharCode(ve)), le = true;
                break;
              }
            } else if (!ht) {
              we && W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, Fe, 1, String.fromCharCode(ve)), le = true;
              break;
            }
            if (oe(l) !== 125) if (we) W(E._0_expected, l, 0, "}"), l--;
            else {
              le = true;
              break;
            }
          case 42:
          case 43:
          case 63:
            l++, oe(l) === 63 && l++, le || W(E.There_is_nothing_available_for_repetition, Fe, l - Fe), le = false;
            break;
          case 46:
            l++, le = true;
            break;
          case 91:
            l++, xe ? an() : ze(), un(93), le = true;
            break;
          case 41:
            if (G) return;
          case 93:
          case 125:
            (we || ve === 41) && W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, l, 1, String.fromCharCode(ve)), l++, le = true;
            break;
          case 47:
          case 124:
            return;
          default:
            wi(), le = true;
            break;
        }
      }
    }
    function J(G) {
      for (; ; ) {
        let le = Oe(l);
        if (le === -1 || !Er(le, e)) break;
        let Fe = Ft(le), ve = Pd(le);
        ve === void 0 ? W(E.Unknown_regular_expression_flag, l, Fe) : G & ve ? W(E.Duplicate_regular_expression_flag, l, Fe) : ve & 28 ? (G |= ve, yt(ve, Fe)) : W(E.This_regular_expression_flag_cannot_be_toggled_within_a_subpattern, l, Fe), l += Fe;
      }
      return G;
    }
    function qe() {
      switch (B.assertEqual(V(l - 1), 92), oe(l)) {
        case 107:
          l++, oe(l) === 60 ? (l++, Me(true), un(62)) : (we || K) && W(E.k_must_be_followed_by_a_capturing_group_name_enclosed_in_angle_brackets, l - 2, 2);
          break;
        case 113:
          if (xe) {
            l++, W(E.q_is_only_available_inside_character_class, l - 2, 2);
            break;
          }
        default:
          B.assert(qt() || u() || Ne(true));
          break;
      }
    }
    function u() {
      B.assertEqual(V(l - 1), 92);
      let G = oe(l);
      if (G >= 49 && G <= 57) {
        let le = l;
        return rr(), Ee = An(Ee, { pos: le, end: l, value: +x }), true;
      }
      return false;
    }
    function Ne(G) {
      B.assertEqual(V(l - 1), 92);
      let le = oe(l);
      switch (le) {
        case -1:
          return W(E.Undetermined_character_escape, l - 1, 1), "\\";
        case 99:
          if (l++, le = oe(l), rf(le)) return l++, String.fromCharCode(le & 31);
          if (we) W(E.c_must_be_followed_by_an_ASCII_letter, l - 2, 2);
          else if (G) return l--, "\\";
          return String.fromCharCode(le);
        case 94:
        case 36:
        case 47:
        case 92:
        case 46:
        case 42:
        case 43:
        case 63:
        case 40:
        case 41:
        case 91:
        case 93:
        case 123:
        case 125:
        case 124:
          return l++, String.fromCharCode(le);
        default:
          return l--, Ot(4 | 8 | (Se ? 16 : 0) | (G ? 32 : 0));
      }
    }
    function Me(G) {
      B.assertEqual(V(l - 1), 60), y = l, Jt(Oe(l), e), l === y ? W(E.Expected_a_capturing_group_name) : G ? Ye = An(Ye, { pos: y, end: l, name: x }) : rt != null && rt.has(x) || Tn.some((le) => le == null ? void 0 : le.has(x)) ? W(E.Named_capturing_groups_with_the_same_name_must_be_mutually_exclusive_to_each_other, y, l - y) : (rt ?? (rt = /* @__PURE__ */ new Set()), rt.add(x), Ze ?? (Ze = /* @__PURE__ */ new Set()), Ze.add(x));
    }
    function U(G) {
      return G === 93 || G === -1 || l >= Q;
    }
    function ze() {
      for (B.assertEqual(V(l - 1), 91), oe(l) === 94 && l++; ; ) {
        let G = oe(l);
        if (U(G)) return;
        let le = l, Fe = Nt();
        if (oe(l) === 45) {
          l++;
          let ve = oe(l);
          if (U(ve)) return;
          !Fe && we && W(E.A_character_class_range_must_not_be_bounded_by_another_character_class, le, l - 1 - le);
          let j = l, ht = Nt();
          if (!ht && we) {
            W(E.A_character_class_range_must_not_be_bounded_by_another_character_class, j, l - j);
            continue;
          }
          if (!Fe) continue;
          let xt = Gi(Fe, 0), Lt = Gi(ht, 0);
          Fe.length === Ft(xt) && ht.length === Ft(Lt) && xt > Lt && W(E.Range_out_of_order_in_character_class, le, l - le);
        }
      }
    }
    function an() {
      B.assertEqual(V(l - 1), 91);
      let G = false;
      oe(l) === 94 && (l++, G = true);
      let le = false, Fe = oe(l);
      if (U(Fe)) return;
      let ve = l, j;
      switch (P.slice(l, l + 2)) {
        case "--":
        case "&&":
          W(E.Expected_a_class_set_operand), be = false;
          break;
        default:
          j = $e();
          break;
      }
      switch (oe(l)) {
        case 45:
          if (oe(l + 1) === 45) {
            G && be && W(E.Anything_that_would_possibly_match_more_than_a_single_character_is_invalid_inside_a_negated_character_class, ve, l - ve), le = be, Ve(3), be = !G && le;
            return;
          }
          break;
        case 38:
          if (oe(l + 1) === 38) {
            Ve(2), G && be && W(E.Anything_that_would_possibly_match_more_than_a_single_character_is_invalid_inside_a_negated_character_class, ve, l - ve), le = be, be = !G && le;
            return;
          } else W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, l, 1, String.fromCharCode(Fe));
          break;
        default:
          G && be && W(E.Anything_that_would_possibly_match_more_than_a_single_character_is_invalid_inside_a_negated_character_class, ve, l - ve), le = be;
          break;
      }
      for (; Fe = oe(l), Fe !== -1; ) {
        switch (Fe) {
          case 45:
            if (l++, Fe = oe(l), U(Fe)) {
              be = !G && le;
              return;
            }
            if (Fe === 45) {
              l++, W(E.Operators_must_not_be_mixed_within_a_character_class_Wrap_it_in_a_nested_class_instead, l - 2, 2), ve = l - 2, j = P.slice(ve, l);
              continue;
            } else {
              j || W(E.A_character_class_range_must_not_be_bounded_by_another_character_class, ve, l - 1 - ve);
              let ht = l, xt = $e();
              if (G && be && W(E.Anything_that_would_possibly_match_more_than_a_single_character_is_invalid_inside_a_negated_character_class, ht, l - ht), le || (le = be), !xt) {
                W(E.A_character_class_range_must_not_be_bounded_by_another_character_class, ht, l - ht);
                break;
              }
              if (!j) break;
              let Lt = Gi(j, 0), pn = Gi(xt, 0);
              j.length === Ft(Lt) && xt.length === Ft(pn) && Lt > pn && W(E.Range_out_of_order_in_character_class, ve, l - ve);
            }
            break;
          case 38:
            ve = l, l++, oe(l) === 38 ? (l++, W(E.Operators_must_not_be_mixed_within_a_character_class_Wrap_it_in_a_nested_class_instead, l - 2, 2), oe(l) === 38 && (W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, l, 1, String.fromCharCode(Fe)), l++)) : W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, l - 1, 1, String.fromCharCode(Fe)), j = P.slice(ve, l);
            continue;
        }
        if (U(oe(l))) break;
        switch (ve = l, P.slice(l, l + 2)) {
          case "--":
          case "&&":
            W(E.Operators_must_not_be_mixed_within_a_character_class_Wrap_it_in_a_nested_class_instead, l, 2), l += 2, j = P.slice(ve, l);
            break;
          default:
            j = $e();
            break;
        }
      }
      be = !G && le;
    }
    function Ve(G) {
      let le = be;
      for (; ; ) {
        let Fe = oe(l);
        if (U(Fe)) break;
        switch (Fe) {
          case 45:
            l++, oe(l) === 45 ? (l++, G !== 3 && W(E.Operators_must_not_be_mixed_within_a_character_class_Wrap_it_in_a_nested_class_instead, l - 2, 2)) : W(E.Operators_must_not_be_mixed_within_a_character_class_Wrap_it_in_a_nested_class_instead, l - 1, 1);
            break;
          case 38:
            l++, oe(l) === 38 ? (l++, G !== 2 && W(E.Operators_must_not_be_mixed_within_a_character_class_Wrap_it_in_a_nested_class_instead, l - 2, 2), oe(l) === 38 && (W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, l, 1, String.fromCharCode(Fe)), l++)) : W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, l - 1, 1, String.fromCharCode(Fe));
            break;
          default:
            switch (G) {
              case 3:
                W(E._0_expected, l, 0, "--");
                break;
              case 2:
                W(E._0_expected, l, 0, "&&");
                break;
            }
            break;
        }
        if (Fe = oe(l), U(Fe)) {
          W(E.Expected_a_class_set_operand);
          break;
        }
        $e(), le && (le = be);
      }
      be = le;
    }
    function $e() {
      switch (be = false, oe(l)) {
        case -1:
          return "";
        case 91:
          return l++, an(), un(93), "";
        case 92:
          if (l++, qt()) return "";
          if (oe(l) === 113) return l++, oe(l) === 123 ? (l++, Pt(), un(125), "") : (W(E.q_must_be_followed_by_string_alternatives_enclosed_in_braces, l - 2, 2), "q");
          l--;
        default:
          return kt();
      }
    }
    function Pt() {
      B.assertEqual(V(l - 1), 123);
      let G = 0;
      for (; ; ) switch (oe(l)) {
        case -1:
          return;
        case 125:
          G !== 1 && (be = true);
          return;
        case 124:
          G !== 1 && (be = true), l++, v = l, G = 0;
          break;
        default:
          kt(), G++;
          break;
      }
    }
    function kt() {
      let G = oe(l);
      if (G === -1) return "";
      if (G === 92) {
        l++;
        let le = oe(l);
        switch (le) {
          case 98:
            return l++, "\b";
          case 38:
          case 45:
          case 33:
          case 35:
          case 37:
          case 44:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 64:
          case 96:
          case 126:
            return l++, String.fromCharCode(le);
          default:
            return Ne(false);
        }
      } else if (G === oe(l + 1)) switch (G) {
        case 38:
        case 33:
        case 35:
        case 37:
        case 42:
        case 43:
        case 44:
        case 46:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 96:
        case 126:
          return W(E.A_character_class_must_not_contain_a_reserved_double_punctuator_Did_you_mean_to_escape_it_with_backslash, l, 2), l += 2, P.substring(l - 2, l);
      }
      switch (G) {
        case 47:
        case 40:
        case 41:
        case 91:
        case 93:
        case 123:
        case 125:
        case 45:
        case 124:
          return W(E.Unexpected_0_Did_you_mean_to_escape_it_with_backslash, l, 1, String.fromCharCode(G)), l++, String.fromCharCode(G);
      }
      return wi();
    }
    function Nt() {
      if (oe(l) === 92) {
        l++;
        let G = oe(l);
        switch (G) {
          case 98:
            return l++, "\b";
          case 45:
            return l++, String.fromCharCode(G);
          default:
            return qt() ? "" : Ne(false);
        }
      } else return wi();
    }
    function qt() {
      B.assertEqual(V(l - 1), 92);
      let G = false, le = l - 1, Fe = oe(l);
      switch (Fe) {
        case 100:
        case 68:
        case 115:
        case 83:
        case 119:
        case 87:
          return l++, true;
        case 80:
          G = true;
        case 112:
          if (l++, oe(l) === 123) {
            l++;
            let ve = l, j = Gn();
            if (oe(l) === 61) {
              let ht = Id.get(j);
              if (l === ve) W(E.Expected_a_Unicode_property_name);
              else if (ht === void 0) {
                W(E.Unknown_Unicode_property_name, ve, l - ve);
                let pn = ns(j, Id.keys(), gt);
                pn && W(E.Did_you_mean_0, ve, l - ve, pn);
              }
              l++;
              let xt = l, Lt = Gn();
              if (l === xt) W(E.Expected_a_Unicode_property_value);
              else if (ht !== void 0 && !Ra[ht].has(Lt)) {
                W(E.Unknown_Unicode_property_value, xt, l - xt);
                let pn = ns(Lt, Ra[ht], gt);
                pn && W(E.Did_you_mean_0, xt, l - xt, pn);
              }
            } else if (l === ve) W(E.Expected_a_Unicode_property_name_or_value);
            else if (Md.has(j)) xe ? G ? W(E.Anything_that_would_possibly_match_more_than_a_single_character_is_invalid_inside_a_negated_character_class, ve, l - ve) : be = true : W(E.Any_Unicode_property_that_would_possibly_match_more_than_a_single_character_is_only_available_when_the_Unicode_Sets_v_flag_is_set, ve, l - ve);
            else if (!Ra.General_Category.has(j) && !Od.has(j)) {
              W(E.Unknown_Unicode_property_name_or_value, ve, l - ve);
              let ht = ns(j, [...Ra.General_Category, ...Od, ...Md], gt);
              ht && W(E.Did_you_mean_0, ve, l - ve, ht);
            }
            un(125), Se || W(E.Unicode_property_value_expressions_are_only_available_when_the_Unicode_u_flag_or_the_Unicode_Sets_v_flag_is_set, le, l - le);
          } else if (we) W(E._0_must_be_followed_by_a_Unicode_property_value_expression_enclosed_in_braces, l - 2, 2, String.fromCharCode(Fe));
          else return l--, false;
          return true;
      }
      return false;
    }
    function Gn() {
      let G = "";
      for (; ; ) {
        let le = oe(l);
        if (le === -1 || !Gm(le)) break;
        G += String.fromCharCode(le), l++;
      }
      return G;
    }
    function wi() {
      let G = Se ? Ft(Oe(l)) : 1;
      return l += G, G > 0 ? P.substring(l - G, l) : "";
    }
    function un(G) {
      oe(l) === G ? l++ : W(E._0_expected, l, 0, String.fromCharCode(G));
    }
    ln(false), Un(Ye, (G) => {
      if (!(Ze != null && Ze.has(G.name)) && (W(E.There_is_no_capturing_group_named_0_in_this_regular_expression, G.pos, G.end - G.pos, G.name), Ze)) {
        let le = ns(G.name, Ze, gt);
        le && W(E.Did_you_mean_0, G.pos, G.end - G.pos, le);
      }
    }), Un(Ee, (G) => {
      G.value > We && (We ? W(E.This_backreference_refers_to_a_group_that_does_not_exist_There_are_only_0_capturing_groups_in_this_regular_expression, G.pos, G.end - G.pos, We) : W(E.This_backreference_refers_to_a_group_that_does_not_exist_There_are_no_capturing_groups_in_this_regular_expression, G.pos, G.end - G.pos));
    });
  }
  function yt(R, $) {
    let K = Wy.get(R);
    K && e < K && W(E.This_regular_expression_flag_is_only_available_when_targeting_0_or_later, l, $, lb(K));
  }
  function cn(R, $, K, xe) {
    let Se = nt($.trimStart(), K);
    return Se === void 0 ? R : An(R, { range: { pos: xe, end: l }, type: Se });
  }
  function nt(R, $) {
    let K = $.exec(R);
    if (K) switch (K[1]) {
      case "ts-expect-error":
        return 0;
      case "ts-ignore":
        return 1;
    }
  }
  function Bt(R) {
    return l = y, g = Pr(!R);
  }
  function rn() {
    return l = y, g = Pr(true);
  }
  function _r(R = true) {
    return l = y = h, g = Fn(R);
  }
  function fr() {
    return g === 48 ? (l = y + 1, g = 30) : g;
  }
  function dr() {
    return g === 81 ? (l = y + 1, g = 63) : g;
  }
  function zn() {
    return B.assert(g === 61, "'reScanQuestionToken' should only be called on a '??'"), l = y + 1, g = 58;
  }
  function Fn(R = true) {
    if (h = y = l, l >= Q) return g = 1;
    let $ = V(l);
    if ($ === 60) return V(l + 1) === 47 ? (l += 2, g = 31) : (l++, g = 30);
    if ($ === 123) return l++, g = 19;
    let K = 0;
    for (; l < Q && ($ = V(l), $ !== 123); ) {
      if ($ === 60) {
        if (Wi(P, l)) return l = Ma(P, l, W), g = 7;
        break;
      }
      if ($ === 62 && W(E.Unexpected_token_Did_you_mean_or_gt, l, 1), $ === 125 && W(E.Unexpected_token_Did_you_mean_or_rbrace, l, 1), Cn($) && K === 0) K = -1;
      else {
        if (!R && Cn($) && K > 0) break;
        Ba($) || (K = l);
      }
      l++;
    }
    return x = P.substring(h, l), K === -1 ? 13 : 12;
  }
  function Nr() {
    if (wt(g)) {
      for (; l < Q; ) {
        if (V(l) === 45) {
          x += "-", l++;
          continue;
        }
        let $ = l;
        if (x += vt(), l === $) break;
      }
      return Qe();
    }
    return g;
  }
  function Vn() {
    switch (h = l, V(l)) {
      case 34:
      case 39:
        return x = ir(true), g = 11;
      default:
        return ct();
    }
  }
  function Ce() {
    return l = y = h, Vn();
  }
  function mr(R) {
    if (h = y = l, I = 0, l >= Q) return g = 1;
    for (let $ = V(l); l < Q && !Cn($) && $ !== 96; $ = ae(++l)) if (!R) {
      if ($ === 123) break;
      if ($ === 64 && l - 1 >= 0 && rs(V(l - 1)) && !(l + 1 < Q && Ba(V(l + 1)))) break;
    }
    return l === y ? L() : (x = P.substring(y, l), g = 82);
  }
  function L() {
    if (h = y = l, I = 0, l >= Q) return g = 1;
    let R = ae(l);
    switch (l += Ft(R), R) {
      case 9:
      case 11:
      case 12:
      case 32:
        for (; l < Q && rs(V(l)); ) l++;
        return g = 5;
      case 64:
        return g = 60;
      case 13:
        V(l) === 10 && l++;
      case 10:
        return I |= 1, g = 4;
      case 42:
        return g = 42;
      case 123:
        return g = 19;
      case 125:
        return g = 20;
      case 91:
        return g = 23;
      case 93:
        return g = 24;
      case 40:
        return g = 21;
      case 41:
        return g = 22;
      case 60:
        return g = 30;
      case 62:
        return g = 32;
      case 61:
        return g = 64;
      case 44:
        return g = 28;
      case 46:
        return g = 25;
      case 96:
        return g = 62;
      case 35:
        return g = 63;
      case 92:
        l--;
        let $ = Mt();
        if ($ >= 0 && Zn($, e)) return x = Bn(true) + vt(), g = Qe();
        let K = On();
        return K >= 0 && Zn(K, e) ? (l += 6, I |= 1024, x = String.fromCharCode(K) + vt(), g = Qe()) : (l++, g = 0);
    }
    if (Zn(R, e)) {
      let $ = R;
      for (; l < Q && Er($ = ae(l), e) || $ === 45; ) l += Ft($);
      return x = P.substring(y, l), $ === 92 && (x += vt()), g = Qe();
    } else return g = 0;
  }
  function se(R, $) {
    let K = l, xe = h, Se = y, we = g, be = x, We = I, Ze = R();
    return (!Ze || $) && (l = K, h = xe, y = Se, g = we, x = be, I = We), Ze;
  }
  function fe(R, $, K) {
    let xe = Q, Se = l, we = h, be = y, We = g, Ze = x, Ye = I, Ee = re;
    Dt(P, R, $);
    let Tn = K();
    return Q = xe, l = Se, h = we, y = be, g = We, x = Ze, I = Ye, re = Ee, Tn;
  }
  function Te(R) {
    return se(R, true);
  }
  function He(R) {
    return se(R, false);
  }
  function Ke() {
    return P;
  }
  function st() {
    re = void 0;
  }
  function Dt(R, $, K) {
    P = R || "", Q = K === void 0 ? P.length : $ + K, Wn($ || 0);
  }
  function Tt(R) {
    m = R;
  }
  function ut(R) {
    e = R;
  }
  function Ir(R) {
    a = R;
  }
  function hr(R) {
    ye = R;
  }
  function Mn(R) {
    de = R;
  }
  function Wn(R) {
    B.assert(R >= 0), l = R, h = R, y = R, g = 0, x = void 0, I = 0;
  }
  function Si(R) {
    he += R ? 1 : -1;
  }
}
function Gi(e, t) {
  return e.codePointAt(t);
}
function Ft(e) {
  return e >= 65536 ? 2 : e === -1 ? 0 : 1;
}
function cg(e) {
  if (B.assert(0 <= e && e <= 1114111), e <= 65535) return String.fromCharCode(e);
  let t = Math.floor((e - 65536) / 1024) + 55296, a = (e - 65536) % 1024 + 56320;
  return String.fromCharCode(t, a);
}
var lg = String.fromCodePoint ? (e) => String.fromCodePoint(e) : cg;
function Nd(e) {
  return lg(e);
}
var Id = new Map(Object.entries({ General_Category: "General_Category", gc: "General_Category", Script: "Script", sc: "Script", Script_Extensions: "Script_Extensions", scx: "Script_Extensions" })), Od = /* @__PURE__ */ new Set(["ASCII", "ASCII_Hex_Digit", "AHex", "Alphabetic", "Alpha", "Any", "Assigned", "Bidi_Control", "Bidi_C", "Bidi_Mirrored", "Bidi_M", "Case_Ignorable", "CI", "Cased", "Changes_When_Casefolded", "CWCF", "Changes_When_Casemapped", "CWCM", "Changes_When_Lowercased", "CWL", "Changes_When_NFKC_Casefolded", "CWKCF", "Changes_When_Titlecased", "CWT", "Changes_When_Uppercased", "CWU", "Dash", "Default_Ignorable_Code_Point", "DI", "Deprecated", "Dep", "Diacritic", "Dia", "Emoji", "Emoji_Component", "EComp", "Emoji_Modifier", "EMod", "Emoji_Modifier_Base", "EBase", "Emoji_Presentation", "EPres", "Extended_Pictographic", "ExtPict", "Extender", "Ext", "Grapheme_Base", "Gr_Base", "Grapheme_Extend", "Gr_Ext", "Hex_Digit", "Hex", "IDS_Binary_Operator", "IDSB", "IDS_Trinary_Operator", "IDST", "ID_Continue", "IDC", "ID_Start", "IDS", "Ideographic", "Ideo", "Join_Control", "Join_C", "Logical_Order_Exception", "LOE", "Lowercase", "Lower", "Math", "Noncharacter_Code_Point", "NChar", "Pattern_Syntax", "Pat_Syn", "Pattern_White_Space", "Pat_WS", "Quotation_Mark", "QMark", "Radical", "Regional_Indicator", "RI", "Sentence_Terminal", "STerm", "Soft_Dotted", "SD", "Terminal_Punctuation", "Term", "Unified_Ideograph", "UIdeo", "Uppercase", "Upper", "Variation_Selector", "VS", "White_Space", "space", "XID_Continue", "XIDC", "XID_Start", "XIDS"]), Md = /* @__PURE__ */ new Set(["Basic_Emoji", "Emoji_Keycap_Sequence", "RGI_Emoji_Modifier_Sequence", "RGI_Emoji_Flag_Sequence", "RGI_Emoji_Tag_Sequence", "RGI_Emoji_ZWJ_Sequence", "RGI_Emoji"]), Ra = { General_Category: /* @__PURE__ */ new Set(["C", "Other", "Cc", "Control", "cntrl", "Cf", "Format", "Cn", "Unassigned", "Co", "Private_Use", "Cs", "Surrogate", "L", "Letter", "LC", "Cased_Letter", "Ll", "Lowercase_Letter", "Lm", "Modifier_Letter", "Lo", "Other_Letter", "Lt", "Titlecase_Letter", "Lu", "Uppercase_Letter", "M", "Mark", "Combining_Mark", "Mc", "Spacing_Mark", "Me", "Enclosing_Mark", "Mn", "Nonspacing_Mark", "N", "Number", "Nd", "Decimal_Number", "digit", "Nl", "Letter_Number", "No", "Other_Number", "P", "Punctuation", "punct", "Pc", "Connector_Punctuation", "Pd", "Dash_Punctuation", "Pe", "Close_Punctuation", "Pf", "Final_Punctuation", "Pi", "Initial_Punctuation", "Po", "Other_Punctuation", "Ps", "Open_Punctuation", "S", "Symbol", "Sc", "Currency_Symbol", "Sk", "Modifier_Symbol", "Sm", "Math_Symbol", "So", "Other_Symbol", "Z", "Separator", "Zl", "Line_Separator", "Zp", "Paragraph_Separator", "Zs", "Space_Separator"]), Script: /* @__PURE__ */ new Set(["Adlm", "Adlam", "Aghb", "Caucasian_Albanian", "Ahom", "Arab", "Arabic", "Armi", "Imperial_Aramaic", "Armn", "Armenian", "Avst", "Avestan", "Bali", "Balinese", "Bamu", "Bamum", "Bass", "Bassa_Vah", "Batk", "Batak", "Beng", "Bengali", "Bhks", "Bhaiksuki", "Bopo", "Bopomofo", "Brah", "Brahmi", "Brai", "Braille", "Bugi", "Buginese", "Buhd", "Buhid", "Cakm", "Chakma", "Cans", "Canadian_Aboriginal", "Cari", "Carian", "Cham", "Cher", "Cherokee", "Chrs", "Chorasmian", "Copt", "Coptic", "Qaac", "Cpmn", "Cypro_Minoan", "Cprt", "Cypriot", "Cyrl", "Cyrillic", "Deva", "Devanagari", "Diak", "Dives_Akuru", "Dogr", "Dogra", "Dsrt", "Deseret", "Dupl", "Duployan", "Egyp", "Egyptian_Hieroglyphs", "Elba", "Elbasan", "Elym", "Elymaic", "Ethi", "Ethiopic", "Geor", "Georgian", "Glag", "Glagolitic", "Gong", "Gunjala_Gondi", "Gonm", "Masaram_Gondi", "Goth", "Gothic", "Gran", "Grantha", "Grek", "Greek", "Gujr", "Gujarati", "Guru", "Gurmukhi", "Hang", "Hangul", "Hani", "Han", "Hano", "Hanunoo", "Hatr", "Hatran", "Hebr", "Hebrew", "Hira", "Hiragana", "Hluw", "Anatolian_Hieroglyphs", "Hmng", "Pahawh_Hmong", "Hmnp", "Nyiakeng_Puachue_Hmong", "Hrkt", "Katakana_Or_Hiragana", "Hung", "Old_Hungarian", "Ital", "Old_Italic", "Java", "Javanese", "Kali", "Kayah_Li", "Kana", "Katakana", "Kawi", "Khar", "Kharoshthi", "Khmr", "Khmer", "Khoj", "Khojki", "Kits", "Khitan_Small_Script", "Knda", "Kannada", "Kthi", "Kaithi", "Lana", "Tai_Tham", "Laoo", "Lao", "Latn", "Latin", "Lepc", "Lepcha", "Limb", "Limbu", "Lina", "Linear_A", "Linb", "Linear_B", "Lisu", "Lyci", "Lycian", "Lydi", "Lydian", "Mahj", "Mahajani", "Maka", "Makasar", "Mand", "Mandaic", "Mani", "Manichaean", "Marc", "Marchen", "Medf", "Medefaidrin", "Mend", "Mende_Kikakui", "Merc", "Meroitic_Cursive", "Mero", "Meroitic_Hieroglyphs", "Mlym", "Malayalam", "Modi", "Mong", "Mongolian", "Mroo", "Mro", "Mtei", "Meetei_Mayek", "Mult", "Multani", "Mymr", "Myanmar", "Nagm", "Nag_Mundari", "Nand", "Nandinagari", "Narb", "Old_North_Arabian", "Nbat", "Nabataean", "Newa", "Nkoo", "Nko", "Nshu", "Nushu", "Ogam", "Ogham", "Olck", "Ol_Chiki", "Orkh", "Old_Turkic", "Orya", "Oriya", "Osge", "Osage", "Osma", "Osmanya", "Ougr", "Old_Uyghur", "Palm", "Palmyrene", "Pauc", "Pau_Cin_Hau", "Perm", "Old_Permic", "Phag", "Phags_Pa", "Phli", "Inscriptional_Pahlavi", "Phlp", "Psalter_Pahlavi", "Phnx", "Phoenician", "Plrd", "Miao", "Prti", "Inscriptional_Parthian", "Rjng", "Rejang", "Rohg", "Hanifi_Rohingya", "Runr", "Runic", "Samr", "Samaritan", "Sarb", "Old_South_Arabian", "Saur", "Saurashtra", "Sgnw", "SignWriting", "Shaw", "Shavian", "Shrd", "Sharada", "Sidd", "Siddham", "Sind", "Khudawadi", "Sinh", "Sinhala", "Sogd", "Sogdian", "Sogo", "Old_Sogdian", "Sora", "Sora_Sompeng", "Soyo", "Soyombo", "Sund", "Sundanese", "Sylo", "Syloti_Nagri", "Syrc", "Syriac", "Tagb", "Tagbanwa", "Takr", "Takri", "Tale", "Tai_Le", "Talu", "New_Tai_Lue", "Taml", "Tamil", "Tang", "Tangut", "Tavt", "Tai_Viet", "Telu", "Telugu", "Tfng", "Tifinagh", "Tglg", "Tagalog", "Thaa", "Thaana", "Thai", "Tibt", "Tibetan", "Tirh", "Tirhuta", "Tnsa", "Tangsa", "Toto", "Ugar", "Ugaritic", "Vaii", "Vai", "Vith", "Vithkuqi", "Wara", "Warang_Citi", "Wcho", "Wancho", "Xpeo", "Old_Persian", "Xsux", "Cuneiform", "Yezi", "Yezidi", "Yiii", "Yi", "Zanb", "Zanabazar_Square", "Zinh", "Inherited", "Qaai", "Zyyy", "Common", "Zzzz", "Unknown"]), Script_Extensions: void 0 };
Ra.Script_Extensions = Ra.Script;
function wr(e) {
  return e.start + e.length;
}
function ug(e) {
  return e.length === 0;
}
function of(e, t) {
  if (e < 0) throw new Error("start < 0");
  if (t < 0) throw new Error("length < 0");
  return { start: e, length: t };
}
function pg(e, t) {
  return of(e, t - e);
}
function K_(e) {
  return of(e.span.start, e.newLength);
}
function fg(e) {
  return ug(e.span) && e.newLength === 0;
}
function Km(e, t) {
  if (t < 0) throw new Error("newLength < 0");
  return { span: e, newLength: t };
}
Km(of(0, 0), 0);
function cf(e, t) {
  for (; e; ) {
    let a = t(e);
    if (a === "quit") return;
    if (a) return e;
    e = e.parent;
  }
}
function ml(e) {
  return (e.flags & 16) === 0;
}
function dg(e, t) {
  if (e === void 0 || ml(e)) return e;
  for (e = e.original; e; ) {
    if (ml(e)) return e;
    e = e.original;
  }
}
function Ja(e) {
  return e.length >= 2 && e.charCodeAt(0) === 95 && e.charCodeAt(1) === 95 ? "_" + e : e;
}
function cs(e) {
  let t = e;
  return t.length >= 3 && t.charCodeAt(0) === 95 && t.charCodeAt(1) === 95 && t.charCodeAt(2) === 95 ? t.substr(1) : t;
}
function Pn(e) {
  return cs(e.escapedText);
}
function Sl(e) {
  let t = Fm(e.escapedText);
  return t ? by(t, di) : void 0;
}
function Lp(e) {
  return e.valueDeclaration && Lg(e.valueDeclaration) ? Pn(e.valueDeclaration.name) : cs(e.escapedName);
}
function Zm(e) {
  let t = e.parent.parent;
  if (t) {
    if (jd(t)) return Zc(t);
    switch (t.kind) {
      case 243:
        if (t.declarationList && t.declarationList.declarations[0]) return Zc(t.declarationList.declarations[0]);
        break;
      case 244:
        let a = t.expression;
        switch (a.kind === 226 && a.operatorToken.kind === 64 && (a = a.left), a.kind) {
          case 211:
            return a.name;
          case 212:
            let o = a.argumentExpression;
            if (tt(o)) return o;
        }
        break;
      case 217:
        return Zc(t.expression);
      case 256: {
        if (jd(t.statement) || u1(t.statement)) return Zc(t.statement);
        break;
      }
    }
  }
}
function Zc(e) {
  let t = e1(e);
  return t && tt(t) ? t : void 0;
}
function mg(e) {
  return e.name || Zm(e);
}
function hg(e) {
  return !!e.name;
}
function lf(e) {
  switch (e.kind) {
    case 80:
      return e;
    case 348:
    case 341: {
      let { name: a } = e;
      if (a.kind === 166) return a.right;
      break;
    }
    case 213:
    case 226: {
      let a = e;
      switch (yf(a)) {
        case 1:
        case 4:
        case 5:
        case 3:
          return gf(a.left);
        case 7:
        case 8:
        case 9:
          return a.arguments[1];
        default:
          return;
      }
    }
    case 346:
      return mg(e);
    case 340:
      return Zm(e);
    case 277: {
      let { expression: a } = e;
      return tt(a) ? a : void 0;
    }
    case 212:
      let t = e;
      if (g1(t)) return t.argumentExpression;
  }
  return e.name;
}
function e1(e) {
  if (e !== void 0) return lf(e) || (Mf(e) || Jf(e) || bl(e) ? yg(e) : void 0);
}
function yg(e) {
  if (e.parent) {
    if (nh(e.parent) || V1(e.parent)) return e.parent.name;
    if (Zi(e.parent) && e === e.parent.right) {
      if (tt(e.parent.left)) return e.parent.left;
      if (w1(e.parent.left)) return gf(e.parent.left);
    } else if (Lf(e.parent) && tt(e.parent.name)) return e.parent.name;
  } else return;
}
function uf(e) {
  if (q2(e)) return Gr(e.modifiers, El);
}
function t1(e) {
  if (bs(e, 98303)) return Gr(e.modifiers, Ug);
}
function n1(e, t) {
  if (e.name) if (tt(e.name)) {
    let a = e.name.escapedText;
    return ls(e.parent, t).filter((o) => Fp(o) && tt(o.name) && o.name.escapedText === a);
  } else {
    let a = e.parent.parameters.indexOf(e);
    B.assert(a > -1, "Parameters should always be in their parents' parameter list");
    let o = ls(e.parent, t).filter(Fp);
    if (a < o.length) return [o[a]];
  }
  return bt;
}
function gg(e) {
  return n1(e, false);
}
function bg(e) {
  return n1(e, true);
}
function r1(e, t) {
  let a = e.name.escapedText;
  return ls(e.parent, t).filter((o) => oh(o) && o.typeParameters.some((m) => m.name.escapedText === a));
}
function vg(e) {
  return r1(e, false);
}
function Tg(e) {
  return r1(e, true);
}
function xg(e) {
  return bi(e, i6);
}
function Sg(e) {
  return Ng(e, f6);
}
function wg(e) {
  return bi(e, a6, true);
}
function kg(e) {
  return bi(e, _6, true);
}
function Eg(e) {
  return bi(e, s6, true);
}
function Ag(e) {
  return bi(e, o6, true);
}
function Cg(e) {
  return bi(e, c6, true);
}
function Dg(e) {
  return bi(e, u6, true);
}
function Pg(e) {
  let t = bi(e, Ff);
  if (t && t.typeExpression && t.typeExpression.type) return t;
}
function ls(e, t) {
  var a;
  if (!bf(e)) return bt;
  let o = (a = e.jsDoc) == null ? void 0 : a.jsDocCache;
  if (o === void 0 || t) {
    let m = k2(e, t);
    B.assert(m.length < 2 || m[0] !== m[1]), o = Am(m, (v) => sh(v) ? v.tags : v), t || (e.jsDoc ?? (e.jsDoc = []), e.jsDoc.jsDocCache = o);
  }
  return o;
}
function i1(e) {
  return ls(e, false);
}
function bi(e, t, a) {
  return km(ls(e, a), t);
}
function Ng(e, t) {
  return i1(e).filter(t);
}
function jp(e) {
  return e.kind === 80 || e.kind === 81;
}
function Ig(e) {
  return Xr(e) && !!(e.flags & 64);
}
function Og(e) {
  return Xa(e) && !!(e.flags & 64);
}
function Jd(e) {
  return Of(e) && !!(e.flags & 64);
}
function pf(e) {
  return Vf(e, 8);
}
function Mg(e) {
  return cl(e) && !!(e.flags & 64);
}
function ff(e) {
  return e >= 166;
}
function df(e) {
  return e >= 0 && e <= 165;
}
function a1(e) {
  return df(e.kind);
}
function mi(e) {
  return Cr(e, "pos") && Cr(e, "end");
}
function Jg(e) {
  return 9 <= e && e <= 15;
}
function Ld(e) {
  return 15 <= e && e <= 18;
}
function Ua(e) {
  var t;
  return tt(e) && ((t = e.emitNode) == null ? void 0 : t.autoGenerate) !== void 0;
}
function _1(e) {
  var t;
  return gi(e) && ((t = e.emitNode) == null ? void 0 : t.autoGenerate) !== void 0;
}
function Lg(e) {
  return (Va(e) || zg(e)) && gi(e.name);
}
function Wr(e) {
  switch (e) {
    case 128:
    case 129:
    case 134:
    case 87:
    case 138:
    case 90:
    case 95:
    case 103:
    case 125:
    case 123:
    case 124:
    case 148:
    case 126:
    case 147:
    case 164:
      return true;
  }
  return false;
}
function jg(e) {
  return !!(x1(e) & 31);
}
function Rg(e) {
  return jg(e) || e === 126 || e === 164 || e === 129;
}
function Ug(e) {
  return Wr(e.kind);
}
function s1(e) {
  let t = e.kind;
  return t === 80 || t === 81 || t === 11 || t === 9 || t === 167;
}
function mf(e) {
  return !!e && qg(e.kind);
}
function Bg(e) {
  switch (e) {
    case 262:
    case 174:
    case 176:
    case 177:
    case 178:
    case 218:
    case 219:
      return true;
    default:
      return false;
  }
}
function qg(e) {
  switch (e) {
    case 173:
    case 179:
    case 323:
    case 180:
    case 181:
    case 184:
    case 317:
    case 185:
      return true;
    default:
      return Bg(e);
  }
}
function vi(e) {
  return e && (e.kind === 263 || e.kind === 231);
}
function zg(e) {
  switch (e.kind) {
    case 174:
    case 177:
    case 178:
      return true;
    default:
      return false;
  }
}
function Fg(e) {
  let t = e.kind;
  return t === 303 || t === 304 || t === 305 || t === 174 || t === 177 || t === 178;
}
function o1(e) {
  return K2(e.kind);
}
function Vg(e) {
  if (e) {
    let t = e.kind;
    return t === 207 || t === 206;
  }
  return false;
}
function Wg(e) {
  let t = e.kind;
  return t === 209 || t === 210;
}
function Gg(e) {
  switch (e.kind) {
    case 260:
    case 169:
    case 208:
      return true;
  }
  return false;
}
function qa(e) {
  return c1(pf(e).kind);
}
function c1(e) {
  switch (e) {
    case 211:
    case 212:
    case 214:
    case 213:
    case 284:
    case 285:
    case 288:
    case 215:
    case 209:
    case 217:
    case 210:
    case 231:
    case 218:
    case 80:
    case 81:
    case 14:
    case 9:
    case 10:
    case 11:
    case 15:
    case 228:
    case 97:
    case 106:
    case 110:
    case 112:
    case 108:
    case 235:
    case 233:
    case 236:
    case 102:
    case 282:
      return true;
    default:
      return false;
  }
}
function Yg(e) {
  return l1(pf(e).kind);
}
function l1(e) {
  switch (e) {
    case 224:
    case 225:
    case 220:
    case 221:
    case 222:
    case 223:
    case 216:
      return true;
    default:
      return c1(e);
  }
}
function u1(e) {
  return Xg(pf(e).kind);
}
function Xg(e) {
  switch (e) {
    case 227:
    case 229:
    case 219:
    case 226:
    case 230:
    case 234:
    case 232:
    case 356:
    case 355:
    case 238:
      return true;
    default:
      return l1(e);
  }
}
function Hg(e) {
  return e === 219 || e === 208 || e === 263 || e === 231 || e === 175 || e === 176 || e === 266 || e === 306 || e === 281 || e === 262 || e === 218 || e === 177 || e === 273 || e === 271 || e === 276 || e === 264 || e === 291 || e === 174 || e === 173 || e === 267 || e === 270 || e === 274 || e === 280 || e === 169 || e === 303 || e === 172 || e === 171 || e === 178 || e === 304 || e === 265 || e === 168 || e === 260 || e === 346 || e === 338 || e === 348 || e === 202;
}
function p1(e) {
  return e === 262 || e === 282 || e === 263 || e === 264 || e === 265 || e === 266 || e === 267 || e === 272 || e === 271 || e === 278 || e === 277 || e === 270;
}
function f1(e) {
  return e === 252 || e === 251 || e === 259 || e === 246 || e === 244 || e === 242 || e === 249 || e === 250 || e === 248 || e === 245 || e === 256 || e === 253 || e === 255 || e === 257 || e === 258 || e === 243 || e === 247 || e === 254 || e === 353;
}
function jd(e) {
  return e.kind === 168 ? e.parent && e.parent.kind !== 345 || ea(e) : Hg(e.kind);
}
function $g(e) {
  let t = e.kind;
  return f1(t) || p1(t) || Qg(e);
}
function Qg(e) {
  return e.kind !== 241 || e.parent !== void 0 && (e.parent.kind === 258 || e.parent.kind === 299) ? false : !p2(e);
}
function Kg(e) {
  let t = e.kind;
  return f1(t) || p1(t) || t === 241;
}
function d1(e) {
  return e.kind >= 309 && e.kind <= 351;
}
function Zg(e) {
  return e.kind === 320 || e.kind === 319 || e.kind === 321 || n2(e) || e2(e) || r6(e) || Pl(e);
}
function e2(e) {
  return e.kind >= 327 && e.kind <= 351;
}
function el(e) {
  return e.kind === 178;
}
function tl(e) {
  return e.kind === 177;
}
function Xi(e) {
  if (!bf(e)) return false;
  let { jsDoc: t } = e;
  return !!t && t.length > 0;
}
function t2(e) {
  return !!e.initializer;
}
function wl(e) {
  return e.kind === 11 || e.kind === 15;
}
function n2(e) {
  return e.kind === 324 || e.kind === 325 || e.kind === 326;
}
function Rd(e) {
  return (e.flags & 33554432) !== 0;
}
function i2(e, t) {
  let a = e.entries();
  for (let [o, m] of a) {
    let v = t(m, o);
    if (v) return v;
  }
}
function a2(e) {
  return e.end - e.pos;
}
function m1(e) {
  return _2(e), (e.flags & 1048576) !== 0;
}
function _2(e) {
  e.flags & 2097152 || (((e.flags & 262144) !== 0 || Ht(e, m1)) && (e.flags |= 1048576), e.flags |= 2097152);
}
function hi(e) {
  for (; e && e.kind !== 307; ) e = e.parent;
  return e;
}
function Hi(e) {
  return e === void 0 ? true : e.pos === e.end && e.pos >= 0 && e.kind !== 1;
}
function Rp(e) {
  return !Hi(e);
}
function hl(e, t, a) {
  if (Hi(e)) return e.pos;
  if (d1(e) || e.kind === 12) return Ar((t ?? hi(e)).text, e.pos, false, true);
  if (a && Xi(e)) return hl(e.jsDoc[0], t);
  if (e.kind === 352) {
    t ?? (t = hi(e));
    let o = Xp(ch(e, t));
    if (o) return hl(o, t, a);
  }
  return Ar((t ?? hi(e)).text, e.pos, false, false, f2(e));
}
function Ud(e, t, a = false) {
  return is(e.text, t, a);
}
function s2(e) {
  return !!cf(e, ih);
}
function is(e, t, a = false) {
  if (Hi(t)) return "";
  let o = e.substring(a ? t.pos : Ar(e, t.pos), t.end);
  return s2(t) && (o = o.split(/\r\n|\n|\r/).map((m) => m.replace(/^\s*\*/, "").trimStart()).join(`
`)), o;
}
function za(e) {
  let t = e.emitNode;
  return t && t.flags || 0;
}
function o2(e, t, a) {
  B.assertGreaterThanOrEqual(t, 0), B.assertGreaterThanOrEqual(a, 0), B.assertLessThanOrEqual(t, e.length), B.assertLessThanOrEqual(t + a, e.length);
}
function ol(e) {
  return e.kind === 244 && e.expression.kind === 11;
}
function hf(e) {
  return !!(za(e) & 2097152);
}
function Bd(e) {
  return hf(e) && jf(e);
}
function c2(e) {
  return tt(e.name) && !e.initializer;
}
function qd(e) {
  return hf(e) && Ha(e) && Gp(e.declarationList.declarations, c2);
}
function l2(e, t) {
  let a = e.kind === 169 || e.kind === 168 || e.kind === 218 || e.kind === 219 || e.kind === 217 || e.kind === 260 || e.kind === 281 ? Yp(sg(t, e.pos), Jp(t, e.pos)) : Jp(t, e.pos);
  return Gr(a, (o) => o.end <= e.end && t.charCodeAt(o.pos + 1) === 42 && t.charCodeAt(o.pos + 2) === 42 && t.charCodeAt(o.pos + 3) !== 47);
}
function u2(e) {
  if (e) switch (e.kind) {
    case 208:
    case 306:
    case 169:
    case 303:
    case 172:
    case 171:
    case 304:
    case 260:
      return true;
  }
  return false;
}
function p2(e) {
  return e && e.kind === 241 && mf(e.parent);
}
function zd(e) {
  let t = e.kind;
  return (t === 211 || t === 212) && e.expression.kind === 108;
}
function ea(e) {
  return !!e && !!(e.flags & 524288);
}
function f2(e) {
  return !!e && !!(e.flags & 16777216);
}
function d2(e) {
  for (; yl(e, true); ) e = e.right;
  return e;
}
function m2(e) {
  return tt(e) && e.escapedText === "exports";
}
function h2(e) {
  return tt(e) && e.escapedText === "module";
}
function h1(e) {
  return (Xr(e) || y1(e)) && h2(e.expression) && ps(e) === "exports";
}
function yf(e) {
  let t = g2(e);
  return t === 5 || ea(e) ? t : 0;
}
function y2(e) {
  return ts(e.arguments) === 3 && Xr(e.expression) && tt(e.expression.expression) && Pn(e.expression.expression) === "Object" && Pn(e.expression.name) === "defineProperty" && kl(e.arguments[1]) && us(e.arguments[0], true);
}
function y1(e) {
  return Xa(e) && kl(e.argumentExpression);
}
function gs(e, t) {
  return Xr(e) && (!t && e.expression.kind === 110 || tt(e.name) && us(e.expression, true)) || g1(e, t);
}
function g1(e, t) {
  return y1(e) && (!t && e.expression.kind === 110 || xf(e.expression) || gs(e.expression, true));
}
function us(e, t) {
  return xf(e) || gs(e, t);
}
function g2(e) {
  if (Of(e)) {
    if (!y2(e)) return 0;
    let t = e.arguments[0];
    return m2(t) || h1(t) ? 8 : gs(t) && ps(t) === "prototype" ? 9 : 7;
  }
  return e.operatorToken.kind !== 64 || !w1(e.left) || b2(d2(e)) ? 0 : us(e.left.expression, true) && ps(e.left) === "prototype" && If(T2(e)) ? 6 : v2(e.left);
}
function b2(e) {
  return Qb(e) && ta(e.expression) && e.expression.text === "0";
}
function gf(e) {
  if (Xr(e)) return e.name;
  let t = vf(e.argumentExpression);
  return ta(t) || wl(t) ? t : e;
}
function ps(e) {
  let t = gf(e);
  if (t) {
    if (tt(t)) return t.escapedText;
    if (wl(t) || ta(t)) return Ja(t.text);
  }
}
function v2(e) {
  if (e.expression.kind === 110) return 4;
  if (h1(e)) return 2;
  if (us(e.expression, true)) {
    if ($2(e.expression)) return 3;
    let t = e;
    for (; !tt(t.expression); ) t = t.expression;
    let a = t.expression;
    if ((a.escapedText === "exports" || a.escapedText === "module" && ps(t) === "exports") && gs(e)) return 1;
    if (us(e, true) || Xa(e) && J2(e)) return 5;
  }
  return 0;
}
function T2(e) {
  for (; Zi(e.right); ) e = e.right;
  return e.right;
}
function x2(e) {
  return Cl(e) && Zi(e.expression) && yf(e.expression) !== 0 && Zi(e.expression.right) && (e.expression.right.operatorToken.kind === 57 || e.expression.right.operatorToken.kind === 61) ? e.expression.right.right : void 0;
}
function S2(e) {
  switch (e.kind) {
    case 243:
      let t = Up(e);
      return t && t.initializer;
    case 172:
      return e.initializer;
    case 303:
      return e.initializer;
  }
}
function Up(e) {
  return Ha(e) ? Xp(e.declarationList.declarations) : void 0;
}
function w2(e) {
  return Ti(e) && e.body && e.body.kind === 267 ? e.body : void 0;
}
function bf(e) {
  switch (e.kind) {
    case 219:
    case 226:
    case 241:
    case 252:
    case 179:
    case 296:
    case 263:
    case 231:
    case 175:
    case 176:
    case 185:
    case 180:
    case 251:
    case 259:
    case 246:
    case 212:
    case 242:
    case 1:
    case 266:
    case 306:
    case 277:
    case 278:
    case 281:
    case 244:
    case 249:
    case 250:
    case 248:
    case 262:
    case 218:
    case 184:
    case 177:
    case 80:
    case 245:
    case 272:
    case 271:
    case 181:
    case 264:
    case 317:
    case 323:
    case 256:
    case 174:
    case 173:
    case 267:
    case 202:
    case 270:
    case 210:
    case 169:
    case 217:
    case 211:
    case 303:
    case 172:
    case 171:
    case 253:
    case 240:
    case 178:
    case 304:
    case 305:
    case 255:
    case 257:
    case 258:
    case 265:
    case 168:
    case 260:
    case 243:
    case 247:
    case 254:
      return true;
    default:
      return false;
  }
}
function k2(e, t) {
  let a;
  u2(e) && t2(e) && Xi(e.initializer) && (a = Dn(a, Fd(e, e.initializer.jsDoc)));
  let o = e;
  for (; o && o.parent; ) {
    if (Xi(o) && (a = Dn(a, Fd(e, o.jsDoc))), o.kind === 169) {
      a = Dn(a, (t ? bg : gg)(o));
      break;
    }
    if (o.kind === 168) {
      a = Dn(a, (t ? Tg : vg)(o));
      break;
    }
    o = A2(o);
  }
  return a || bt;
}
function Fd(e, t) {
  let a = ly(t);
  return Am(t, (o) => {
    if (o === a) {
      let m = Gr(o.tags, (v) => E2(e, v));
      return o.tags === m ? [o] : m;
    } else return Gr(o.tags, l6);
  });
}
function E2(e, t) {
  return !(Ff(t) || d6(t)) || !t.parent || !sh(t.parent) || !Al(t.parent.parent) || t.parent.parent === e;
}
function A2(e) {
  let t = e.parent;
  if (t.kind === 303 || t.kind === 277 || t.kind === 172 || t.kind === 244 && e.kind === 211 || t.kind === 253 || w2(t) || yl(e)) return t;
  if (t.parent && (Up(t.parent) === e || yl(t))) return t.parent;
  if (t.parent && t.parent.parent && (Up(t.parent.parent) || S2(t.parent.parent) === e || x2(t.parent.parent))) return t.parent.parent;
}
function vf(e, t) {
  return Vf(e, 1);
}
function C2(e) {
  let t = D2(e);
  if (t && ea(e)) {
    let a = xg(e);
    if (a) return a.class;
  }
  return t;
}
function D2(e) {
  let t = Tf(e.heritageClauses, 96);
  return t && t.types.length > 0 ? t.types[0] : void 0;
}
function P2(e) {
  if (ea(e)) return Sg(e).map((t) => t.class);
  {
    let t = Tf(e.heritageClauses, 119);
    return t == null ? void 0 : t.types;
  }
}
function N2(e) {
  return vs(e) ? I2(e) || bt : vi(e) && Yp(Ip(C2(e)), P2(e)) || bt;
}
function I2(e) {
  let t = Tf(e.heritageClauses, 96);
  return t ? t.types : void 0;
}
function Tf(e, t) {
  if (e) {
    for (let a of e) if (a.token === t) return a;
  }
}
function di(e) {
  return 83 <= e && e <= 165;
}
function O2(e) {
  return 19 <= e && e <= 79;
}
function xp(e) {
  return di(e) || O2(e);
}
function kl(e) {
  return wl(e) || ta(e);
}
function M2(e) {
  return Y1(e) && (e.operator === 40 || e.operator === 41) && ta(e.operand);
}
function J2(e) {
  if (!(e.kind === 167 || e.kind === 212)) return false;
  let t = Xa(e) ? vf(e.argumentExpression) : e.expression;
  return !kl(t) && !M2(t);
}
function L2(e) {
  return jp(e) ? Pn(e) : th(e) ? kb(e) : e.text;
}
function La(e) {
  return fs(e.pos) || fs(e.end);
}
function Sp(e) {
  switch (e) {
    case 61:
      return 4;
    case 57:
      return 5;
    case 56:
      return 6;
    case 52:
      return 7;
    case 53:
      return 8;
    case 51:
      return 9;
    case 35:
    case 36:
    case 37:
    case 38:
      return 10;
    case 30:
    case 32:
    case 33:
    case 34:
    case 104:
    case 103:
    case 130:
    case 152:
      return 11;
    case 48:
    case 49:
    case 50:
      return 12;
    case 40:
    case 41:
      return 13;
    case 42:
    case 44:
    case 45:
      return 14;
    case 43:
      return 15;
  }
  return -1;
}
function wp(e) {
  return !!((e.templateFlags || 0) & 2048);
}
function j2(e) {
  return e && !!(P1(e) ? wp(e) : wp(e.head) || Xt(e.templateSpans, (t) => wp(t.literal)));
}
new Map(Object.entries({ "	": "\\t", "\v": "\\v", "\f": "\\f", "\b": "\\b", "\r": "\\r", "\n": "\\n", "\\": "\\\\", '"': '\\"', "'": "\\'", "`": "\\`", "\u2028": "\\u2028", "\u2029": "\\u2029", "": "\\u0085", "\r\n": "\\r\\n" }));
new Map(Object.entries({ '"': "&quot;", "'": "&apos;" }));
function R2(e) {
  return !!e && e.kind === 80 && U2(e);
}
function U2(e) {
  return e.escapedText === "this";
}
function bs(e, t) {
  return !!z2(e, t);
}
function B2(e) {
  return bs(e, 256);
}
function q2(e) {
  return bs(e, 32768);
}
function z2(e, t) {
  return V2(e) & t;
}
function F2(e, t, a) {
  return e.kind >= 0 && e.kind <= 165 ? 0 : (e.modifierFlagsCache & 536870912 || (e.modifierFlagsCache = T1(e) | 536870912), W2(e.modifierFlagsCache));
}
function V2(e) {
  return F2(e);
}
function b1(e) {
  let t = 0;
  return e.parent && !ds(e) && (ea(e) && (wg(e) && (t |= 8388608), kg(e) && (t |= 16777216), Eg(e) && (t |= 33554432), Ag(e) && (t |= 67108864), Cg(e) && (t |= 134217728)), Dg(e) && (t |= 65536)), t;
}
function W2(e) {
  return e & 65535;
}
function v1(e) {
  return e & 131071 | (e & 260046848) >>> 23;
}
function G2(e) {
  return v1(b1(e));
}
function Y2(e) {
  return T1(e) | G2(e);
}
function T1(e) {
  let t = Nl(e) ? Rn(e.modifiers) : 0;
  return (e.flags & 8 || e.kind === 80 && e.flags & 4096) && (t |= 32), t;
}
function Rn(e) {
  let t = 0;
  if (e) for (let a of e) t |= x1(a.kind);
  return t;
}
function x1(e) {
  switch (e) {
    case 126:
      return 256;
    case 125:
      return 1;
    case 124:
      return 4;
    case 123:
      return 2;
    case 128:
      return 64;
    case 129:
      return 512;
    case 95:
      return 32;
    case 138:
      return 128;
    case 87:
      return 4096;
    case 90:
      return 2048;
    case 134:
      return 1024;
    case 148:
      return 8;
    case 164:
      return 16;
    case 103:
      return 8192;
    case 147:
      return 16384;
    case 170:
      return 32768;
  }
  return 0;
}
function X2(e) {
  return e === 76 || e === 77 || e === 78;
}
function S1(e) {
  return e >= 64 && e <= 79;
}
function yl(e, t) {
  return Zi(e) && (t ? e.operatorToken.kind === 64 : S1(e.operatorToken.kind)) && qa(e.left);
}
function xf(e) {
  return e.kind === 80 || H2(e);
}
function H2(e) {
  return Xr(e) && tt(e.name) && xf(e.expression);
}
function $2(e) {
  return gs(e) && ps(e) === "prototype";
}
function kp(e) {
  return e.flags & 3899393 ? e.objectFlags : 0;
}
function Q2(e) {
  let t;
  return Ht(e, (a) => {
    Rp(a) && (t = a);
  }, (a) => {
    for (let o = a.length - 1; o >= 0; o--) if (Rp(a[o])) {
      t = a[o];
      break;
    }
  }), t;
}
function K2(e) {
  return e >= 182 && e <= 205 || e === 133 || e === 159 || e === 150 || e === 163 || e === 151 || e === 136 || e === 154 || e === 155 || e === 116 || e === 157 || e === 146 || e === 141 || e === 233 || e === 312 || e === 313 || e === 314 || e === 315 || e === 316 || e === 317 || e === 318;
}
function w1(e) {
  return e.kind === 211 || e.kind === 212;
}
function Z2(e, t) {
  this.flags = e, this.escapedName = t, this.declarations = void 0, this.valueDeclaration = void 0, this.id = 0, this.mergeId = 0, this.parent = void 0, this.members = void 0, this.exports = void 0, this.exportSymbol = void 0, this.constEnumOnlyModule = void 0, this.isReferenced = void 0, this.lastAssignmentPos = void 0, this.links = void 0;
}
function eb(e, t) {
  this.flags = t, (B.isDebugging || _l) && (this.checker = e);
}
function tb(e, t) {
  this.flags = t, B.isDebugging && (this.checker = e);
}
function Ep(e, t, a) {
  this.pos = t, this.end = a, this.kind = e, this.id = 0, this.flags = 0, this.modifierFlagsCache = 0, this.transformFlags = 0, this.parent = void 0, this.original = void 0, this.emitNode = void 0;
}
function nb(e, t, a) {
  this.pos = t, this.end = a, this.kind = e, this.id = 0, this.flags = 0, this.transformFlags = 0, this.parent = void 0, this.emitNode = void 0;
}
function rb(e, t, a) {
  this.pos = t, this.end = a, this.kind = e, this.id = 0, this.flags = 0, this.transformFlags = 0, this.parent = void 0, this.original = void 0, this.emitNode = void 0;
}
function ib(e, t, a) {
  this.fileName = e, this.text = t, this.skipTrivia = a || ((o) => o);
}
var At = { getNodeConstructor: () => Ep, getTokenConstructor: () => nb, getIdentifierConstructor: () => rb, getPrivateIdentifierConstructor: () => Ep, getSourceFileConstructor: () => Ep, getSymbolConstructor: () => Z2, getTypeConstructor: () => eb, getSignatureConstructor: () => tb, getSourceMapSourceConstructor: () => ib }, ab = [];
function _b(e) {
  Object.assign(At, e), Un(ab, (t) => t(At));
}
function sb(e, t) {
  return e.replace(/\{(\d+)\}/g, (a, o) => "" + B.checkDefined(t[+o]));
}
function ob(e) {
  return e.message;
}
function Oa(e, t, a, o, m, ...v) {
  a + o > t.length && (o = t.length - a), o2(t, a, o);
  let A = ob(m);
  return Xt(v) && (A = sb(A, v)), { file: void 0, start: a, length: o, messageText: A, category: m.category, code: m.code, reportsUnnecessary: m.reportsUnnecessary, fileName: e };
}
function cb(e) {
  return e.file === void 0 && e.start !== void 0 && e.length !== void 0 && typeof e.fileName == "string";
}
function k1(e, t) {
  let a = t.fileName || "", o = t.text.length;
  B.assertEqual(e.fileName, a), B.assertLessThanOrEqual(e.start, o), B.assertLessThanOrEqual(e.start + e.length, o);
  let m = { file: t, start: e.start, length: e.length, messageText: e.messageText, category: e.category, code: e.code, reportsUnnecessary: e.reportsUnnecessary };
  if (e.relatedInformation) {
    m.relatedInformation = [];
    for (let v of e.relatedInformation) cb(v) && v.fileName === a ? (B.assertLessThanOrEqual(v.start, o), B.assertLessThanOrEqual(v.start + v.length, o), m.relatedInformation.push(k1(v, t))) : m.relatedInformation.push(v);
  }
  return m;
}
function zi(e, t) {
  let a = [];
  for (let o of e) a.push(k1(o, t));
  return a;
}
function Wd(e) {
  return e === 4 || e === 2 || e === 1 || e === 6 ? 1 : 0;
}
function lb(e) {
  return i2(targetOptionDeclaration.type, (t, a) => t === e ? a : void 0);
}
function db(e, t) {
  return t || mb(e) || 3;
}
function mb(e) {
  switch (e.substr(e.lastIndexOf(".")).toLowerCase()) {
    case ".js":
    case ".cjs":
    case ".mjs":
      return 1;
    case ".jsx":
      return 2;
    case ".ts":
    case ".cts":
    case ".mts":
      return 3;
    case ".tsx":
      return 4;
    case ".json":
      return 6;
    default:
      return 0;
  }
}
var C1 = [[".ts", ".tsx", ".d.ts"], [".cts", ".d.cts"], [".mts", ".d.mts"]];
Em(C1);
[...C1, [".json"]];
var hb = [[".js", ".jsx"], [".mjs"], [".cjs"]];
Em(hb);
var gb = [".d.ts", ".d.cts", ".d.mts"];
function fs(e) {
  return !(e >= 0);
}
function nl(e, ...t) {
  return t.length && (e.relatedInformation || (e.relatedInformation = []), B.assert(e.relatedInformation !== bt, "Diagnostic had empty array singleton for related info, but is still being constructed!"), e.relatedInformation.push(...t)), e;
}
function bb(e) {
  let t;
  switch (e.charCodeAt(1)) {
    case 98:
    case 66:
      t = 1;
      break;
    case 111:
    case 79:
      t = 3;
      break;
    case 120:
    case 88:
      t = 4;
      break;
    default:
      let Q = e.length - 1, h = 0;
      for (; e.charCodeAt(h) === 48; ) h++;
      return e.slice(h, Q) || "0";
  }
  let a = 2, o = e.length - 1, m = (o - a) * t, v = new Uint16Array((m >>> 4) + (m & 15 ? 1 : 0));
  for (let Q = o - 1, h = 0; Q >= a; Q--, h += t) {
    let y = h >>> 4, g = e.charCodeAt(Q), I = (g <= 57 ? g - 48 : 10 + g - (g <= 70 ? 65 : 97)) << (h & 15);
    v[y] |= I;
    let re = I >>> 16;
    re && (v[y + 1] |= re);
  }
  let A = "", P = v.length - 1, l = true;
  for (; l; ) {
    let Q = 0;
    l = false;
    for (let h = P; h >= 0; h--) {
      let y = Q << 16 | v[h], g = y / 10 | 0;
      v[h] = g, Q = y - g * 10, g && !l && (P = h, l = true);
    }
    A = Q + A;
  }
  return A;
}
function vb({ negative: e, base10Value: t }) {
  return (e && t !== "0" ? "-" : "") + t;
}
function Bp(e, t) {
  return e.pos = t, e;
}
function Tb(e, t) {
  return e.end = t, e;
}
function yi(e, t, a) {
  return Tb(Bp(e, t), a);
}
function Yd(e, t, a) {
  return yi(e, t, t + a);
}
function Sf(e, t) {
  return e && t && (e.parent = t), e;
}
function xb(e, t) {
  if (!e) return e;
  return vm(e, d1(e) ? a : m), e;
  function a(v, A) {
    if (v.parent === A) return "skip";
    Sf(v, A);
  }
  function o(v) {
    if (Xi(v)) for (let A of v.jsDoc) a(A, v), vm(A, a);
  }
  function m(v, A) {
    return a(v, A) || o(v);
  }
}
function Sb(e) {
  return !!(e.flags & 262144 && e.isThisType);
}
function wb(e) {
  var t;
  return ((t = getSnippetElement(e)) == null ? void 0 : t.kind) === 0;
}
function kb(e) {
  return `${Pn(e.namespace)}:${Pn(e.name)}`;
}
var qp = ["assert", "assert/strict", "async_hooks", "buffer", "child_process", "cluster", "console", "constants", "crypto", "dgram", "diagnostics_channel", "dns", "dns/promises", "domain", "events", "fs", "fs/promises", "http", "http2", "https", "inspector", "inspector/promises", "module", "net", "os", "path", "path/posix", "path/win32", "perf_hooks", "process", "punycode", "querystring", "readline", "readline/promises", "repl", "stream", "stream/consumers", "stream/promises", "stream/web", "string_decoder", "sys", "test/mock_loader", "timers", "timers/promises", "tls", "trace_events", "tty", "url", "util", "util/types", "v8", "vm", "wasi", "worker_threads", "zlib"];
new Set(qp);
var Eb = /* @__PURE__ */ new Set(["node:sea", "node:sqlite", "node:test", "node:test/reporters"]);
/* @__PURE__ */ new Set([...qp, ...qp.map((e) => `node:${e}`), ...Eb]);
function Ab() {
  let e, t, a, o, m;
  return { createBaseSourceFileNode: v, createBaseIdentifierNode: A, createBasePrivateIdentifierNode: P, createBaseTokenNode: l, createBaseNode: Q };
  function v(h) {
    return new (m || (m = At.getSourceFileConstructor()))(h, -1, -1);
  }
  function A(h) {
    return new (a || (a = At.getIdentifierConstructor()))(h, -1, -1);
  }
  function P(h) {
    return new (o || (o = At.getPrivateIdentifierConstructor()))(h, -1, -1);
  }
  function l(h) {
    return new (t || (t = At.getTokenConstructor()))(h, -1, -1);
  }
  function Q(h) {
    return new (e || (e = At.getNodeConstructor()))(h, -1, -1);
  }
}
var Cb = { getParenthesizeLeftSideOfBinaryForOperator: (e) => gt, getParenthesizeRightSideOfBinaryForOperator: (e) => gt, parenthesizeLeftSideOfBinary: (e, t) => t, parenthesizeRightSideOfBinary: (e, t, a) => a, parenthesizeExpressionOfComputedPropertyName: gt, parenthesizeConditionOfConditionalExpression: gt, parenthesizeBranchOfConditionalExpression: gt, parenthesizeExpressionOfExportDefault: gt, parenthesizeExpressionOfNew: (e) => kr(e, qa), parenthesizeLeftSideOfAccess: (e) => kr(e, qa), parenthesizeOperandOfPostfixUnary: (e) => kr(e, qa), parenthesizeOperandOfPrefixUnary: (e) => kr(e, Yg), parenthesizeExpressionsOfCommaDelimitedList: (e) => kr(e, mi), parenthesizeExpressionForDisallowedComma: gt, parenthesizeExpressionOfExpressionStatement: gt, parenthesizeConciseBodyOfArrowFunction: gt, parenthesizeCheckTypeOfConditionalType: gt, parenthesizeExtendsTypeOfConditionalType: gt, parenthesizeConstituentTypesOfUnionType: (e) => kr(e, mi), parenthesizeConstituentTypeOfUnionType: gt, parenthesizeConstituentTypesOfIntersectionType: (e) => kr(e, mi), parenthesizeConstituentTypeOfIntersectionType: gt, parenthesizeOperandOfTypeOperator: gt, parenthesizeOperandOfReadonlyTypeOperator: gt, parenthesizeNonArrayTypeOfPostfixType: gt, parenthesizeElementTypesOfTupleType: (e) => kr(e, mi), parenthesizeElementTypeOfTupleType: gt, parenthesizeTypeOfOptionalType: gt, parenthesizeTypeArguments: (e) => e && kr(e, mi), parenthesizeLeadingTypeArgument: gt }, rl = 0;
var Db = [];
function wf(e, t) {
  let a = e & 8 ? gt : Mb, o = wd(() => e & 1 ? Cb : createParenthesizerRules(ye)), m = wd(() => e & 2 ? nullNodeConverters : createNodeConverters(ye)), v = Kn((n) => (i, _) => ua(i, n, _)), A = Kn((n) => (i) => jr(n, i)), P = Kn((n) => (i) => ni(i, n)), l = Kn((n) => () => Ho(n)), Q = Kn((n) => (i) => C_(n, i)), h = Kn((n) => (i, _) => xu(n, i, _)), y = Kn((n) => (i, _) => $o(n, i, _)), g = Kn((n) => (i, _) => Tu(n, i, _)), x = Kn((n) => (i, _) => dc(n, i, _)), I = Kn((n) => (i, _, c) => Ou(n, i, _, c)), re = Kn((n) => (i, _, c) => mc(n, i, _, c)), he = Kn((n) => (i, _, c, f) => Mu(n, i, _, c, f)), ye = { get parenthesizer() {
    return o();
  }, get converters() {
    return m();
  }, baseFactory: t, flags: e, createNodeArray: de, createNumericLiteral: V, createBigIntLiteral: oe, createStringLiteral: dt, createStringLiteralFromNode: nr, createRegularExpressionLiteral: gn, createLiteralLikeNode: rr, createIdentifier: Ge, createTempVariable: ir, createLoopVariable: Pr, createUniqueName: Ot, getGeneratedNameForNode: Bn, createPrivateIdentifier: Mt, createUniquePrivateName: Qe, getGeneratedPrivateNameForNode: qn, createToken: ct, createSuper: _t, createThis: Ut, createNull: Jt, createTrue: lt, createFalse: ar, createModifier: mt, createModifiersFromModifierFlags: vn, createQualifiedName: yt, updateQualifiedName: cn, createComputedPropertyName: nt, updateComputedPropertyName: Bt, createTypeParameterDeclaration: rn, updateTypeParameterDeclaration: _r, createParameterDeclaration: fr, updateParameterDeclaration: dr, createDecorator: zn, updateDecorator: Fn, createPropertySignature: Nr, updatePropertySignature: Vn, createPropertyDeclaration: mr, updatePropertyDeclaration: L, createMethodSignature: se, updateMethodSignature: fe, createMethodDeclaration: Te, updateMethodDeclaration: He, createConstructorDeclaration: ut, updateConstructorDeclaration: Ir, createGetAccessorDeclaration: Mn, updateGetAccessorDeclaration: Wn, createSetAccessorDeclaration: R, updateSetAccessorDeclaration: $, createCallSignature: xe, updateCallSignature: Se, createConstructSignature: we, updateConstructSignature: be, createIndexSignature: We, updateIndexSignature: Ze, createClassStaticBlockDeclaration: st, updateClassStaticBlockDeclaration: Dt, createTemplateLiteralTypeSpan: Ye, updateTemplateLiteralTypeSpan: Ee, createKeywordTypeNode: Tn, createTypePredicateNode: rt, updateTypePredicateNode: ln, createTypeReferenceNode: Zr, updateTypeReferenceNode: J, createFunctionTypeNode: qe, updateFunctionTypeNode: u, createConstructorTypeNode: Me, updateConstructorTypeNode: an, createTypeQueryNode: Pt, updateTypeQueryNode: kt, createTypeLiteralNode: Nt, updateTypeLiteralNode: qt, createArrayTypeNode: Gn, updateArrayTypeNode: wi, createTupleTypeNode: un, updateTupleTypeNode: G, createNamedTupleMember: le, updateNamedTupleMember: Fe, createOptionalTypeNode: ve, updateOptionalTypeNode: j, createRestTypeNode: ht, updateRestTypeNode: xt, createUnionTypeNode: Ul, updateUnionTypeNode: Es, createIntersectionTypeNode: Or, updateIntersectionTypeNode: Je, createConditionalTypeNode: ft, updateConditionalTypeNode: Bl, createInferTypeNode: Yn, updateInferTypeNode: ql, createImportTypeNode: sr, updateImportTypeNode: aa, createParenthesizedType: Qt, updateParenthesizedType: Ct, createThisTypeNode: D, createTypeOperatorNode: Gt, updateTypeOperatorNode: Mr, createIndexedAccessTypeNode: or, updateIndexedAccessTypeNode: Ka, createMappedTypeNode: St, updateMappedTypeNode: jt, createLiteralTypeNode: ei, updateLiteralTypeNode: yr, createTemplateLiteralType: Wt, updateTemplateLiteralType: zl, createObjectBindingPattern: As, updateObjectBindingPattern: Fl, createArrayBindingPattern: Jr, updateArrayBindingPattern: Vl, createBindingElement: _a, updateBindingElement: ti, createArrayLiteralExpression: Za, updateArrayLiteralExpression: Cs, createObjectLiteralExpression: ki, updateObjectLiteralExpression: Wl, createPropertyAccessExpression: e & 4 ? (n, i) => setEmitFlags(cr(n, i), 262144) : cr, updatePropertyAccessExpression: Gl, createPropertyAccessChain: e & 4 ? (n, i, _) => setEmitFlags(Ei(n, i, _), 262144) : Ei, updatePropertyAccessChain: sa, createElementAccessExpression: Ai, updateElementAccessExpression: Yl, createElementAccessChain: Ns, updateElementAccessChain: e_, createCallExpression: Ci, updateCallExpression: oa, createCallChain: t_, updateCallChain: Os, createNewExpression: xn, updateNewExpression: n_, createTaggedTemplateExpression: ca, updateTaggedTemplateExpression: Ms, createTypeAssertion: Js, updateTypeAssertion: Ls, createParenthesizedExpression: r_, updateParenthesizedExpression: js, createFunctionExpression: i_, updateFunctionExpression: Rs, createArrowFunction: a_, updateArrowFunction: Us, createDeleteExpression: Bs, updateDeleteExpression: qs, createTypeOfExpression: la, updateTypeOfExpression: fn, createVoidExpression: __, updateVoidExpression: lr, createAwaitExpression: zs, updateAwaitExpression: Lr, createPrefixUnaryExpression: jr, updatePrefixUnaryExpression: Xl, createPostfixUnaryExpression: ni, updatePostfixUnaryExpression: Hl, createBinaryExpression: ua, updateBinaryExpression: $l, createConditionalExpression: Vs, updateConditionalExpression: Ws, createTemplateExpression: Gs, updateTemplateExpression: Xn, createTemplateHead: Xs, createTemplateMiddle: pa, createTemplateTail: s_, createNoSubstitutionTemplateLiteral: Kl, createTemplateLiteralLikeNode: ii, createYieldExpression: o_, updateYieldExpression: Zl, createSpreadElement: Hs, updateSpreadElement: eu, createClassExpression: $s, updateClassExpression: c_, createOmittedExpression: l_, createExpressionWithTypeArguments: Qs, updateExpressionWithTypeArguments: Ks, createAsExpression: dn, updateAsExpression: fa, createNonNullExpression: Zs, updateNonNullExpression: eo, createSatisfiesExpression: u_, updateSatisfiesExpression: to, createNonNullChain: p_, updateNonNullChain: Jn, createMetaProperty: no, updateMetaProperty: f_, createTemplateSpan: Hn, updateTemplateSpan: da, createSemicolonClassElement: ro, createBlock: Rr, updateBlock: tu, createVariableStatement: d_, updateVariableStatement: io, createEmptyStatement: ao, createExpressionStatement: Pi, updateExpressionStatement: _o, createIfStatement: so, updateIfStatement: oo, createDoStatement: co, updateDoStatement: lo, createWhileStatement: uo, updateWhileStatement: nu, createForStatement: po, updateForStatement: fo, createForInStatement: m_, updateForInStatement: ru, createForOfStatement: mo, updateForOfStatement: iu, createContinueStatement: ho, updateContinueStatement: au, createBreakStatement: h_, updateBreakStatement: yo, createReturnStatement: y_, updateReturnStatement: _u, createWithStatement: g_, updateWithStatement: go, createSwitchStatement: b_, updateSwitchStatement: ai, createLabeledStatement: bo, updateLabeledStatement: vo, createThrowStatement: To, updateThrowStatement: su, createTryStatement: xo, updateTryStatement: ou, createDebuggerStatement: So, createVariableDeclaration: ma, updateVariableDeclaration: wo, createVariableDeclarationList: v_, updateVariableDeclarationList: cu, createFunctionDeclaration: ko, updateFunctionDeclaration: T_, createClassDeclaration: Eo, updateClassDeclaration: ha, createInterfaceDeclaration: Ao, updateInterfaceDeclaration: Co, createTypeAliasDeclaration: ot, updateTypeAliasDeclaration: gr, createEnumDeclaration: x_, updateEnumDeclaration: br, createModuleDeclaration: Do, updateModuleDeclaration: Et, createModuleBlock: vr, updateModuleBlock: zt, createCaseBlock: Po, updateCaseBlock: uu, createNamespaceExportDeclaration: No, updateNamespaceExportDeclaration: Io, createImportEqualsDeclaration: Oo, updateImportEqualsDeclaration: Mo, createImportDeclaration: Jo, updateImportDeclaration: Lo, createImportClause: jo, updateImportClause: Ro, createAssertClause: S_, updateAssertClause: fu, createAssertEntry: Ni, updateAssertEntry: Uo, createImportTypeAssertionContainer: w_, updateImportTypeAssertionContainer: Bo, createImportAttributes: qo, updateImportAttributes: k_, createImportAttribute: zo, updateImportAttribute: Fo, createNamespaceImport: Vo, updateNamespaceImport: du, createNamespaceExport: Wo, updateNamespaceExport: mu, createNamedImports: Go, updateNamedImports: Yo, createImportSpecifier: Tr, updateImportSpecifier: hu, createExportAssignment: ya, updateExportAssignment: Ii, createExportDeclaration: ga, updateExportDeclaration: Xo, createNamedExports: E_, updateNamedExports: yu, createExportSpecifier: ba, updateExportSpecifier: gu, createMissingDeclaration: bu, createExternalModuleReference: A_, updateExternalModuleReference: vu, get createJSDocAllType() {
    return l(312);
  }, get createJSDocUnknownType() {
    return l(313);
  }, get createJSDocNonNullableType() {
    return y(315);
  }, get updateJSDocNonNullableType() {
    return g(315);
  }, get createJSDocNullableType() {
    return y(314);
  }, get updateJSDocNullableType() {
    return g(314);
  }, get createJSDocOptionalType() {
    return Q(316);
  }, get updateJSDocOptionalType() {
    return h(316);
  }, get createJSDocVariadicType() {
    return Q(318);
  }, get updateJSDocVariadicType() {
    return h(318);
  }, get createJSDocNamepathType() {
    return Q(319);
  }, get updateJSDocNamepathType() {
    return h(319);
  }, createJSDocFunctionType: Qo, updateJSDocFunctionType: Su, createJSDocTypeLiteral: Ko, updateJSDocTypeLiteral: wu, createJSDocTypeExpression: Zo, updateJSDocTypeExpression: D_, createJSDocSignature: ec, updateJSDocSignature: ku, createJSDocTemplateTag: P_, updateJSDocTemplateTag: tc, createJSDocTypedefTag: va, updateJSDocTypedefTag: Eu, createJSDocParameterTag: N_, updateJSDocParameterTag: Au, createJSDocPropertyTag: nc, updateJSDocPropertyTag: rc, createJSDocCallbackTag: ic, updateJSDocCallbackTag: ac, createJSDocOverloadTag: _c, updateJSDocOverloadTag: I_, createJSDocAugmentsTag: O_, updateJSDocAugmentsTag: Mi, createJSDocImplementsTag: sc, updateJSDocImplementsTag: Iu, createJSDocSeeTag: Br, updateJSDocSeeTag: Ta, createJSDocImportTag: gc, updateJSDocImportTag: bc, createJSDocNameReference: oc, updateJSDocNameReference: Cu, createJSDocMemberName: cc, updateJSDocMemberName: Du, createJSDocLink: lc, updateJSDocLink: uc, createJSDocLinkCode: pc, updateJSDocLinkCode: Pu, createJSDocLinkPlain: fc, updateJSDocLinkPlain: Nu, get createJSDocTypeTag() {
    return re(344);
  }, get updateJSDocTypeTag() {
    return he(344);
  }, get createJSDocReturnTag() {
    return re(342);
  }, get updateJSDocReturnTag() {
    return he(342);
  }, get createJSDocThisTag() {
    return re(343);
  }, get updateJSDocThisTag() {
    return he(343);
  }, get createJSDocAuthorTag() {
    return x(330);
  }, get updateJSDocAuthorTag() {
    return I(330);
  }, get createJSDocClassTag() {
    return x(332);
  }, get updateJSDocClassTag() {
    return I(332);
  }, get createJSDocPublicTag() {
    return x(333);
  }, get updateJSDocPublicTag() {
    return I(333);
  }, get createJSDocPrivateTag() {
    return x(334);
  }, get updateJSDocPrivateTag() {
    return I(334);
  }, get createJSDocProtectedTag() {
    return x(335);
  }, get updateJSDocProtectedTag() {
    return I(335);
  }, get createJSDocReadonlyTag() {
    return x(336);
  }, get updateJSDocReadonlyTag() {
    return I(336);
  }, get createJSDocOverrideTag() {
    return x(337);
  }, get updateJSDocOverrideTag() {
    return I(337);
  }, get createJSDocDeprecatedTag() {
    return x(331);
  }, get updateJSDocDeprecatedTag() {
    return I(331);
  }, get createJSDocThrowsTag() {
    return re(349);
  }, get updateJSDocThrowsTag() {
    return he(349);
  }, get createJSDocSatisfiesTag() {
    return re(350);
  }, get updateJSDocSatisfiesTag() {
    return he(350);
  }, createJSDocEnumTag: yc, updateJSDocEnumTag: M_, createJSDocUnknownTag: hc, updateJSDocUnknownTag: Ju, createJSDocText: J_, updateJSDocText: Lu, createJSDocComment: Ji, updateJSDocComment: vc, createJsxElement: Tc, updateJsxElement: ju, createJsxSelfClosingElement: xc, updateJsxSelfClosingElement: L_, createJsxOpeningElement: j_, updateJsxOpeningElement: Sc, createJsxClosingElement: xa, updateJsxClosingElement: Kt, createJsxFragment: R_, createJsxText: Sa, updateJsxText: kc, createJsxOpeningFragment: Ru, createJsxJsxClosingFragment: Uu, updateJsxFragment: wc, createJsxAttribute: Ec, updateJsxAttribute: wa, createJsxAttributes: Ac, updateJsxAttributes: Bu, createJsxSpreadAttribute: Cc, updateJsxSpreadAttribute: qu, createJsxExpression: ka, updateJsxExpression: Li, createJsxNamespacedName: Dc, updateJsxNamespacedName: U_, createCaseClause: B_, updateCaseClause: zu, createDefaultClause: _i, updateDefaultClause: Pc, createHeritageClause: Nc, updateHeritageClause: Fu, createCatchClause: q_, updateCatchClause: Ic, createPropertyAssignment: Ea, updatePropertyAssignment: qr, createShorthandPropertyAssignment: Oc, updateShorthandPropertyAssignment: Wu, createSpreadAssignment: z_, updateSpreadAssignment: Mc, createEnumMember: wn, updateEnumMember: Jc, createSourceFile: Yu, updateSourceFile: $u, createRedirectedSourceFile: Lc, createBundle: F_, updateBundle: Qu, createSyntheticExpression: Ku, createSyntaxList: Ca, createNotEmittedStatement: Rc, createNotEmittedTypeElement: Zu, createPartiallyEmittedExpression: Uc, updatePartiallyEmittedExpression: Bc, createCommaListExpression: V_, updateCommaListExpression: qc, createSyntheticReferenceExpression: W_, updateSyntheticReferenceExpression: zc, cloneNode: G_, get createComma() {
    return v(28);
  }, get createAssignment() {
    return v(64);
  }, get createLogicalOr() {
    return v(57);
  }, get createLogicalAnd() {
    return v(56);
  }, get createBitwiseOr() {
    return v(52);
  }, get createBitwiseXor() {
    return v(53);
  }, get createBitwiseAnd() {
    return v(51);
  }, get createStrictEquality() {
    return v(37);
  }, get createStrictInequality() {
    return v(38);
  }, get createEquality() {
    return v(35);
  }, get createInequality() {
    return v(36);
  }, get createLessThan() {
    return v(30);
  }, get createLessThanEquals() {
    return v(33);
  }, get createGreaterThan() {
    return v(32);
  }, get createGreaterThanEquals() {
    return v(34);
  }, get createLeftShift() {
    return v(48);
  }, get createRightShift() {
    return v(49);
  }, get createUnsignedRightShift() {
    return v(50);
  }, get createAdd() {
    return v(40);
  }, get createSubtract() {
    return v(41);
  }, get createMultiply() {
    return v(42);
  }, get createDivide() {
    return v(44);
  }, get createModulo() {
    return v(45);
  }, get createExponent() {
    return v(43);
  }, get createPrefixPlus() {
    return A(40);
  }, get createPrefixMinus() {
    return A(41);
  }, get createPrefixIncrement() {
    return A(46);
  }, get createPrefixDecrement() {
    return A(47);
  }, get createBitwiseNot() {
    return A(55);
  }, get createLogicalNot() {
    return A(54);
  }, get createPostfixIncrement() {
    return P(46);
  }, get createPostfixDecrement() {
    return P(47);
  }, createImmediatelyInvokedFunctionExpression: rp, createImmediatelyInvokedArrowFunction: ip, createVoidZero: si, createExportDefault: Wc, createExternalModuleExport: ap, createTypeCheck: Y_, createIsNotTypeCheck: _p, createMethodCall: zr, createGlobalMethodCall: ji, createFunctionBindCall: sp, createFunctionCallCall: op, createFunctionApplyCall: cp, createArraySliceCall: Ri, createArrayConcatCall: lp, createObjectDefinePropertyCall: X_, createObjectGetOwnPropertyDescriptorCall: oi, createReflectGetCall: Gc, createReflectSetCall: up, createPropertyDescriptor: Yc, createCallBinding: Hc, createAssignmentTargetWrapper: s, inlineExpressions: p, getInternalName: b, getLocalName: S, getExportName: N, getDeclarationName: H, getNamespaceMemberName: _e, getExternalModuleOrNamespaceExportName: Z, restoreOuterExpressions: Xc, restoreEnclosingLabel: H_, createUseStrictPrologue: Le, copyPrologue: ee, copyStandardPrologue: je, copyCustomPrologue: Ae, ensureUseStrict: Yt, liftToBlock: mn, mergeLexicalEnvironment: ur, replaceModifiers: Ln, replaceDecoratorsAndModifiers: Fr, replacePropertyName: dp };
  return Un(Db, (n) => n(ye)), ye;
  function de(n, i) {
    if (n === void 0 || n === bt) n = [];
    else if (mi(n)) {
      if (i === void 0 || n.hasTrailingComma === i) return n.transformFlags === void 0 && Hd(n), B.attachNodeArrayDebugInfo(n), n;
      let f = n.slice();
      return f.pos = n.pos, f.end = n.end, f.hasTrailingComma = i, f.transformFlags = n.transformFlags, B.attachNodeArrayDebugInfo(f), f;
    }
    let _ = n.length, c = _ >= 1 && _ <= 4 ? n.slice() : n;
    return c.pos = -1, c.end = -1, c.hasTrailingComma = !!i, c.transformFlags = 0, Hd(c), B.attachNodeArrayDebugInfo(c), c;
  }
  function M(n) {
    return t.createBaseNode(n);
  }
  function ae(n) {
    let i = M(n);
    return i.symbol = void 0, i.localSymbol = void 0, i;
  }
  function Oe(n, i) {
    return n !== i && (n.typeArguments = i.typeArguments), q(n, i);
  }
  function V(n, i = 0) {
    let _ = typeof n == "number" ? n + "" : n;
    B.assert(_.charCodeAt(0) !== 45, "Negative numbers should be created in combination with createPrefixUnaryExpression");
    let c = ae(9);
    return c.text = _, c.numericLiteralFlags = i, i & 384 && (c.transformFlags |= 1024), c;
  }
  function oe(n) {
    let i = $t(10);
    return i.text = typeof n == "string" ? n : vb(n) + "n", i.transformFlags |= 32, i;
  }
  function W(n, i) {
    let _ = ae(11);
    return _.text = n, _.singleQuote = i, _;
  }
  function dt(n, i, _) {
    let c = W(n, i);
    return c.hasExtendedUnicodeEscape = _, _ && (c.transformFlags |= 1024), c;
  }
  function nr(n) {
    let i = W(L2(n), void 0);
    return i.textSourceNode = n, i;
  }
  function gn(n) {
    let i = $t(14);
    return i.text = n, i;
  }
  function rr(n, i) {
    switch (n) {
      case 9:
        return V(i, 0);
      case 10:
        return oe(i);
      case 11:
        return dt(i, void 0);
      case 12:
        return Sa(i, false);
      case 13:
        return Sa(i, true);
      case 14:
        return gn(i);
      case 15:
        return ii(n, i, void 0, 0);
    }
  }
  function bn(n) {
    let i = t.createBaseIdentifierNode(80);
    return i.escapedText = n, i.jsDoc = void 0, i.flowNode = void 0, i.symbol = void 0, i;
  }
  function In(n, i, _, c) {
    let f = bn(Ja(n));
    return setIdentifierAutoGenerate(f, { flags: i, id: rl, prefix: _, suffix: c }), rl++, f;
  }
  function Ge(n, i, _) {
    i === void 0 && n && (i = Fm(n)), i === 80 && (i = void 0);
    let c = bn(Ja(n));
    return _ && (c.flags |= 256), c.escapedText === "await" && (c.transformFlags |= 67108864), c.flags & 256 && (c.transformFlags |= 1024), c;
  }
  function ir(n, i, _, c) {
    let f = 1;
    i && (f |= 8);
    let w = In("", f, _, c);
    return n && n(w), w;
  }
  function Pr(n) {
    let i = 2;
    return n && (i |= 8), In("", i, void 0, void 0);
  }
  function Ot(n, i = 0, _, c) {
    return B.assert(!(i & 7), "Argument out of range: flags"), B.assert((i & 48) !== 32, "GeneratedIdentifierFlags.FileLevel cannot be set without also setting GeneratedIdentifierFlags.Optimistic"), In(n, 3 | i, _, c);
  }
  function Bn(n, i = 0, _, c) {
    B.assert(!(i & 7), "Argument out of range: flags");
    let f = n ? jp(n) ? Vp(false, _, n, c, Pn) : `generated@${getNodeId(n)}` : "";
    (_ || c) && (i |= 16);
    let w = In(f, 4 | i, _, c);
    return w.original = n, w;
  }
  function On(n) {
    let i = t.createBasePrivateIdentifierNode(81);
    return i.escapedText = n, i.transformFlags |= 16777216, i;
  }
  function Mt(n) {
    return ul(n, "#") || B.fail("First character of private identifier must be #: " + n), On(Ja(n));
  }
  function vt(n, i, _, c) {
    let f = On(Ja(n));
    return setIdentifierAutoGenerate(f, { flags: i, id: rl, prefix: _, suffix: c }), rl++, f;
  }
  function Qe(n, i, _) {
    n && !ul(n, "#") && B.fail("First character of private identifier must be #: " + n);
    let c = 8 | (n ? 3 : 1);
    return vt(n ?? "", c, i, _);
  }
  function qn(n, i, _) {
    let c = jp(n) ? Vp(true, i, n, _, Pn) : `#generated@${getNodeId(n)}`, w = vt(c, 4 | (i || _ ? 16 : 0), i, _);
    return w.original = n, w;
  }
  function $t(n) {
    return t.createBaseTokenNode(n);
  }
  function ct(n) {
    B.assert(n >= 0 && n <= 165, "Invalid token"), B.assert(n <= 15 || n >= 18, "Invalid token. Use 'createTemplateLiteralLikeNode' to create template literals."), B.assert(n <= 9 || n >= 15, "Invalid token. Use 'createLiteralLikeNode' to create literals."), B.assert(n !== 80, "Invalid token. Use 'createIdentifier' to create identifiers");
    let i = $t(n), _ = 0;
    switch (n) {
      case 134:
        _ = 384;
        break;
      case 160:
        _ = 4;
        break;
      case 125:
      case 123:
      case 124:
      case 148:
      case 128:
      case 138:
      case 87:
      case 133:
      case 150:
      case 163:
      case 146:
      case 151:
      case 103:
      case 147:
      case 164:
      case 154:
      case 136:
      case 155:
      case 116:
      case 159:
      case 157:
        _ = 1;
        break;
      case 108:
        _ = 134218752, i.flowNode = void 0;
        break;
      case 126:
        _ = 1024;
        break;
      case 129:
        _ = 16777216;
        break;
      case 110:
        _ = 16384, i.flowNode = void 0;
        break;
    }
    return _ && (i.transformFlags |= _), i;
  }
  function _t() {
    return ct(108);
  }
  function Ut() {
    return ct(110);
  }
  function Jt() {
    return ct(106);
  }
  function lt() {
    return ct(112);
  }
  function ar() {
    return ct(97);
  }
  function mt(n) {
    return ct(n);
  }
  function vn(n) {
    let i = [];
    return n & 32 && i.push(mt(95)), n & 128 && i.push(mt(138)), n & 2048 && i.push(mt(90)), n & 4096 && i.push(mt(87)), n & 1 && i.push(mt(125)), n & 2 && i.push(mt(123)), n & 4 && i.push(mt(124)), n & 64 && i.push(mt(128)), n & 256 && i.push(mt(126)), n & 16 && i.push(mt(164)), n & 8 && i.push(mt(148)), n & 512 && i.push(mt(129)), n & 1024 && i.push(mt(134)), n & 8192 && i.push(mt(103)), n & 16384 && i.push(mt(147)), i.length ? i : void 0;
  }
  function yt(n, i) {
    let _ = M(166);
    return _.left = n, _.right = et(i), _.transformFlags |= z(_.left) | ja(_.right), _.flowNode = void 0, _;
  }
  function cn(n, i, _) {
    return n.left !== i || n.right !== _ ? q(yt(i, _), n) : n;
  }
  function nt(n) {
    let i = M(167);
    return i.expression = o().parenthesizeExpressionOfComputedPropertyName(n), i.transformFlags |= z(i.expression) | 1024 | 131072, i;
  }
  function Bt(n, i) {
    return n.expression !== i ? q(nt(i), n) : n;
  }
  function rn(n, i, _, c) {
    let f = ae(168);
    return f.modifiers = De(n), f.name = et(i), f.constraint = _, f.default = c, f.transformFlags = 1, f.expression = void 0, f.jsDoc = void 0, f;
  }
  function _r(n, i, _, c, f) {
    return n.modifiers !== i || n.name !== _ || n.constraint !== c || n.default !== f ? q(rn(i, _, c, f), n) : n;
  }
  function fr(n, i, _, c, f, w) {
    let F = ae(169);
    return F.modifiers = De(n), F.dotDotDotToken = i, F.name = et(_), F.questionToken = c, F.type = f, F.initializer = Da(w), R2(F.name) ? F.transformFlags = 1 : F.transformFlags = ke(F.modifiers) | z(F.dotDotDotToken) | jn(F.name) | z(F.questionToken) | z(F.initializer) | (F.questionToken ?? F.type ? 1 : 0) | (F.dotDotDotToken ?? F.initializer ? 1024 : 0) | (Rn(F.modifiers) & 31 ? 8192 : 0), F.jsDoc = void 0, F;
  }
  function dr(n, i, _, c, f, w, F) {
    return n.modifiers !== i || n.dotDotDotToken !== _ || n.name !== c || n.questionToken !== f || n.type !== w || n.initializer !== F ? q(fr(i, _, c, f, w, F), n) : n;
  }
  function zn(n) {
    let i = M(170);
    return i.expression = o().parenthesizeLeftSideOfAccess(n, false), i.transformFlags |= z(i.expression) | 1 | 8192 | 33554432, i;
  }
  function Fn(n, i) {
    return n.expression !== i ? q(zn(i), n) : n;
  }
  function Nr(n, i, _, c) {
    let f = ae(171);
    return f.modifiers = De(n), f.name = et(i), f.type = c, f.questionToken = _, f.transformFlags = 1, f.initializer = void 0, f.jsDoc = void 0, f;
  }
  function Vn(n, i, _, c, f) {
    return n.modifiers !== i || n.name !== _ || n.questionToken !== c || n.type !== f ? Ce(Nr(i, _, c, f), n) : n;
  }
  function Ce(n, i) {
    return n !== i && (n.initializer = i.initializer), q(n, i);
  }
  function mr(n, i, _, c, f) {
    let w = ae(172);
    w.modifiers = De(n), w.name = et(i), w.questionToken = _ && Qd(_) ? _ : void 0, w.exclamationToken = _ && $d(_) ? _ : void 0, w.type = c, w.initializer = Da(f);
    let F = w.flags & 33554432 || Rn(w.modifiers) & 128;
    return w.transformFlags = ke(w.modifiers) | jn(w.name) | z(w.initializer) | (F || w.questionToken || w.exclamationToken || w.type ? 1 : 0) | (kf(w.name) || Rn(w.modifiers) & 256 && w.initializer ? 8192 : 0) | 16777216, w.jsDoc = void 0, w;
  }
  function L(n, i, _, c, f, w) {
    return n.modifiers !== i || n.name !== _ || n.questionToken !== (c !== void 0 && Qd(c) ? c : void 0) || n.exclamationToken !== (c !== void 0 && $d(c) ? c : void 0) || n.type !== f || n.initializer !== w ? q(mr(i, _, c, f, w), n) : n;
  }
  function se(n, i, _, c, f, w) {
    let F = ae(173);
    return F.modifiers = De(n), F.name = et(i), F.questionToken = _, F.typeParameters = De(c), F.parameters = De(f), F.type = w, F.transformFlags = 1, F.jsDoc = void 0, F.locals = void 0, F.nextContainer = void 0, F.typeArguments = void 0, F;
  }
  function fe(n, i, _, c, f, w, F) {
    return n.modifiers !== i || n.name !== _ || n.questionToken !== c || n.typeParameters !== f || n.parameters !== w || n.type !== F ? Oe(se(i, _, c, f, w, F), n) : n;
  }
  function Te(n, i, _, c, f, w, F, pe) {
    let Re = ae(174);
    if (Re.modifiers = De(n), Re.asteriskToken = i, Re.name = et(_), Re.questionToken = c, Re.exclamationToken = void 0, Re.typeParameters = De(f), Re.parameters = de(w), Re.type = F, Re.body = pe, !Re.body) Re.transformFlags = 1;
    else {
      let en = Rn(Re.modifiers) & 1024, kn = !!Re.asteriskToken, $n = en && kn;
      Re.transformFlags = ke(Re.modifiers) | z(Re.asteriskToken) | jn(Re.name) | z(Re.questionToken) | ke(Re.typeParameters) | ke(Re.parameters) | z(Re.type) | z(Re.body) & -67108865 | ($n ? 128 : en ? 256 : kn ? 2048 : 0) | (Re.questionToken || Re.typeParameters || Re.type ? 1 : 0) | 1024;
    }
    return Re.typeArguments = void 0, Re.jsDoc = void 0, Re.locals = void 0, Re.nextContainer = void 0, Re.flowNode = void 0, Re.endFlowNode = void 0, Re.returnFlowNode = void 0, Re;
  }
  function He(n, i, _, c, f, w, F, pe, Re) {
    return n.modifiers !== i || n.asteriskToken !== _ || n.name !== c || n.questionToken !== f || n.typeParameters !== w || n.parameters !== F || n.type !== pe || n.body !== Re ? Ke(Te(i, _, c, f, w, F, pe, Re), n) : n;
  }
  function Ke(n, i) {
    return n !== i && (n.exclamationToken = i.exclamationToken), q(n, i);
  }
  function st(n) {
    let i = ae(175);
    return i.body = n, i.transformFlags = z(n) | 16777216, i.modifiers = void 0, i.jsDoc = void 0, i.locals = void 0, i.nextContainer = void 0, i.endFlowNode = void 0, i.returnFlowNode = void 0, i;
  }
  function Dt(n, i) {
    return n.body !== i ? Tt(st(i), n) : n;
  }
  function Tt(n, i) {
    return n !== i && (n.modifiers = i.modifiers), q(n, i);
  }
  function ut(n, i, _) {
    let c = ae(176);
    return c.modifiers = De(n), c.parameters = de(i), c.body = _, c.body ? c.transformFlags = ke(c.modifiers) | ke(c.parameters) | z(c.body) & -67108865 | 1024 : c.transformFlags = 1, c.typeParameters = void 0, c.type = void 0, c.typeArguments = void 0, c.jsDoc = void 0, c.locals = void 0, c.nextContainer = void 0, c.endFlowNode = void 0, c.returnFlowNode = void 0, c;
  }
  function Ir(n, i, _, c) {
    return n.modifiers !== i || n.parameters !== _ || n.body !== c ? hr(ut(i, _, c), n) : n;
  }
  function hr(n, i) {
    return n !== i && (n.typeParameters = i.typeParameters, n.type = i.type), Oe(n, i);
  }
  function Mn(n, i, _, c, f) {
    let w = ae(177);
    return w.modifiers = De(n), w.name = et(i), w.parameters = de(_), w.type = c, w.body = f, w.body ? w.transformFlags = ke(w.modifiers) | jn(w.name) | ke(w.parameters) | z(w.type) | z(w.body) & -67108865 | (w.type ? 1 : 0) : w.transformFlags = 1, w.typeArguments = void 0, w.typeParameters = void 0, w.jsDoc = void 0, w.locals = void 0, w.nextContainer = void 0, w.flowNode = void 0, w.endFlowNode = void 0, w.returnFlowNode = void 0, w;
  }
  function Wn(n, i, _, c, f, w) {
    return n.modifiers !== i || n.name !== _ || n.parameters !== c || n.type !== f || n.body !== w ? Si(Mn(i, _, c, f, w), n) : n;
  }
  function Si(n, i) {
    return n !== i && (n.typeParameters = i.typeParameters), Oe(n, i);
  }
  function R(n, i, _, c) {
    let f = ae(178);
    return f.modifiers = De(n), f.name = et(i), f.parameters = de(_), f.body = c, f.body ? f.transformFlags = ke(f.modifiers) | jn(f.name) | ke(f.parameters) | z(f.body) & -67108865 | (f.type ? 1 : 0) : f.transformFlags = 1, f.typeArguments = void 0, f.typeParameters = void 0, f.type = void 0, f.jsDoc = void 0, f.locals = void 0, f.nextContainer = void 0, f.flowNode = void 0, f.endFlowNode = void 0, f.returnFlowNode = void 0, f;
  }
  function $(n, i, _, c, f) {
    return n.modifiers !== i || n.name !== _ || n.parameters !== c || n.body !== f ? K(R(i, _, c, f), n) : n;
  }
  function K(n, i) {
    return n !== i && (n.typeParameters = i.typeParameters, n.type = i.type), Oe(n, i);
  }
  function xe(n, i, _) {
    let c = ae(179);
    return c.typeParameters = De(n), c.parameters = De(i), c.type = _, c.transformFlags = 1, c.jsDoc = void 0, c.locals = void 0, c.nextContainer = void 0, c.typeArguments = void 0, c;
  }
  function Se(n, i, _, c) {
    return n.typeParameters !== i || n.parameters !== _ || n.type !== c ? Oe(xe(i, _, c), n) : n;
  }
  function we(n, i, _) {
    let c = ae(180);
    return c.typeParameters = De(n), c.parameters = De(i), c.type = _, c.transformFlags = 1, c.jsDoc = void 0, c.locals = void 0, c.nextContainer = void 0, c.typeArguments = void 0, c;
  }
  function be(n, i, _, c) {
    return n.typeParameters !== i || n.parameters !== _ || n.type !== c ? Oe(we(i, _, c), n) : n;
  }
  function We(n, i, _) {
    let c = ae(181);
    return c.modifiers = De(n), c.parameters = De(i), c.type = _, c.transformFlags = 1, c.jsDoc = void 0, c.locals = void 0, c.nextContainer = void 0, c.typeArguments = void 0, c;
  }
  function Ze(n, i, _, c) {
    return n.parameters !== _ || n.type !== c || n.modifiers !== i ? Oe(We(i, _, c), n) : n;
  }
  function Ye(n, i) {
    let _ = M(204);
    return _.type = n, _.literal = i, _.transformFlags = 1, _;
  }
  function Ee(n, i, _) {
    return n.type !== i || n.literal !== _ ? q(Ye(i, _), n) : n;
  }
  function Tn(n) {
    return ct(n);
  }
  function rt(n, i, _) {
    let c = M(182);
    return c.assertsModifier = n, c.parameterName = et(i), c.type = _, c.transformFlags = 1, c;
  }
  function ln(n, i, _, c) {
    return n.assertsModifier !== i || n.parameterName !== _ || n.type !== c ? q(rt(i, _, c), n) : n;
  }
  function Zr(n, i) {
    let _ = M(183);
    return _.typeName = et(n), _.typeArguments = i && o().parenthesizeTypeArguments(de(i)), _.transformFlags = 1, _;
  }
  function J(n, i, _) {
    return n.typeName !== i || n.typeArguments !== _ ? q(Zr(i, _), n) : n;
  }
  function qe(n, i, _) {
    let c = ae(184);
    return c.typeParameters = De(n), c.parameters = De(i), c.type = _, c.transformFlags = 1, c.modifiers = void 0, c.jsDoc = void 0, c.locals = void 0, c.nextContainer = void 0, c.typeArguments = void 0, c;
  }
  function u(n, i, _, c) {
    return n.typeParameters !== i || n.parameters !== _ || n.type !== c ? Ne(qe(i, _, c), n) : n;
  }
  function Ne(n, i) {
    return n !== i && (n.modifiers = i.modifiers), Oe(n, i);
  }
  function Me(...n) {
    return n.length === 4 ? U(...n) : n.length === 3 ? ze(...n) : B.fail("Incorrect number of arguments specified.");
  }
  function U(n, i, _, c) {
    let f = ae(185);
    return f.modifiers = De(n), f.typeParameters = De(i), f.parameters = De(_), f.type = c, f.transformFlags = 1, f.jsDoc = void 0, f.locals = void 0, f.nextContainer = void 0, f.typeArguments = void 0, f;
  }
  function ze(n, i, _) {
    return U(void 0, n, i, _);
  }
  function an(...n) {
    return n.length === 5 ? Ve(...n) : n.length === 4 ? $e(...n) : B.fail("Incorrect number of arguments specified.");
  }
  function Ve(n, i, _, c, f) {
    return n.modifiers !== i || n.typeParameters !== _ || n.parameters !== c || n.type !== f ? Oe(Me(i, _, c, f), n) : n;
  }
  function $e(n, i, _, c) {
    return Ve(n, n.modifiers, i, _, c);
  }
  function Pt(n, i) {
    let _ = M(186);
    return _.exprName = n, _.typeArguments = i && o().parenthesizeTypeArguments(i), _.transformFlags = 1, _;
  }
  function kt(n, i, _) {
    return n.exprName !== i || n.typeArguments !== _ ? q(Pt(i, _), n) : n;
  }
  function Nt(n) {
    let i = ae(187);
    return i.members = de(n), i.transformFlags = 1, i;
  }
  function qt(n, i) {
    return n.members !== i ? q(Nt(i), n) : n;
  }
  function Gn(n) {
    let i = M(188);
    return i.elementType = o().parenthesizeNonArrayTypeOfPostfixType(n), i.transformFlags = 1, i;
  }
  function wi(n, i) {
    return n.elementType !== i ? q(Gn(i), n) : n;
  }
  function un(n) {
    let i = M(189);
    return i.elements = de(o().parenthesizeElementTypesOfTupleType(n)), i.transformFlags = 1, i;
  }
  function G(n, i) {
    return n.elements !== i ? q(un(i), n) : n;
  }
  function le(n, i, _, c) {
    let f = ae(202);
    return f.dotDotDotToken = n, f.name = i, f.questionToken = _, f.type = c, f.transformFlags = 1, f.jsDoc = void 0, f;
  }
  function Fe(n, i, _, c, f) {
    return n.dotDotDotToken !== i || n.name !== _ || n.questionToken !== c || n.type !== f ? q(le(i, _, c, f), n) : n;
  }
  function ve(n) {
    let i = M(190);
    return i.type = o().parenthesizeTypeOfOptionalType(n), i.transformFlags = 1, i;
  }
  function j(n, i) {
    return n.type !== i ? q(ve(i), n) : n;
  }
  function ht(n) {
    let i = M(191);
    return i.type = n, i.transformFlags = 1, i;
  }
  function xt(n, i) {
    return n.type !== i ? q(ht(i), n) : n;
  }
  function Lt(n, i, _) {
    let c = M(n);
    return c.types = ye.createNodeArray(_(i)), c.transformFlags = 1, c;
  }
  function pn(n, i, _) {
    return n.types !== i ? q(Lt(n.kind, i, _), n) : n;
  }
  function Ul(n) {
    return Lt(192, n, o().parenthesizeConstituentTypesOfUnionType);
  }
  function Es(n, i) {
    return pn(n, i, o().parenthesizeConstituentTypesOfUnionType);
  }
  function Or(n) {
    return Lt(193, n, o().parenthesizeConstituentTypesOfIntersectionType);
  }
  function Je(n, i) {
    return pn(n, i, o().parenthesizeConstituentTypesOfIntersectionType);
  }
  function ft(n, i, _, c) {
    let f = M(194);
    return f.checkType = o().parenthesizeCheckTypeOfConditionalType(n), f.extendsType = o().parenthesizeExtendsTypeOfConditionalType(i), f.trueType = _, f.falseType = c, f.transformFlags = 1, f.locals = void 0, f.nextContainer = void 0, f;
  }
  function Bl(n, i, _, c, f) {
    return n.checkType !== i || n.extendsType !== _ || n.trueType !== c || n.falseType !== f ? q(ft(i, _, c, f), n) : n;
  }
  function Yn(n) {
    let i = M(195);
    return i.typeParameter = n, i.transformFlags = 1, i;
  }
  function ql(n, i) {
    return n.typeParameter !== i ? q(Yn(i), n) : n;
  }
  function Wt(n, i) {
    let _ = M(203);
    return _.head = n, _.templateSpans = de(i), _.transformFlags = 1, _;
  }
  function zl(n, i, _) {
    return n.head !== i || n.templateSpans !== _ ? q(Wt(i, _), n) : n;
  }
  function sr(n, i, _, c, f = false) {
    let w = M(205);
    return w.argument = n, w.attributes = i, w.assertions && w.assertions.assertClause && w.attributes && (w.assertions.assertClause = w.attributes), w.qualifier = _, w.typeArguments = c && o().parenthesizeTypeArguments(c), w.isTypeOf = f, w.transformFlags = 1, w;
  }
  function aa(n, i, _, c, f, w = n.isTypeOf) {
    return n.argument !== i || n.attributes !== _ || n.qualifier !== c || n.typeArguments !== f || n.isTypeOf !== w ? q(sr(i, _, c, f, w), n) : n;
  }
  function Qt(n) {
    let i = M(196);
    return i.type = n, i.transformFlags = 1, i;
  }
  function Ct(n, i) {
    return n.type !== i ? q(Qt(i), n) : n;
  }
  function D() {
    let n = M(197);
    return n.transformFlags = 1, n;
  }
  function Gt(n, i) {
    let _ = M(198);
    return _.operator = n, _.type = n === 148 ? o().parenthesizeOperandOfReadonlyTypeOperator(i) : o().parenthesizeOperandOfTypeOperator(i), _.transformFlags = 1, _;
  }
  function Mr(n, i) {
    return n.type !== i ? q(Gt(n.operator, i), n) : n;
  }
  function or(n, i) {
    let _ = M(199);
    return _.objectType = o().parenthesizeNonArrayTypeOfPostfixType(n), _.indexType = i, _.transformFlags = 1, _;
  }
  function Ka(n, i, _) {
    return n.objectType !== i || n.indexType !== _ ? q(or(i, _), n) : n;
  }
  function St(n, i, _, c, f, w) {
    let F = ae(200);
    return F.readonlyToken = n, F.typeParameter = i, F.nameType = _, F.questionToken = c, F.type = f, F.members = w && de(w), F.transformFlags = 1, F.locals = void 0, F.nextContainer = void 0, F;
  }
  function jt(n, i, _, c, f, w, F) {
    return n.readonlyToken !== i || n.typeParameter !== _ || n.nameType !== c || n.questionToken !== f || n.type !== w || n.members !== F ? q(St(i, _, c, f, w, F), n) : n;
  }
  function ei(n) {
    let i = M(201);
    return i.literal = n, i.transformFlags = 1, i;
  }
  function yr(n, i) {
    return n.literal !== i ? q(ei(i), n) : n;
  }
  function As(n) {
    let i = M(206);
    return i.elements = de(n), i.transformFlags |= ke(i.elements) | 1024 | 524288, i.transformFlags & 32768 && (i.transformFlags |= 65664), i;
  }
  function Fl(n, i) {
    return n.elements !== i ? q(As(i), n) : n;
  }
  function Jr(n) {
    let i = M(207);
    return i.elements = de(n), i.transformFlags |= ke(i.elements) | 1024 | 524288, i;
  }
  function Vl(n, i) {
    return n.elements !== i ? q(Jr(i), n) : n;
  }
  function _a(n, i, _, c) {
    let f = ae(208);
    return f.dotDotDotToken = n, f.propertyName = et(i), f.name = et(_), f.initializer = Da(c), f.transformFlags |= z(f.dotDotDotToken) | jn(f.propertyName) | jn(f.name) | z(f.initializer) | (f.dotDotDotToken ? 32768 : 0) | 1024, f.flowNode = void 0, f;
  }
  function ti(n, i, _, c, f) {
    return n.propertyName !== _ || n.dotDotDotToken !== i || n.name !== c || n.initializer !== f ? q(_a(i, _, c, f), n) : n;
  }
  function Za(n, i) {
    let _ = M(209), c = n && Yi(n), f = de(n, c && H1(c) ? true : void 0);
    return _.elements = o().parenthesizeExpressionsOfCommaDelimitedList(f), _.multiLine = i, _.transformFlags |= ke(_.elements), _;
  }
  function Cs(n, i) {
    return n.elements !== i ? q(Za(i, n.multiLine), n) : n;
  }
  function ki(n, i) {
    let _ = ae(210);
    return _.properties = de(n), _.multiLine = i, _.transformFlags |= ke(_.properties), _.jsDoc = void 0, _;
  }
  function Wl(n, i) {
    return n.properties !== i ? q(ki(i, n.multiLine), n) : n;
  }
  function Ds(n, i, _) {
    let c = ae(211);
    return c.expression = n, c.questionDotToken = i, c.name = _, c.transformFlags = z(c.expression) | z(c.questionDotToken) | (tt(c.name) ? ja(c.name) : z(c.name) | 536870912), c.jsDoc = void 0, c.flowNode = void 0, c;
  }
  function cr(n, i) {
    let _ = Ds(o().parenthesizeLeftSideOfAccess(n, false), void 0, et(i));
    return Ap(n) && (_.transformFlags |= 384), _;
  }
  function Gl(n, i, _) {
    return Ig(n) ? sa(n, i, n.questionDotToken, kr(_, tt)) : n.expression !== i || n.name !== _ ? q(cr(i, _), n) : n;
  }
  function Ei(n, i, _) {
    let c = Ds(o().parenthesizeLeftSideOfAccess(n, true), i, et(_));
    return c.flags |= 64, c.transformFlags |= 32, c;
  }
  function sa(n, i, _, c) {
    return B.assert(!!(n.flags & 64), "Cannot update a PropertyAccessExpression using updatePropertyAccessChain. Use updatePropertyAccess instead."), n.expression !== i || n.questionDotToken !== _ || n.name !== c ? q(Ei(i, _, c), n) : n;
  }
  function Ps(n, i, _) {
    let c = ae(212);
    return c.expression = n, c.questionDotToken = i, c.argumentExpression = _, c.transformFlags |= z(c.expression) | z(c.questionDotToken) | z(c.argumentExpression), c.jsDoc = void 0, c.flowNode = void 0, c;
  }
  function Ai(n, i) {
    let _ = Ps(o().parenthesizeLeftSideOfAccess(n, false), void 0, pr(i));
    return Ap(n) && (_.transformFlags |= 384), _;
  }
  function Yl(n, i, _) {
    return Og(n) ? e_(n, i, n.questionDotToken, _) : n.expression !== i || n.argumentExpression !== _ ? q(Ai(i, _), n) : n;
  }
  function Ns(n, i, _) {
    let c = Ps(o().parenthesizeLeftSideOfAccess(n, true), i, pr(_));
    return c.flags |= 64, c.transformFlags |= 32, c;
  }
  function e_(n, i, _, c) {
    return B.assert(!!(n.flags & 64), "Cannot update a ElementAccessExpression using updateElementAccessChain. Use updateElementAccess instead."), n.expression !== i || n.questionDotToken !== _ || n.argumentExpression !== c ? q(Ns(i, _, c), n) : n;
  }
  function Is(n, i, _, c) {
    let f = ae(213);
    return f.expression = n, f.questionDotToken = i, f.typeArguments = _, f.arguments = c, f.transformFlags |= z(f.expression) | z(f.questionDotToken) | ke(f.typeArguments) | ke(f.arguments), f.typeArguments && (f.transformFlags |= 1), zd(f.expression) && (f.transformFlags |= 16384), f;
  }
  function Ci(n, i, _) {
    let c = Is(o().parenthesizeLeftSideOfAccess(n, false), void 0, De(i), o().parenthesizeExpressionsOfCommaDelimitedList(de(_)));
    return Ub(c.expression) && (c.transformFlags |= 8388608), c;
  }
  function oa(n, i, _, c) {
    return Jd(n) ? Os(n, i, n.questionDotToken, _, c) : n.expression !== i || n.typeArguments !== _ || n.arguments !== c ? q(Ci(i, _, c), n) : n;
  }
  function t_(n, i, _, c) {
    let f = Is(o().parenthesizeLeftSideOfAccess(n, true), i, De(_), o().parenthesizeExpressionsOfCommaDelimitedList(de(c)));
    return f.flags |= 64, f.transformFlags |= 32, f;
  }
  function Os(n, i, _, c, f) {
    return B.assert(!!(n.flags & 64), "Cannot update a CallExpression using updateCallChain. Use updateCall instead."), n.expression !== i || n.questionDotToken !== _ || n.typeArguments !== c || n.arguments !== f ? q(t_(i, _, c, f), n) : n;
  }
  function xn(n, i, _) {
    let c = ae(214);
    return c.expression = o().parenthesizeExpressionOfNew(n), c.typeArguments = De(i), c.arguments = _ ? o().parenthesizeExpressionsOfCommaDelimitedList(_) : void 0, c.transformFlags |= z(c.expression) | ke(c.typeArguments) | ke(c.arguments) | 32, c.typeArguments && (c.transformFlags |= 1), c;
  }
  function n_(n, i, _, c) {
    return n.expression !== i || n.typeArguments !== _ || n.arguments !== c ? q(xn(i, _, c), n) : n;
  }
  function ca(n, i, _) {
    let c = M(215);
    return c.tag = o().parenthesizeLeftSideOfAccess(n, false), c.typeArguments = De(i), c.template = _, c.transformFlags |= z(c.tag) | ke(c.typeArguments) | z(c.template) | 1024, c.typeArguments && (c.transformFlags |= 1), j2(c.template) && (c.transformFlags |= 128), c;
  }
  function Ms(n, i, _, c) {
    return n.tag !== i || n.typeArguments !== _ || n.template !== c ? q(ca(i, _, c), n) : n;
  }
  function Js(n, i) {
    let _ = M(216);
    return _.expression = o().parenthesizeOperandOfPrefixUnary(i), _.type = n, _.transformFlags |= z(_.expression) | z(_.type) | 1, _;
  }
  function Ls(n, i, _) {
    return n.type !== i || n.expression !== _ ? q(Js(i, _), n) : n;
  }
  function r_(n) {
    let i = M(217);
    return i.expression = n, i.transformFlags = z(i.expression), i.jsDoc = void 0, i;
  }
  function js(n, i) {
    return n.expression !== i ? q(r_(i), n) : n;
  }
  function i_(n, i, _, c, f, w, F) {
    let pe = ae(218);
    pe.modifiers = De(n), pe.asteriskToken = i, pe.name = et(_), pe.typeParameters = De(c), pe.parameters = de(f), pe.type = w, pe.body = F;
    let Re = Rn(pe.modifiers) & 1024, en = !!pe.asteriskToken, kn = Re && en;
    return pe.transformFlags = ke(pe.modifiers) | z(pe.asteriskToken) | jn(pe.name) | ke(pe.typeParameters) | ke(pe.parameters) | z(pe.type) | z(pe.body) & -67108865 | (kn ? 128 : Re ? 256 : en ? 2048 : 0) | (pe.typeParameters || pe.type ? 1 : 0) | 4194304, pe.typeArguments = void 0, pe.jsDoc = void 0, pe.locals = void 0, pe.nextContainer = void 0, pe.flowNode = void 0, pe.endFlowNode = void 0, pe.returnFlowNode = void 0, pe;
  }
  function Rs(n, i, _, c, f, w, F, pe) {
    return n.name !== c || n.modifiers !== i || n.asteriskToken !== _ || n.typeParameters !== f || n.parameters !== w || n.type !== F || n.body !== pe ? Oe(i_(i, _, c, f, w, F, pe), n) : n;
  }
  function a_(n, i, _, c, f, w) {
    let F = ae(219);
    F.modifiers = De(n), F.typeParameters = De(i), F.parameters = de(_), F.type = c, F.equalsGreaterThanToken = f ?? ct(39), F.body = o().parenthesizeConciseBodyOfArrowFunction(w);
    let pe = Rn(F.modifiers) & 1024;
    return F.transformFlags = ke(F.modifiers) | ke(F.typeParameters) | ke(F.parameters) | z(F.type) | z(F.equalsGreaterThanToken) | z(F.body) & -67108865 | (F.typeParameters || F.type ? 1 : 0) | (pe ? 16640 : 0) | 1024, F.typeArguments = void 0, F.jsDoc = void 0, F.locals = void 0, F.nextContainer = void 0, F.flowNode = void 0, F.endFlowNode = void 0, F.returnFlowNode = void 0, F;
  }
  function Us(n, i, _, c, f, w, F) {
    return n.modifiers !== i || n.typeParameters !== _ || n.parameters !== c || n.type !== f || n.equalsGreaterThanToken !== w || n.body !== F ? Oe(a_(i, _, c, f, w, F), n) : n;
  }
  function Bs(n) {
    let i = M(220);
    return i.expression = o().parenthesizeOperandOfPrefixUnary(n), i.transformFlags |= z(i.expression), i;
  }
  function qs(n, i) {
    return n.expression !== i ? q(Bs(i), n) : n;
  }
  function la(n) {
    let i = M(221);
    return i.expression = o().parenthesizeOperandOfPrefixUnary(n), i.transformFlags |= z(i.expression), i;
  }
  function fn(n, i) {
    return n.expression !== i ? q(la(i), n) : n;
  }
  function __(n) {
    let i = M(222);
    return i.expression = o().parenthesizeOperandOfPrefixUnary(n), i.transformFlags |= z(i.expression), i;
  }
  function lr(n, i) {
    return n.expression !== i ? q(__(i), n) : n;
  }
  function zs(n) {
    let i = M(223);
    return i.expression = o().parenthesizeOperandOfPrefixUnary(n), i.transformFlags |= z(i.expression) | 256 | 128 | 2097152, i;
  }
  function Lr(n, i) {
    return n.expression !== i ? q(zs(i), n) : n;
  }
  function jr(n, i) {
    let _ = M(224);
    return _.operator = n, _.operand = o().parenthesizeOperandOfPrefixUnary(i), _.transformFlags |= z(_.operand), (n === 46 || n === 47) && tt(_.operand) && !Ua(_.operand) && !Zd(_.operand) && (_.transformFlags |= 268435456), _;
  }
  function Xl(n, i) {
    return n.operand !== i ? q(jr(n.operator, i), n) : n;
  }
  function ni(n, i) {
    let _ = M(225);
    return _.operator = i, _.operand = o().parenthesizeOperandOfPostfixUnary(n), _.transformFlags |= z(_.operand), tt(_.operand) && !Ua(_.operand) && !Zd(_.operand) && (_.transformFlags |= 268435456), _;
  }
  function Hl(n, i) {
    return n.operand !== i ? q(ni(i, n.operator), n) : n;
  }
  function ua(n, i, _) {
    let c = ae(226), f = $c(i), w = f.kind;
    return c.left = o().parenthesizeLeftSideOfBinary(w, n), c.operatorToken = f, c.right = o().parenthesizeRightSideOfBinary(w, c.left, _), c.transformFlags |= z(c.left) | z(c.operatorToken) | z(c.right), w === 61 ? c.transformFlags |= 32 : w === 64 ? If(c.left) ? c.transformFlags |= 5248 | Fs(c.left) : W1(c.left) && (c.transformFlags |= 5120 | Fs(c.left)) : w === 43 || w === 68 ? c.transformFlags |= 512 : X2(w) && (c.transformFlags |= 16), w === 103 && gi(c.left) && (c.transformFlags |= 536870912), c.jsDoc = void 0, c;
  }
  function Fs(n) {
    return uh(n) ? 65536 : 0;
  }
  function $l(n, i, _, c) {
    return n.left !== i || n.operatorToken !== _ || n.right !== c ? q(ua(i, _, c), n) : n;
  }
  function Vs(n, i, _, c, f) {
    let w = M(227);
    return w.condition = o().parenthesizeConditionOfConditionalExpression(n), w.questionToken = i ?? ct(58), w.whenTrue = o().parenthesizeBranchOfConditionalExpression(_), w.colonToken = c ?? ct(59), w.whenFalse = o().parenthesizeBranchOfConditionalExpression(f), w.transformFlags |= z(w.condition) | z(w.questionToken) | z(w.whenTrue) | z(w.colonToken) | z(w.whenFalse), w;
  }
  function Ws(n, i, _, c, f, w) {
    return n.condition !== i || n.questionToken !== _ || n.whenTrue !== c || n.colonToken !== f || n.whenFalse !== w ? q(Vs(i, _, c, f, w), n) : n;
  }
  function Gs(n, i) {
    let _ = M(228);
    return _.head = n, _.templateSpans = de(i), _.transformFlags |= z(_.head) | ke(_.templateSpans) | 1024, _;
  }
  function Xn(n, i, _) {
    return n.head !== i || n.templateSpans !== _ ? q(Gs(i, _), n) : n;
  }
  function Di(n, i, _, c = 0) {
    B.assert(!(c & -7177), "Unsupported template flags.");
    let f;
    if (_ !== void 0 && _ !== i && (f = Pb(n, _), typeof f == "object")) return B.fail("Invalid raw text");
    if (i === void 0) {
      if (f === void 0) return B.fail("Arguments 'text' and 'rawText' may not both be undefined.");
      i = f;
    } else f !== void 0 && B.assert(i === f, "Expected argument 'text' to be the normalized (i.e. 'cooked') version of argument 'rawText'.");
    return i;
  }
  function Ys(n) {
    let i = 1024;
    return n && (i |= 128), i;
  }
  function Ql(n, i, _, c) {
    let f = $t(n);
    return f.text = i, f.rawText = _, f.templateFlags = c & 7176, f.transformFlags = Ys(f.templateFlags), f;
  }
  function ri(n, i, _, c) {
    let f = ae(n);
    return f.text = i, f.rawText = _, f.templateFlags = c & 7176, f.transformFlags = Ys(f.templateFlags), f;
  }
  function ii(n, i, _, c) {
    return n === 15 ? ri(n, i, _, c) : Ql(n, i, _, c);
  }
  function Xs(n, i, _) {
    return n = Di(16, n, i, _), ii(16, n, i, _);
  }
  function pa(n, i, _) {
    return n = Di(16, n, i, _), ii(17, n, i, _);
  }
  function s_(n, i, _) {
    return n = Di(16, n, i, _), ii(18, n, i, _);
  }
  function Kl(n, i, _) {
    return n = Di(16, n, i, _), ri(15, n, i, _);
  }
  function o_(n, i) {
    B.assert(!n || !!i, "A `YieldExpression` with an asteriskToken must have an expression.");
    let _ = M(229);
    return _.expression = i && o().parenthesizeExpressionForDisallowedComma(i), _.asteriskToken = n, _.transformFlags |= z(_.expression) | z(_.asteriskToken) | 1024 | 128 | 1048576, _;
  }
  function Zl(n, i, _) {
    return n.expression !== _ || n.asteriskToken !== i ? q(o_(i, _), n) : n;
  }
  function Hs(n) {
    let i = M(230);
    return i.expression = o().parenthesizeExpressionForDisallowedComma(n), i.transformFlags |= z(i.expression) | 1024 | 32768, i;
  }
  function eu(n, i) {
    return n.expression !== i ? q(Hs(i), n) : n;
  }
  function $s(n, i, _, c, f) {
    let w = ae(231);
    return w.modifiers = De(n), w.name = et(i), w.typeParameters = De(_), w.heritageClauses = De(c), w.members = de(f), w.transformFlags |= ke(w.modifiers) | jn(w.name) | ke(w.typeParameters) | ke(w.heritageClauses) | ke(w.members) | (w.typeParameters ? 1 : 0) | 1024, w.jsDoc = void 0, w;
  }
  function c_(n, i, _, c, f, w) {
    return n.modifiers !== i || n.name !== _ || n.typeParameters !== c || n.heritageClauses !== f || n.members !== w ? q($s(i, _, c, f, w), n) : n;
  }
  function l_() {
    return M(232);
  }
  function Qs(n, i) {
    let _ = M(233);
    return _.expression = o().parenthesizeLeftSideOfAccess(n, false), _.typeArguments = i && o().parenthesizeTypeArguments(i), _.transformFlags |= z(_.expression) | ke(_.typeArguments) | 1024, _;
  }
  function Ks(n, i, _) {
    return n.expression !== i || n.typeArguments !== _ ? q(Qs(i, _), n) : n;
  }
  function dn(n, i) {
    let _ = M(234);
    return _.expression = n, _.type = i, _.transformFlags |= z(_.expression) | z(_.type) | 1, _;
  }
  function fa(n, i, _) {
    return n.expression !== i || n.type !== _ ? q(dn(i, _), n) : n;
  }
  function Zs(n) {
    let i = M(235);
    return i.expression = o().parenthesizeLeftSideOfAccess(n, false), i.transformFlags |= z(i.expression) | 1, i;
  }
  function eo(n, i) {
    return Mg(n) ? Jn(n, i) : n.expression !== i ? q(Zs(i), n) : n;
  }
  function u_(n, i) {
    let _ = M(238);
    return _.expression = n, _.type = i, _.transformFlags |= z(_.expression) | z(_.type) | 1, _;
  }
  function to(n, i, _) {
    return n.expression !== i || n.type !== _ ? q(u_(i, _), n) : n;
  }
  function p_(n) {
    let i = M(235);
    return i.flags |= 64, i.expression = o().parenthesizeLeftSideOfAccess(n, true), i.transformFlags |= z(i.expression) | 1, i;
  }
  function Jn(n, i) {
    return B.assert(!!(n.flags & 64), "Cannot update a NonNullExpression using updateNonNullChain. Use updateNonNullExpression instead."), n.expression !== i ? q(p_(i), n) : n;
  }
  function no(n, i) {
    let _ = M(236);
    switch (_.keywordToken = n, _.name = i, _.transformFlags |= z(_.name), n) {
      case 105:
        _.transformFlags |= 1024;
        break;
      case 102:
        _.transformFlags |= 32;
        break;
      default:
        return B.assertNever(n);
    }
    return _.flowNode = void 0, _;
  }
  function f_(n, i) {
    return n.name !== i ? q(no(n.keywordToken, i), n) : n;
  }
  function Hn(n, i) {
    let _ = M(239);
    return _.expression = n, _.literal = i, _.transformFlags |= z(_.expression) | z(_.literal) | 1024, _;
  }
  function da(n, i, _) {
    return n.expression !== i || n.literal !== _ ? q(Hn(i, _), n) : n;
  }
  function ro() {
    let n = M(240);
    return n.transformFlags |= 1024, n;
  }
  function Rr(n, i) {
    let _ = M(241);
    return _.statements = de(n), _.multiLine = i, _.transformFlags |= ke(_.statements), _.jsDoc = void 0, _.locals = void 0, _.nextContainer = void 0, _;
  }
  function tu(n, i) {
    return n.statements !== i ? q(Rr(i, n.multiLine), n) : n;
  }
  function d_(n, i) {
    let _ = M(243);
    return _.modifiers = De(n), _.declarationList = Yr(i) ? v_(i) : i, _.transformFlags |= ke(_.modifiers) | z(_.declarationList), Rn(_.modifiers) & 128 && (_.transformFlags = 1), _.jsDoc = void 0, _.flowNode = void 0, _;
  }
  function io(n, i, _) {
    return n.modifiers !== i || n.declarationList !== _ ? q(d_(i, _), n) : n;
  }
  function ao() {
    let n = M(242);
    return n.jsDoc = void 0, n;
  }
  function Pi(n) {
    let i = M(244);
    return i.expression = o().parenthesizeExpressionOfExpressionStatement(n), i.transformFlags |= z(i.expression), i.jsDoc = void 0, i.flowNode = void 0, i;
  }
  function _o(n, i) {
    return n.expression !== i ? q(Pi(i), n) : n;
  }
  function so(n, i, _) {
    let c = M(245);
    return c.expression = n, c.thenStatement = It(i), c.elseStatement = It(_), c.transformFlags |= z(c.expression) | z(c.thenStatement) | z(c.elseStatement), c.jsDoc = void 0, c.flowNode = void 0, c;
  }
  function oo(n, i, _, c) {
    return n.expression !== i || n.thenStatement !== _ || n.elseStatement !== c ? q(so(i, _, c), n) : n;
  }
  function co(n, i) {
    let _ = M(246);
    return _.statement = It(n), _.expression = i, _.transformFlags |= z(_.statement) | z(_.expression), _.jsDoc = void 0, _.flowNode = void 0, _;
  }
  function lo(n, i, _) {
    return n.statement !== i || n.expression !== _ ? q(co(i, _), n) : n;
  }
  function uo(n, i) {
    let _ = M(247);
    return _.expression = n, _.statement = It(i), _.transformFlags |= z(_.expression) | z(_.statement), _.jsDoc = void 0, _.flowNode = void 0, _;
  }
  function nu(n, i, _) {
    return n.expression !== i || n.statement !== _ ? q(uo(i, _), n) : n;
  }
  function po(n, i, _, c) {
    let f = M(248);
    return f.initializer = n, f.condition = i, f.incrementor = _, f.statement = It(c), f.transformFlags |= z(f.initializer) | z(f.condition) | z(f.incrementor) | z(f.statement), f.jsDoc = void 0, f.locals = void 0, f.nextContainer = void 0, f.flowNode = void 0, f;
  }
  function fo(n, i, _, c, f) {
    return n.initializer !== i || n.condition !== _ || n.incrementor !== c || n.statement !== f ? q(po(i, _, c, f), n) : n;
  }
  function m_(n, i, _) {
    let c = M(249);
    return c.initializer = n, c.expression = i, c.statement = It(_), c.transformFlags |= z(c.initializer) | z(c.expression) | z(c.statement), c.jsDoc = void 0, c.locals = void 0, c.nextContainer = void 0, c.flowNode = void 0, c;
  }
  function ru(n, i, _, c) {
    return n.initializer !== i || n.expression !== _ || n.statement !== c ? q(m_(i, _, c), n) : n;
  }
  function mo(n, i, _, c) {
    let f = M(250);
    return f.awaitModifier = n, f.initializer = i, f.expression = o().parenthesizeExpressionForDisallowedComma(_), f.statement = It(c), f.transformFlags |= z(f.awaitModifier) | z(f.initializer) | z(f.expression) | z(f.statement) | 1024, n && (f.transformFlags |= 128), f.jsDoc = void 0, f.locals = void 0, f.nextContainer = void 0, f.flowNode = void 0, f;
  }
  function iu(n, i, _, c, f) {
    return n.awaitModifier !== i || n.initializer !== _ || n.expression !== c || n.statement !== f ? q(mo(i, _, c, f), n) : n;
  }
  function ho(n) {
    let i = M(251);
    return i.label = et(n), i.transformFlags |= z(i.label) | 4194304, i.jsDoc = void 0, i.flowNode = void 0, i;
  }
  function au(n, i) {
    return n.label !== i ? q(ho(i), n) : n;
  }
  function h_(n) {
    let i = M(252);
    return i.label = et(n), i.transformFlags |= z(i.label) | 4194304, i.jsDoc = void 0, i.flowNode = void 0, i;
  }
  function yo(n, i) {
    return n.label !== i ? q(h_(i), n) : n;
  }
  function y_(n) {
    let i = M(253);
    return i.expression = n, i.transformFlags |= z(i.expression) | 128 | 4194304, i.jsDoc = void 0, i.flowNode = void 0, i;
  }
  function _u(n, i) {
    return n.expression !== i ? q(y_(i), n) : n;
  }
  function g_(n, i) {
    let _ = M(254);
    return _.expression = n, _.statement = It(i), _.transformFlags |= z(_.expression) | z(_.statement), _.jsDoc = void 0, _.flowNode = void 0, _;
  }
  function go(n, i, _) {
    return n.expression !== i || n.statement !== _ ? q(g_(i, _), n) : n;
  }
  function b_(n, i) {
    let _ = M(255);
    return _.expression = o().parenthesizeExpressionForDisallowedComma(n), _.caseBlock = i, _.transformFlags |= z(_.expression) | z(_.caseBlock), _.jsDoc = void 0, _.flowNode = void 0, _.possiblyExhaustive = false, _;
  }
  function ai(n, i, _) {
    return n.expression !== i || n.caseBlock !== _ ? q(b_(i, _), n) : n;
  }
  function bo(n, i) {
    let _ = M(256);
    return _.label = et(n), _.statement = It(i), _.transformFlags |= z(_.label) | z(_.statement), _.jsDoc = void 0, _.flowNode = void 0, _;
  }
  function vo(n, i, _) {
    return n.label !== i || n.statement !== _ ? q(bo(i, _), n) : n;
  }
  function To(n) {
    let i = M(257);
    return i.expression = n, i.transformFlags |= z(i.expression), i.jsDoc = void 0, i.flowNode = void 0, i;
  }
  function su(n, i) {
    return n.expression !== i ? q(To(i), n) : n;
  }
  function xo(n, i, _) {
    let c = M(258);
    return c.tryBlock = n, c.catchClause = i, c.finallyBlock = _, c.transformFlags |= z(c.tryBlock) | z(c.catchClause) | z(c.finallyBlock), c.jsDoc = void 0, c.flowNode = void 0, c;
  }
  function ou(n, i, _, c) {
    return n.tryBlock !== i || n.catchClause !== _ || n.finallyBlock !== c ? q(xo(i, _, c), n) : n;
  }
  function So() {
    let n = M(259);
    return n.jsDoc = void 0, n.flowNode = void 0, n;
  }
  function ma(n, i, _, c) {
    let f = ae(260);
    return f.name = et(n), f.exclamationToken = i, f.type = _, f.initializer = Da(c), f.transformFlags |= jn(f.name) | z(f.initializer) | (f.exclamationToken ?? f.type ? 1 : 0), f.jsDoc = void 0, f;
  }
  function wo(n, i, _, c, f) {
    return n.name !== i || n.type !== c || n.exclamationToken !== _ || n.initializer !== f ? q(ma(i, _, c, f), n) : n;
  }
  function v_(n, i = 0) {
    let _ = M(261);
    return _.flags |= i & 7, _.declarations = de(n), _.transformFlags |= ke(_.declarations) | 4194304, i & 7 && (_.transformFlags |= 263168), i & 4 && (_.transformFlags |= 4), _;
  }
  function cu(n, i) {
    return n.declarations !== i ? q(v_(i, n.flags), n) : n;
  }
  function ko(n, i, _, c, f, w, F) {
    let pe = ae(262);
    if (pe.modifiers = De(n), pe.asteriskToken = i, pe.name = et(_), pe.typeParameters = De(c), pe.parameters = de(f), pe.type = w, pe.body = F, !pe.body || Rn(pe.modifiers) & 128) pe.transformFlags = 1;
    else {
      let Re = Rn(pe.modifiers) & 1024, en = !!pe.asteriskToken, kn = Re && en;
      pe.transformFlags = ke(pe.modifiers) | z(pe.asteriskToken) | jn(pe.name) | ke(pe.typeParameters) | ke(pe.parameters) | z(pe.type) | z(pe.body) & -67108865 | (kn ? 128 : Re ? 256 : en ? 2048 : 0) | (pe.typeParameters || pe.type ? 1 : 0) | 4194304;
    }
    return pe.typeArguments = void 0, pe.jsDoc = void 0, pe.locals = void 0, pe.nextContainer = void 0, pe.endFlowNode = void 0, pe.returnFlowNode = void 0, pe;
  }
  function T_(n, i, _, c, f, w, F, pe) {
    return n.modifiers !== i || n.asteriskToken !== _ || n.name !== c || n.typeParameters !== f || n.parameters !== w || n.type !== F || n.body !== pe ? lu(ko(i, _, c, f, w, F, pe), n) : n;
  }
  function lu(n, i) {
    return n !== i && n.modifiers === i.modifiers && (n.modifiers = i.modifiers), Oe(n, i);
  }
  function Eo(n, i, _, c, f) {
    let w = ae(263);
    return w.modifiers = De(n), w.name = et(i), w.typeParameters = De(_), w.heritageClauses = De(c), w.members = de(f), Rn(w.modifiers) & 128 ? w.transformFlags = 1 : (w.transformFlags |= ke(w.modifiers) | jn(w.name) | ke(w.typeParameters) | ke(w.heritageClauses) | ke(w.members) | (w.typeParameters ? 1 : 0) | 1024, w.transformFlags & 8192 && (w.transformFlags |= 1)), w.jsDoc = void 0, w;
  }
  function ha(n, i, _, c, f, w) {
    return n.modifiers !== i || n.name !== _ || n.typeParameters !== c || n.heritageClauses !== f || n.members !== w ? q(Eo(i, _, c, f, w), n) : n;
  }
  function Ao(n, i, _, c, f) {
    let w = ae(264);
    return w.modifiers = De(n), w.name = et(i), w.typeParameters = De(_), w.heritageClauses = De(c), w.members = de(f), w.transformFlags = 1, w.jsDoc = void 0, w;
  }
  function Co(n, i, _, c, f, w) {
    return n.modifiers !== i || n.name !== _ || n.typeParameters !== c || n.heritageClauses !== f || n.members !== w ? q(Ao(i, _, c, f, w), n) : n;
  }
  function ot(n, i, _, c) {
    let f = ae(265);
    return f.modifiers = De(n), f.name = et(i), f.typeParameters = De(_), f.type = c, f.transformFlags = 1, f.jsDoc = void 0, f.locals = void 0, f.nextContainer = void 0, f;
  }
  function gr(n, i, _, c, f) {
    return n.modifiers !== i || n.name !== _ || n.typeParameters !== c || n.type !== f ? q(ot(i, _, c, f), n) : n;
  }
  function x_(n, i, _) {
    let c = ae(266);
    return c.modifiers = De(n), c.name = et(i), c.members = de(_), c.transformFlags |= ke(c.modifiers) | z(c.name) | ke(c.members) | 1, c.transformFlags &= -67108865, c.jsDoc = void 0, c;
  }
  function br(n, i, _, c) {
    return n.modifiers !== i || n.name !== _ || n.members !== c ? q(x_(i, _, c), n) : n;
  }
  function Do(n, i, _, c = 0) {
    let f = ae(267);
    return f.modifiers = De(n), f.flags |= c & 2088, f.name = i, f.body = _, Rn(f.modifiers) & 128 ? f.transformFlags = 1 : f.transformFlags |= ke(f.modifiers) | z(f.name) | z(f.body) | 1, f.transformFlags &= -67108865, f.jsDoc = void 0, f.locals = void 0, f.nextContainer = void 0, f;
  }
  function Et(n, i, _, c) {
    return n.modifiers !== i || n.name !== _ || n.body !== c ? q(Do(i, _, c, n.flags), n) : n;
  }
  function vr(n) {
    let i = M(268);
    return i.statements = de(n), i.transformFlags |= ke(i.statements), i.jsDoc = void 0, i;
  }
  function zt(n, i) {
    return n.statements !== i ? q(vr(i), n) : n;
  }
  function Po(n) {
    let i = M(269);
    return i.clauses = de(n), i.transformFlags |= ke(i.clauses), i.locals = void 0, i.nextContainer = void 0, i;
  }
  function uu(n, i) {
    return n.clauses !== i ? q(Po(i), n) : n;
  }
  function No(n) {
    let i = ae(270);
    return i.name = et(n), i.transformFlags |= ja(i.name) | 1, i.modifiers = void 0, i.jsDoc = void 0, i;
  }
  function Io(n, i) {
    return n.name !== i ? pu(No(i), n) : n;
  }
  function pu(n, i) {
    return n !== i && (n.modifiers = i.modifiers), q(n, i);
  }
  function Oo(n, i, _, c) {
    let f = ae(271);
    return f.modifiers = De(n), f.name = et(_), f.isTypeOnly = i, f.moduleReference = c, f.transformFlags |= ke(f.modifiers) | ja(f.name) | z(f.moduleReference), zf(f.moduleReference) || (f.transformFlags |= 1), f.transformFlags &= -67108865, f.jsDoc = void 0, f;
  }
  function Mo(n, i, _, c, f) {
    return n.modifiers !== i || n.isTypeOnly !== _ || n.name !== c || n.moduleReference !== f ? q(Oo(i, _, c, f), n) : n;
  }
  function Jo(n, i, _, c) {
    let f = M(272);
    return f.modifiers = De(n), f.importClause = i, f.moduleSpecifier = _, f.attributes = f.assertClause = c, f.transformFlags |= z(f.importClause) | z(f.moduleSpecifier), f.transformFlags &= -67108865, f.jsDoc = void 0, f;
  }
  function Lo(n, i, _, c, f) {
    return n.modifiers !== i || n.importClause !== _ || n.moduleSpecifier !== c || n.attributes !== f ? q(Jo(i, _, c, f), n) : n;
  }
  function jo(n, i, _) {
    let c = ae(273);
    return c.isTypeOnly = n, c.name = i, c.namedBindings = _, c.transformFlags |= z(c.name) | z(c.namedBindings), n && (c.transformFlags |= 1), c.transformFlags &= -67108865, c;
  }
  function Ro(n, i, _, c) {
    return n.isTypeOnly !== i || n.name !== _ || n.namedBindings !== c ? q(jo(i, _, c), n) : n;
  }
  function S_(n, i) {
    let _ = M(300);
    return _.elements = de(n), _.multiLine = i, _.token = 132, _.transformFlags |= 4, _;
  }
  function fu(n, i, _) {
    return n.elements !== i || n.multiLine !== _ ? q(S_(i, _), n) : n;
  }
  function Ni(n, i) {
    let _ = M(301);
    return _.name = n, _.value = i, _.transformFlags |= 4, _;
  }
  function Uo(n, i, _) {
    return n.name !== i || n.value !== _ ? q(Ni(i, _), n) : n;
  }
  function w_(n, i) {
    let _ = M(302);
    return _.assertClause = n, _.multiLine = i, _;
  }
  function Bo(n, i, _) {
    return n.assertClause !== i || n.multiLine !== _ ? q(w_(i, _), n) : n;
  }
  function qo(n, i, _) {
    let c = M(300);
    return c.token = _ ?? 118, c.elements = de(n), c.multiLine = i, c.transformFlags |= 4, c;
  }
  function k_(n, i, _) {
    return n.elements !== i || n.multiLine !== _ ? q(qo(i, _, n.token), n) : n;
  }
  function zo(n, i) {
    let _ = M(301);
    return _.name = n, _.value = i, _.transformFlags |= 4, _;
  }
  function Fo(n, i, _) {
    return n.name !== i || n.value !== _ ? q(zo(i, _), n) : n;
  }
  function Vo(n) {
    let i = ae(274);
    return i.name = n, i.transformFlags |= z(i.name), i.transformFlags &= -67108865, i;
  }
  function du(n, i) {
    return n.name !== i ? q(Vo(i), n) : n;
  }
  function Wo(n) {
    let i = ae(280);
    return i.name = n, i.transformFlags |= z(i.name) | 32, i.transformFlags &= -67108865, i;
  }
  function mu(n, i) {
    return n.name !== i ? q(Wo(i), n) : n;
  }
  function Go(n) {
    let i = M(275);
    return i.elements = de(n), i.transformFlags |= ke(i.elements), i.transformFlags &= -67108865, i;
  }
  function Yo(n, i) {
    return n.elements !== i ? q(Go(i), n) : n;
  }
  function Tr(n, i, _) {
    let c = ae(276);
    return c.isTypeOnly = n, c.propertyName = i, c.name = _, c.transformFlags |= z(c.propertyName) | z(c.name), c.transformFlags &= -67108865, c;
  }
  function hu(n, i, _, c) {
    return n.isTypeOnly !== i || n.propertyName !== _ || n.name !== c ? q(Tr(i, _, c), n) : n;
  }
  function ya(n, i, _) {
    let c = ae(277);
    return c.modifiers = De(n), c.isExportEquals = i, c.expression = i ? o().parenthesizeRightSideOfBinary(64, void 0, _) : o().parenthesizeExpressionOfExportDefault(_), c.transformFlags |= ke(c.modifiers) | z(c.expression), c.transformFlags &= -67108865, c.jsDoc = void 0, c;
  }
  function Ii(n, i, _) {
    return n.modifiers !== i || n.expression !== _ ? q(ya(i, n.isExportEquals, _), n) : n;
  }
  function ga(n, i, _, c, f) {
    let w = ae(278);
    return w.modifiers = De(n), w.isTypeOnly = i, w.exportClause = _, w.moduleSpecifier = c, w.attributes = w.assertClause = f, w.transformFlags |= ke(w.modifiers) | z(w.exportClause) | z(w.moduleSpecifier), w.transformFlags &= -67108865, w.jsDoc = void 0, w;
  }
  function Xo(n, i, _, c, f, w) {
    return n.modifiers !== i || n.isTypeOnly !== _ || n.exportClause !== c || n.moduleSpecifier !== f || n.attributes !== w ? Oi(ga(i, _, c, f, w), n) : n;
  }
  function Oi(n, i) {
    return n !== i && n.modifiers === i.modifiers && (n.modifiers = i.modifiers), q(n, i);
  }
  function E_(n) {
    let i = M(279);
    return i.elements = de(n), i.transformFlags |= ke(i.elements), i.transformFlags &= -67108865, i;
  }
  function yu(n, i) {
    return n.elements !== i ? q(E_(i), n) : n;
  }
  function ba(n, i, _) {
    let c = M(281);
    return c.isTypeOnly = n, c.propertyName = et(i), c.name = et(_), c.transformFlags |= z(c.propertyName) | z(c.name), c.transformFlags &= -67108865, c.jsDoc = void 0, c;
  }
  function gu(n, i, _, c) {
    return n.isTypeOnly !== i || n.propertyName !== _ || n.name !== c ? q(ba(i, _, c), n) : n;
  }
  function bu() {
    let n = ae(282);
    return n.jsDoc = void 0, n;
  }
  function A_(n) {
    let i = M(283);
    return i.expression = n, i.transformFlags |= z(i.expression), i.transformFlags &= -67108865, i;
  }
  function vu(n, i) {
    return n.expression !== i ? q(A_(i), n) : n;
  }
  function Ho(n) {
    return M(n);
  }
  function $o(n, i, _ = false) {
    let c = C_(n, _ ? i && o().parenthesizeNonArrayTypeOfPostfixType(i) : i);
    return c.postfix = _, c;
  }
  function C_(n, i) {
    let _ = M(n);
    return _.type = i, _;
  }
  function Tu(n, i, _) {
    return i.type !== _ ? q($o(n, _, i.postfix), i) : i;
  }
  function xu(n, i, _) {
    return i.type !== _ ? q(C_(n, _), i) : i;
  }
  function Qo(n, i) {
    let _ = ae(317);
    return _.parameters = De(n), _.type = i, _.transformFlags = ke(_.parameters) | (_.type ? 1 : 0), _.jsDoc = void 0, _.locals = void 0, _.nextContainer = void 0, _.typeArguments = void 0, _;
  }
  function Su(n, i, _) {
    return n.parameters !== i || n.type !== _ ? q(Qo(i, _), n) : n;
  }
  function Ko(n, i = false) {
    let _ = ae(322);
    return _.jsDocPropertyTags = De(n), _.isArrayType = i, _;
  }
  function wu(n, i, _) {
    return n.jsDocPropertyTags !== i || n.isArrayType !== _ ? q(Ko(i, _), n) : n;
  }
  function Zo(n) {
    let i = M(309);
    return i.type = n, i;
  }
  function D_(n, i) {
    return n.type !== i ? q(Zo(i), n) : n;
  }
  function ec(n, i, _) {
    let c = ae(323);
    return c.typeParameters = De(n), c.parameters = de(i), c.type = _, c.jsDoc = void 0, c.locals = void 0, c.nextContainer = void 0, c;
  }
  function ku(n, i, _, c) {
    return n.typeParameters !== i || n.parameters !== _ || n.type !== c ? q(ec(i, _, c), n) : n;
  }
  function _n(n) {
    let i = il(n.kind);
    return n.tagName.escapedText === Ja(i) ? n.tagName : Ge(i);
  }
  function Sn(n, i, _) {
    let c = M(n);
    return c.tagName = i, c.comment = _, c;
  }
  function Ur(n, i, _) {
    let c = ae(n);
    return c.tagName = i, c.comment = _, c;
  }
  function P_(n, i, _, c) {
    let f = Sn(345, n ?? Ge("template"), c);
    return f.constraint = i, f.typeParameters = de(_), f;
  }
  function tc(n, i = _n(n), _, c, f) {
    return n.tagName !== i || n.constraint !== _ || n.typeParameters !== c || n.comment !== f ? q(P_(i, _, c, f), n) : n;
  }
  function va(n, i, _, c) {
    let f = Ur(346, n ?? Ge("typedef"), c);
    return f.typeExpression = i, f.fullName = _, f.name = em(_), f.locals = void 0, f.nextContainer = void 0, f;
  }
  function Eu(n, i = _n(n), _, c, f) {
    return n.tagName !== i || n.typeExpression !== _ || n.fullName !== c || n.comment !== f ? q(va(i, _, c, f), n) : n;
  }
  function N_(n, i, _, c, f, w) {
    let F = Ur(341, n ?? Ge("param"), w);
    return F.typeExpression = c, F.name = i, F.isNameFirst = !!f, F.isBracketed = _, F;
  }
  function Au(n, i = _n(n), _, c, f, w, F) {
    return n.tagName !== i || n.name !== _ || n.isBracketed !== c || n.typeExpression !== f || n.isNameFirst !== w || n.comment !== F ? q(N_(i, _, c, f, w, F), n) : n;
  }
  function nc(n, i, _, c, f, w) {
    let F = Ur(348, n ?? Ge("prop"), w);
    return F.typeExpression = c, F.name = i, F.isNameFirst = !!f, F.isBracketed = _, F;
  }
  function rc(n, i = _n(n), _, c, f, w, F) {
    return n.tagName !== i || n.name !== _ || n.isBracketed !== c || n.typeExpression !== f || n.isNameFirst !== w || n.comment !== F ? q(nc(i, _, c, f, w, F), n) : n;
  }
  function ic(n, i, _, c) {
    let f = Ur(338, n ?? Ge("callback"), c);
    return f.typeExpression = i, f.fullName = _, f.name = em(_), f.locals = void 0, f.nextContainer = void 0, f;
  }
  function ac(n, i = _n(n), _, c, f) {
    return n.tagName !== i || n.typeExpression !== _ || n.fullName !== c || n.comment !== f ? q(ic(i, _, c, f), n) : n;
  }
  function _c(n, i, _) {
    let c = Sn(339, n ?? Ge("overload"), _);
    return c.typeExpression = i, c;
  }
  function I_(n, i = _n(n), _, c) {
    return n.tagName !== i || n.typeExpression !== _ || n.comment !== c ? q(_c(i, _, c), n) : n;
  }
  function O_(n, i, _) {
    let c = Sn(328, n ?? Ge("augments"), _);
    return c.class = i, c;
  }
  function Mi(n, i = _n(n), _, c) {
    return n.tagName !== i || n.class !== _ || n.comment !== c ? q(O_(i, _, c), n) : n;
  }
  function sc(n, i, _) {
    let c = Sn(329, n ?? Ge("implements"), _);
    return c.class = i, c;
  }
  function Br(n, i, _) {
    let c = Sn(347, n ?? Ge("see"), _);
    return c.name = i, c;
  }
  function Ta(n, i, _, c) {
    return n.tagName !== i || n.name !== _ || n.comment !== c ? q(Br(i, _, c), n) : n;
  }
  function oc(n) {
    let i = M(310);
    return i.name = n, i;
  }
  function Cu(n, i) {
    return n.name !== i ? q(oc(i), n) : n;
  }
  function cc(n, i) {
    let _ = M(311);
    return _.left = n, _.right = i, _.transformFlags |= z(_.left) | z(_.right), _;
  }
  function Du(n, i, _) {
    return n.left !== i || n.right !== _ ? q(cc(i, _), n) : n;
  }
  function lc(n, i) {
    let _ = M(324);
    return _.name = n, _.text = i, _;
  }
  function uc(n, i, _) {
    return n.name !== i ? q(lc(i, _), n) : n;
  }
  function pc(n, i) {
    let _ = M(325);
    return _.name = n, _.text = i, _;
  }
  function Pu(n, i, _) {
    return n.name !== i ? q(pc(i, _), n) : n;
  }
  function fc(n, i) {
    let _ = M(326);
    return _.name = n, _.text = i, _;
  }
  function Nu(n, i, _) {
    return n.name !== i ? q(fc(i, _), n) : n;
  }
  function Iu(n, i = _n(n), _, c) {
    return n.tagName !== i || n.class !== _ || n.comment !== c ? q(sc(i, _, c), n) : n;
  }
  function dc(n, i, _) {
    return Sn(n, i ?? Ge(il(n)), _);
  }
  function Ou(n, i, _ = _n(i), c) {
    return i.tagName !== _ || i.comment !== c ? q(dc(n, _, c), i) : i;
  }
  function mc(n, i, _, c) {
    let f = Sn(n, i ?? Ge(il(n)), c);
    return f.typeExpression = _, f;
  }
  function Mu(n, i, _ = _n(i), c, f) {
    return i.tagName !== _ || i.typeExpression !== c || i.comment !== f ? q(mc(n, _, c, f), i) : i;
  }
  function hc(n, i) {
    return Sn(327, n, i);
  }
  function Ju(n, i, _) {
    return n.tagName !== i || n.comment !== _ ? q(hc(i, _), n) : n;
  }
  function yc(n, i, _) {
    let c = Ur(340, n ?? Ge(il(340)), _);
    return c.typeExpression = i, c.locals = void 0, c.nextContainer = void 0, c;
  }
  function M_(n, i = _n(n), _, c) {
    return n.tagName !== i || n.typeExpression !== _ || n.comment !== c ? q(yc(i, _, c), n) : n;
  }
  function gc(n, i, _, c, f) {
    let w = Sn(351, n ?? Ge("import"), f);
    return w.importClause = i, w.moduleSpecifier = _, w.attributes = c, w.comment = f, w;
  }
  function bc(n, i, _, c, f, w) {
    return n.tagName !== i || n.comment !== w || n.importClause !== _ || n.moduleSpecifier !== c || n.attributes !== f ? q(gc(i, _, c, f, w), n) : n;
  }
  function J_(n) {
    let i = M(321);
    return i.text = n, i;
  }
  function Lu(n, i) {
    return n.text !== i ? q(J_(i), n) : n;
  }
  function Ji(n, i) {
    let _ = M(320);
    return _.comment = n, _.tags = De(i), _;
  }
  function vc(n, i, _) {
    return n.comment !== i || n.tags !== _ ? q(Ji(i, _), n) : n;
  }
  function Tc(n, i, _) {
    let c = M(284);
    return c.openingElement = n, c.children = de(i), c.closingElement = _, c.transformFlags |= z(c.openingElement) | ke(c.children) | z(c.closingElement) | 2, c;
  }
  function ju(n, i, _, c) {
    return n.openingElement !== i || n.children !== _ || n.closingElement !== c ? q(Tc(i, _, c), n) : n;
  }
  function xc(n, i, _) {
    let c = M(285);
    return c.tagName = n, c.typeArguments = De(i), c.attributes = _, c.transformFlags |= z(c.tagName) | ke(c.typeArguments) | z(c.attributes) | 2, c.typeArguments && (c.transformFlags |= 1), c;
  }
  function L_(n, i, _, c) {
    return n.tagName !== i || n.typeArguments !== _ || n.attributes !== c ? q(xc(i, _, c), n) : n;
  }
  function j_(n, i, _) {
    let c = M(286);
    return c.tagName = n, c.typeArguments = De(i), c.attributes = _, c.transformFlags |= z(c.tagName) | ke(c.typeArguments) | z(c.attributes) | 2, i && (c.transformFlags |= 1), c;
  }
  function Sc(n, i, _, c) {
    return n.tagName !== i || n.typeArguments !== _ || n.attributes !== c ? q(j_(i, _, c), n) : n;
  }
  function xa(n) {
    let i = M(287);
    return i.tagName = n, i.transformFlags |= z(i.tagName) | 2, i;
  }
  function Kt(n, i) {
    return n.tagName !== i ? q(xa(i), n) : n;
  }
  function R_(n, i, _) {
    let c = M(288);
    return c.openingFragment = n, c.children = de(i), c.closingFragment = _, c.transformFlags |= z(c.openingFragment) | ke(c.children) | z(c.closingFragment) | 2, c;
  }
  function wc(n, i, _, c) {
    return n.openingFragment !== i || n.children !== _ || n.closingFragment !== c ? q(R_(i, _, c), n) : n;
  }
  function Sa(n, i) {
    let _ = M(12);
    return _.text = n, _.containsOnlyTriviaWhiteSpaces = !!i, _.transformFlags |= 2, _;
  }
  function kc(n, i, _) {
    return n.text !== i || n.containsOnlyTriviaWhiteSpaces !== _ ? q(Sa(i, _), n) : n;
  }
  function Ru() {
    let n = M(289);
    return n.transformFlags |= 2, n;
  }
  function Uu() {
    let n = M(290);
    return n.transformFlags |= 2, n;
  }
  function Ec(n, i) {
    let _ = ae(291);
    return _.name = n, _.initializer = i, _.transformFlags |= z(_.name) | z(_.initializer) | 2, _;
  }
  function wa(n, i, _) {
    return n.name !== i || n.initializer !== _ ? q(Ec(i, _), n) : n;
  }
  function Ac(n) {
    let i = ae(292);
    return i.properties = de(n), i.transformFlags |= ke(i.properties) | 2, i;
  }
  function Bu(n, i) {
    return n.properties !== i ? q(Ac(i), n) : n;
  }
  function Cc(n) {
    let i = M(293);
    return i.expression = n, i.transformFlags |= z(i.expression) | 2, i;
  }
  function qu(n, i) {
    return n.expression !== i ? q(Cc(i), n) : n;
  }
  function ka(n, i) {
    let _ = M(294);
    return _.dotDotDotToken = n, _.expression = i, _.transformFlags |= z(_.dotDotDotToken) | z(_.expression) | 2, _;
  }
  function Li(n, i) {
    return n.expression !== i ? q(ka(n.dotDotDotToken, i), n) : n;
  }
  function Dc(n, i) {
    let _ = M(295);
    return _.namespace = n, _.name = i, _.transformFlags |= z(_.namespace) | z(_.name) | 2, _;
  }
  function U_(n, i, _) {
    return n.namespace !== i || n.name !== _ ? q(Dc(i, _), n) : n;
  }
  function B_(n, i) {
    let _ = M(296);
    return _.expression = o().parenthesizeExpressionForDisallowedComma(n), _.statements = de(i), _.transformFlags |= z(_.expression) | ke(_.statements), _.jsDoc = void 0, _;
  }
  function zu(n, i, _) {
    return n.expression !== i || n.statements !== _ ? q(B_(i, _), n) : n;
  }
  function _i(n) {
    let i = M(297);
    return i.statements = de(n), i.transformFlags = ke(i.statements), i;
  }
  function Pc(n, i) {
    return n.statements !== i ? q(_i(i), n) : n;
  }
  function Nc(n, i) {
    let _ = M(298);
    switch (_.token = n, _.types = de(i), _.transformFlags |= ke(_.types), n) {
      case 96:
        _.transformFlags |= 1024;
        break;
      case 119:
        _.transformFlags |= 1;
        break;
      default:
        return B.assertNever(n);
    }
    return _;
  }
  function Fu(n, i) {
    return n.types !== i ? q(Nc(n.token, i), n) : n;
  }
  function q_(n, i) {
    let _ = M(299);
    return _.variableDeclaration = xr(n), _.block = i, _.transformFlags |= z(_.variableDeclaration) | z(_.block) | (n ? 0 : 64), _.locals = void 0, _.nextContainer = void 0, _;
  }
  function Ic(n, i, _) {
    return n.variableDeclaration !== i || n.block !== _ ? q(q_(i, _), n) : n;
  }
  function Ea(n, i) {
    let _ = ae(303);
    return _.name = et(n), _.initializer = o().parenthesizeExpressionForDisallowedComma(i), _.transformFlags |= jn(_.name) | z(_.initializer), _.modifiers = void 0, _.questionToken = void 0, _.exclamationToken = void 0, _.jsDoc = void 0, _;
  }
  function qr(n, i, _) {
    return n.name !== i || n.initializer !== _ ? Vu(Ea(i, _), n) : n;
  }
  function Vu(n, i) {
    return n !== i && (n.modifiers = i.modifiers, n.questionToken = i.questionToken, n.exclamationToken = i.exclamationToken), q(n, i);
  }
  function Oc(n, i) {
    let _ = ae(304);
    return _.name = et(n), _.objectAssignmentInitializer = i && o().parenthesizeExpressionForDisallowedComma(i), _.transformFlags |= ja(_.name) | z(_.objectAssignmentInitializer) | 1024, _.equalsToken = void 0, _.modifiers = void 0, _.questionToken = void 0, _.exclamationToken = void 0, _.jsDoc = void 0, _;
  }
  function Wu(n, i, _) {
    return n.name !== i || n.objectAssignmentInitializer !== _ ? Gu(Oc(i, _), n) : n;
  }
  function Gu(n, i) {
    return n !== i && (n.modifiers = i.modifiers, n.questionToken = i.questionToken, n.exclamationToken = i.exclamationToken, n.equalsToken = i.equalsToken), q(n, i);
  }
  function z_(n) {
    let i = ae(305);
    return i.expression = o().parenthesizeExpressionForDisallowedComma(n), i.transformFlags |= z(i.expression) | 128 | 65536, i.jsDoc = void 0, i;
  }
  function Mc(n, i) {
    return n.expression !== i ? q(z_(i), n) : n;
  }
  function wn(n, i) {
    let _ = ae(306);
    return _.name = et(n), _.initializer = i && o().parenthesizeExpressionForDisallowedComma(i), _.transformFlags |= z(_.name) | z(_.initializer) | 1, _.jsDoc = void 0, _;
  }
  function Jc(n, i, _) {
    return n.name !== i || n.initializer !== _ ? q(wn(i, _), n) : n;
  }
  function Yu(n, i, _) {
    let c = t.createBaseSourceFileNode(307);
    return c.statements = de(n), c.endOfFileToken = i, c.flags |= _, c.text = "", c.fileName = "", c.path = "", c.resolvedPath = "", c.originalFileName = "", c.languageVersion = 1, c.languageVariant = 0, c.scriptKind = 0, c.isDeclarationFile = false, c.hasNoDefaultLib = false, c.transformFlags |= ke(c.statements) | z(c.endOfFileToken), c.locals = void 0, c.nextContainer = void 0, c.endFlowNode = void 0, c.nodeCount = 0, c.identifierCount = 0, c.symbolCount = 0, c.parseDiagnostics = void 0, c.bindDiagnostics = void 0, c.bindSuggestionDiagnostics = void 0, c.lineMap = void 0, c.externalModuleIndicator = void 0, c.setExternalModuleIndicator = void 0, c.pragmas = void 0, c.checkJsDirective = void 0, c.referencedFiles = void 0, c.typeReferenceDirectives = void 0, c.libReferenceDirectives = void 0, c.amdDependencies = void 0, c.commentDirectives = void 0, c.identifiers = void 0, c.packageJsonLocations = void 0, c.packageJsonScope = void 0, c.imports = void 0, c.moduleAugmentations = void 0, c.ambientModuleNames = void 0, c.classifiableNames = void 0, c.impliedNodeFormat = void 0, c;
  }
  function Lc(n) {
    let i = Object.create(n.redirectTarget);
    return Object.defineProperties(i, { id: { get() {
      return this.redirectInfo.redirectTarget.id;
    }, set(_) {
      this.redirectInfo.redirectTarget.id = _;
    } }, symbol: { get() {
      return this.redirectInfo.redirectTarget.symbol;
    }, set(_) {
      this.redirectInfo.redirectTarget.symbol = _;
    } } }), i.redirectInfo = n, i;
  }
  function Xu(n) {
    let i = Lc(n.redirectInfo);
    return i.flags |= n.flags & -17, i.fileName = n.fileName, i.path = n.path, i.resolvedPath = n.resolvedPath, i.originalFileName = n.originalFileName, i.packageJsonLocations = n.packageJsonLocations, i.packageJsonScope = n.packageJsonScope, i.emitNode = void 0, i;
  }
  function jc(n) {
    let i = t.createBaseSourceFileNode(307);
    i.flags |= n.flags & -17;
    for (let _ in n) if (!(Cr(i, _) || !Cr(n, _))) {
      if (_ === "emitNode") {
        i.emitNode = void 0;
        continue;
      }
      i[_] = n[_];
    }
    return i;
  }
  function Aa(n) {
    let i = n.redirectInfo ? Xu(n) : jc(n);
    return a(i, n), i;
  }
  function Hu(n, i, _, c, f, w, F) {
    let pe = Aa(n);
    return pe.statements = de(i), pe.isDeclarationFile = _, pe.referencedFiles = c, pe.typeReferenceDirectives = f, pe.hasNoDefaultLib = w, pe.libReferenceDirectives = F, pe.transformFlags = ke(pe.statements) | z(pe.endOfFileToken), pe;
  }
  function $u(n, i, _ = n.isDeclarationFile, c = n.referencedFiles, f = n.typeReferenceDirectives, w = n.hasNoDefaultLib, F = n.libReferenceDirectives) {
    return n.statements !== i || n.isDeclarationFile !== _ || n.referencedFiles !== c || n.typeReferenceDirectives !== f || n.hasNoDefaultLib !== w || n.libReferenceDirectives !== F ? q(Hu(n, i, _, c, f, w, F), n) : n;
  }
  function F_(n) {
    let i = M(308);
    return i.sourceFiles = n, i.syntheticFileReferences = void 0, i.syntheticTypeReferences = void 0, i.syntheticLibReferences = void 0, i.hasNoDefaultLib = void 0, i;
  }
  function Qu(n, i) {
    return n.sourceFiles !== i ? q(F_(i), n) : n;
  }
  function Ku(n, i = false, _) {
    let c = M(237);
    return c.type = n, c.isSpread = i, c.tupleNameSource = _, c;
  }
  function Ca(n) {
    let i = M(352);
    return i._children = n, i;
  }
  function Rc(n) {
    let i = M(353);
    return i.original = n, yn(i, n), i;
  }
  function Uc(n, i) {
    let _ = M(355);
    return _.expression = n, _.original = i, _.transformFlags |= z(_.expression) | 1, yn(_, i), _;
  }
  function Bc(n, i) {
    return n.expression !== i ? q(Uc(i, n.original), n) : n;
  }
  function Zu() {
    return M(354);
  }
  function ep(n) {
    if (La(n) && !ml(n) && !n.original && !n.emitNode && !n.id) {
      if (Zb(n)) return n.elements;
      if (Zi(n) && jb(n.operatorToken)) return [n.left, n.right];
    }
    return n;
  }
  function V_(n) {
    let i = M(356);
    return i.elements = de(iy(n, ep)), i.transformFlags |= ke(i.elements), i;
  }
  function qc(n, i) {
    return n.elements !== i ? q(V_(i), n) : n;
  }
  function W_(n, i) {
    let _ = M(357);
    return _.expression = n, _.thisArg = i, _.transformFlags |= z(_.expression) | z(_.thisArg), _;
  }
  function zc(n, i, _) {
    return n.expression !== i || n.thisArg !== _ ? q(W_(i, _), n) : n;
  }
  function tp(n) {
    let i = bn(n.escapedText);
    return i.flags |= n.flags & -17, i.transformFlags = n.transformFlags, a(i, n), setIdentifierAutoGenerate(i, { ...n.emitNode.autoGenerate }), i;
  }
  function np(n) {
    let i = bn(n.escapedText);
    i.flags |= n.flags & -17, i.jsDoc = n.jsDoc, i.flowNode = n.flowNode, i.symbol = n.symbol, i.transformFlags = n.transformFlags, a(i, n);
    let _ = getIdentifierTypeArguments(n);
    return _ && setIdentifierTypeArguments(i, _), i;
  }
  function Fc(n) {
    let i = On(n.escapedText);
    return i.flags |= n.flags & -17, i.transformFlags = n.transformFlags, a(i, n), setIdentifierAutoGenerate(i, { ...n.emitNode.autoGenerate }), i;
  }
  function Vc(n) {
    let i = On(n.escapedText);
    return i.flags |= n.flags & -17, i.transformFlags = n.transformFlags, a(i, n), i;
  }
  function G_(n) {
    if (n === void 0) return n;
    if (rh(n)) return Aa(n);
    if (Ua(n)) return tp(n);
    if (tt(n)) return np(n);
    if (_1(n)) return Fc(n);
    if (gi(n)) return Vc(n);
    let i = ff(n.kind) ? t.createBaseNode(n.kind) : t.createBaseTokenNode(n.kind);
    i.flags |= n.flags & -17, i.transformFlags = n.transformFlags, a(i, n);
    for (let _ in n) Cr(i, _) || !Cr(n, _) || (i[_] = n[_]);
    return i;
  }
  function rp(n, i, _) {
    return Ci(i_(void 0, void 0, void 0, void 0, i ? [i] : [], void 0, Rr(n, true)), void 0, _ ? [_] : []);
  }
  function ip(n, i, _) {
    return Ci(a_(void 0, void 0, i ? [i] : [], void 0, void 0, Rr(n, true)), void 0, _ ? [_] : []);
  }
  function si() {
    return __(V("0"));
  }
  function Wc(n) {
    return ya(void 0, false, n);
  }
  function ap(n) {
    return ga(void 0, false, E_([ba(false, void 0, n)]));
  }
  function Y_(n, i) {
    return i === "null" ? ye.createStrictEquality(n, Jt()) : i === "undefined" ? ye.createStrictEquality(n, si()) : ye.createStrictEquality(la(n), dt(i));
  }
  function _p(n, i) {
    return i === "null" ? ye.createStrictInequality(n, Jt()) : i === "undefined" ? ye.createStrictInequality(n, si()) : ye.createStrictInequality(la(n), dt(i));
  }
  function zr(n, i, _) {
    return Jd(n) ? t_(Ei(n, void 0, i), void 0, void 0, _) : Ci(cr(n, i), void 0, _);
  }
  function sp(n, i, _) {
    return zr(n, "bind", [i, ..._]);
  }
  function op(n, i, _) {
    return zr(n, "call", [i, ..._]);
  }
  function cp(n, i, _) {
    return zr(n, "apply", [i, _]);
  }
  function ji(n, i, _) {
    return zr(Ge(n), i, _);
  }
  function Ri(n, i) {
    return zr(n, "slice", i === void 0 ? [] : [pr(i)]);
  }
  function lp(n, i) {
    return zr(n, "concat", i);
  }
  function X_(n, i, _) {
    return ji("Object", "defineProperty", [n, pr(i), _]);
  }
  function oi(n, i) {
    return ji("Object", "getOwnPropertyDescriptor", [n, pr(i)]);
  }
  function Gc(n, i, _) {
    return ji("Reflect", "get", _ ? [n, i, _] : [n, i]);
  }
  function up(n, i, _, c) {
    return ji("Reflect", "set", c ? [n, i, _, c] : [n, i, _]);
  }
  function ci(n, i, _) {
    return _ ? (n.push(Ea(i, _)), true) : false;
  }
  function Yc(n, i) {
    let _ = [];
    ci(_, "enumerable", pr(n.enumerable)), ci(_, "configurable", pr(n.configurable));
    let c = ci(_, "writable", pr(n.writable));
    c = ci(_, "value", n.value) || c;
    let f = ci(_, "get", n.get);
    return f = ci(_, "set", n.set) || f, B.assert(!(c && f), "A PropertyDescriptor may not be both an accessor descriptor and a data descriptor."), ki(_, !i);
  }
  function pp(n, i) {
    switch (n.kind) {
      case 217:
        return js(n, i);
      case 216:
        return Ls(n, n.type, i);
      case 234:
        return fa(n, i, n.type);
      case 238:
        return to(n, i, n.type);
      case 235:
        return eo(n, i);
      case 233:
        return Ks(n, i, n.typeArguments);
      case 355:
        return Bc(n, i);
    }
  }
  function fp(n) {
    return Al(n) && La(n) && La(getSourceMapRange(n)) && La(getCommentRange(n)) && !Xt(getSyntheticLeadingComments(n)) && !Xt(getSyntheticTrailingComments(n));
  }
  function Xc(n, i, _ = 31) {
    return n && lh(n, _) && !fp(n) ? pp(n, Xc(n.expression, i)) : i;
  }
  function H_(n, i, _) {
    if (!i) return n;
    let c = vo(i, i.label, Q1(i.statement) ? H_(n, i.statement) : n);
    return _ && _(i), c;
  }
  function $_(n, i) {
    let _ = vf(n);
    switch (_.kind) {
      case 80:
        return i;
      case 110:
      case 9:
      case 10:
      case 11:
        return false;
      case 209:
        return _.elements.length !== 0;
      case 210:
        return _.properties.length > 0;
      default:
        return true;
    }
  }
  function Hc(n, i, _, c = false) {
    let f = Vf(n, 31), w, F;
    return zd(f) ? (w = Ut(), F = f) : Ap(f) ? (w = Ut(), F = _ !== void 0 && _ < 2 ? yn(Ge("_super"), f) : f) : za(f) & 8192 ? (w = si(), F = o().parenthesizeLeftSideOfAccess(f, false)) : Xr(f) ? $_(f.expression, c) ? (w = ir(i), F = cr(yn(ye.createAssignment(w, f.expression), f.expression), f.name), yn(F, f)) : (w = f.expression, F = f) : Xa(f) ? $_(f.expression, c) ? (w = ir(i), F = Ai(yn(ye.createAssignment(w, f.expression), f.expression), f.argumentExpression), yn(F, f)) : (w = f.expression, F = f) : (w = si(), F = o().parenthesizeLeftSideOfAccess(n, false)), { target: F, thisArg: w };
  }
  function s(n, i) {
    return cr(r_(ki([R(void 0, "value", [fr(void 0, void 0, n, void 0, void 0, void 0)], Rr([Pi(i)]))])), "value");
  }
  function p(n) {
    return n.length > 10 ? V_(n) : dy(n, ye.createComma);
  }
  function d(n, i, _, c = 0, f) {
    let w = f ? n && lf(n) : e1(n);
    if (w && tt(w) && !Ua(w)) {
      let F = Sf(yn(G_(w), w), w.parent);
      return c |= za(w), _ || (c |= 96), i || (c |= 3072), c && setEmitFlags(F, c), F;
    }
    return Bn(n);
  }
  function b(n, i, _) {
    return d(n, i, _, 98304);
  }
  function S(n, i, _, c) {
    return d(n, i, _, 32768, c);
  }
  function N(n, i, _) {
    return d(n, i, _, 16384);
  }
  function H(n, i, _) {
    return d(n, i, _);
  }
  function _e(n, i, _, c) {
    let f = cr(n, La(i) ? i : G_(i));
    yn(f, i);
    let w = 0;
    return c || (w |= 96), _ || (w |= 3072), w && setEmitFlags(f, w), f;
  }
  function Z(n, i, _, c) {
    return n && bs(i, 32) ? _e(n, d(i), _, c) : N(i, _, c);
  }
  function ee(n, i, _, c) {
    let f = je(n, i, 0, _);
    return Ae(n, i, f, c);
  }
  function ce(n) {
    return Ya(n.expression) && n.expression.text === "use strict";
  }
  function Le() {
    return v6(Pi(dt("use strict")));
  }
  function je(n, i, _ = 0, c) {
    B.assert(i.length === 0, "Prologue directives should be at the first statement in the target statements array");
    let f = false, w = n.length;
    for (; _ < w; ) {
      let F = n[_];
      if (ol(F)) ce(F) && (f = true), i.push(F);
      else break;
      _++;
    }
    return c && !f && i.push(Le()), _;
  }
  function Ae(n, i, _, c, f = vy) {
    let w = n.length;
    for (; _ !== void 0 && _ < w; ) {
      let F = n[_];
      if (za(F) & 2097152 && f(F)) An(i, c ? visitNode(F, c, $g) : F);
      else break;
      _++;
    }
    return _;
  }
  function Yt(n) {
    return g6(n) ? n : yn(de([Le(), ...n]), n);
  }
  function mn(n) {
    return B.assert(Gp(n, Kg), "Cannot lift nodes to a Block."), uy(n) || Rr(n);
  }
  function Zt(n, i, _) {
    let c = _;
    for (; c < n.length && i(n[c]); ) c++;
    return c;
  }
  function ur(n, i) {
    if (!Xt(i)) return n;
    let _ = Zt(n, ol, 0), c = Zt(n, Bd, _), f = Zt(n, qd, c), w = Zt(i, ol, 0), F = Zt(i, Bd, w), pe = Zt(i, qd, F), Re = Zt(i, hf, pe);
    B.assert(Re === i.length, "Expected declarations to be valid standard or custom prologues");
    let en = mi(n) ? n.slice() : n;
    if (Re > pe && en.splice(f, 0, ...i.slice(pe, Re)), pe > F && en.splice(c, 0, ...i.slice(F, pe)), F > w && en.splice(_, 0, ...i.slice(w, F)), w > 0) if (_ === 0) en.splice(0, 0, ...i.slice(0, w));
    else {
      let kn = /* @__PURE__ */ new Map();
      for (let $n = 0; $n < _; $n++) {
        let Pa = n[$n];
        kn.set(Pa.expression.text, true);
      }
      for (let $n = w - 1; $n >= 0; $n--) {
        let Pa = i[$n];
        kn.has(Pa.expression.text) || en.unshift(Pa);
      }
    }
    return mi(n) ? yn(de(en, n.hasTrailingComma), n) : n;
  }
  function Ln(n, i) {
    let _;
    return typeof i == "number" ? _ = vn(i) : _ = i, Ef(n) ? _r(n, _, n.name, n.constraint, n.default) : ds(n) ? dr(n, _, n.dotDotDotToken, n.name, n.questionToken, n.type, n.initializer) : Nf(n) ? Ve(n, _, n.typeParameters, n.parameters, n.type) : I1(n) ? Vn(n, _, n.name, n.questionToken, n.type) : Va(n) ? L(n, _, n.name, n.questionToken ?? n.exclamationToken, n.type, n.initializer) : O1(n) ? fe(n, _, n.name, n.questionToken, n.typeParameters, n.parameters, n.type) : ms(n) ? He(n, _, n.asteriskToken, n.name, n.questionToken, n.typeParameters, n.parameters, n.type, n.body) : Af(n) ? Ir(n, _, n.parameters, n.body) : gl(n) ? Wn(n, _, n.name, n.parameters, n.type, n.body) : hs(n) ? $(n, _, n.name, n.parameters, n.body) : Cf(n) ? Ze(n, _, n.parameters, n.type) : Mf(n) ? Rs(n, _, n.asteriskToken, n.name, n.typeParameters, n.parameters, n.type, n.body) : Jf(n) ? Us(n, _, n.typeParameters, n.parameters, n.type, n.equalsGreaterThanToken, n.body) : bl(n) ? c_(n, _, n.name, n.typeParameters, n.heritageClauses, n.members) : Ha(n) ? io(n, _, n.declarationList) : jf(n) ? T_(n, _, n.asteriskToken, n.name, n.typeParameters, n.parameters, n.type, n.body) : Wa(n) ? ha(n, _, n.name, n.typeParameters, n.heritageClauses, n.members) : vs(n) ? Co(n, _, n.name, n.typeParameters, n.heritageClauses, n.members) : Dl(n) ? gr(n, _, n.name, n.typeParameters, n.type) : Z1(n) ? br(n, _, n.name, n.members) : Ti(n) ? Et(n, _, n.name, n.body) : Rf(n) ? Mo(n, _, n.isTypeOnly, n.name, n.moduleReference) : Uf(n) ? Lo(n, _, n.importClause, n.moduleSpecifier, n.attributes) : Bf(n) ? Ii(n, _, n.expression) : qf(n) ? Xo(n, _, n.isTypeOnly, n.exportClause, n.moduleSpecifier, n.attributes) : B.assertNever(n);
  }
  function Fr(n, i) {
    return ds(n) ? dr(n, i, n.dotDotDotToken, n.name, n.questionToken, n.type, n.initializer) : Va(n) ? L(n, i, n.name, n.questionToken ?? n.exclamationToken, n.type, n.initializer) : ms(n) ? He(n, i, n.asteriskToken, n.name, n.questionToken, n.typeParameters, n.parameters, n.type, n.body) : gl(n) ? Wn(n, i, n.name, n.parameters, n.type, n.body) : hs(n) ? $(n, i, n.name, n.parameters, n.body) : bl(n) ? c_(n, i, n.name, n.typeParameters, n.heritageClauses, n.members) : Wa(n) ? ha(n, i, n.name, n.typeParameters, n.heritageClauses, n.members) : B.assertNever(n);
  }
  function dp(n, i) {
    switch (n.kind) {
      case 177:
        return Wn(n, n.modifiers, i, n.parameters, n.type, n.body);
      case 178:
        return $(n, n.modifiers, i, n.parameters, n.body);
      case 174:
        return He(n, n.modifiers, n.asteriskToken, i, n.questionToken, n.typeParameters, n.parameters, n.type, n.body);
      case 173:
        return fe(n, n.modifiers, i, n.questionToken, n.typeParameters, n.parameters, n.type);
      case 172:
        return L(n, n.modifiers, i, n.questionToken ?? n.exclamationToken, n.type, n.initializer);
      case 171:
        return Vn(n, n.modifiers, i, n.questionToken, n.type);
      case 303:
        return qr(n, i, n.initializer);
    }
  }
  function De(n) {
    return n ? de(n) : void 0;
  }
  function et(n) {
    return typeof n == "string" ? Ge(n) : n;
  }
  function pr(n) {
    return typeof n == "string" ? dt(n) : typeof n == "number" ? V(n) : typeof n == "boolean" ? n ? lt() : ar() : n;
  }
  function Da(n) {
    return n && o().parenthesizeExpressionForDisallowedComma(n);
  }
  function $c(n) {
    return typeof n == "number" ? ct(n) : n;
  }
  function It(n) {
    return n && e6(n) ? yn(a(ao(), n), n) : n;
  }
  function xr(n) {
    return typeof n == "string" || n && !Lf(n) ? ma(n, void 0, void 0, void 0) : n;
  }
  function q(n, i) {
    return n !== i && (a(n, i), yn(n, i)), n;
  }
}
function il(e) {
  switch (e) {
    case 344:
      return "type";
    case 342:
      return "returns";
    case 343:
      return "this";
    case 340:
      return "enum";
    case 330:
      return "author";
    case 332:
      return "class";
    case 333:
      return "public";
    case 334:
      return "private";
    case 335:
      return "protected";
    case 336:
      return "readonly";
    case 337:
      return "override";
    case 345:
      return "template";
    case 346:
      return "typedef";
    case 341:
      return "param";
    case 348:
      return "prop";
    case 338:
      return "callback";
    case 339:
      return "overload";
    case 328:
      return "augments";
    case 329:
      return "implements";
    case 351:
      return "import";
    default:
      return B.fail(`Unsupported kind: ${B.formatSyntaxKind(e)}`);
  }
}
var En, Xd = {};
function Pb(e, t) {
  switch (En || (En = sf(99, false, 0)), e) {
    case 15:
      En.setText("`" + t + "`");
      break;
    case 16:
      En.setText("`" + t + "${");
      break;
    case 17:
      En.setText("}" + t + "${");
      break;
    case 18:
      En.setText("}" + t + "`");
      break;
  }
  let a = En.scan();
  if (a === 20 && (a = En.reScanTemplateToken(false)), En.isUnterminated()) return En.setText(void 0), Xd;
  let o;
  switch (a) {
    case 15:
    case 16:
    case 17:
    case 18:
      o = En.getTokenValue();
      break;
  }
  return o === void 0 || En.scan() !== 1 ? (En.setText(void 0), Xd) : (En.setText(void 0), o);
}
function jn(e) {
  return e && tt(e) ? ja(e) : z(e);
}
function ja(e) {
  return z(e) & -67108865;
}
function Nb(e, t) {
  return t | e.transformFlags & 134234112;
}
function z(e) {
  if (!e) return 0;
  let t = e.transformFlags & ~Ib(e.kind);
  return hg(e) && s1(e.name) ? Nb(e.name, t) : t;
}
function ke(e) {
  return e ? e.transformFlags : 0;
}
function Hd(e) {
  let t = 0;
  for (let a of e) t |= z(a);
  e.transformFlags = t;
}
function Ib(e) {
  if (e >= 182 && e <= 205) return -2;
  switch (e) {
    case 213:
    case 214:
    case 209:
      return -2147450880;
    case 267:
      return -1941676032;
    case 169:
      return -2147483648;
    case 219:
      return -2072174592;
    case 218:
    case 262:
      return -1937940480;
    case 261:
      return -2146893824;
    case 263:
    case 231:
      return -2147344384;
    case 176:
      return -1937948672;
    case 172:
      return -2013249536;
    case 174:
    case 177:
    case 178:
      return -2005057536;
    case 133:
    case 150:
    case 163:
    case 146:
    case 154:
    case 151:
    case 136:
    case 155:
    case 116:
    case 168:
    case 171:
    case 173:
    case 179:
    case 180:
    case 181:
    case 264:
    case 265:
      return -2;
    case 210:
      return -2147278848;
    case 299:
      return -2147418112;
    case 206:
    case 207:
      return -2147450880;
    case 216:
    case 238:
    case 234:
    case 355:
    case 217:
    case 108:
      return -2147483648;
    case 211:
    case 212:
      return -2147483648;
    default:
      return -2147483648;
  }
}
var Z_ = Ab();
function es(e) {
  return e.flags |= 16, e;
}
var Ob = { createBaseSourceFileNode: (e) => es(Z_.createBaseSourceFileNode(e)), createBaseIdentifierNode: (e) => es(Z_.createBaseIdentifierNode(e)), createBasePrivateIdentifierNode: (e) => es(Z_.createBasePrivateIdentifierNode(e)), createBaseTokenNode: (e) => es(Z_.createBaseTokenNode(e)), createBaseNode: (e) => es(Z_.createBaseNode(e)) };
wf(4, Ob);
function Mb(e, t) {
  if (e.original !== t && (e.original = t, t)) {
    let a = t.emitNode;
    a && (e.emitNode = Jb(a, e.emitNode));
  }
  return e;
}
function Jb(e, t) {
  let { flags: a, internalFlags: o, leadingComments: m, trailingComments: v, commentRange: A, sourceMapRange: P, tokenSourceMapRanges: l, constantValue: Q, helpers: h, startsOnNewLine: y, snippetElement: g, classThis: x, assignedName: I } = e;
  if (t || (t = {}), a && (t.flags = a), o && (t.internalFlags = o & -9), m && (t.leadingComments = Dn(m.slice(), t.leadingComments)), v && (t.trailingComments = Dn(v.slice(), t.trailingComments)), A && (t.commentRange = A), P && (t.sourceMapRange = P), l && (t.tokenSourceMapRanges = Lb(l, t.tokenSourceMapRanges)), Q !== void 0 && (t.constantValue = Q), h) for (let re of h) t.helpers = oy(t.helpers, re);
  return y !== void 0 && (t.startsOnNewLine = y), g !== void 0 && (t.snippetElement = g), x && (t.classThis = x), I && (t.assignedName = I), t;
}
function Lb(e, t) {
  t || (t = []);
  for (let a in e) t[a] = e[a];
  return t;
}
function ta(e) {
  return e.kind === 9;
}
function D1(e) {
  return e.kind === 10;
}
function Ya(e) {
  return e.kind === 11;
}
function P1(e) {
  return e.kind === 15;
}
function jb(e) {
  return e.kind === 28;
}
function $d(e) {
  return e.kind === 54;
}
function Qd(e) {
  return e.kind === 58;
}
function tt(e) {
  return e.kind === 80;
}
function gi(e) {
  return e.kind === 81;
}
function Rb(e) {
  return e.kind === 95;
}
function al(e) {
  return e.kind === 134;
}
function Ap(e) {
  return e.kind === 108;
}
function Ub(e) {
  return e.kind === 102;
}
function N1(e) {
  return e.kind === 166;
}
function kf(e) {
  return e.kind === 167;
}
function Ef(e) {
  return e.kind === 168;
}
function ds(e) {
  return e.kind === 169;
}
function El(e) {
  return e.kind === 170;
}
function I1(e) {
  return e.kind === 171;
}
function Va(e) {
  return e.kind === 172;
}
function O1(e) {
  return e.kind === 173;
}
function ms(e) {
  return e.kind === 174;
}
function Af(e) {
  return e.kind === 176;
}
function gl(e) {
  return e.kind === 177;
}
function hs(e) {
  return e.kind === 178;
}
function M1(e) {
  return e.kind === 179;
}
function J1(e) {
  return e.kind === 180;
}
function Cf(e) {
  return e.kind === 181;
}
function L1(e) {
  return e.kind === 182;
}
function Df(e) {
  return e.kind === 183;
}
function Pf(e) {
  return e.kind === 184;
}
function Nf(e) {
  return e.kind === 185;
}
function Bb(e) {
  return e.kind === 186;
}
function j1(e) {
  return e.kind === 187;
}
function qb(e) {
  return e.kind === 188;
}
function zb(e) {
  return e.kind === 189;
}
function R1(e) {
  return e.kind === 202;
}
function Fb(e) {
  return e.kind === 190;
}
function Vb(e) {
  return e.kind === 191;
}
function U1(e) {
  return e.kind === 192;
}
function B1(e) {
  return e.kind === 193;
}
function Wb(e) {
  return e.kind === 194;
}
function Gb(e) {
  return e.kind === 195;
}
function q1(e) {
  return e.kind === 196;
}
function Yb(e) {
  return e.kind === 197;
}
function z1(e) {
  return e.kind === 198;
}
function Xb(e) {
  return e.kind === 199;
}
function F1(e) {
  return e.kind === 200;
}
function Hb(e) {
  return e.kind === 201;
}
function $b(e) {
  return e.kind === 205;
}
function V1(e) {
  return e.kind === 208;
}
function W1(e) {
  return e.kind === 209;
}
function If(e) {
  return e.kind === 210;
}
function Xr(e) {
  return e.kind === 211;
}
function Xa(e) {
  return e.kind === 212;
}
function Of(e) {
  return e.kind === 213;
}
function G1(e) {
  return e.kind === 215;
}
function Al(e) {
  return e.kind === 217;
}
function Mf(e) {
  return e.kind === 218;
}
function Jf(e) {
  return e.kind === 219;
}
function Qb(e) {
  return e.kind === 222;
}
function Y1(e) {
  return e.kind === 224;
}
function Zi(e) {
  return e.kind === 226;
}
function X1(e) {
  return e.kind === 230;
}
function bl(e) {
  return e.kind === 231;
}
function H1(e) {
  return e.kind === 232;
}
function $1(e) {
  return e.kind === 233;
}
function cl(e) {
  return e.kind === 235;
}
function Kb(e) {
  return e.kind === 236;
}
function Zb(e) {
  return e.kind === 356;
}
function Ha(e) {
  return e.kind === 243;
}
function Cl(e) {
  return e.kind === 244;
}
function Q1(e) {
  return e.kind === 256;
}
function Lf(e) {
  return e.kind === 260;
}
function K1(e) {
  return e.kind === 261;
}
function jf(e) {
  return e.kind === 262;
}
function Wa(e) {
  return e.kind === 263;
}
function vs(e) {
  return e.kind === 264;
}
function Dl(e) {
  return e.kind === 265;
}
function Z1(e) {
  return e.kind === 266;
}
function Ti(e) {
  return e.kind === 267;
}
function Rf(e) {
  return e.kind === 271;
}
function Uf(e) {
  return e.kind === 272;
}
function Bf(e) {
  return e.kind === 277;
}
function qf(e) {
  return e.kind === 278;
}
function eh(e) {
  return e.kind === 279;
}
function e6(e) {
  return e.kind === 353;
}
function zf(e) {
  return e.kind === 283;
}
function zp(e) {
  return e.kind === 286;
}
function t6(e) {
  return e.kind === 289;
}
function th(e) {
  return e.kind === 295;
}
function n6(e) {
  return e.kind === 297;
}
function nh(e) {
  return e.kind === 303;
}
function rh(e) {
  return e.kind === 307;
}
function ih(e) {
  return e.kind === 309;
}
function ah(e) {
  return e.kind === 314;
}
function _h(e) {
  return e.kind === 317;
}
function sh(e) {
  return e.kind === 320;
}
function r6(e) {
  return e.kind === 322;
}
function Pl(e) {
  return e.kind === 323;
}
function i6(e) {
  return e.kind === 328;
}
function a6(e) {
  return e.kind === 333;
}
function _6(e) {
  return e.kind === 334;
}
function s6(e) {
  return e.kind === 335;
}
function o6(e) {
  return e.kind === 336;
}
function c6(e) {
  return e.kind === 337;
}
function l6(e) {
  return e.kind === 339;
}
function u6(e) {
  return e.kind === 331;
}
function Fp(e) {
  return e.kind === 341;
}
function p6(e) {
  return e.kind === 342;
}
function Ff(e) {
  return e.kind === 344;
}
function oh(e) {
  return e.kind === 345;
}
function f6(e) {
  return e.kind === 329;
}
function d6(e) {
  return e.kind === 350;
}
var $i = /* @__PURE__ */ new WeakMap();
function ch(e, t) {
  var a;
  let o = e.kind;
  return ff(o) ? o === 352 ? e._children : (a = $i.get(t)) == null ? void 0 : a.get(e) : bt;
}
function m6(e, t, a) {
  e.kind === 352 && B.fail("Should not need to re-set the children of a SyntaxList.");
  let o = $i.get(t);
  return o === void 0 && (o = /* @__PURE__ */ new WeakMap(), $i.set(t, o)), o.set(e, a), a;
}
function Kd(e, t) {
  var a;
  e.kind === 352 && B.fail("Did not expect to unset the children of a SyntaxList."), (a = $i.get(t)) == null || a.delete(e);
}
function h6(e, t) {
  let a = $i.get(e);
  a !== void 0 && ($i.delete(e), $i.set(t, a));
}
function Zd(e) {
  return (za(e) & 32768) !== 0;
}
function y6(e) {
  return Ya(e.expression) && e.expression.text === "use strict";
}
function g6(e) {
  for (let t of e) if (ol(t)) {
    if (y6(t)) return t;
  } else break;
}
function b6(e) {
  return Al(e) && ea(e) && !!Pg(e);
}
function lh(e, t = 31) {
  switch (e.kind) {
    case 217:
      return t & -2147483648 && b6(e) ? false : (t & 1) !== 0;
    case 216:
    case 234:
    case 238:
      return (t & 2) !== 0;
    case 233:
      return (t & 16) !== 0;
    case 235:
      return (t & 4) !== 0;
    case 355:
      return (t & 8) !== 0;
  }
  return false;
}
function Vf(e, t = 31) {
  for (; lh(e, t); ) e = e.expression;
  return e;
}
function v6(e) {
  return setStartsOnNewLine(e, true);
}
function as(e) {
  if (Gg(e)) return e.name;
  if (Fg(e)) {
    switch (e.kind) {
      case 303:
        return as(e.initializer);
      case 304:
        return e.name;
      case 305:
        return as(e.expression);
    }
    return;
  }
  return yl(e, true) ? as(e.left) : X1(e) ? as(e.expression) : e;
}
function T6(e) {
  switch (e.kind) {
    case 206:
    case 207:
    case 209:
      return e.elements;
    case 210:
      return e.properties;
  }
}
function em(e) {
  if (e) {
    let t = e;
    for (; ; ) {
      if (tt(t) || !t.body) return tt(t) ? t : t.name;
      t = t.body;
    }
  }
}
var tm;
((e) => {
  function t(h, y, g, x, I, re, he) {
    let ye = y > 0 ? I[y - 1] : void 0;
    return B.assertEqual(g[y], t), I[y] = h.onEnter(x[y], ye, he), g[y] = P(h, t), y;
  }
  e.enter = t;
  function a(h, y, g, x, I, re, he) {
    B.assertEqual(g[y], a), B.assertIsDefined(h.onLeft), g[y] = P(h, a);
    let ye = h.onLeft(x[y].left, I[y], x[y]);
    return ye ? (Q(y, x, ye), l(y, g, x, I, ye)) : y;
  }
  e.left = a;
  function o(h, y, g, x, I, re, he) {
    return B.assertEqual(g[y], o), B.assertIsDefined(h.onOperator), g[y] = P(h, o), h.onOperator(x[y].operatorToken, I[y], x[y]), y;
  }
  e.operator = o;
  function m(h, y, g, x, I, re, he) {
    B.assertEqual(g[y], m), B.assertIsDefined(h.onRight), g[y] = P(h, m);
    let ye = h.onRight(x[y].right, I[y], x[y]);
    return ye ? (Q(y, x, ye), l(y, g, x, I, ye)) : y;
  }
  e.right = m;
  function v(h, y, g, x, I, re, he) {
    B.assertEqual(g[y], v), g[y] = P(h, v);
    let ye = h.onExit(x[y], I[y]);
    if (y > 0) {
      if (y--, h.foldState) {
        let de = g[y] === v ? "right" : "left";
        I[y] = h.foldState(I[y], ye, de);
      }
    } else re.value = ye;
    return y;
  }
  e.exit = v;
  function A(h, y, g, x, I, re, he) {
    return B.assertEqual(g[y], A), y;
  }
  e.done = A;
  function P(h, y) {
    switch (y) {
      case t:
        if (h.onLeft) return a;
      case a:
        if (h.onOperator) return o;
      case o:
        if (h.onRight) return m;
      case m:
        return v;
      case v:
        return A;
      case A:
        return A;
      default:
        B.fail("Invalid state");
    }
  }
  e.nextState = P;
  function l(h, y, g, x, I) {
    return h++, y[h] = t, g[h] = I, x[h] = void 0, h;
  }
  function Q(h, y, g) {
    if (B.shouldAssert(2)) for (; h >= 0; ) B.assert(y[h] !== g, "Circular traversal detected."), h--;
  }
})(tm || (tm = {}));
function nm(e, t) {
  return typeof e == "object" ? Vp(false, e.prefix, e.node, e.suffix, t) : typeof e == "string" ? e.length > 0 && e.charCodeAt(0) === 35 ? e.slice(1) : e : "";
}
function x6(e, t) {
  return typeof e == "string" ? e : S6(e, B.checkDefined(t));
}
function S6(e, t) {
  return _1(e) ? t(e).slice(1) : Ua(e) ? t(e) : gi(e) ? e.escapedText.slice(1) : Pn(e);
}
function Vp(e, t, a, o, m) {
  return t = nm(t, m), o = nm(o, m), a = x6(a, m), `${e ? "#" : ""}${t}${a}${o}`;
}
function uh(e) {
  if (e.transformFlags & 65536) return true;
  if (e.transformFlags & 128) for (let t of T6(e)) {
    let a = as(t);
    if (a && Wg(a) && (a.transformFlags & 65536 || a.transformFlags & 128 && uh(a))) return true;
  }
  return false;
}
function yn(e, t) {
  return t ? yi(e, t.pos, t.end) : e;
}
function Nl(e) {
  let t = e.kind;
  return t === 168 || t === 169 || t === 171 || t === 172 || t === 173 || t === 174 || t === 176 || t === 177 || t === 178 || t === 181 || t === 185 || t === 218 || t === 219 || t === 231 || t === 243 || t === 262 || t === 263 || t === 264 || t === 265 || t === 266 || t === 267 || t === 271 || t === 272 || t === 277 || t === 278;
}
function Wf(e) {
  let t = e.kind;
  return t === 169 || t === 172 || t === 174 || t === 177 || t === 178 || t === 231 || t === 263;
}
var rm, im, am, _m, sm, w6 = { createBaseSourceFileNode: (e) => new (sm || (sm = At.getSourceFileConstructor()))(e, -1, -1), createBaseIdentifierNode: (e) => new (am || (am = At.getIdentifierConstructor()))(e, -1, -1), createBasePrivateIdentifierNode: (e) => new (_m || (_m = At.getPrivateIdentifierConstructor()))(e, -1, -1), createBaseTokenNode: (e) => new (im || (im = At.getTokenConstructor()))(e, -1, -1), createBaseNode: (e) => new (rm || (rm = At.getNodeConstructor()))(e, -1, -1) };
wf(1, w6);
function k(e, t) {
  return t && e(t);
}
function ie(e, t, a) {
  if (a) {
    if (t) return t(a);
    for (let o of a) {
      let m = e(o);
      if (m) return m;
    }
  }
}
function k6(e, t) {
  return e.charCodeAt(t + 1) === 42 && e.charCodeAt(t + 2) === 42 && e.charCodeAt(t + 3) !== 47;
}
function E6(e) {
  return Un(e.statements, A6) || C6(e);
}
function A6(e) {
  return Nl(e) && D6(e, 95) || Rf(e) && zf(e.moduleReference) || Uf(e) || Bf(e) || qf(e) ? e : void 0;
}
function C6(e) {
  return e.flags & 8388608 ? ph(e) : void 0;
}
function ph(e) {
  return P6(e) ? e : Ht(e, ph);
}
function D6(e, t) {
  return Xt(e.modifiers, (a) => a.kind === t);
}
function P6(e) {
  return Kb(e) && e.keywordToken === 102 && e.name.escapedText === "meta";
}
var N6 = { 166: function(t, a, o) {
  return k(a, t.left) || k(a, t.right);
}, 168: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || k(a, t.constraint) || k(a, t.default) || k(a, t.expression);
}, 304: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || k(a, t.questionToken) || k(a, t.exclamationToken) || k(a, t.equalsToken) || k(a, t.objectAssignmentInitializer);
}, 305: function(t, a, o) {
  return k(a, t.expression);
}, 169: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.dotDotDotToken) || k(a, t.name) || k(a, t.questionToken) || k(a, t.type) || k(a, t.initializer);
}, 172: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || k(a, t.questionToken) || k(a, t.exclamationToken) || k(a, t.type) || k(a, t.initializer);
}, 171: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || k(a, t.questionToken) || k(a, t.type) || k(a, t.initializer);
}, 303: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || k(a, t.questionToken) || k(a, t.exclamationToken) || k(a, t.initializer);
}, 260: function(t, a, o) {
  return k(a, t.name) || k(a, t.exclamationToken) || k(a, t.type) || k(a, t.initializer);
}, 208: function(t, a, o) {
  return k(a, t.dotDotDotToken) || k(a, t.propertyName) || k(a, t.name) || k(a, t.initializer);
}, 181: function(t, a, o) {
  return ie(a, o, t.modifiers) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type);
}, 185: function(t, a, o) {
  return ie(a, o, t.modifiers) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type);
}, 184: function(t, a, o) {
  return ie(a, o, t.modifiers) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type);
}, 179: om, 180: om, 174: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.asteriskToken) || k(a, t.name) || k(a, t.questionToken) || k(a, t.exclamationToken) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type) || k(a, t.body);
}, 173: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || k(a, t.questionToken) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type);
}, 176: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type) || k(a, t.body);
}, 177: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type) || k(a, t.body);
}, 178: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type) || k(a, t.body);
}, 262: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.asteriskToken) || k(a, t.name) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type) || k(a, t.body);
}, 218: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.asteriskToken) || k(a, t.name) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type) || k(a, t.body);
}, 219: function(t, a, o) {
  return ie(a, o, t.modifiers) || ie(a, o, t.typeParameters) || ie(a, o, t.parameters) || k(a, t.type) || k(a, t.equalsGreaterThanToken) || k(a, t.body);
}, 175: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.body);
}, 183: function(t, a, o) {
  return k(a, t.typeName) || ie(a, o, t.typeArguments);
}, 182: function(t, a, o) {
  return k(a, t.assertsModifier) || k(a, t.parameterName) || k(a, t.type);
}, 186: function(t, a, o) {
  return k(a, t.exprName) || ie(a, o, t.typeArguments);
}, 187: function(t, a, o) {
  return ie(a, o, t.members);
}, 188: function(t, a, o) {
  return k(a, t.elementType);
}, 189: function(t, a, o) {
  return ie(a, o, t.elements);
}, 192: cm, 193: cm, 194: function(t, a, o) {
  return k(a, t.checkType) || k(a, t.extendsType) || k(a, t.trueType) || k(a, t.falseType);
}, 195: function(t, a, o) {
  return k(a, t.typeParameter);
}, 205: function(t, a, o) {
  return k(a, t.argument) || k(a, t.attributes) || k(a, t.qualifier) || ie(a, o, t.typeArguments);
}, 302: function(t, a, o) {
  return k(a, t.assertClause);
}, 196: lm, 198: lm, 199: function(t, a, o) {
  return k(a, t.objectType) || k(a, t.indexType);
}, 200: function(t, a, o) {
  return k(a, t.readonlyToken) || k(a, t.typeParameter) || k(a, t.nameType) || k(a, t.questionToken) || k(a, t.type) || ie(a, o, t.members);
}, 201: function(t, a, o) {
  return k(a, t.literal);
}, 202: function(t, a, o) {
  return k(a, t.dotDotDotToken) || k(a, t.name) || k(a, t.questionToken) || k(a, t.type);
}, 206: um, 207: um, 209: function(t, a, o) {
  return ie(a, o, t.elements);
}, 210: function(t, a, o) {
  return ie(a, o, t.properties);
}, 211: function(t, a, o) {
  return k(a, t.expression) || k(a, t.questionDotToken) || k(a, t.name);
}, 212: function(t, a, o) {
  return k(a, t.expression) || k(a, t.questionDotToken) || k(a, t.argumentExpression);
}, 213: pm, 214: pm, 215: function(t, a, o) {
  return k(a, t.tag) || k(a, t.questionDotToken) || ie(a, o, t.typeArguments) || k(a, t.template);
}, 216: function(t, a, o) {
  return k(a, t.type) || k(a, t.expression);
}, 217: function(t, a, o) {
  return k(a, t.expression);
}, 220: function(t, a, o) {
  return k(a, t.expression);
}, 221: function(t, a, o) {
  return k(a, t.expression);
}, 222: function(t, a, o) {
  return k(a, t.expression);
}, 224: function(t, a, o) {
  return k(a, t.operand);
}, 229: function(t, a, o) {
  return k(a, t.asteriskToken) || k(a, t.expression);
}, 223: function(t, a, o) {
  return k(a, t.expression);
}, 225: function(t, a, o) {
  return k(a, t.operand);
}, 226: function(t, a, o) {
  return k(a, t.left) || k(a, t.operatorToken) || k(a, t.right);
}, 234: function(t, a, o) {
  return k(a, t.expression) || k(a, t.type);
}, 235: function(t, a, o) {
  return k(a, t.expression);
}, 238: function(t, a, o) {
  return k(a, t.expression) || k(a, t.type);
}, 236: function(t, a, o) {
  return k(a, t.name);
}, 227: function(t, a, o) {
  return k(a, t.condition) || k(a, t.questionToken) || k(a, t.whenTrue) || k(a, t.colonToken) || k(a, t.whenFalse);
}, 230: function(t, a, o) {
  return k(a, t.expression);
}, 241: fm, 268: fm, 307: function(t, a, o) {
  return ie(a, o, t.statements) || k(a, t.endOfFileToken);
}, 243: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.declarationList);
}, 261: function(t, a, o) {
  return ie(a, o, t.declarations);
}, 244: function(t, a, o) {
  return k(a, t.expression);
}, 245: function(t, a, o) {
  return k(a, t.expression) || k(a, t.thenStatement) || k(a, t.elseStatement);
}, 246: function(t, a, o) {
  return k(a, t.statement) || k(a, t.expression);
}, 247: function(t, a, o) {
  return k(a, t.expression) || k(a, t.statement);
}, 248: function(t, a, o) {
  return k(a, t.initializer) || k(a, t.condition) || k(a, t.incrementor) || k(a, t.statement);
}, 249: function(t, a, o) {
  return k(a, t.initializer) || k(a, t.expression) || k(a, t.statement);
}, 250: function(t, a, o) {
  return k(a, t.awaitModifier) || k(a, t.initializer) || k(a, t.expression) || k(a, t.statement);
}, 251: dm, 252: dm, 253: function(t, a, o) {
  return k(a, t.expression);
}, 254: function(t, a, o) {
  return k(a, t.expression) || k(a, t.statement);
}, 255: function(t, a, o) {
  return k(a, t.expression) || k(a, t.caseBlock);
}, 269: function(t, a, o) {
  return ie(a, o, t.clauses);
}, 296: function(t, a, o) {
  return k(a, t.expression) || ie(a, o, t.statements);
}, 297: function(t, a, o) {
  return ie(a, o, t.statements);
}, 256: function(t, a, o) {
  return k(a, t.label) || k(a, t.statement);
}, 257: function(t, a, o) {
  return k(a, t.expression);
}, 258: function(t, a, o) {
  return k(a, t.tryBlock) || k(a, t.catchClause) || k(a, t.finallyBlock);
}, 299: function(t, a, o) {
  return k(a, t.variableDeclaration) || k(a, t.block);
}, 170: function(t, a, o) {
  return k(a, t.expression);
}, 263: mm, 231: mm, 264: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || ie(a, o, t.typeParameters) || ie(a, o, t.heritageClauses) || ie(a, o, t.members);
}, 265: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || ie(a, o, t.typeParameters) || k(a, t.type);
}, 266: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || ie(a, o, t.members);
}, 306: function(t, a, o) {
  return k(a, t.name) || k(a, t.initializer);
}, 267: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || k(a, t.body);
}, 271: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name) || k(a, t.moduleReference);
}, 272: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.importClause) || k(a, t.moduleSpecifier) || k(a, t.attributes);
}, 273: function(t, a, o) {
  return k(a, t.name) || k(a, t.namedBindings);
}, 300: function(t, a, o) {
  return ie(a, o, t.elements);
}, 301: function(t, a, o) {
  return k(a, t.name) || k(a, t.value);
}, 270: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.name);
}, 274: function(t, a, o) {
  return k(a, t.name);
}, 280: function(t, a, o) {
  return k(a, t.name);
}, 275: hm, 279: hm, 278: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.exportClause) || k(a, t.moduleSpecifier) || k(a, t.attributes);
}, 276: ym, 281: ym, 277: function(t, a, o) {
  return ie(a, o, t.modifiers) || k(a, t.expression);
}, 228: function(t, a, o) {
  return k(a, t.head) || ie(a, o, t.templateSpans);
}, 239: function(t, a, o) {
  return k(a, t.expression) || k(a, t.literal);
}, 203: function(t, a, o) {
  return k(a, t.head) || ie(a, o, t.templateSpans);
}, 204: function(t, a, o) {
  return k(a, t.type) || k(a, t.literal);
}, 167: function(t, a, o) {
  return k(a, t.expression);
}, 298: function(t, a, o) {
  return ie(a, o, t.types);
}, 233: function(t, a, o) {
  return k(a, t.expression) || ie(a, o, t.typeArguments);
}, 283: function(t, a, o) {
  return k(a, t.expression);
}, 282: function(t, a, o) {
  return ie(a, o, t.modifiers);
}, 356: function(t, a, o) {
  return ie(a, o, t.elements);
}, 284: function(t, a, o) {
  return k(a, t.openingElement) || ie(a, o, t.children) || k(a, t.closingElement);
}, 288: function(t, a, o) {
  return k(a, t.openingFragment) || ie(a, o, t.children) || k(a, t.closingFragment);
}, 285: gm, 286: gm, 292: function(t, a, o) {
  return ie(a, o, t.properties);
}, 291: function(t, a, o) {
  return k(a, t.name) || k(a, t.initializer);
}, 293: function(t, a, o) {
  return k(a, t.expression);
}, 294: function(t, a, o) {
  return k(a, t.dotDotDotToken) || k(a, t.expression);
}, 287: function(t, a, o) {
  return k(a, t.tagName);
}, 295: function(t, a, o) {
  return k(a, t.namespace) || k(a, t.name);
}, 190: Fi, 191: Fi, 309: Fi, 315: Fi, 314: Fi, 316: Fi, 318: Fi, 317: function(t, a, o) {
  return ie(a, o, t.parameters) || k(a, t.type);
}, 320: function(t, a, o) {
  return (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment)) || ie(a, o, t.tags);
}, 347: function(t, a, o) {
  return k(a, t.tagName) || k(a, t.name) || (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment));
}, 310: function(t, a, o) {
  return k(a, t.name);
}, 311: function(t, a, o) {
  return k(a, t.left) || k(a, t.right);
}, 341: bm, 348: bm, 330: function(t, a, o) {
  return k(a, t.tagName) || (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment));
}, 329: function(t, a, o) {
  return k(a, t.tagName) || k(a, t.class) || (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment));
}, 328: function(t, a, o) {
  return k(a, t.tagName) || k(a, t.class) || (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment));
}, 345: function(t, a, o) {
  return k(a, t.tagName) || k(a, t.constraint) || ie(a, o, t.typeParameters) || (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment));
}, 346: function(t, a, o) {
  return k(a, t.tagName) || (t.typeExpression && t.typeExpression.kind === 309 ? k(a, t.typeExpression) || k(a, t.fullName) || (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment)) : k(a, t.fullName) || k(a, t.typeExpression) || (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment)));
}, 338: function(t, a, o) {
  return k(a, t.tagName) || k(a, t.fullName) || k(a, t.typeExpression) || (typeof t.comment == "string" ? void 0 : ie(a, o, t.comment));
}, 342: Vi, 344: Vi, 343: Vi, 340: Vi, 350: Vi, 349: Vi, 339: Vi, 323: function(t, a, o) {
  return Un(t.typeParameters, a) || Un(t.parameters, a) || k(a, t.type);
}, 324: Cp, 325: Cp, 326: Cp, 322: function(t, a, o) {
  return Un(t.jsDocPropertyTags, a);
}, 327: ui, 332: ui, 333: ui, 334: ui, 335: ui, 336: ui, 331: ui, 337: ui, 351: I6, 355: O6 };
function om(e, t, a) {
  return ie(t, a, e.typeParameters) || ie(t, a, e.parameters) || k(t, e.type);
}
function cm(e, t, a) {
  return ie(t, a, e.types);
}
function lm(e, t, a) {
  return k(t, e.type);
}
function um(e, t, a) {
  return ie(t, a, e.elements);
}
function pm(e, t, a) {
  return k(t, e.expression) || k(t, e.questionDotToken) || ie(t, a, e.typeArguments) || ie(t, a, e.arguments);
}
function fm(e, t, a) {
  return ie(t, a, e.statements);
}
function dm(e, t, a) {
  return k(t, e.label);
}
function mm(e, t, a) {
  return ie(t, a, e.modifiers) || k(t, e.name) || ie(t, a, e.typeParameters) || ie(t, a, e.heritageClauses) || ie(t, a, e.members);
}
function hm(e, t, a) {
  return ie(t, a, e.elements);
}
function ym(e, t, a) {
  return k(t, e.propertyName) || k(t, e.name);
}
function gm(e, t, a) {
  return k(t, e.tagName) || ie(t, a, e.typeArguments) || k(t, e.attributes);
}
function Fi(e, t, a) {
  return k(t, e.type);
}
function bm(e, t, a) {
  return k(t, e.tagName) || (e.isNameFirst ? k(t, e.name) || k(t, e.typeExpression) : k(t, e.typeExpression) || k(t, e.name)) || (typeof e.comment == "string" ? void 0 : ie(t, a, e.comment));
}
function Vi(e, t, a) {
  return k(t, e.tagName) || k(t, e.typeExpression) || (typeof e.comment == "string" ? void 0 : ie(t, a, e.comment));
}
function Cp(e, t, a) {
  return k(t, e.name);
}
function ui(e, t, a) {
  return k(t, e.tagName) || (typeof e.comment == "string" ? void 0 : ie(t, a, e.comment));
}
function I6(e, t, a) {
  return k(t, e.tagName) || k(t, e.importClause) || k(t, e.moduleSpecifier) || k(t, e.attributes) || (typeof e.comment == "string" ? void 0 : ie(t, a, e.comment));
}
function O6(e, t, a) {
  return k(t, e.expression);
}
function Ht(e, t, a) {
  if (e === void 0 || e.kind <= 165) return;
  let o = N6[e.kind];
  return o === void 0 ? void 0 : o(e, t, a);
}
function vm(e, t, a) {
  let o = Tm(e), m = [];
  for (; m.length < o.length; ) m.push(e);
  for (; o.length !== 0; ) {
    let v = o.pop(), A = m.pop();
    if (Yr(v)) {
      for (let P = v.length - 1; P >= 0; --P) o.push(v[P]), m.push(A);
    } else {
      let P = t(v, A);
      if (P) {
        if (P === "skip") continue;
        return P;
      }
      if (v.kind >= 166) for (let l of Tm(v)) o.push(l), m.push(v);
    }
  }
}
function Tm(e) {
  let t = [];
  return Ht(e, a, a), t;
  function a(o) {
    t.unshift(o);
  }
}
function fh(e) {
  e.externalModuleIndicator = E6(e);
}
function dh(e, t, a, o = false, m) {
  var v, A;
  (v = _l) == null || v.push(_l.Phase.Parse, "createSourceFile", { path: e }, true);
  let P, { languageVersion: l, setExternalModuleIndicator: Q, impliedNodeFormat: h, jsDocParsingMode: y } = typeof a == "object" ? a : { languageVersion: a };
  if (l === 100) P = Qi.parseSourceFile(e, t, l, void 0, o, 6, Fa, y);
  else {
    let g = h === void 0 ? Q : (x) => (x.impliedNodeFormat = h, (Q || fh)(x));
    P = Qi.parseSourceFile(e, t, l, void 0, o, m, g, y);
  }
  return (A = _l) == null || A.pop(), P;
}
function mh(e) {
  return e.externalModuleIndicator !== void 0;
}
function M6(e, t, a, o = false) {
  let m = vl.updateSourceFile(e, t, a, o);
  return m.flags |= e.flags & 12582912, m;
}
var Qi;
((e) => {
  var t = sf(99, true), a = 40960, o, m, v, A, P;
  function l(s) {
    return ar++, s;
  }
  var Q = { createBaseSourceFileNode: (s) => l(new P(s, 0, 0)), createBaseIdentifierNode: (s) => l(new v(s, 0, 0)), createBasePrivateIdentifierNode: (s) => l(new A(s, 0, 0)), createBaseTokenNode: (s) => l(new m(s, 0, 0)), createBaseNode: (s) => l(new o(s, 0, 0)) }, h = wf(11, Q), { createNodeArray: y, createNumericLiteral: g, createStringLiteral: x, createLiteralLikeNode: I, createIdentifier: re, createPrivateIdentifier: he, createToken: ye, createArrayLiteralExpression: de, createObjectLiteralExpression: M, createPropertyAccessExpression: ae, createPropertyAccessChain: Oe, createElementAccessExpression: V, createElementAccessChain: oe, createCallExpression: W, createCallChain: dt, createNewExpression: nr, createParenthesizedExpression: gn, createBlock: rr, createVariableStatement: bn, createExpressionStatement: In, createIfStatement: Ge, createWhileStatement: ir, createForStatement: Pr, createForOfStatement: Ot, createVariableDeclaration: Bn, createVariableDeclarationList: On } = h, Mt, vt, Qe, qn, $t, ct, _t, Ut, Jt, lt, ar, mt, vn, yt, cn, nt, Bt = true, rn = false;
  function _r(s, p, d, b, S = false, N, H, _e = 0) {
    var Z;
    if (N = db(s, N), N === 6) {
      let ce = dr(s, p, d, b, S);
      return convertToJson(ce, (Z = ce.statements[0]) == null ? void 0 : Z.expression, ce.parseDiagnostics, false, void 0), ce.referencedFiles = bt, ce.typeReferenceDirectives = bt, ce.libReferenceDirectives = bt, ce.amdDependencies = bt, ce.hasNoDefaultLib = false, ce.pragmas = ty, ce;
    }
    zn(s, p, d, b, N, _e);
    let ee = Nr(d, S, N, H || fh, _e);
    return Fn(), ee;
  }
  e.parseSourceFile = _r;
  function fr(s, p) {
    zn("", s, p, void 0, 1, 0), U();
    let d = jr(true), b = u() === 1 && !_t.length;
    return Fn(), b ? d : void 0;
  }
  e.parseIsolatedEntityName = fr;
  function dr(s, p, d = 2, b, S = false) {
    zn(s, p, d, b, 6, 0), vt = nt, U();
    let N = J(), H, _e;
    if (u() === 1) H = Ct([], N, N), _e = Wt();
    else {
      let ce;
      for (; u() !== 1; ) {
        let Ae;
        switch (u()) {
          case 23:
            Ae = ac();
            break;
          case 112:
          case 97:
          case 106:
            Ae = Wt();
            break;
          case 41:
            G(() => U() === 9 && U() !== 59) ? Ae = Fo() : Ae = I_();
            break;
          case 9:
          case 11:
            if (G(() => U() !== 59)) {
              Ae = Xn();
              break;
            }
          default:
            Ae = I_();
            break;
        }
        ce && Yr(ce) ? ce.push(Ae) : ce ? ce = [ce, Ae] : (ce = Ae, u() !== 1 && Ee(E.Unexpected_token));
      }
      let Le = Yr(ce) ? D(de(ce), N) : B.checkDefined(ce), je = In(Le);
      D(je, N), H = Ct([je], N), _e = Yn(1, E.Unexpected_token);
    }
    let Z = se(s, 2, 6, false, H, _e, vt, Fa);
    S && L(Z), Z.nodeCount = ar, Z.identifierCount = vn, Z.identifiers = mt, Z.parseDiagnostics = zi(_t, Z), Ut && (Z.jsDocDiagnostics = zi(Ut, Z));
    let ee = Z;
    return Fn(), ee;
  }
  e.parseJsonText = dr;
  function zn(s, p, d, b, S, N) {
    switch (o = At.getNodeConstructor(), m = At.getTokenConstructor(), v = At.getIdentifierConstructor(), A = At.getPrivateIdentifierConstructor(), P = At.getSourceFileConstructor(), Mt = zy(s), Qe = p, qn = d, Jt = b, $t = S, ct = Wd(S), _t = [], yt = 0, mt = /* @__PURE__ */ new Map(), vn = 0, ar = 0, vt = 0, Bt = true, $t) {
      case 1:
      case 2:
        nt = 524288;
        break;
      case 6:
        nt = 134742016;
        break;
      default:
        nt = 0;
        break;
    }
    rn = false, t.setText(Qe), t.setOnError(Zr), t.setScriptTarget(qn), t.setLanguageVariant(ct), t.setScriptKind($t), t.setJSDocParsingMode(N);
  }
  function Fn() {
    t.clearCommentDirectives(), t.setText(""), t.setOnError(void 0), t.setScriptKind(0), t.setJSDocParsingMode(0), Qe = void 0, qn = void 0, Jt = void 0, $t = void 0, ct = void 0, vt = 0, _t = void 0, Ut = void 0, yt = 0, mt = void 0, cn = void 0, Bt = true;
  }
  function Nr(s, p, d, b, S) {
    let N = j6(Mt);
    N && (nt |= 33554432), vt = nt, U();
    let H = xn(0, Kt);
    B.assert(u() === 1);
    let _e = qe(), Z = Ce(Wt(), _e), ee = se(Mt, s, d, N, H, Z, vt, b);
    return B6(ee, Qe), q6(ee, ce), ee.commentDirectives = t.getCommentDirectives(), ee.nodeCount = ar, ee.identifierCount = vn, ee.identifiers = mt, ee.parseDiagnostics = zi(_t, ee), ee.jsDocParsingMode = S, Ut && (ee.jsDocDiagnostics = zi(Ut, ee)), p && L(ee), ee;
    function ce(Le, je, Ae) {
      _t.push(Oa(Mt, Qe, Le, je, Ae));
    }
  }
  let Vn = false;
  function Ce(s, p) {
    if (!p) return s;
    B.assert(!s.jsDoc);
    let d = ay(l2(s, Qe), (b) => Hc.parseJSDocComment(s, b.pos, b.end - b.pos));
    return d.length && (s.jsDoc = d), Vn && (Vn = false, s.flags |= 536870912), s;
  }
  function mr(s) {
    let p = Jt, d = vl.createSyntaxCursor(s);
    Jt = { currentNode: ce };
    let b = [], S = _t;
    _t = [];
    let N = 0, H = Z(s.statements, 0);
    for (; H !== -1; ) {
      let Le = s.statements[N], je = s.statements[H];
      Dn(b, s.statements, N, H), N = ee(s.statements, H);
      let Ae = gp(S, (mn) => mn.start >= Le.pos), Yt = Ae >= 0 ? gp(S, (mn) => mn.start >= je.pos, Ae) : -1;
      Ae >= 0 && Dn(_t, S, Ae, Yt >= 0 ? Yt : void 0), un(() => {
        let mn = nt;
        for (nt |= 65536, t.resetTokenState(je.pos), U(); u() !== 1; ) {
          let Zt = t.getTokenFullStart(), ur = n_(0, Kt);
          if (b.push(ur), Zt === t.getTokenFullStart() && U(), N >= 0) {
            let Ln = s.statements[N];
            if (ur.end === Ln.pos) break;
            ur.end > Ln.pos && (N = ee(s.statements, N + 1));
          }
        }
        nt = mn;
      }, 2), H = N >= 0 ? Z(s.statements, N) : -1;
    }
    if (N >= 0) {
      let Le = s.statements[N];
      Dn(b, s.statements, N);
      let je = gp(S, (Ae) => Ae.start >= Le.pos);
      je >= 0 && Dn(_t, S, je);
    }
    return Jt = p, h.updateSourceFile(s, yn(y(b), s.statements));
    function _e(Le) {
      return !(Le.flags & 65536) && !!(Le.transformFlags & 67108864);
    }
    function Z(Le, je) {
      for (let Ae = je; Ae < Le.length; Ae++) if (_e(Le[Ae])) return Ae;
      return -1;
    }
    function ee(Le, je) {
      for (let Ae = je; Ae < Le.length; Ae++) if (!_e(Le[Ae])) return Ae;
      return -1;
    }
    function ce(Le) {
      let je = d.currentNode(Le);
      return Bt && je && _e(je) && Wp(je), je;
    }
  }
  function L(s) {
    xb(s);
  }
  e.fixupParentReferences = L;
  function se(s, p, d, b, S, N, H, _e) {
    let Z = h.createSourceFile(S, N, H);
    if (Yd(Z, 0, Qe.length), ee(Z), !b && mh(Z) && Z.transformFlags & 67108864) {
      let ce = Z;
      Z = mr(Z), ce !== Z && ee(Z);
    }
    return Z;
    function ee(ce) {
      ce.text = Qe, ce.bindDiagnostics = [], ce.bindSuggestionDiagnostics = void 0, ce.languageVersion = p, ce.fileName = s, ce.languageVariant = Wd(d), ce.isDeclarationFile = b, ce.scriptKind = d, _e(ce), ce.setExternalModuleIndicator = _e;
    }
  }
  function fe(s, p) {
    s ? nt |= p : nt &= ~p;
  }
  function Te(s) {
    fe(s, 8192);
  }
  function He(s) {
    fe(s, 16384);
  }
  function Ke(s) {
    fe(s, 32768);
  }
  function st(s) {
    fe(s, 65536);
  }
  function Dt(s, p) {
    let d = s & nt;
    if (d) {
      fe(false, d);
      let b = p();
      return fe(true, d), b;
    }
    return p();
  }
  function Tt(s, p) {
    let d = s & ~nt;
    if (d) {
      fe(true, d);
      let b = p();
      return fe(false, d), b;
    }
    return p();
  }
  function ut(s) {
    return Dt(8192, s);
  }
  function Ir(s) {
    return Tt(8192, s);
  }
  function hr(s) {
    return Dt(131072, s);
  }
  function Mn(s) {
    return Tt(131072, s);
  }
  function Wn(s) {
    return Tt(16384, s);
  }
  function Si(s) {
    return Tt(32768, s);
  }
  function R(s) {
    return Tt(65536, s);
  }
  function $(s) {
    return Dt(65536, s);
  }
  function K(s) {
    return Tt(81920, s);
  }
  function xe(s) {
    return Dt(81920, s);
  }
  function Se(s) {
    return (nt & s) !== 0;
  }
  function we() {
    return Se(16384);
  }
  function be() {
    return Se(8192);
  }
  function We() {
    return Se(131072);
  }
  function Ze() {
    return Se(32768);
  }
  function Ye() {
    return Se(65536);
  }
  function Ee(s, ...p) {
    return rt(t.getTokenStart(), t.getTokenEnd(), s, ...p);
  }
  function Tn(s, p, d, ...b) {
    let S = Yi(_t), N;
    return (!S || s !== S.start) && (N = Oa(Mt, Qe, s, p, d, ...b), _t.push(N)), rn = true, N;
  }
  function rt(s, p, d, ...b) {
    return Tn(s, p - s, d, ...b);
  }
  function ln(s, p, ...d) {
    rt(s.pos, s.end, p, ...d);
  }
  function Zr(s, p, d) {
    Tn(t.getTokenEnd(), p, s, d);
  }
  function J() {
    return t.getTokenFullStart();
  }
  function qe() {
    return t.hasPrecedingJSDocComment();
  }
  function u() {
    return lt;
  }
  function Ne() {
    return lt = t.scan();
  }
  function Me(s) {
    return U(), s();
  }
  function U() {
    return di(lt) && (t.hasUnicodeEscape() || t.hasExtendedUnicodeEscape()) && rt(t.getTokenStart(), t.getTokenEnd(), E.Keywords_cannot_contain_escape_characters), Ne();
  }
  function ze() {
    return lt = t.scanJsDocToken();
  }
  function an(s) {
    return lt = t.scanJSDocCommentTextToken(s);
  }
  function Ve() {
    return lt = t.reScanGreaterToken();
  }
  function $e() {
    return lt = t.reScanSlashToken();
  }
  function Pt(s) {
    return lt = t.reScanTemplateToken(s);
  }
  function kt() {
    return lt = t.reScanLessThanToken();
  }
  function Nt() {
    return lt = t.reScanHashToken();
  }
  function qt() {
    return lt = t.scanJsxIdentifier();
  }
  function Gn() {
    return lt = t.scanJsxToken();
  }
  function wi() {
    return lt = t.scanJsxAttributeValue();
  }
  function un(s, p) {
    let d = lt, b = _t.length, S = rn, N = nt, H = p !== 0 ? t.lookAhead(s) : t.tryScan(s);
    return B.assert(N === nt), (!H || p !== 0) && (lt = d, p !== 2 && (_t.length = b), rn = S), H;
  }
  function G(s) {
    return un(s, 1);
  }
  function le(s) {
    return un(s, 0);
  }
  function Fe() {
    return u() === 80 ? true : u() > 118;
  }
  function ve() {
    return u() === 80 ? true : u() === 127 && we() || u() === 135 && Ye() ? false : u() > 118;
  }
  function j(s, p, d = true) {
    return u() === s ? (d && U(), true) : (p ? Ee(p) : Ee(E._0_expected, it(s)), false);
  }
  let ht = Object.keys(nf).filter((s) => s.length > 2);
  function xt(s) {
    if (G1(s)) {
      rt(Ar(Qe, s.template.pos), s.template.end, E.Module_declaration_names_may_only_use_or_quoted_strings);
      return;
    }
    let p = tt(s) ? Pn(s) : void 0;
    if (!p || !og(p, qn)) {
      Ee(E._0_expected, it(27));
      return;
    }
    let d = Ar(Qe, s.pos);
    switch (p) {
      case "const":
      case "let":
      case "var":
        rt(d, s.end, E.Variable_declaration_not_allowed_at_this_location);
        return;
      case "declare":
        return;
      case "interface":
        Lt(E.Interface_name_cannot_be_0, E.Interface_must_be_given_a_name, 19);
        return;
      case "is":
        rt(d, t.getTokenStart(), E.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);
        return;
      case "module":
      case "namespace":
        Lt(E.Namespace_name_cannot_be_0, E.Namespace_must_be_given_a_name, 19);
        return;
      case "type":
        Lt(E.Type_alias_name_cannot_be_0, E.Type_alias_must_be_given_a_name, 64);
        return;
    }
    let b = ns(p, ht, gt) ?? pn(p);
    if (b) {
      rt(d, s.end, E.Unknown_keyword_or_identifier_Did_you_mean_0, b);
      return;
    }
    u() !== 0 && rt(d, s.end, E.Unexpected_keyword_or_identifier);
  }
  function Lt(s, p, d) {
    u() === d ? Ee(p) : Ee(s, t.getTokenValue());
  }
  function pn(s) {
    for (let p of ht) if (s.length > p.length + 2 && ul(s, p)) return `${p} ${s.slice(p.length)}`;
  }
  function Ul(s, p, d) {
    if (u() === 60 && !t.hasPrecedingLineBreak()) {
      Ee(E.Decorators_must_precede_the_name_and_all_keywords_of_property_declarations);
      return;
    }
    if (u() === 21) {
      Ee(E.Cannot_start_a_function_call_in_a_type_annotation), U();
      return;
    }
    if (p && !sr()) {
      d ? Ee(E._0_expected, it(27)) : Ee(E.Expected_for_property_initializer);
      return;
    }
    if (!aa()) {
      if (d) {
        Ee(E._0_expected, it(27));
        return;
      }
      xt(s);
    }
  }
  function Es(s) {
    return u() === s ? (ze(), true) : (B.assert(xp(s)), Ee(E._0_expected, it(s)), false);
  }
  function Or(s, p, d, b) {
    if (u() === p) {
      U();
      return;
    }
    let S = Ee(E._0_expected, it(p));
    d && S && nl(S, Oa(Mt, Qe, b, 1, E.The_parser_expected_to_find_a_1_to_match_the_0_token_here, it(s), it(p)));
  }
  function Je(s) {
    return u() === s ? (U(), true) : false;
  }
  function ft(s) {
    if (u() === s) return Wt();
  }
  function Bl(s) {
    if (u() === s) return zl();
  }
  function Yn(s, p, d) {
    return ft(s) || Gt(s, false, p || E._0_expected, d || it(s));
  }
  function ql(s) {
    let p = Bl(s);
    return p || (B.assert(xp(s)), Gt(s, false, E._0_expected, it(s)));
  }
  function Wt() {
    let s = J(), p = u();
    return U(), D(ye(p), s);
  }
  function zl() {
    let s = J(), p = u();
    return ze(), D(ye(p), s);
  }
  function sr() {
    return u() === 27 ? true : u() === 20 || u() === 1 || t.hasPrecedingLineBreak();
  }
  function aa() {
    return sr() ? (u() === 27 && U(), true) : false;
  }
  function Qt() {
    return aa() || j(27);
  }
  function Ct(s, p, d, b) {
    let S = y(s, b);
    return yi(S, p, d ?? t.getTokenFullStart()), S;
  }
  function D(s, p, d) {
    return yi(s, p, d ?? t.getTokenFullStart()), nt && (s.flags |= nt), rn && (rn = false, s.flags |= 262144), s;
  }
  function Gt(s, p, d, ...b) {
    p ? Tn(t.getTokenFullStart(), 0, d, ...b) : d && Ee(d, ...b);
    let S = J(), N = s === 80 ? re("", void 0) : Ld(s) ? h.createTemplateLiteralLikeNode(s, "", "", void 0) : s === 9 ? g("", void 0) : s === 11 ? x("", void 0) : s === 282 ? h.createMissingDeclaration() : ye(s);
    return D(N, S);
  }
  function Mr(s) {
    let p = mt.get(s);
    return p === void 0 && mt.set(s, p = s), p;
  }
  function or(s, p, d) {
    if (s) {
      vn++;
      let _e = t.hasPrecedingJSDocLeadingAsterisks() ? t.getTokenStart() : J(), Z = u(), ee = Mr(t.getTokenValue()), ce = t.hasExtendedUnicodeEscape();
      return Ne(), D(re(ee, Z, ce), _e);
    }
    if (u() === 81) return Ee(d || E.Private_identifiers_are_not_allowed_outside_class_bodies), or(true);
    if (u() === 0 && t.tryScan(() => t.reScanInvalidIdentifier() === 80)) return or(true);
    vn++;
    let b = u() === 1, S = t.isReservedWord(), N = t.getTokenText(), H = S ? E.Identifier_expected_0_is_a_reserved_word_that_cannot_be_used_here : E.Identifier_expected;
    return Gt(80, b, p || H, N);
  }
  function Ka(s) {
    return or(Fe(), void 0, s);
  }
  function St(s, p) {
    return or(ve(), s, p);
  }
  function jt(s) {
    return or(wt(u()), s);
  }
  function ei() {
    return (t.hasUnicodeEscape() || t.hasExtendedUnicodeEscape()) && Ee(E.Unicode_escape_sequence_cannot_appear_here), or(wt(u()));
  }
  function yr() {
    return wt(u()) || u() === 11 || u() === 9 || u() === 10;
  }
  function As() {
    return wt(u()) || u() === 11;
  }
  function Fl(s) {
    if (u() === 11 || u() === 9 || u() === 10) {
      let p = Xn();
      return p.text = Mr(p.text), p;
    }
    return u() === 23 ? Vl() : u() === 81 ? _a() : jt();
  }
  function Jr() {
    return Fl();
  }
  function Vl() {
    let s = J();
    j(23);
    let p = ut(Et);
    return j(24), D(h.createComputedPropertyName(p), s);
  }
  function _a() {
    let s = J(), p = he(Mr(t.getTokenValue()));
    return U(), D(p, s);
  }
  function ti(s) {
    return u() === s && le(Cs);
  }
  function Za() {
    return U(), t.hasPrecedingLineBreak() ? false : cr();
  }
  function Cs() {
    switch (u()) {
      case 87:
        return U() === 94;
      case 95:
        return U(), u() === 90 ? G(Ei) : u() === 156 ? G(Wl) : ki();
      case 90:
        return Ei();
      case 126:
        return U(), cr();
      case 139:
      case 153:
        return U(), Gl();
      default:
        return Za();
    }
  }
  function ki() {
    return u() === 60 || u() !== 42 && u() !== 130 && u() !== 19 && cr();
  }
  function Wl() {
    return U(), ki();
  }
  function Ds() {
    return Wr(u()) && le(Cs);
  }
  function cr() {
    return u() === 23 || u() === 19 || u() === 42 || u() === 26 || yr();
  }
  function Gl() {
    return u() === 23 || yr();
  }
  function Ei() {
    return U(), u() === 86 || u() === 100 || u() === 120 || u() === 60 || u() === 128 && G(gc) || u() === 134 && G(bc);
  }
  function sa(s, p) {
    if (ca(s)) return true;
    switch (s) {
      case 0:
      case 1:
      case 3:
        return !(u() === 27 && p) && vc();
      case 2:
        return u() === 84 || u() === 90;
      case 4:
        return G(ao);
      case 5:
        return G(Vu) || u() === 27 && !p;
      case 6:
        return u() === 23 || yr();
      case 12:
        switch (u()) {
          case 23:
          case 42:
          case 26:
          case 25:
            return true;
          default:
            return yr();
        }
      case 18:
        return yr();
      case 9:
        return u() === 23 || u() === 26 || yr();
      case 24:
        return As();
      case 7:
        return u() === 19 ? G(Ps) : p ? ve() && !e_() : x_() && !e_();
      case 8:
        return ka();
      case 10:
        return u() === 28 || u() === 26 || ka();
      case 19:
        return u() === 103 || u() === 87 || ve();
      case 15:
        switch (u()) {
          case 28:
          case 25:
            return true;
        }
      case 11:
        return u() === 26 || br();
      case 16:
        return fa(false);
      case 17:
        return fa(true);
      case 20:
      case 21:
        return u() === 28 || ai();
      case 22:
        return Rc();
      case 23:
        return u() === 161 && G(Ru) ? false : u() === 11 ? true : wt(u());
      case 13:
        return wt(u()) || u() === 19;
      case 14:
        return true;
      case 25:
        return true;
      case 26:
        return B.fail("ParsingContext.Count used as a context");
      default:
        B.assertNever(s, "Non-exhaustive case in 'isListElement'.");
    }
  }
  function Ps() {
    if (B.assert(u() === 19), U() === 20) {
      let s = U();
      return s === 28 || s === 19 || s === 96 || s === 119;
    }
    return true;
  }
  function Ai() {
    return U(), ve();
  }
  function Yl() {
    return U(), wt(u());
  }
  function Ns() {
    return U(), Fy(u());
  }
  function e_() {
    return u() === 119 || u() === 96 ? G(Is) : false;
  }
  function Is() {
    return U(), br();
  }
  function Ci() {
    return U(), ai();
  }
  function oa(s) {
    if (u() === 1) return true;
    switch (s) {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 12:
      case 9:
      case 23:
      case 24:
        return u() === 20;
      case 3:
        return u() === 20 || u() === 84 || u() === 90;
      case 7:
        return u() === 19 || u() === 96 || u() === 119;
      case 8:
        return t_();
      case 19:
        return u() === 32 || u() === 21 || u() === 19 || u() === 96 || u() === 119;
      case 11:
        return u() === 22 || u() === 27;
      case 15:
      case 21:
      case 10:
        return u() === 24;
      case 17:
      case 16:
      case 18:
        return u() === 22 || u() === 24;
      case 20:
        return u() !== 28;
      case 22:
        return u() === 19 || u() === 20;
      case 13:
        return u() === 32 || u() === 44;
      case 14:
        return u() === 30 && G(G_);
      default:
        return false;
    }
  }
  function t_() {
    return !!(sr() || Uo(u()) || u() === 39);
  }
  function Os() {
    B.assert(yt, "Missing parsing context");
    for (let s = 0; s < 26; s++) if (yt & 1 << s && (sa(s, true) || oa(s))) return true;
    return false;
  }
  function xn(s, p) {
    let d = yt;
    yt |= 1 << s;
    let b = [], S = J();
    for (; !oa(s); ) {
      if (sa(s, false)) {
        b.push(n_(s, p));
        continue;
      }
      if (qs(s)) break;
    }
    return yt = d, Ct(b, S);
  }
  function n_(s, p) {
    let d = ca(s);
    return d ? Ms(d) : p();
  }
  function ca(s, p) {
    var d;
    if (!Jt || !Js(s) || rn) return;
    let b = Jt.currentNode(p ?? t.getTokenFullStart());
    if (!(Hi(b) || L6(b) || m1(b) || (b.flags & 101441536) !== nt) && Ls(b, s)) return bf(b) && ((d = b.jsDoc) != null && d.jsDocCache) && (b.jsDoc.jsDocCache = void 0), b;
  }
  function Ms(s) {
    return t.resetTokenState(s.end), U(), s;
  }
  function Js(s) {
    switch (s) {
      case 5:
      case 2:
      case 0:
      case 1:
      case 3:
      case 6:
      case 4:
      case 8:
      case 17:
      case 16:
        return true;
    }
    return false;
  }
  function Ls(s, p) {
    switch (p) {
      case 5:
        return r_(s);
      case 2:
        return js(s);
      case 0:
      case 1:
      case 3:
        return i_(s);
      case 6:
        return Rs(s);
      case 4:
        return a_(s);
      case 8:
        return Us(s);
      case 17:
      case 16:
        return Bs(s);
    }
    return false;
  }
  function r_(s) {
    if (s) switch (s.kind) {
      case 176:
      case 181:
      case 177:
      case 178:
      case 172:
      case 240:
        return true;
      case 174:
        let p = s;
        return !(p.name.kind === 80 && p.name.escapedText === "constructor");
    }
    return false;
  }
  function js(s) {
    if (s) switch (s.kind) {
      case 296:
      case 297:
        return true;
    }
    return false;
  }
  function i_(s) {
    if (s) switch (s.kind) {
      case 262:
      case 243:
      case 241:
      case 245:
      case 244:
      case 257:
      case 253:
      case 255:
      case 252:
      case 251:
      case 249:
      case 250:
      case 248:
      case 247:
      case 254:
      case 242:
      case 258:
      case 256:
      case 246:
      case 259:
      case 272:
      case 271:
      case 278:
      case 277:
      case 267:
      case 263:
      case 264:
      case 266:
      case 265:
        return true;
    }
    return false;
  }
  function Rs(s) {
    return s.kind === 306;
  }
  function a_(s) {
    if (s) switch (s.kind) {
      case 180:
      case 173:
      case 181:
      case 171:
      case 179:
        return true;
    }
    return false;
  }
  function Us(s) {
    return s.kind !== 260 ? false : s.initializer === void 0;
  }
  function Bs(s) {
    return s.kind !== 169 ? false : s.initializer === void 0;
  }
  function qs(s) {
    return la(s), Os() ? true : (U(), false);
  }
  function la(s) {
    switch (s) {
      case 0:
        return u() === 90 ? Ee(E._0_expected, it(95)) : Ee(E.Declaration_or_statement_expected);
      case 1:
        return Ee(E.Declaration_or_statement_expected);
      case 2:
        return Ee(E.case_or_default_expected);
      case 3:
        return Ee(E.Statement_expected);
      case 18:
      case 4:
        return Ee(E.Property_or_signature_expected);
      case 5:
        return Ee(E.Unexpected_token_A_constructor_method_accessor_or_property_was_expected);
      case 6:
        return Ee(E.Enum_member_expected);
      case 7:
        return Ee(E.Expression_expected);
      case 8:
        return di(u()) ? Ee(E._0_is_not_allowed_as_a_variable_declaration_name, it(u())) : Ee(E.Variable_declaration_expected);
      case 9:
        return Ee(E.Property_destructuring_pattern_expected);
      case 10:
        return Ee(E.Array_element_destructuring_pattern_expected);
      case 11:
        return Ee(E.Argument_expression_expected);
      case 12:
        return Ee(E.Property_assignment_expected);
      case 15:
        return Ee(E.Expression_or_comma_expected);
      case 17:
        return Ee(E.Parameter_declaration_expected);
      case 16:
        return di(u()) ? Ee(E._0_is_not_allowed_as_a_parameter_name, it(u())) : Ee(E.Parameter_declaration_expected);
      case 19:
        return Ee(E.Type_parameter_declaration_expected);
      case 20:
        return Ee(E.Type_argument_expected);
      case 21:
        return Ee(E.Type_expected);
      case 22:
        return Ee(E.Unexpected_token_expected);
      case 23:
        return u() === 161 ? Ee(E._0_expected, "}") : Ee(E.Identifier_expected);
      case 13:
        return Ee(E.Identifier_expected);
      case 14:
        return Ee(E.Identifier_expected);
      case 24:
        return Ee(E.Identifier_or_string_literal_expected);
      case 25:
        return Ee(E.Identifier_expected);
      case 26:
        return B.fail("ParsingContext.Count used as a context");
      default:
        B.assertNever(s);
    }
  }
  function fn(s, p, d) {
    let b = yt;
    yt |= 1 << s;
    let S = [], N = J(), H = -1;
    for (; ; ) {
      if (sa(s, false)) {
        let _e = t.getTokenFullStart(), Z = n_(s, p);
        if (!Z) {
          yt = b;
          return;
        }
        if (S.push(Z), H = t.getTokenStart(), Je(28)) continue;
        if (H = -1, oa(s)) break;
        j(28, __(s)), d && u() === 27 && !t.hasPrecedingLineBreak() && U(), _e === t.getTokenFullStart() && U();
        continue;
      }
      if (oa(s) || qs(s)) break;
    }
    return yt = b, Ct(S, N, void 0, H >= 0);
  }
  function __(s) {
    return s === 6 ? E.An_enum_member_name_must_be_followed_by_a_or : void 0;
  }
  function lr() {
    let s = Ct([], J());
    return s.isMissingList = true, s;
  }
  function zs(s) {
    return !!s.isMissingList;
  }
  function Lr(s, p, d, b) {
    if (j(d)) {
      let S = fn(s, p);
      return j(b), S;
    }
    return lr();
  }
  function jr(s, p) {
    let d = J(), b = s ? jt(p) : St(p);
    for (; Je(25) && u() !== 30; ) b = D(h.createQualifiedName(b, ni(s, false, true)), d);
    return b;
  }
  function Xl(s, p) {
    return D(h.createQualifiedName(s, p), s.pos);
  }
  function ni(s, p, d) {
    if (t.hasPrecedingLineBreak() && wt(u()) && G(M_)) return Gt(80, true, E.Identifier_expected);
    if (u() === 81) {
      let b = _a();
      return p ? b : Gt(80, true, E.Identifier_expected);
    }
    return s ? d ? jt() : ei() : St();
  }
  function Hl(s) {
    let p = J(), d = [], b;
    do
      b = Gs(s), d.push(b);
    while (b.literal.kind === 17);
    return Ct(d, p);
  }
  function ua(s) {
    let p = J();
    return D(h.createTemplateExpression(Di(s), Hl(s)), p);
  }
  function Fs() {
    let s = J();
    return D(h.createTemplateLiteralType(Di(false), $l()), s);
  }
  function $l() {
    let s = J(), p = [], d;
    do
      d = Vs(), p.push(d);
    while (d.literal.kind === 17);
    return Ct(p, s);
  }
  function Vs() {
    let s = J();
    return D(h.createTemplateLiteralTypeSpan(ot(), Ws(false)), s);
  }
  function Ws(s) {
    return u() === 20 ? (Pt(s), Ys()) : Yn(18, E._0_expected, it(20));
  }
  function Gs(s) {
    let p = J();
    return D(h.createTemplateSpan(ut(Et), Ws(s)), p);
  }
  function Xn() {
    return ri(u());
  }
  function Di(s) {
    !s && t.getTokenFlags() & 26656 && Pt(false);
    let p = ri(u());
    return B.assert(p.kind === 16, "Template head has wrong token kind"), p;
  }
  function Ys() {
    let s = ri(u());
    return B.assert(s.kind === 17 || s.kind === 18, "Template fragment has wrong token kind"), s;
  }
  function Ql(s) {
    let p = s === 15 || s === 18, d = t.getTokenText();
    return d.substring(1, d.length - (t.isUnterminated() ? 0 : p ? 1 : 2));
  }
  function ri(s) {
    let p = J(), d = Ld(s) ? h.createTemplateLiteralLikeNode(s, t.getTokenValue(), Ql(s), t.getTokenFlags() & 7176) : s === 9 ? g(t.getTokenValue(), t.getNumericLiteralFlags()) : s === 11 ? x(t.getTokenValue(), void 0, t.hasExtendedUnicodeEscape()) : Jg(s) ? I(s, t.getTokenValue()) : B.fail();
    return t.hasExtendedUnicodeEscape() && (d.hasExtendedUnicodeEscape = true), t.isUnterminated() && (d.isUnterminated = true), U(), D(d, p);
  }
  function ii() {
    return jr(true, E.Type_expected);
  }
  function Xs() {
    if (!t.hasPrecedingLineBreak() && kt() === 30) return Lr(20, ot, 30, 32);
  }
  function pa() {
    let s = J();
    return D(h.createTypeReferenceNode(ii(), Xs()), s);
  }
  function s_(s) {
    switch (s.kind) {
      case 183:
        return Hi(s.typeName);
      case 184:
      case 185: {
        let { parameters: p, type: d } = s;
        return zs(p) || s_(d);
      }
      case 196:
        return s_(s.type);
      default:
        return false;
    }
  }
  function Kl(s) {
    return U(), D(h.createTypePredicateNode(void 0, s, ot()), s.pos);
  }
  function o_() {
    let s = J();
    return U(), D(h.createThisTypeNode(), s);
  }
  function Zl() {
    let s = J();
    return U(), D(h.createJSDocAllType(), s);
  }
  function Hs() {
    let s = J();
    return U(), D(h.createJSDocNonNullableType(b_(), false), s);
  }
  function eu() {
    let s = J();
    return U(), u() === 28 || u() === 20 || u() === 22 || u() === 32 || u() === 64 || u() === 52 ? D(h.createJSDocUnknownType(), s) : D(h.createJSDocNullableType(ot(), false), s);
  }
  function $s() {
    let s = J(), p = qe();
    if (le(Fc)) {
      let d = Hn(36), b = Jn(59, false);
      return Ce(D(h.createJSDocFunctionType(d, b), s), p);
    }
    return D(h.createTypeReferenceNode(jt(), void 0), s);
  }
  function c_() {
    let s = J(), p;
    return (u() === 110 || u() === 105) && (p = jt(), j(59)), D(h.createParameterDeclaration(void 0, void 0, p, void 0, l_(), void 0), s);
  }
  function l_() {
    t.setSkipJsDocLeadingAsterisks(true);
    let s = J();
    if (Je(144)) {
      let b = h.createJSDocNamepathType(void 0);
      e: for (; ; ) switch (u()) {
        case 20:
        case 1:
        case 28:
        case 5:
          break e;
        default:
          ze();
      }
      return t.setSkipJsDocLeadingAsterisks(false), D(b, s);
    }
    let p = Je(26), d = ha();
    return t.setSkipJsDocLeadingAsterisks(false), p && (d = D(h.createJSDocVariadicType(d), s)), u() === 64 ? (U(), D(h.createJSDocOptionalType(d), s)) : d;
  }
  function Qs() {
    let s = J();
    j(114);
    let p = jr(true), d = t.hasPrecedingLineBreak() ? void 0 : Ca();
    return D(h.createTypeQueryNode(p, d), s);
  }
  function Ks() {
    let s = J(), p = wn(false, true), d = St(), b, S;
    Je(96) && (ai() || !br() ? b = ot() : S = Yo());
    let N = Je(64) ? ot() : void 0, H = h.createTypeParameterDeclaration(p, d, b, N);
    return H.expression = S, D(H, s);
  }
  function dn() {
    if (u() === 30) return Lr(19, Ks, 30, 32);
  }
  function fa(s) {
    return u() === 26 || ka() || Wr(u()) || u() === 60 || ai(!s);
  }
  function Zs(s) {
    let p = Li(E.Private_identifiers_cannot_be_used_as_parameters);
    return a2(p) === 0 && !Xt(s) && Wr(u()) && U(), p;
  }
  function eo() {
    return Fe() || u() === 23 || u() === 19;
  }
  function u_(s) {
    return p_(s);
  }
  function to(s) {
    return p_(s, false);
  }
  function p_(s, p = true) {
    let d = J(), b = qe(), S = s ? R(() => wn(true)) : $(() => wn(true));
    if (u() === 110) {
      let Z = h.createParameterDeclaration(S, void 0, or(true), void 0, gr(), void 0), ee = Xp(S);
      return ee && ln(ee, E.Neither_decorators_nor_modifiers_may_be_applied_to_this_parameters), Ce(D(Z, d), b);
    }
    let N = Bt;
    Bt = false;
    let H = ft(26);
    if (!p && !eo()) return;
    let _e = Ce(D(h.createParameterDeclaration(S, H, Zs(S), ft(58), gr(), vr()), d), b);
    return Bt = N, _e;
  }
  function Jn(s, p) {
    if (no(s, p)) return hr(ha);
  }
  function no(s, p) {
    return s === 39 ? (j(s), true) : Je(59) ? true : p && u() === 39 ? (Ee(E._0_expected, it(59)), U(), true) : false;
  }
  function f_(s, p) {
    let d = we(), b = Ye();
    He(!!(s & 1)), st(!!(s & 2));
    let S = s & 32 ? fn(17, c_) : fn(16, () => p ? u_(b) : to(b));
    return He(d), st(b), S;
  }
  function Hn(s) {
    if (!j(21)) return lr();
    let p = f_(s, true);
    return j(22), p;
  }
  function da() {
    Je(28) || Qt();
  }
  function ro(s) {
    let p = J(), d = qe();
    s === 180 && j(105);
    let b = dn(), S = Hn(4), N = Jn(59, true);
    da();
    let H = s === 179 ? h.createCallSignature(b, S, N) : h.createConstructSignature(b, S, N);
    return Ce(D(H, p), d);
  }
  function Rr() {
    return u() === 23 && G(tu);
  }
  function tu() {
    if (U(), u() === 26 || u() === 24) return true;
    if (Wr(u())) {
      if (U(), ve()) return true;
    } else if (ve()) U();
    else return false;
    return u() === 59 || u() === 28 ? true : u() !== 58 ? false : (U(), u() === 59 || u() === 28 || u() === 24);
  }
  function d_(s, p, d) {
    let b = Lr(16, () => u_(false), 23, 24), S = gr();
    da();
    let N = h.createIndexSignature(d, b, S);
    return Ce(D(N, s), p);
  }
  function io(s, p, d) {
    let b = Jr(), S = ft(58), N;
    if (u() === 21 || u() === 30) {
      let H = dn(), _e = Hn(4), Z = Jn(59, true);
      N = h.createMethodSignature(d, b, S, H, _e, Z);
    } else {
      let H = gr();
      N = h.createPropertySignature(d, b, S, H), u() === 64 && (N.initializer = vr());
    }
    return da(), Ce(D(N, s), p);
  }
  function ao() {
    if (u() === 21 || u() === 30 || u() === 139 || u() === 153) return true;
    let s = false;
    for (; Wr(u()); ) s = true, U();
    return u() === 23 ? true : (yr() && (s = true, U()), s ? u() === 21 || u() === 30 || u() === 58 || u() === 59 || u() === 28 || sr() : false);
  }
  function Pi() {
    if (u() === 21 || u() === 30) return ro(179);
    if (u() === 105 && G(_o)) return ro(180);
    let s = J(), p = qe(), d = wn(false);
    return ti(139) ? qr(s, p, d, 177, 4) : ti(153) ? qr(s, p, d, 178, 4) : Rr() ? d_(s, p, d) : io(s, p, d);
  }
  function _o() {
    return U(), u() === 21 || u() === 30;
  }
  function so() {
    return U() === 25;
  }
  function oo() {
    switch (U()) {
      case 21:
      case 30:
      case 25:
        return true;
    }
    return false;
  }
  function co() {
    let s = J();
    return D(h.createTypeLiteralNode(lo()), s);
  }
  function lo() {
    let s;
    return j(19) ? (s = xn(4, Pi), j(20)) : s = lr(), s;
  }
  function uo() {
    return U(), u() === 40 || u() === 41 ? U() === 148 : (u() === 148 && U(), u() === 23 && Ai() && U() === 103);
  }
  function nu() {
    let s = J(), p = jt();
    j(103);
    let d = ot();
    return D(h.createTypeParameterDeclaration(void 0, p, d, void 0), s);
  }
  function po() {
    let s = J();
    j(19);
    let p;
    (u() === 148 || u() === 40 || u() === 41) && (p = Wt(), p.kind !== 148 && j(148)), j(23);
    let d = nu(), b = Je(130) ? ot() : void 0;
    j(24);
    let S;
    (u() === 58 || u() === 40 || u() === 41) && (S = Wt(), S.kind !== 58 && j(58));
    let N = gr();
    Qt();
    let H = xn(4, Pi);
    return j(20), D(h.createMappedTypeNode(p, d, b, S, N, H), s);
  }
  function fo() {
    let s = J();
    if (Je(26)) return D(h.createRestTypeNode(ot()), s);
    let p = ot();
    if (ah(p) && p.pos === p.type.pos) {
      let d = h.createOptionalTypeNode(p.type);
      return yn(d, p), d.flags = p.flags, d;
    }
    return p;
  }
  function m_() {
    return U() === 59 || u() === 58 && U() === 59;
  }
  function ru() {
    return u() === 26 ? wt(U()) && m_() : wt(u()) && m_();
  }
  function mo() {
    if (G(ru)) {
      let s = J(), p = qe(), d = ft(26), b = jt(), S = ft(58);
      j(59);
      let N = fo(), H = h.createNamedTupleMember(d, b, S, N);
      return Ce(D(H, s), p);
    }
    return fo();
  }
  function iu() {
    let s = J();
    return D(h.createTupleTypeNode(Lr(21, mo, 23, 24)), s);
  }
  function ho() {
    let s = J();
    j(21);
    let p = ot();
    return j(22), D(h.createParenthesizedType(p), s);
  }
  function au() {
    let s;
    if (u() === 128) {
      let p = J();
      U();
      let d = D(ye(128), p);
      s = Ct([d], p);
    }
    return s;
  }
  function h_() {
    let s = J(), p = qe(), d = au(), b = Je(105);
    B.assert(!d || b, "Per isStartOfFunctionOrConstructorType, a function type cannot have modifiers.");
    let S = dn(), N = Hn(4), H = Jn(39, false), _e = b ? h.createConstructorTypeNode(d, S, N, H) : h.createFunctionTypeNode(S, N, H);
    return Ce(D(_e, s), p);
  }
  function yo() {
    let s = Wt();
    return u() === 25 ? void 0 : s;
  }
  function y_(s) {
    let p = J();
    s && U();
    let d = u() === 112 || u() === 97 || u() === 106 ? Wt() : ri(u());
    return s && (d = D(h.createPrefixUnaryExpression(41, d), p)), D(h.createLiteralTypeNode(d), p);
  }
  function _u() {
    return U(), u() === 102;
  }
  function g_() {
    vt |= 4194304;
    let s = J(), p = Je(114);
    j(102), j(21);
    let d = ot(), b;
    if (Je(28)) {
      let H = t.getTokenStart();
      j(19);
      let _e = u();
      if (_e === 118 || _e === 132 ? U() : Ee(E._0_expected, it(118)), j(59), b = Y_(_e, true), !j(20)) {
        let Z = Yi(_t);
        Z && Z.code === E._0_expected.code && nl(Z, Oa(Mt, Qe, H, 1, E.The_parser_expected_to_find_a_1_to_match_the_0_token_here, "{", "}"));
      }
    }
    j(22);
    let S = Je(25) ? ii() : void 0, N = Xs();
    return D(h.createImportTypeNode(d, b, S, N, p), s);
  }
  function go() {
    return U(), u() === 9 || u() === 10;
  }
  function b_() {
    switch (u()) {
      case 133:
      case 159:
      case 154:
      case 150:
      case 163:
      case 155:
      case 136:
      case 157:
      case 146:
      case 151:
        return le(yo) || pa();
      case 67:
        t.reScanAsteriskEqualsToken();
      case 42:
        return Zl();
      case 61:
        t.reScanQuestionToken();
      case 58:
        return eu();
      case 100:
        return $s();
      case 54:
        return Hs();
      case 15:
      case 11:
      case 9:
      case 10:
      case 112:
      case 97:
      case 106:
        return y_();
      case 41:
        return G(go) ? y_(true) : pa();
      case 116:
        return Wt();
      case 110: {
        let s = o_();
        return u() === 142 && !t.hasPrecedingLineBreak() ? Kl(s) : s;
      }
      case 114:
        return G(_u) ? g_() : Qs();
      case 19:
        return G(uo) ? po() : co();
      case 23:
        return iu();
      case 21:
        return ho();
      case 102:
        return g_();
      case 131:
        return G(M_) ? Co() : pa();
      case 16:
        return Fs();
      default:
        return pa();
    }
  }
  function ai(s) {
    switch (u()) {
      case 133:
      case 159:
      case 154:
      case 150:
      case 163:
      case 136:
      case 148:
      case 155:
      case 158:
      case 116:
      case 157:
      case 106:
      case 110:
      case 114:
      case 146:
      case 19:
      case 23:
      case 30:
      case 52:
      case 51:
      case 105:
      case 11:
      case 9:
      case 10:
      case 112:
      case 97:
      case 151:
      case 42:
      case 58:
      case 54:
      case 26:
      case 140:
      case 102:
      case 131:
      case 15:
      case 16:
        return true;
      case 100:
        return !s;
      case 41:
        return !s && G(go);
      case 21:
        return !s && G(bo);
      default:
        return ve();
    }
  }
  function bo() {
    return U(), u() === 22 || fa(false) || ai();
  }
  function vo() {
    let s = J(), p = b_();
    for (; !t.hasPrecedingLineBreak(); ) switch (u()) {
      case 54:
        U(), p = D(h.createJSDocNonNullableType(p, true), s);
        break;
      case 58:
        if (G(Ci)) return p;
        U(), p = D(h.createJSDocNullableType(p, true), s);
        break;
      case 23:
        if (j(23), ai()) {
          let d = ot();
          j(24), p = D(h.createIndexedAccessTypeNode(p, d), s);
        } else j(24), p = D(h.createArrayTypeNode(p), s);
        break;
      default:
        return p;
    }
    return p;
  }
  function To(s) {
    let p = J();
    return j(s), D(h.createTypeOperatorNode(s, So()), p);
  }
  function su() {
    if (Je(96)) {
      let s = Mn(ot);
      if (We() || u() !== 58) return s;
    }
  }
  function xo() {
    let s = J(), p = St(), d = le(su), b = h.createTypeParameterDeclaration(void 0, p, d);
    return D(b, s);
  }
  function ou() {
    let s = J();
    return j(140), D(h.createInferTypeNode(xo()), s);
  }
  function So() {
    let s = u();
    switch (s) {
      case 143:
      case 158:
      case 148:
        return To(s);
      case 140:
        return ou();
    }
    return hr(vo);
  }
  function ma(s) {
    if (T_()) {
      let p = h_(), d;
      return Pf(p) ? d = s ? E.Function_type_notation_must_be_parenthesized_when_used_in_a_union_type : E.Function_type_notation_must_be_parenthesized_when_used_in_an_intersection_type : d = s ? E.Constructor_type_notation_must_be_parenthesized_when_used_in_a_union_type : E.Constructor_type_notation_must_be_parenthesized_when_used_in_an_intersection_type, ln(p, d), p;
    }
  }
  function wo(s, p, d) {
    let b = J(), S = s === 52, N = Je(s), H = N && ma(S) || p();
    if (u() === s || N) {
      let _e = [H];
      for (; Je(s); ) _e.push(ma(S) || p());
      H = D(d(Ct(_e, b)), b);
    }
    return H;
  }
  function v_() {
    return wo(51, So, h.createIntersectionTypeNode);
  }
  function cu() {
    return wo(52, v_, h.createUnionTypeNode);
  }
  function ko() {
    return U(), u() === 105;
  }
  function T_() {
    return u() === 30 || u() === 21 && G(Eo) ? true : u() === 105 || u() === 128 && G(ko);
  }
  function lu() {
    if (Wr(u()) && wn(false), ve() || u() === 110) return U(), true;
    if (u() === 23 || u() === 19) {
      let s = _t.length;
      return Li(), s === _t.length;
    }
    return false;
  }
  function Eo() {
    return U(), !!(u() === 22 || u() === 26 || lu() && (u() === 59 || u() === 28 || u() === 58 || u() === 64 || u() === 22 && (U(), u() === 39)));
  }
  function ha() {
    let s = J(), p = ve() && le(Ao), d = ot();
    return p ? D(h.createTypePredicateNode(void 0, p, d), s) : d;
  }
  function Ao() {
    let s = St();
    if (u() === 142 && !t.hasPrecedingLineBreak()) return U(), s;
  }
  function Co() {
    let s = J(), p = Yn(131), d = u() === 110 ? o_() : St(), b = Je(142) ? ot() : void 0;
    return D(h.createTypePredicateNode(p, d, b), s);
  }
  function ot() {
    if (nt & 81920) return Dt(81920, ot);
    if (T_()) return h_();
    let s = J(), p = cu();
    if (!We() && !t.hasPrecedingLineBreak() && Je(96)) {
      let d = Mn(ot);
      j(58);
      let b = hr(ot);
      j(59);
      let S = hr(ot);
      return D(h.createConditionalTypeNode(p, d, b, S), s);
    }
    return p;
  }
  function gr() {
    return Je(59) ? ot() : void 0;
  }
  function x_() {
    switch (u()) {
      case 110:
      case 108:
      case 106:
      case 112:
      case 97:
      case 9:
      case 10:
      case 11:
      case 15:
      case 16:
      case 21:
      case 23:
      case 19:
      case 100:
      case 86:
      case 105:
      case 44:
      case 69:
      case 80:
        return true;
      case 102:
        return G(oo);
      default:
        return ve();
    }
  }
  function br() {
    if (x_()) return true;
    switch (u()) {
      case 40:
      case 41:
      case 55:
      case 54:
      case 91:
      case 114:
      case 116:
      case 46:
      case 47:
      case 30:
      case 135:
      case 127:
      case 81:
      case 60:
        return true;
      default:
        return Bo() ? true : ve();
    }
  }
  function Do() {
    return u() !== 19 && u() !== 100 && u() !== 86 && u() !== 60 && br();
  }
  function Et() {
    let s = Ze();
    s && Ke(false);
    let p = J(), d = zt(true), b;
    for (; b = ft(28); ) d = k_(d, b, zt(true), p);
    return s && Ke(true), d;
  }
  function vr() {
    return Je(64) ? zt(true) : void 0;
  }
  function zt(s) {
    if (Po()) return No();
    let p = pu(s) || Lo(s);
    if (p) return p;
    let d = J(), b = qe(), S = Ni(0);
    return S.kind === 80 && u() === 39 ? Io(d, S, s, b, void 0) : qa(S) && S1(Ve()) ? k_(S, Wt(), zt(s), d) : fu(S, d, s);
  }
  function Po() {
    return u() === 127 ? we() ? true : G(J_) : false;
  }
  function uu() {
    return U(), !t.hasPrecedingLineBreak() && ve();
  }
  function No() {
    let s = J();
    return U(), !t.hasPrecedingLineBreak() && (u() === 42 || br()) ? D(h.createYieldExpression(ft(42), zt(true)), s) : D(h.createYieldExpression(void 0, void 0), s);
  }
  function Io(s, p, d, b, S) {
    B.assert(u() === 39, "parseSimpleArrowFunctionExpression should only have been called if we had a =>");
    let N = h.createParameterDeclaration(void 0, void 0, p, void 0, void 0, void 0);
    D(N, p.pos);
    let H = Ct([N], N.pos, N.end), _e = Yn(39), Z = S_(!!S, d), ee = h.createArrowFunction(S, void 0, H, void 0, _e, Z);
    return Ce(D(ee, s), b);
  }
  function pu(s) {
    let p = Oo();
    if (p !== 0) return p === 1 ? Ro(true, true) : le(() => Jo(s));
  }
  function Oo() {
    return u() === 21 || u() === 30 || u() === 134 ? G(Mo) : u() === 39 ? 1 : 0;
  }
  function Mo() {
    if (u() === 134 && (U(), t.hasPrecedingLineBreak() || u() !== 21 && u() !== 30)) return 0;
    let s = u(), p = U();
    if (s === 21) {
      if (p === 22) switch (U()) {
        case 39:
        case 59:
        case 19:
          return 1;
        default:
          return 0;
      }
      if (p === 23 || p === 19) return 2;
      if (p === 26) return 1;
      if (Wr(p) && p !== 134 && G(Ai)) return U() === 130 ? 0 : 1;
      if (!ve() && p !== 110) return 0;
      switch (U()) {
        case 59:
          return 1;
        case 58:
          return U(), u() === 59 || u() === 28 || u() === 64 || u() === 22 ? 1 : 0;
        case 28:
        case 64:
        case 22:
          return 2;
      }
      return 0;
    } else return B.assert(s === 30), !ve() && u() !== 87 ? 0 : ct === 1 ? G(() => {
      Je(87);
      let b = U();
      if (b === 96) switch (U()) {
        case 64:
        case 32:
        case 44:
          return false;
        default:
          return true;
      }
      else if (b === 28 || b === 64) return true;
      return false;
    }) ? 1 : 0 : 2;
  }
  function Jo(s) {
    let p = t.getTokenStart();
    if (cn != null && cn.has(p)) return;
    let d = Ro(false, s);
    return d || (cn || (cn = /* @__PURE__ */ new Set())).add(p), d;
  }
  function Lo(s) {
    if (u() === 134 && G(jo) === 1) {
      let p = J(), d = qe(), b = Jc(), S = Ni(0);
      return Io(p, S, s, d, b);
    }
  }
  function jo() {
    if (u() === 134) {
      if (U(), t.hasPrecedingLineBreak() || u() === 39) return 0;
      let s = Ni(0);
      if (!t.hasPrecedingLineBreak() && s.kind === 80 && u() === 39) return 1;
    }
    return 0;
  }
  function Ro(s, p) {
    let d = J(), b = qe(), S = Jc(), N = Xt(S, al) ? 2 : 0, H = dn(), _e;
    if (j(21)) {
      if (s) _e = f_(N, s);
      else {
        let Zt = f_(N, s);
        if (!Zt) return;
        _e = Zt;
      }
      if (!j(22) && !s) return;
    } else {
      if (!s) return;
      _e = lr();
    }
    let Z = u() === 59, ee = Jn(59, false);
    if (ee && !s && s_(ee)) return;
    let ce = ee;
    for (; (ce == null ? void 0 : ce.kind) === 196; ) ce = ce.type;
    let Le = ce && _h(ce);
    if (!s && u() !== 39 && (Le || u() !== 19)) return;
    let je = u(), Ae = Yn(39), Yt = je === 39 || je === 19 ? S_(Xt(S, al), p) : St();
    if (!p && Z && u() !== 59) return;
    let mn = h.createArrowFunction(S, H, _e, ee, Ae, Yt);
    return Ce(D(mn, d), b);
  }
  function S_(s, p) {
    if (u() === 19) return Ta(s ? 2 : 0);
    if (u() !== 27 && u() !== 100 && u() !== 86 && vc() && !Do()) return Ta(16 | (s ? 2 : 0));
    let d = Bt;
    Bt = false;
    let b = s ? R(() => zt(p)) : $(() => zt(p));
    return Bt = d, b;
  }
  function fu(s, p, d) {
    let b = ft(58);
    if (!b) return s;
    let S;
    return D(h.createConditionalExpression(s, b, Dt(a, () => zt(false)), S = Yn(59), Rp(S) ? zt(d) : Gt(80, false, E._0_expected, it(59))), p);
  }
  function Ni(s) {
    let p = J(), d = Yo();
    return w_(s, d, p);
  }
  function Uo(s) {
    return s === 103 || s === 165;
  }
  function w_(s, p, d) {
    for (; ; ) {
      Ve();
      let b = Sp(u());
      if (!(u() === 43 ? b >= s : b > s) || u() === 103 && be()) break;
      if (u() === 130 || u() === 152) {
        if (t.hasPrecedingLineBreak()) break;
        {
          let N = u();
          U(), p = N === 152 ? qo(p, ot()) : zo(p, ot());
        }
      } else p = k_(p, Wt(), Ni(b), d);
    }
    return p;
  }
  function Bo() {
    return be() && u() === 103 ? false : Sp(u()) > 0;
  }
  function qo(s, p) {
    return D(h.createSatisfiesExpression(s, p), s.pos);
  }
  function k_(s, p, d, b) {
    return D(h.createBinaryExpression(s, p, d), b);
  }
  function zo(s, p) {
    return D(h.createAsExpression(s, p), s.pos);
  }
  function Fo() {
    let s = J();
    return D(h.createPrefixUnaryExpression(u(), Me(Tr)), s);
  }
  function Vo() {
    let s = J();
    return D(h.createDeleteExpression(Me(Tr)), s);
  }
  function du() {
    let s = J();
    return D(h.createTypeOfExpression(Me(Tr)), s);
  }
  function Wo() {
    let s = J();
    return D(h.createVoidExpression(Me(Tr)), s);
  }
  function mu() {
    return u() === 135 ? Ye() ? true : G(J_) : false;
  }
  function Go() {
    let s = J();
    return D(h.createAwaitExpression(Me(Tr)), s);
  }
  function Yo() {
    if (hu()) {
      let d = J(), b = ya();
      return u() === 43 ? w_(Sp(u()), b, d) : b;
    }
    let s = u(), p = Tr();
    if (u() === 43) {
      let d = Ar(Qe, p.pos), { end: b } = p;
      p.kind === 216 ? rt(d, b, E.A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses) : (B.assert(xp(s)), rt(d, b, E.An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses, it(s)));
    }
    return p;
  }
  function Tr() {
    switch (u()) {
      case 40:
      case 41:
      case 55:
      case 54:
        return Fo();
      case 91:
        return Vo();
      case 114:
        return du();
      case 116:
        return Wo();
      case 30:
        return ct === 1 ? Oi(true, void 0, void 0, true) : Ko();
      case 135:
        if (mu()) return Go();
      default:
        return ya();
    }
  }
  function hu() {
    switch (u()) {
      case 40:
      case 41:
      case 55:
      case 54:
      case 91:
      case 114:
      case 116:
      case 135:
        return false;
      case 30:
        if (ct !== 1) return false;
      default:
        return true;
    }
  }
  function ya() {
    if (u() === 46 || u() === 47) {
      let p = J();
      return D(h.createPrefixUnaryExpression(u(), Me(Ii)), p);
    } else if (ct === 1 && u() === 30 && G(Ns)) return Oi(true);
    let s = Ii();
    if (B.assert(qa(s)), (u() === 46 || u() === 47) && !t.hasPrecedingLineBreak()) {
      let p = u();
      return U(), D(h.createPostfixUnaryExpression(s, p), s.pos);
    }
    return s;
  }
  function Ii() {
    let s = J(), p;
    return u() === 102 ? G(_o) ? (vt |= 4194304, p = Wt()) : G(so) ? (U(), U(), p = D(h.createMetaProperty(102, jt()), s), vt |= 8388608) : p = ga() : p = u() === 108 ? Xo() : ga(), P_(s, p);
  }
  function ga() {
    let s = J(), p = N_();
    return _n(s, p, true);
  }
  function Xo() {
    let s = J(), p = Wt();
    if (u() === 30) {
      let d = J(), b = le(va);
      b !== void 0 && (rt(d, J(), E.super_may_not_use_type_arguments), Sn() || (p = h.createExpressionWithTypeArguments(p, b)));
    }
    return u() === 21 || u() === 25 || u() === 23 ? p : (Yn(25, E.super_must_be_followed_by_an_argument_list_or_member_access), D(ae(p, ni(true, true, true)), s));
  }
  function Oi(s, p, d, b = false) {
    let S = J(), N = bu(s), H;
    if (N.kind === 286) {
      let _e = ba(N), Z, ee = _e[_e.length - 1];
      if ((ee == null ? void 0 : ee.kind) === 284 && !pi(ee.openingElement.tagName, ee.closingElement.tagName) && pi(N.tagName, ee.closingElement.tagName)) {
        let ce = ee.children.end, Le = D(h.createJsxElement(ee.openingElement, ee.children, D(h.createJsxClosingElement(D(re(""), ce, ce)), ce, ce)), ee.openingElement.pos, ce);
        _e = Ct([..._e.slice(0, _e.length - 1), Le], _e.pos, ce), Z = ee.closingElement;
      } else Z = Qo(N, s), pi(N.tagName, Z.tagName) || (d && zp(d) && pi(Z.tagName, d.tagName) ? ln(N.tagName, E.JSX_element_0_has_no_corresponding_closing_tag, is(Qe, N.tagName)) : ln(Z.tagName, E.Expected_corresponding_JSX_closing_tag_for_0, is(Qe, N.tagName)));
      H = D(h.createJsxElement(N, _e, Z), S);
    } else N.kind === 289 ? H = D(h.createJsxFragment(N, ba(N), Su(s)), S) : (B.assert(N.kind === 285), H = N);
    if (!b && s && u() === 30) {
      let _e = typeof p > "u" ? H.pos : p, Z = le(() => Oi(true, _e));
      if (Z) {
        let ee = Gt(28, false);
        return Yd(ee, Z.pos, 0), rt(Ar(Qe, _e), Z.end, E.JSX_expressions_must_have_one_parent_element), D(h.createBinaryExpression(H, ee, Z), S);
      }
    }
    return H;
  }
  function E_() {
    let s = J(), p = h.createJsxText(t.getTokenValue(), lt === 13);
    return lt = t.scanJsxToken(), D(p, s);
  }
  function yu(s, p) {
    switch (p) {
      case 1:
        if (t6(s)) ln(s, E.JSX_fragment_has_no_corresponding_closing_tag);
        else {
          let d = s.tagName, b = Math.min(Ar(Qe, d.pos), d.end);
          rt(b, d.end, E.JSX_element_0_has_no_corresponding_closing_tag, is(Qe, s.tagName));
        }
        return;
      case 31:
      case 7:
        return;
      case 12:
      case 13:
        return E_();
      case 19:
        return Ho(false);
      case 30:
        return Oi(false, void 0, s);
      default:
        return B.assertNever(p);
    }
  }
  function ba(s) {
    let p = [], d = J(), b = yt;
    for (yt |= 16384; ; ) {
      let S = yu(s, lt = t.reScanJsxToken());
      if (!S || (p.push(S), zp(s) && (S == null ? void 0 : S.kind) === 284 && !pi(S.openingElement.tagName, S.closingElement.tagName) && pi(s.tagName, S.closingElement.tagName))) break;
    }
    return yt = b, Ct(p, d);
  }
  function gu() {
    let s = J();
    return D(h.createJsxAttributes(xn(13, $o)), s);
  }
  function bu(s) {
    let p = J();
    if (j(30), u() === 32) return Gn(), D(h.createJsxOpeningFragment(), p);
    let d = A_(), b = (nt & 524288) === 0 ? Ca() : void 0, S = gu(), N;
    return u() === 32 ? (Gn(), N = h.createJsxOpeningElement(d, b, S)) : (j(44), j(32, void 0, false) && (s ? U() : Gn()), N = h.createJsxSelfClosingElement(d, b, S)), D(N, p);
  }
  function A_() {
    let s = J(), p = vu();
    if (th(p)) return p;
    let d = p;
    for (; Je(25); ) d = D(ae(d, ni(true, false, false)), s);
    return d;
  }
  function vu() {
    let s = J();
    qt();
    let p = u() === 110, d = ei();
    return Je(59) ? (qt(), D(h.createJsxNamespacedName(d, ei()), s)) : p ? D(h.createToken(110), s) : d;
  }
  function Ho(s) {
    let p = J();
    if (!j(19)) return;
    let d, b;
    return u() !== 20 && (s || (d = ft(26)), b = Et()), s ? j(20) : j(20, void 0, false) && Gn(), D(h.createJsxExpression(d, b), p);
  }
  function $o() {
    if (u() === 19) return xu();
    let s = J();
    return D(h.createJsxAttribute(Tu(), C_()), s);
  }
  function C_() {
    if (u() === 64) {
      if (wi() === 11) return Xn();
      if (u() === 19) return Ho(true);
      if (u() === 30) return Oi(true);
      Ee(E.or_JSX_element_expected);
    }
  }
  function Tu() {
    let s = J();
    qt();
    let p = ei();
    return Je(59) ? (qt(), D(h.createJsxNamespacedName(p, ei()), s)) : p;
  }
  function xu() {
    let s = J();
    j(19), j(26);
    let p = Et();
    return j(20), D(h.createJsxSpreadAttribute(p), s);
  }
  function Qo(s, p) {
    let d = J();
    j(31);
    let b = A_();
    return j(32, void 0, false) && (p || !pi(s.tagName, b) ? U() : Gn()), D(h.createJsxClosingElement(b), d);
  }
  function Su(s) {
    let p = J();
    return j(31), j(32, E.Expected_corresponding_closing_tag_for_JSX_fragment, false) && (s ? U() : Gn()), D(h.createJsxJsxClosingFragment(), p);
  }
  function Ko() {
    B.assert(ct !== 1, "Type assertions should never be parsed in JSX; they should be parsed as comparisons or JSX elements/fragments.");
    let s = J();
    j(30);
    let p = ot();
    j(32);
    let d = Tr();
    return D(h.createTypeAssertion(p, d), s);
  }
  function wu() {
    return U(), wt(u()) || u() === 23 || Sn();
  }
  function Zo() {
    return u() === 29 && G(wu);
  }
  function D_(s) {
    if (s.flags & 64) return true;
    if (cl(s)) {
      let p = s.expression;
      for (; cl(p) && !(p.flags & 64); ) p = p.expression;
      if (p.flags & 64) {
        for (; cl(s); ) s.flags |= 64, s = s.expression;
        return true;
      }
    }
    return false;
  }
  function ec(s, p, d) {
    let b = ni(true, true, true), S = d || D_(p), N = S ? Oe(p, d, b) : ae(p, b);
    if (S && gi(N.name) && ln(N.name, E.An_optional_chain_cannot_contain_private_identifiers), $1(p) && p.typeArguments) {
      let H = p.typeArguments.pos - 1, _e = Ar(Qe, p.typeArguments.end) + 1;
      rt(H, _e, E.An_instantiation_expression_cannot_be_followed_by_a_property_access);
    }
    return D(N, s);
  }
  function ku(s, p, d) {
    let b;
    if (u() === 24) b = Gt(80, true, E.An_element_access_expression_should_take_an_argument);
    else {
      let N = ut(Et);
      kl(N) && (N.text = Mr(N.text)), b = N;
    }
    j(24);
    let S = d || D_(p) ? oe(p, d, b) : V(p, b);
    return D(S, s);
  }
  function _n(s, p, d) {
    for (; ; ) {
      let b, S = false;
      if (d && Zo() ? (b = Yn(29), S = wt(u())) : S = Je(25), S) {
        p = ec(s, p, b);
        continue;
      }
      if ((b || !Ze()) && Je(23)) {
        p = ku(s, p, b);
        continue;
      }
      if (Sn()) {
        p = !b && p.kind === 233 ? Ur(s, p.expression, b, p.typeArguments) : Ur(s, p, b, void 0);
        continue;
      }
      if (!b) {
        if (u() === 54 && !t.hasPrecedingLineBreak()) {
          U(), p = D(h.createNonNullExpression(p), s);
          continue;
        }
        let N = le(va);
        if (N) {
          p = D(h.createExpressionWithTypeArguments(p, N), s);
          continue;
        }
      }
      return p;
    }
  }
  function Sn() {
    return u() === 15 || u() === 16;
  }
  function Ur(s, p, d, b) {
    let S = h.createTaggedTemplateExpression(p, b, u() === 15 ? (Pt(true), Xn()) : ua(true));
    return (d || p.flags & 64) && (S.flags |= 64), S.questionDotToken = d, D(S, s);
  }
  function P_(s, p) {
    for (; ; ) {
      p = _n(s, p, true);
      let d, b = ft(29);
      if (b && (d = le(va), Sn())) {
        p = Ur(s, p, b, d);
        continue;
      }
      if (d || u() === 21) {
        !b && p.kind === 233 && (d = p.typeArguments, p = p.expression);
        let S = tc(), N = b || D_(p) ? dt(p, b, d, S) : W(p, d, S);
        p = D(N, s);
        continue;
      }
      if (b) {
        let S = Gt(80, false, E.Identifier_expected);
        p = D(Oe(p, b, S), s);
      }
      break;
    }
    return p;
  }
  function tc() {
    j(21);
    let s = fn(11, ic);
    return j(22), s;
  }
  function va() {
    if ((nt & 524288) !== 0 || kt() !== 30) return;
    U();
    let s = fn(20, ot);
    if (Ve() === 32) return U(), s && Eu() ? s : void 0;
  }
  function Eu() {
    switch (u()) {
      case 21:
      case 15:
      case 16:
        return true;
      case 30:
      case 32:
      case 40:
      case 41:
        return false;
    }
    return t.hasPrecedingLineBreak() || Bo() || !br();
  }
  function N_() {
    switch (u()) {
      case 15:
        t.getTokenFlags() & 26656 && Pt(false);
      case 9:
      case 10:
      case 11:
        return Xn();
      case 110:
      case 108:
      case 106:
      case 112:
      case 97:
        return Wt();
      case 21:
        return Au();
      case 23:
        return ac();
      case 19:
        return I_();
      case 134:
        if (!G(bc)) break;
        return O_();
      case 60:
        return Lc();
      case 86:
        return Xu();
      case 100:
        return O_();
      case 105:
        return sc();
      case 44:
      case 69:
        if ($e() === 14) return Xn();
        break;
      case 16:
        return ua(false);
      case 81:
        return _a();
    }
    return St(E.Expression_expected);
  }
  function Au() {
    let s = J(), p = qe();
    j(21);
    let d = ut(Et);
    return j(22), Ce(D(gn(d), s), p);
  }
  function nc() {
    let s = J();
    j(26);
    let p = zt(true);
    return D(h.createSpreadElement(p), s);
  }
  function rc() {
    return u() === 26 ? nc() : u() === 28 ? D(h.createOmittedExpression(), J()) : zt(true);
  }
  function ic() {
    return Dt(a, rc);
  }
  function ac() {
    let s = J(), p = t.getTokenStart(), d = j(23), b = t.hasPrecedingLineBreak(), S = fn(15, rc);
    return Or(23, 24, d, p), D(de(S, b), s);
  }
  function _c() {
    let s = J(), p = qe();
    if (ft(26)) {
      let ce = zt(true);
      return Ce(D(h.createSpreadAssignment(ce), s), p);
    }
    let d = wn(true);
    if (ti(139)) return qr(s, p, d, 177, 0);
    if (ti(153)) return qr(s, p, d, 178, 0);
    let b = ft(42), S = ve(), N = Jr(), H = ft(58), _e = ft(54);
    if (b || u() === 21 || u() === 30) return q_(s, p, d, b, N, H, _e);
    let Z;
    if (S && u() !== 59) {
      let ce = ft(64), Le = ce ? ut(() => zt(true)) : void 0;
      Z = h.createShorthandPropertyAssignment(N, Le), Z.equalsToken = ce;
    } else {
      j(59);
      let ce = ut(() => zt(true));
      Z = h.createPropertyAssignment(N, ce);
    }
    return Z.modifiers = d, Z.questionToken = H, Z.exclamationToken = _e, Ce(D(Z, s), p);
  }
  function I_() {
    let s = J(), p = t.getTokenStart(), d = j(19), b = t.hasPrecedingLineBreak(), S = fn(12, _c, true);
    return Or(19, 20, d, p), D(M(S, b), s);
  }
  function O_() {
    let s = Ze();
    Ke(false);
    let p = J(), d = qe(), b = wn(false);
    j(100);
    let S = ft(42), N = S ? 1 : 0, H = Xt(b, al) ? 2 : 0, _e = N && H ? K(Mi) : N ? Wn(Mi) : H ? R(Mi) : Mi(), Z = dn(), ee = Hn(N | H), ce = Jn(59, false), Le = Ta(N | H);
    Ke(s);
    let je = h.createFunctionExpression(b, S, _e, Z, ee, ce, Le);
    return Ce(D(je, p), d);
  }
  function Mi() {
    return Fe() ? Ka() : void 0;
  }
  function sc() {
    let s = J();
    if (j(105), Je(25)) {
      let N = jt();
      return D(h.createMetaProperty(105, N), s);
    }
    let p = J(), d = _n(p, N_(), false), b;
    d.kind === 233 && (b = d.typeArguments, d = d.expression), u() === 29 && Ee(E.Invalid_optional_chain_from_new_expression_Did_you_mean_to_call_0, is(Qe, d));
    let S = u() === 21 ? tc() : void 0;
    return D(nr(d, b, S), s);
  }
  function Br(s, p) {
    let d = J(), b = qe(), S = t.getTokenStart(), N = j(19, p);
    if (N || s) {
      let H = t.hasPrecedingLineBreak(), _e = xn(1, Kt);
      Or(19, 20, N, S);
      let Z = Ce(D(rr(_e, H), d), b);
      return u() === 64 && (Ee(E.Declaration_or_statement_expected_This_follows_a_block_of_statements_so_if_you_intended_to_write_a_destructuring_assignment_you_might_need_to_wrap_the_whole_assignment_in_parentheses), U()), Z;
    } else {
      let H = lr();
      return Ce(D(rr(H, void 0), d), b);
    }
  }
  function Ta(s, p) {
    let d = we();
    He(!!(s & 1));
    let b = Ye();
    st(!!(s & 2));
    let S = Bt;
    Bt = false;
    let N = Ze();
    N && Ke(false);
    let H = Br(!!(s & 16), p);
    return N && Ke(true), Bt = S, He(d), st(b), H;
  }
  function oc() {
    let s = J(), p = qe();
    return j(27), Ce(D(h.createEmptyStatement(), s), p);
  }
  function Cu() {
    let s = J(), p = qe();
    j(101);
    let d = t.getTokenStart(), b = j(21), S = ut(Et);
    Or(21, 22, b, d);
    let N = Kt(), H = Je(93) ? Kt() : void 0;
    return Ce(D(Ge(S, N, H), s), p);
  }
  function cc() {
    let s = J(), p = qe();
    j(92);
    let d = Kt();
    j(117);
    let b = t.getTokenStart(), S = j(21), N = ut(Et);
    return Or(21, 22, S, b), Je(27), Ce(D(h.createDoStatement(d, N), s), p);
  }
  function Du() {
    let s = J(), p = qe();
    j(117);
    let d = t.getTokenStart(), b = j(21), S = ut(Et);
    Or(21, 22, b, d);
    let N = Kt();
    return Ce(D(ir(S, N), s), p);
  }
  function lc() {
    let s = J(), p = qe();
    j(99);
    let d = ft(135);
    j(21);
    let b;
    u() !== 27 && (u() === 115 || u() === 121 || u() === 87 || u() === 160 && G(xc) || u() === 135 && G(Sc) ? b = B_(true) : b = Ir(Et));
    let S;
    if (d ? j(165) : Je(165)) {
      let N = ut(() => zt(true));
      j(22), S = Ot(d, b, N, Kt());
    } else if (Je(103)) {
      let N = ut(Et);
      j(22), S = h.createForInStatement(b, N, Kt());
    } else {
      j(27);
      let N = u() !== 27 && u() !== 22 ? ut(Et) : void 0;
      j(27);
      let H = u() !== 22 ? ut(Et) : void 0;
      j(22), S = Pr(b, N, H, Kt());
    }
    return Ce(D(S, s), p);
  }
  function uc(s) {
    let p = J(), d = qe();
    j(s === 252 ? 83 : 88);
    let b = sr() ? void 0 : St();
    Qt();
    let S = s === 252 ? h.createBreakStatement(b) : h.createContinueStatement(b);
    return Ce(D(S, p), d);
  }
  function pc() {
    let s = J(), p = qe();
    j(107);
    let d = sr() ? void 0 : ut(Et);
    return Qt(), Ce(D(h.createReturnStatement(d), s), p);
  }
  function Pu() {
    let s = J(), p = qe();
    j(118);
    let d = t.getTokenStart(), b = j(21), S = ut(Et);
    Or(21, 22, b, d);
    let N = Tt(67108864, Kt);
    return Ce(D(h.createWithStatement(S, N), s), p);
  }
  function fc() {
    let s = J(), p = qe();
    j(84);
    let d = ut(Et);
    j(59);
    let b = xn(3, Kt);
    return Ce(D(h.createCaseClause(d, b), s), p);
  }
  function Nu() {
    let s = J();
    j(90), j(59);
    let p = xn(3, Kt);
    return D(h.createDefaultClause(p), s);
  }
  function Iu() {
    return u() === 84 ? fc() : Nu();
  }
  function dc() {
    let s = J();
    j(19);
    let p = xn(2, Iu);
    return j(20), D(h.createCaseBlock(p), s);
  }
  function Ou() {
    let s = J(), p = qe();
    j(109), j(21);
    let d = ut(Et);
    j(22);
    let b = dc();
    return Ce(D(h.createSwitchStatement(d, b), s), p);
  }
  function mc() {
    let s = J(), p = qe();
    j(111);
    let d = t.hasPrecedingLineBreak() ? void 0 : ut(Et);
    return d === void 0 && (vn++, d = D(re(""), J())), aa() || xt(d), Ce(D(h.createThrowStatement(d), s), p);
  }
  function Mu() {
    let s = J(), p = qe();
    j(113);
    let d = Br(false), b = u() === 85 ? hc() : void 0, S;
    return (!b || u() === 98) && (j(98, E.catch_or_finally_expected), S = Br(false)), Ce(D(h.createTryStatement(d, b, S), s), p);
  }
  function hc() {
    let s = J();
    j(85);
    let p;
    Je(21) ? (p = U_(), j(22)) : p = void 0;
    let d = Br(false);
    return D(h.createCatchClause(p, d), s);
  }
  function Ju() {
    let s = J(), p = qe();
    return j(89), Qt(), Ce(D(h.createDebuggerStatement(), s), p);
  }
  function yc() {
    let s = J(), p = qe(), d, b = u() === 21, S = ut(Et);
    return tt(S) && Je(59) ? d = h.createLabeledStatement(S, Kt()) : (aa() || xt(S), d = In(S), b && (p = false)), Ce(D(d, s), p);
  }
  function M_() {
    return U(), wt(u()) && !t.hasPrecedingLineBreak();
  }
  function gc() {
    return U(), u() === 86 && !t.hasPrecedingLineBreak();
  }
  function bc() {
    return U(), u() === 100 && !t.hasPrecedingLineBreak();
  }
  function J_() {
    return U(), (wt(u()) || u() === 9 || u() === 10 || u() === 11) && !t.hasPrecedingLineBreak();
  }
  function Lu() {
    for (; ; ) switch (u()) {
      case 115:
      case 121:
      case 87:
      case 100:
      case 86:
      case 94:
        return true;
      case 160:
        return j_();
      case 135:
        return xa();
      case 120:
      case 156:
        return uu();
      case 144:
      case 145:
        return Ec();
      case 128:
      case 129:
      case 134:
      case 138:
      case 123:
      case 124:
      case 125:
      case 148:
        let s = u();
        if (U(), t.hasPrecedingLineBreak()) return false;
        if (s === 138 && u() === 156) return true;
        continue;
      case 162:
        return U(), u() === 19 || u() === 80 || u() === 95;
      case 102:
        return U(), u() === 11 || u() === 42 || u() === 19 || wt(u());
      case 95:
        let p = U();
        if (p === 156 && (p = G(U)), p === 64 || p === 42 || p === 19 || p === 90 || p === 130 || p === 60) return true;
        continue;
      case 126:
        U();
        continue;
      default:
        return false;
    }
  }
  function Ji() {
    return G(Lu);
  }
  function vc() {
    switch (u()) {
      case 60:
      case 27:
      case 19:
      case 115:
      case 121:
      case 160:
      case 100:
      case 86:
      case 94:
      case 101:
      case 92:
      case 117:
      case 99:
      case 88:
      case 83:
      case 107:
      case 118:
      case 109:
      case 111:
      case 113:
      case 89:
      case 85:
      case 98:
        return true;
      case 102:
        return Ji() || G(oo);
      case 87:
      case 95:
        return Ji();
      case 134:
      case 138:
      case 120:
      case 144:
      case 145:
      case 156:
      case 162:
        return true;
      case 129:
      case 125:
      case 123:
      case 124:
      case 126:
      case 148:
        return Ji() || !G(M_);
      default:
        return br();
    }
  }
  function Tc() {
    return U(), Fe() || u() === 19 || u() === 23;
  }
  function ju() {
    return G(Tc);
  }
  function xc() {
    return L_(true);
  }
  function L_(s) {
    return U(), s && u() === 165 ? false : (Fe() || u() === 19) && !t.hasPrecedingLineBreak();
  }
  function j_() {
    return G(L_);
  }
  function Sc(s) {
    return U() === 160 ? L_(s) : false;
  }
  function xa() {
    return G(Sc);
  }
  function Kt() {
    switch (u()) {
      case 27:
        return oc();
      case 19:
        return Br(false);
      case 115:
        return _i(J(), qe(), void 0);
      case 121:
        if (ju()) return _i(J(), qe(), void 0);
        break;
      case 135:
        if (xa()) return _i(J(), qe(), void 0);
        break;
      case 160:
        if (j_()) return _i(J(), qe(), void 0);
        break;
      case 100:
        return Pc(J(), qe(), void 0);
      case 86:
        return jc(J(), qe(), void 0);
      case 101:
        return Cu();
      case 92:
        return cc();
      case 117:
        return Du();
      case 99:
        return lc();
      case 88:
        return uc(251);
      case 83:
        return uc(252);
      case 107:
        return pc();
      case 118:
        return Pu();
      case 109:
        return Ou();
      case 111:
        return mc();
      case 113:
      case 85:
      case 98:
        return Mu();
      case 89:
        return Ju();
      case 60:
        return wc();
      case 134:
      case 120:
      case 156:
      case 144:
      case 145:
      case 138:
      case 87:
      case 94:
      case 95:
      case 102:
      case 123:
      case 124:
      case 125:
      case 128:
      case 129:
      case 126:
      case 148:
      case 162:
        if (Ji()) return wc();
        break;
    }
    return yc();
  }
  function R_(s) {
    return s.kind === 138;
  }
  function wc() {
    let s = J(), p = qe(), d = wn(true);
    if (Xt(d, R_)) {
      let S = Sa(s);
      if (S) return S;
      for (let N of d) N.flags |= 33554432;
      return Tt(33554432, () => kc(s, p, d));
    } else return kc(s, p, d);
  }
  function Sa(s) {
    return Tt(33554432, () => {
      let p = ca(yt, s);
      if (p) return Ms(p);
    });
  }
  function kc(s, p, d) {
    switch (u()) {
      case 115:
      case 121:
      case 87:
      case 160:
      case 135:
        return _i(s, p, d);
      case 100:
        return Pc(s, p, d);
      case 86:
        return jc(s, p, d);
      case 120:
        return Bc(s, p, d);
      case 156:
        return Zu(s, p, d);
      case 94:
        return V_(s, p, d);
      case 162:
      case 144:
      case 145:
        return tp(s, p, d);
      case 102:
        return ip(s, p, d);
      case 95:
        switch (U(), u()) {
          case 90:
          case 64:
            return Xc(s, p, d);
          case 130:
            return rp(s, p, d);
          default:
            return fp(s, p, d);
        }
      default:
        if (d) {
          let b = Gt(282, true, E.Declaration_expected);
          return Bp(b, s), b.modifiers = d, b;
        }
        return;
    }
  }
  function Ru() {
    return U() === 11;
  }
  function Uu() {
    return U(), u() === 161 || u() === 64;
  }
  function Ec() {
    return U(), !t.hasPrecedingLineBreak() && (ve() || u() === 11);
  }
  function wa(s, p) {
    if (u() !== 19) {
      if (s & 4) {
        da();
        return;
      }
      if (sr()) {
        Qt();
        return;
      }
    }
    return Ta(s, p);
  }
  function Ac() {
    let s = J();
    if (u() === 28) return D(h.createOmittedExpression(), s);
    let p = ft(26), d = Li(), b = vr();
    return D(h.createBindingElement(p, void 0, d, b), s);
  }
  function Bu() {
    let s = J(), p = ft(26), d = Fe(), b = Jr(), S;
    d && u() !== 59 ? (S = b, b = void 0) : (j(59), S = Li());
    let N = vr();
    return D(h.createBindingElement(p, b, S, N), s);
  }
  function Cc() {
    let s = J();
    j(19);
    let p = ut(() => fn(9, Bu));
    return j(20), D(h.createObjectBindingPattern(p), s);
  }
  function qu() {
    let s = J();
    j(23);
    let p = ut(() => fn(10, Ac));
    return j(24), D(h.createArrayBindingPattern(p), s);
  }
  function ka() {
    return u() === 19 || u() === 23 || u() === 81 || Fe();
  }
  function Li(s) {
    return u() === 23 ? qu() : u() === 19 ? Cc() : Ka(s);
  }
  function Dc() {
    return U_(true);
  }
  function U_(s) {
    let p = J(), d = qe(), b = Li(E.Private_identifiers_are_not_allowed_in_variable_declarations), S;
    s && b.kind === 80 && u() === 54 && !t.hasPrecedingLineBreak() && (S = Wt());
    let N = gr(), H = Uo(u()) ? void 0 : vr(), _e = Bn(b, S, N, H);
    return Ce(D(_e, p), d);
  }
  function B_(s) {
    let p = J(), d = 0;
    switch (u()) {
      case 115:
        break;
      case 121:
        d |= 1;
        break;
      case 87:
        d |= 2;
        break;
      case 160:
        d |= 4;
        break;
      case 135:
        B.assert(xa()), d |= 6, U();
        break;
      default:
        B.fail();
    }
    U();
    let b;
    if (u() === 165 && G(zu)) b = lr();
    else {
      let S = be();
      Te(s), b = fn(8, s ? U_ : Dc), Te(S);
    }
    return D(On(b, d), p);
  }
  function zu() {
    return Ai() && U() === 22;
  }
  function _i(s, p, d) {
    let b = B_(false);
    Qt();
    let S = bn(d, b);
    return Ce(D(S, s), p);
  }
  function Pc(s, p, d) {
    let b = Ye(), S = Rn(d);
    j(100);
    let N = ft(42), H = S & 2048 ? Mi() : Ka(), _e = N ? 1 : 0, Z = S & 1024 ? 2 : 0, ee = dn();
    S & 32 && st(true);
    let ce = Hn(_e | Z), Le = Jn(59, false), je = wa(_e | Z, E.or_expected);
    st(b);
    let Ae = h.createFunctionDeclaration(d, N, H, ee, ce, Le, je);
    return Ce(D(Ae, s), p);
  }
  function Nc() {
    if (u() === 137) return j(137);
    if (u() === 11 && G(U) === 21) return le(() => {
      let s = Xn();
      return s.text === "constructor" ? s : void 0;
    });
  }
  function Fu(s, p, d) {
    return le(() => {
      if (Nc()) {
        let b = dn(), S = Hn(0), N = Jn(59, false), H = wa(0, E.or_expected), _e = h.createConstructorDeclaration(d, S, H);
        return _e.typeParameters = b, _e.type = N, Ce(D(_e, s), p);
      }
    });
  }
  function q_(s, p, d, b, S, N, H, _e) {
    let Z = b ? 1 : 0, ee = Xt(d, al) ? 2 : 0, ce = dn(), Le = Hn(Z | ee), je = Jn(59, false), Ae = wa(Z | ee, _e), Yt = h.createMethodDeclaration(d, b, S, N, ce, Le, je, Ae);
    return Yt.exclamationToken = H, Ce(D(Yt, s), p);
  }
  function Ic(s, p, d, b, S) {
    let N = !S && !t.hasPrecedingLineBreak() ? ft(54) : void 0, H = gr(), _e = Dt(90112, vr);
    Ul(b, H, _e);
    let Z = h.createPropertyDeclaration(d, b, S || N, H, _e);
    return Ce(D(Z, s), p);
  }
  function Ea(s, p, d) {
    let b = ft(42), S = Jr(), N = ft(58);
    return b || u() === 21 || u() === 30 ? q_(s, p, d, b, S, N, void 0, E.or_expected) : Ic(s, p, d, S, N);
  }
  function qr(s, p, d, b, S) {
    let N = Jr(), H = dn(), _e = Hn(0), Z = Jn(59, false), ee = wa(S), ce = b === 177 ? h.createGetAccessorDeclaration(d, N, _e, Z, ee) : h.createSetAccessorDeclaration(d, N, _e, ee);
    return ce.typeParameters = H, hs(ce) && (ce.type = Z), Ce(D(ce, s), p);
  }
  function Vu() {
    let s;
    if (u() === 60) return true;
    for (; Wr(u()); ) {
      if (s = u(), Rg(s)) return true;
      U();
    }
    if (u() === 42 || (yr() && (s = u(), U()), u() === 23)) return true;
    if (s !== void 0) {
      if (!di(s) || s === 153 || s === 139) return true;
      switch (u()) {
        case 21:
        case 30:
        case 54:
        case 59:
        case 64:
        case 58:
          return true;
        default:
          return sr();
      }
    }
    return false;
  }
  function Oc(s, p, d) {
    Yn(126);
    let b = Wu(), S = Ce(D(h.createClassStaticBlockDeclaration(b), s), p);
    return S.modifiers = d, S;
  }
  function Wu() {
    let s = we(), p = Ye();
    He(false), st(true);
    let d = Br(false);
    return He(s), st(p), d;
  }
  function Gu() {
    if (Ye() && u() === 135) {
      let s = J(), p = St(E.Expression_expected);
      U();
      let d = _n(s, p, true);
      return P_(s, d);
    }
    return Ii();
  }
  function z_() {
    let s = J();
    if (!Je(60)) return;
    let p = Si(Gu);
    return D(h.createDecorator(p), s);
  }
  function Mc(s, p, d) {
    let b = J(), S = u();
    if (u() === 87 && p) {
      if (!le(Za)) return;
    } else {
      if (d && u() === 126 && G(Vc)) return;
      if (s && u() === 126) return;
      if (!Ds()) return;
    }
    return D(ye(S), b);
  }
  function wn(s, p, d) {
    let b = J(), S, N, H, _e = false, Z = false, ee = false;
    if (s && u() === 60) for (; N = z_(); ) S = An(S, N);
    for (; H = Mc(_e, p, d); ) H.kind === 126 && (_e = true), S = An(S, H), Z = true;
    if (Z && s && u() === 60) for (; N = z_(); ) S = An(S, N), ee = true;
    if (ee) for (; H = Mc(_e, p, d); ) H.kind === 126 && (_e = true), S = An(S, H);
    return S && Ct(S, b);
  }
  function Jc() {
    let s;
    if (u() === 134) {
      let p = J();
      U();
      let d = D(ye(134), p);
      s = Ct([d], p);
    }
    return s;
  }
  function Yu() {
    let s = J(), p = qe();
    if (u() === 27) return U(), Ce(D(h.createSemicolonClassElement(), s), p);
    let d = wn(true, true, true);
    if (u() === 126 && G(Vc)) return Oc(s, p, d);
    if (ti(139)) return qr(s, p, d, 177, 0);
    if (ti(153)) return qr(s, p, d, 178, 0);
    if (u() === 137 || u() === 11) {
      let b = Fu(s, p, d);
      if (b) return b;
    }
    if (Rr()) return d_(s, p, d);
    if (wt(u()) || u() === 11 || u() === 9 || u() === 10 || u() === 42 || u() === 23) if (Xt(d, R_)) {
      for (let S of d) S.flags |= 33554432;
      return Tt(33554432, () => Ea(s, p, d));
    } else return Ea(s, p, d);
    if (d) {
      let b = Gt(80, true, E.Declaration_expected);
      return Ic(s, p, d, b, void 0);
    }
    return B.fail("Should not have attempted to parse class member declaration.");
  }
  function Lc() {
    let s = J(), p = qe(), d = wn(true);
    if (u() === 86) return Aa(s, p, d, 231);
    let b = Gt(282, true, E.Expression_expected);
    return Bp(b, s), b.modifiers = d, b;
  }
  function Xu() {
    return Aa(J(), qe(), void 0, 231);
  }
  function jc(s, p, d) {
    return Aa(s, p, d, 263);
  }
  function Aa(s, p, d, b) {
    let S = Ye();
    j(86);
    let N = Hu(), H = dn();
    Xt(d, Rb) && st(true);
    let _e = F_(), Z;
    j(19) ? (Z = Uc(), j(20)) : Z = lr(), st(S);
    let ee = b === 263 ? h.createClassDeclaration(d, N, H, _e, Z) : h.createClassExpression(d, N, H, _e, Z);
    return Ce(D(ee, s), p);
  }
  function Hu() {
    return Fe() && !$u() ? or(Fe()) : void 0;
  }
  function $u() {
    return u() === 119 && G(Yl);
  }
  function F_() {
    if (Rc()) return xn(22, Qu);
  }
  function Qu() {
    let s = J(), p = u();
    B.assert(p === 96 || p === 119), U();
    let d = fn(7, Ku);
    return D(h.createHeritageClause(p, d), s);
  }
  function Ku() {
    let s = J(), p = Ii();
    if (p.kind === 233) return p;
    let d = Ca();
    return D(h.createExpressionWithTypeArguments(p, d), s);
  }
  function Ca() {
    return u() === 30 ? Lr(20, ot, 30, 32) : void 0;
  }
  function Rc() {
    return u() === 96 || u() === 119;
  }
  function Uc() {
    return xn(5, Yu);
  }
  function Bc(s, p, d) {
    j(120);
    let b = St(), S = dn(), N = F_(), H = lo(), _e = h.createInterfaceDeclaration(d, b, S, N, H);
    return Ce(D(_e, s), p);
  }
  function Zu(s, p, d) {
    j(156), t.hasPrecedingLineBreak() && Ee(E.Line_break_not_permitted_here);
    let b = St(), S = dn();
    j(64);
    let N = u() === 141 && le(yo) || ot();
    Qt();
    let H = h.createTypeAliasDeclaration(d, b, S, N);
    return Ce(D(H, s), p);
  }
  function ep() {
    let s = J(), p = qe(), d = Jr(), b = ut(vr);
    return Ce(D(h.createEnumMember(d, b), s), p);
  }
  function V_(s, p, d) {
    j(94);
    let b = St(), S;
    j(19) ? (S = xe(() => fn(6, ep)), j(20)) : S = lr();
    let N = h.createEnumDeclaration(d, b, S);
    return Ce(D(N, s), p);
  }
  function qc() {
    let s = J(), p;
    return j(19) ? (p = xn(1, Kt), j(20)) : p = lr(), D(h.createModuleBlock(p), s);
  }
  function W_(s, p, d, b) {
    let S = b & 32, N = b & 8 ? jt() : St(), H = Je(25) ? W_(J(), false, void 0, 8 | S) : qc(), _e = h.createModuleDeclaration(d, N, H, b);
    return Ce(D(_e, s), p);
  }
  function zc(s, p, d) {
    let b = 0, S;
    u() === 162 ? (S = St(), b |= 2048) : (S = Xn(), S.text = Mr(S.text));
    let N;
    u() === 19 ? N = qc() : Qt();
    let H = h.createModuleDeclaration(d, S, N, b);
    return Ce(D(H, s), p);
  }
  function tp(s, p, d) {
    let b = 0;
    if (u() === 162) return zc(s, p, d);
    if (Je(145)) b |= 32;
    else if (j(144), u() === 11) return zc(s, p, d);
    return W_(s, p, d, b);
  }
  function np() {
    return u() === 149 && G(Fc);
  }
  function Fc() {
    return U() === 21;
  }
  function Vc() {
    return U() === 19;
  }
  function G_() {
    return U() === 44;
  }
  function rp(s, p, d) {
    j(130), j(145);
    let b = St();
    Qt();
    let S = h.createNamespaceExportDeclaration(b);
    return S.modifiers = d, Ce(D(S, s), p);
  }
  function ip(s, p, d) {
    j(102);
    let b = t.getTokenFullStart(), S;
    ve() && (S = St());
    let N = false;
    if ((S == null ? void 0 : S.escapedText) === "type" && (u() !== 161 || ve() && G(Uu)) && (ve() || _p()) && (N = true, S = ve() ? St() : void 0), S && !zr()) return sp(s, p, d, S, N);
    let H = si(S, b, N), _e = Ri(), Z = Wc();
    Qt();
    let ee = h.createImportDeclaration(d, H, _e, Z);
    return Ce(D(ee, s), p);
  }
  function si(s, p, d, b = false) {
    let S;
    return (s || u() === 42 || u() === 19) && (S = op(s, p, d, b), j(161)), S;
  }
  function Wc() {
    let s = u();
    if ((s === 118 || s === 132) && !t.hasPrecedingLineBreak()) return Y_(s);
  }
  function ap() {
    let s = J(), p = wt(u()) ? jt() : ri(11);
    j(59);
    let d = zt(true);
    return D(h.createImportAttribute(p, d), s);
  }
  function Y_(s, p) {
    let d = J();
    p || j(s);
    let b = t.getTokenStart();
    if (j(19)) {
      let S = t.hasPrecedingLineBreak(), N = fn(24, ap, true);
      if (!j(20)) {
        let H = Yi(_t);
        H && H.code === E._0_expected.code && nl(H, Oa(Mt, Qe, b, 1, E.The_parser_expected_to_find_a_1_to_match_the_0_token_here, "{", "}"));
      }
      return D(h.createImportAttributes(N, S, s), d);
    } else {
      let S = Ct([], J(), void 0, false);
      return D(h.createImportAttributes(S, false, s), d);
    }
  }
  function _p() {
    return u() === 42 || u() === 19;
  }
  function zr() {
    return u() === 28 || u() === 161;
  }
  function sp(s, p, d, b, S) {
    j(64);
    let N = cp();
    Qt();
    let H = h.createImportEqualsDeclaration(d, S, b, N);
    return Ce(D(H, s), p);
  }
  function op(s, p, d, b) {
    let S;
    return (!s || Je(28)) && (b && t.setSkipJsDocLeadingAsterisks(true), S = u() === 42 ? lp() : Gc(275), b && t.setSkipJsDocLeadingAsterisks(false)), D(h.createImportClause(d, s, S), p);
  }
  function cp() {
    return np() ? ji() : jr(false);
  }
  function ji() {
    let s = J();
    j(149), j(21);
    let p = Ri();
    return j(22), D(h.createExternalModuleReference(p), s);
  }
  function Ri() {
    if (u() === 11) {
      let s = Xn();
      return s.text = Mr(s.text), s;
    } else return Et();
  }
  function lp() {
    let s = J();
    j(42), j(130);
    let p = St();
    return D(h.createNamespaceImport(p), s);
  }
  function X_() {
    return wt(u()) || u() === 11;
  }
  function oi(s) {
    return u() === 11 ? Xn() : s();
  }
  function Gc(s) {
    let p = J(), d = s === 275 ? h.createNamedImports(Lr(23, ci, 19, 20)) : h.createNamedExports(Lr(23, up, 19, 20));
    return D(d, p);
  }
  function up() {
    let s = qe();
    return Ce(Yc(281), s);
  }
  function ci() {
    return Yc(276);
  }
  function Yc(s) {
    let p = J(), d = di(u()) && !ve(), b = t.getTokenStart(), S = t.getTokenEnd(), N = false, H, _e = true, Z = oi(jt);
    if (Z.kind === 80 && Z.escapedText === "type") if (u() === 130) {
      let Le = jt();
      if (u() === 130) {
        let je = jt();
        X_() ? (N = true, H = Le, Z = oi(ce), _e = false) : (H = Z, Z = je, _e = false);
      } else X_() ? (H = Z, _e = false, Z = oi(ce)) : (N = true, Z = Le);
    } else X_() && (N = true, Z = oi(ce));
    _e && u() === 130 && (H = Z, j(130), Z = oi(ce)), s === 276 && (Z.kind !== 80 ? (rt(Ar(Qe, Z.pos), Z.end, E.Identifier_expected), Z = yi(Gt(80, false), Z.pos, Z.pos)) : d && rt(b, S, E.Identifier_expected));
    let ee = s === 276 ? h.createImportSpecifier(N, H, Z) : h.createExportSpecifier(N, H, Z);
    return D(ee, p);
    function ce() {
      return d = di(u()) && !ve(), b = t.getTokenStart(), S = t.getTokenEnd(), jt();
    }
  }
  function pp(s) {
    return D(h.createNamespaceExport(oi(jt)), s);
  }
  function fp(s, p, d) {
    let b = Ye();
    st(true);
    let S, N, H, _e = Je(156), Z = J();
    Je(42) ? (Je(130) && (S = pp(Z)), j(161), N = Ri()) : (S = Gc(279), (u() === 161 || u() === 11 && !t.hasPrecedingLineBreak()) && (j(161), N = Ri()));
    let ee = u();
    N && (ee === 118 || ee === 132) && !t.hasPrecedingLineBreak() && (H = Y_(ee)), Qt(), st(b);
    let ce = h.createExportDeclaration(d, _e, S, N, H);
    return Ce(D(ce, s), p);
  }
  function Xc(s, p, d) {
    let b = Ye();
    st(true);
    let S;
    Je(64) ? S = true : j(90);
    let N = zt(true);
    Qt(), st(b);
    let H = h.createExportAssignment(d, S, N);
    return Ce(D(H, s), p);
  }
  let H_;
  ((s) => {
    s[s.SourceElements = 0] = "SourceElements", s[s.BlockStatements = 1] = "BlockStatements", s[s.SwitchClauses = 2] = "SwitchClauses", s[s.SwitchClauseStatements = 3] = "SwitchClauseStatements", s[s.TypeMembers = 4] = "TypeMembers", s[s.ClassMembers = 5] = "ClassMembers", s[s.EnumMembers = 6] = "EnumMembers", s[s.HeritageClauseElement = 7] = "HeritageClauseElement", s[s.VariableDeclarations = 8] = "VariableDeclarations", s[s.ObjectBindingElements = 9] = "ObjectBindingElements", s[s.ArrayBindingElements = 10] = "ArrayBindingElements", s[s.ArgumentExpressions = 11] = "ArgumentExpressions", s[s.ObjectLiteralMembers = 12] = "ObjectLiteralMembers", s[s.JsxAttributes = 13] = "JsxAttributes", s[s.JsxChildren = 14] = "JsxChildren", s[s.ArrayLiteralMembers = 15] = "ArrayLiteralMembers", s[s.Parameters = 16] = "Parameters", s[s.JSDocParameters = 17] = "JSDocParameters", s[s.RestProperties = 18] = "RestProperties", s[s.TypeParameters = 19] = "TypeParameters", s[s.TypeArguments = 20] = "TypeArguments", s[s.TupleElementTypes = 21] = "TupleElementTypes", s[s.HeritageClauses = 22] = "HeritageClauses", s[s.ImportOrExportSpecifiers = 23] = "ImportOrExportSpecifiers", s[s.ImportAttributes = 24] = "ImportAttributes", s[s.JSDocComment = 25] = "JSDocComment", s[s.Count = 26] = "Count";
  })(H_ || (H_ = {}));
  let $_;
  ((s) => {
    s[s.False = 0] = "False", s[s.True = 1] = "True", s[s.Unknown = 2] = "Unknown";
  })($_ || ($_ = {}));
  let Hc;
  ((s) => {
    function p(ee, ce, Le) {
      zn("file.js", ee, 99, void 0, 1, 0), t.setText(ee, ce, Le), lt = t.scan();
      let je = d(), Ae = se("file.js", 99, 1, false, [], ye(1), 0, Fa), Yt = zi(_t, Ae);
      return Ut && (Ae.jsDocDiagnostics = zi(Ut, Ae)), Fn(), je ? { jsDocTypeExpression: je, diagnostics: Yt } : void 0;
    }
    s.parseJSDocTypeExpressionForTests = p;
    function d(ee) {
      let ce = J(), Le = (ee ? Je : j)(19), je = Tt(16777216, l_);
      (!ee || Le) && Es(20);
      let Ae = h.createJSDocTypeExpression(je);
      return L(Ae), D(Ae, ce);
    }
    s.parseJSDocTypeExpression = d;
    function b() {
      let ee = J(), ce = Je(19), Le = J(), je = jr(false);
      for (; u() === 81; ) Nt(), ze(), je = D(h.createJSDocMemberName(je, St()), Le);
      ce && Es(20);
      let Ae = h.createJSDocNameReference(je);
      return L(Ae), D(Ae, ee);
    }
    s.parseJSDocNameReference = b;
    function S(ee, ce, Le) {
      zn("", ee, 99, void 0, 1, 0);
      let je = Tt(16777216, () => Z(ce, Le)), Yt = zi(_t, { languageVariant: 0, text: ee });
      return Fn(), je ? { jsDoc: je, diagnostics: Yt } : void 0;
    }
    s.parseIsolatedJSDocComment = S;
    function N(ee, ce, Le) {
      let je = lt, Ae = _t.length, Yt = rn, mn = Tt(16777216, () => Z(ce, Le));
      return Sf(mn, ee), nt & 524288 && (Ut || (Ut = []), Dn(Ut, _t, Ae)), lt = je, _t.length = Ae, rn = Yt, mn;
    }
    s.parseJSDocComment = N;
    let H;
    ((ee) => {
      ee[ee.BeginningOfLine = 0] = "BeginningOfLine", ee[ee.SawAsterisk = 1] = "SawAsterisk", ee[ee.SavingComments = 2] = "SavingComments", ee[ee.SavingBackticks = 3] = "SavingBackticks";
    })(H || (H = {}));
    let _e;
    ((ee) => {
      ee[ee.Property = 1] = "Property", ee[ee.Parameter = 2] = "Parameter", ee[ee.CallbackParameter = 4] = "CallbackParameter";
    })(_e || (_e = {}));
    function Z(ee = 0, ce) {
      let Le = Qe, je = ce === void 0 ? Le.length : ee + ce;
      if (ce = je - ee, B.assert(ee >= 0), B.assert(ee <= je), B.assert(je <= Le.length), !k6(Le, ee)) return;
      let Ae, Yt, mn, Zt, ur, Ln = [], Fr = [], dp = yt;
      yt |= 1 << 25;
      let De = t.scanRange(ee + 3, ce - 5, et);
      return yt = dp, De;
      function et() {
        let O = 1, Y, X = ee - (Le.lastIndexOf(`
`, ee) + 1) + 4;
        function te(Ue) {
          Y || (Y = X), Ln.push(Ue), X += Ue.length;
        }
        for (ze(); Bi(5); ) ;
        Bi(4) && (O = 0, X = 0);
        e: for (; ; ) {
          switch (u()) {
            case 60:
              Da(Ln), ur || (ur = J()), pe(q(X)), O = 0, Y = void 0;
              break;
            case 4:
              Ln.push(t.getTokenText()), O = 0, X = 0;
              break;
            case 42:
              let Ue = t.getTokenText();
              O === 1 ? (O = 2, te(Ue)) : (B.assert(O === 0), O = 1, X += Ue.length);
              break;
            case 5:
              B.assert(O !== 2, "whitespace shouldn't come from the scanner while saving top-level comment text");
              let pt = t.getTokenText();
              Y !== void 0 && X + pt.length > Y && Ln.push(pt.slice(Y - X)), X += pt.length;
              break;
            case 1:
              break e;
            case 82:
              O = 2, te(t.getTokenValue());
              break;
            case 19:
              O = 2;
              let hn = t.getTokenFullStart(), sn = t.getTokenEnd() - 1, tn = _(sn);
              if (tn) {
                Zt || pr(Ln), Fr.push(D(h.createJSDocText(Ln.join("")), Zt ?? ee, hn)), Fr.push(tn), Ln = [], Zt = t.getTokenEnd();
                break;
              }
            default:
              O = 2, te(t.getTokenText());
              break;
          }
          O === 2 ? an(false) : ze();
        }
        let ne = Ln.join("").trimEnd();
        Fr.length && ne.length && Fr.push(D(h.createJSDocText(ne), Zt ?? ee, ur)), Fr.length && Ae && B.assertIsDefined(ur, "having parsed tags implies that the end of the comment span should be set");
        let Pe = Ae && Ct(Ae, Yt, mn);
        return D(h.createJSDocComment(Fr.length ? Ct(Fr, ee, ur) : ne.length ? ne : void 0, Pe), ee, je);
      }
      function pr(O) {
        for (; O.length && (O[0] === `
` || O[0] === "\r"); ) O.shift();
      }
      function Da(O) {
        for (; O.length; ) {
          let Y = O[O.length - 1].trimEnd();
          if (Y === "") O.pop();
          else if (Y.length < O[O.length - 1].length) {
            O[O.length - 1] = Y;
            break;
          } else break;
        }
      }
      function $c() {
        for (; ; ) {
          if (ze(), u() === 1) return true;
          if (!(u() === 5 || u() === 4)) return false;
        }
      }
      function It() {
        if (!((u() === 5 || u() === 4) && G($c))) for (; u() === 5 || u() === 4; ) ze();
      }
      function xr() {
        if ((u() === 5 || u() === 4) && G($c)) return "";
        let O = t.hasPrecedingLineBreak(), Y = false, X = "";
        for (; O && u() === 42 || u() === 5 || u() === 4; ) X += t.getTokenText(), u() === 4 ? (O = true, Y = true, X = "") : u() === 42 && (O = false), ze();
        return Y ? X : "";
      }
      function q(O) {
        B.assert(u() === 60);
        let Y = t.getTokenStart();
        ze();
        let X = li(void 0), te = xr(), ne;
        switch (X.escapedText) {
          case "author":
            ne = O0(Y, X, O, te);
            break;
          case "implements":
            ne = J0(Y, X, O, te);
            break;
          case "augments":
          case "extends":
            ne = L0(Y, X, O, te);
            break;
          case "class":
          case "constructor":
            ne = Ui(Y, h.createJSDocClassTag, X, O, te);
            break;
          case "public":
            ne = Ui(Y, h.createJSDocPublicTag, X, O, te);
            break;
          case "private":
            ne = Ui(Y, h.createJSDocPrivateTag, X, O, te);
            break;
          case "protected":
            ne = Ui(Y, h.createJSDocProtectedTag, X, O, te);
            break;
          case "readonly":
            ne = Ui(Y, h.createJSDocReadonlyTag, X, O, te);
            break;
          case "override":
            ne = Ui(Y, h.createJSDocOverrideTag, X, O, te);
            break;
          case "deprecated":
            Vn = true, ne = Ui(Y, h.createJSDocDeprecatedTag, X, O, te);
            break;
          case "this":
            ne = yd(Y, X, O, te);
            break;
          case "enum":
            ne = B0(Y, X, O, te);
            break;
          case "arg":
          case "argument":
          case "param":
            return $n(Y, X, 2, O);
          case "return":
          case "returns":
            ne = P0(Y, X, O, te);
            break;
          case "template":
            ne = bd(Y, X, O, te);
            break;
          case "type":
            ne = md(Y, X, O, te);
            break;
          case "typedef":
            ne = q0(Y, X, O, te);
            break;
          case "callback":
            ne = F0(Y, X, O, te);
            break;
          case "overload":
            ne = V0(Y, X, O, te);
            break;
          case "satisfies":
            ne = j0(Y, X, O, te);
            break;
          case "see":
            ne = N0(Y, X, O, te);
            break;
          case "exception":
          case "throws":
            ne = I0(Y, X, O, te);
            break;
          case "import":
            ne = R0(Y, X, O, te);
            break;
          default:
            ne = F(Y, X, O, te);
            break;
        }
        return ne;
      }
      function n(O, Y, X, te) {
        return te || (X += Y - O), i(X, te.slice(X));
      }
      function i(O, Y) {
        let X = J(), te = [], ne = [], Pe, Ue = 0, pt;
        function hn(Qn) {
          pt || (pt = O), te.push(Qn), O += Qn.length;
        }
        Y !== void 0 && (Y !== "" && hn(Y), Ue = 1);
        let sn = u();
        e: for (; ; ) {
          switch (sn) {
            case 4:
              Ue = 0, te.push(t.getTokenText()), O = 0;
              break;
            case 60:
              t.resetTokenState(t.getTokenEnd() - 1);
              break e;
            case 1:
              break e;
            case 5:
              B.assert(Ue !== 2 && Ue !== 3, "whitespace shouldn't come from the scanner while saving comment text");
              let Qn = t.getTokenText();
              pt !== void 0 && O + Qn.length > pt && (te.push(Qn.slice(pt - O)), Ue = 2), O += Qn.length;
              break;
            case 19:
              Ue = 2;
              let Qc = t.getTokenFullStart(), Na = t.getTokenEnd() - 1, Kc = _(Na);
              Kc ? (ne.push(D(h.createJSDocText(te.join("")), Pe ?? X, Qc)), ne.push(Kc), te = [], Pe = t.getTokenEnd()) : hn(t.getTokenText());
              break;
            case 62:
              Ue === 3 ? Ue = 2 : Ue = 3, hn(t.getTokenText());
              break;
            case 82:
              Ue !== 3 && (Ue = 2), hn(t.getTokenValue());
              break;
            case 42:
              if (Ue === 0) {
                Ue = 1, O += 1;
                break;
              }
            default:
              Ue !== 3 && (Ue = 2), hn(t.getTokenText());
              break;
          }
          Ue === 2 || Ue === 3 ? sn = an(Ue === 3) : sn = ze();
        }
        pr(te);
        let tn = te.join("").trimEnd();
        if (ne.length) return tn.length && ne.push(D(h.createJSDocText(tn), Pe ?? X)), Ct(ne, X, t.getTokenEnd());
        if (tn.length) return tn;
      }
      function _(O) {
        let Y = le(f);
        if (!Y) return;
        ze(), It();
        let X = c(), te = [];
        for (; u() !== 20 && u() !== 4 && u() !== 1; ) te.push(t.getTokenText()), ze();
        let ne = Y === "link" ? h.createJSDocLink : Y === "linkcode" ? h.createJSDocLinkCode : h.createJSDocLinkPlain;
        return D(ne(X, te.join("")), O, t.getTokenEnd());
      }
      function c() {
        if (wt(u())) {
          let O = J(), Y = jt();
          for (; Je(25); ) Y = D(h.createQualifiedName(Y, u() === 81 ? Gt(80, false) : jt()), O);
          for (; u() === 81; ) Nt(), ze(), Y = D(h.createJSDocMemberName(Y, St()), O);
          return Y;
        }
      }
      function f() {
        if (xr(), u() === 19 && ze() === 60 && wt(ze())) {
          let O = t.getTokenValue();
          if (w(O)) return O;
        }
      }
      function w(O) {
        return O === "link" || O === "linkcode" || O === "linkplain";
      }
      function F(O, Y, X, te) {
        return D(h.createJSDocUnknownTag(Y, n(O, J(), X, te)), O);
      }
      function pe(O) {
        O && (Ae ? Ae.push(O) : (Ae = [O], Yt = O.pos), mn = O.end);
      }
      function Re() {
        return xr(), u() === 19 ? d() : void 0;
      }
      function en() {
        let O = Bi(23);
        O && It();
        let Y = Bi(62), X = $0();
        return Y && ql(62), O && (It(), ft(64) && Et(), j(24)), { name: X, isBracketed: O };
      }
      function kn(O) {
        switch (O.kind) {
          case 151:
            return true;
          case 188:
            return kn(O.elementType);
          default:
            return Df(O) && tt(O.typeName) && O.typeName.escapedText === "Object" && !O.typeArguments;
        }
      }
      function $n(O, Y, X, te) {
        let ne = Re(), Pe = !ne;
        xr();
        let { name: Ue, isBracketed: pt } = en(), hn = xr();
        Pe && !G(f) && (ne = Re());
        let sn = n(O, J(), te, hn), tn = Pa(ne, Ue, X, te);
        tn && (ne = tn, Pe = true);
        let Qn = X === 1 ? h.createJSDocPropertyTag(Y, Ue, pt, ne, Pe, sn) : h.createJSDocParameterTag(Y, Ue, pt, ne, Pe, sn);
        return D(Qn, O);
      }
      function Pa(O, Y, X, te) {
        if (O && kn(O.type)) {
          let ne = J(), Pe, Ue;
          for (; Pe = le(() => hp(X, te, Y)); ) Pe.kind === 341 || Pe.kind === 348 ? Ue = An(Ue, Pe) : Pe.kind === 345 && ln(Pe.tagName, E.A_JSDoc_template_tag_may_not_follow_a_typedef_callback_or_overload_tag);
          if (Ue) {
            let pt = D(h.createJSDocTypeLiteral(Ue, O.type.kind === 188), ne);
            return D(h.createJSDocTypeExpression(pt), ne);
          }
        }
      }
      function P0(O, Y, X, te) {
        Xt(Ae, p6) && rt(Y.pos, t.getTokenStart(), E._0_tag_already_specified, cs(Y.escapedText));
        let ne = Re();
        return D(h.createJSDocReturnTag(Y, ne, n(O, J(), X, te)), O);
      }
      function md(O, Y, X, te) {
        Xt(Ae, Ff) && rt(Y.pos, t.getTokenStart(), E._0_tag_already_specified, cs(Y.escapedText));
        let ne = d(true), Pe = X !== void 0 && te !== void 0 ? n(O, J(), X, te) : void 0;
        return D(h.createJSDocTypeTag(Y, ne, Pe), O);
      }
      function N0(O, Y, X, te) {
        let Pe = u() === 23 || G(() => ze() === 60 && wt(ze()) && w(t.getTokenValue())) ? void 0 : b(), Ue = X !== void 0 && te !== void 0 ? n(O, J(), X, te) : void 0;
        return D(h.createJSDocSeeTag(Y, Pe, Ue), O);
      }
      function I0(O, Y, X, te) {
        let ne = Re(), Pe = n(O, J(), X, te);
        return D(h.createJSDocThrowsTag(Y, ne, Pe), O);
      }
      function O0(O, Y, X, te) {
        let ne = J(), Pe = M0(), Ue = t.getTokenFullStart(), pt = n(O, Ue, X, te);
        pt || (Ue = t.getTokenFullStart());
        let hn = typeof pt != "string" ? Ct(Yp([D(Pe, ne, Ue)], pt), ne) : Pe.text + pt;
        return D(h.createJSDocAuthorTag(Y, hn), O);
      }
      function M0() {
        let O = [], Y = false, X = t.getToken();
        for (; X !== 1 && X !== 4; ) {
          if (X === 30) Y = true;
          else {
            if (X === 60 && !Y) break;
            if (X === 32 && Y) {
              O.push(t.getTokenText()), t.resetTokenState(t.getTokenEnd());
              break;
            }
          }
          O.push(t.getTokenText()), X = ze();
        }
        return h.createJSDocText(O.join(""));
      }
      function J0(O, Y, X, te) {
        let ne = hd();
        return D(h.createJSDocImplementsTag(Y, ne, n(O, J(), X, te)), O);
      }
      function L0(O, Y, X, te) {
        let ne = hd();
        return D(h.createJSDocAugmentsTag(Y, ne, n(O, J(), X, te)), O);
      }
      function j0(O, Y, X, te) {
        let ne = d(false), Pe = X !== void 0 && te !== void 0 ? n(O, J(), X, te) : void 0;
        return D(h.createJSDocSatisfiesTag(Y, ne, Pe), O);
      }
      function R0(O, Y, X, te) {
        let ne = t.getTokenFullStart(), Pe;
        ve() && (Pe = St());
        let Ue = si(Pe, ne, true, true), pt = Ri(), hn = Wc(), sn = X !== void 0 && te !== void 0 ? n(O, J(), X, te) : void 0;
        return D(h.createJSDocImportTag(Y, Ue, pt, hn, sn), O);
      }
      function hd() {
        let O = Je(19), Y = J(), X = U0();
        t.setSkipJsDocLeadingAsterisks(true);
        let te = Ca();
        t.setSkipJsDocLeadingAsterisks(false);
        let ne = h.createExpressionWithTypeArguments(X, te), Pe = D(ne, Y);
        return O && j(20), Pe;
      }
      function U0() {
        let O = J(), Y = li();
        for (; Je(25); ) {
          let X = li();
          Y = D(ae(Y, X), O);
        }
        return Y;
      }
      function Ui(O, Y, X, te, ne) {
        return D(Y(X, n(O, J(), te, ne)), O);
      }
      function yd(O, Y, X, te) {
        let ne = d(true);
        return It(), D(h.createJSDocThisTag(Y, ne, n(O, J(), X, te)), O);
      }
      function B0(O, Y, X, te) {
        let ne = d(true);
        return It(), D(h.createJSDocEnumTag(Y, ne, n(O, J(), X, te)), O);
      }
      function q0(O, Y, X, te) {
        let ne = Re();
        xr();
        let Pe = mp();
        It();
        let Ue = i(X), pt;
        if (!ne || kn(ne.type)) {
          let sn, tn, Qn, Qc = false;
          for (; (sn = le(() => G0(X))) && sn.kind !== 345; ) if (Qc = true, sn.kind === 344) if (tn) {
            let Na = Ee(E.A_JSDoc_typedef_comment_may_not_contain_multiple_type_tags);
            Na && nl(Na, Oa(Mt, Qe, 0, 0, E.The_tag_was_first_specified_here));
            break;
          } else tn = sn;
          else Qn = An(Qn, sn);
          if (Qc) {
            let Na = ne && ne.type.kind === 188, Kc = h.createJSDocTypeLiteral(Qn, Na);
            ne = tn && tn.typeExpression && !kn(tn.typeExpression.type) ? tn.typeExpression : D(Kc, O), pt = ne.end;
          }
        }
        pt = pt || Ue !== void 0 ? J() : (Pe ?? ne ?? Y).end, Ue || (Ue = n(O, pt, X, te));
        let hn = h.createJSDocTypedefTag(Y, ne, Pe, Ue);
        return D(hn, O, pt);
      }
      function mp(O) {
        let Y = t.getTokenStart();
        if (!wt(u())) return;
        let X = li();
        if (Je(25)) {
          let te = mp(true), ne = h.createModuleDeclaration(void 0, X, te, O ? 8 : void 0);
          return D(ne, Y);
        }
        return O && (X.flags |= 4096), X;
      }
      function z0(O) {
        let Y = J(), X, te;
        for (; X = le(() => hp(4, O)); ) {
          if (X.kind === 345) {
            ln(X.tagName, E.A_JSDoc_template_tag_may_not_follow_a_typedef_callback_or_overload_tag);
            break;
          }
          te = An(te, X);
        }
        return Ct(te || [], Y);
      }
      function gd(O, Y) {
        let X = z0(Y), te = le(() => {
          if (Bi(60)) {
            let ne = q(Y);
            if (ne && ne.kind === 342) return ne;
          }
        });
        return D(h.createJSDocSignature(void 0, X, te), O);
      }
      function F0(O, Y, X, te) {
        let ne = mp();
        It();
        let Pe = i(X), Ue = gd(O, X);
        Pe || (Pe = n(O, J(), X, te));
        let pt = Pe !== void 0 ? J() : Ue.end;
        return D(h.createJSDocCallbackTag(Y, Ue, ne, Pe), O, pt);
      }
      function V0(O, Y, X, te) {
        It();
        let ne = i(X), Pe = gd(O, X);
        ne || (ne = n(O, J(), X, te));
        let Ue = ne !== void 0 ? J() : Pe.end;
        return D(h.createJSDocOverloadTag(Y, Pe, ne), O, Ue);
      }
      function W0(O, Y) {
        for (; !tt(O) || !tt(Y); ) if (!tt(O) && !tt(Y) && O.right.escapedText === Y.right.escapedText) O = O.left, Y = Y.left;
        else return false;
        return O.escapedText === Y.escapedText;
      }
      function G0(O) {
        return hp(1, O);
      }
      function hp(O, Y, X) {
        let te = true, ne = false;
        for (; ; ) switch (ze()) {
          case 60:
            if (te) {
              let Pe = Y0(O, Y);
              return Pe && (Pe.kind === 341 || Pe.kind === 348) && X && (tt(Pe.name) || !W0(X, Pe.name.left)) ? false : Pe;
            }
            ne = false;
            break;
          case 4:
            te = true, ne = false;
            break;
          case 42:
            ne && (te = false), ne = true;
            break;
          case 80:
            te = false;
            break;
          case 1:
            return false;
        }
      }
      function Y0(O, Y) {
        B.assert(u() === 60);
        let X = t.getTokenFullStart();
        ze();
        let te = li(), ne = xr(), Pe;
        switch (te.escapedText) {
          case "type":
            return O === 1 && md(X, te);
          case "prop":
          case "property":
            Pe = 1;
            break;
          case "arg":
          case "argument":
          case "param":
            Pe = 6;
            break;
          case "template":
            return bd(X, te, Y, ne);
          case "this":
            return yd(X, te, Y, ne);
          default:
            return false;
        }
        return O & Pe ? $n(X, te, O, Y) : false;
      }
      function X0() {
        let O = J(), Y = Bi(23);
        Y && It();
        let X = wn(false, true), te = li(E.Unexpected_token_A_type_parameter_name_was_expected_without_curly_braces), ne;
        if (Y && (It(), j(64), ne = Tt(16777216, l_), j(24)), !Hi(te)) return D(h.createTypeParameterDeclaration(X, te, void 0, ne), O);
      }
      function H0() {
        let O = J(), Y = [];
        do {
          It();
          let X = X0();
          X !== void 0 && Y.push(X), xr();
        } while (Bi(28));
        return Ct(Y, O);
      }
      function bd(O, Y, X, te) {
        let ne = u() === 19 ? d() : void 0, Pe = H0();
        return D(h.createJSDocTemplateTag(Y, ne, Pe, n(O, J(), X, te)), O);
      }
      function Bi(O) {
        return u() === O ? (ze(), true) : false;
      }
      function $0() {
        let O = li();
        for (Je(23) && j(24); Je(25); ) {
          let Y = li();
          Je(23) && j(24), O = Xl(O, Y);
        }
        return O;
      }
      function li(O) {
        if (!wt(u())) return Gt(80, !O, O || E.Identifier_expected);
        vn++;
        let Y = t.getTokenStart(), X = t.getTokenEnd(), te = u(), ne = Mr(t.getTokenValue()), Pe = D(re(ne, te), Y, X);
        return ze(), Pe;
      }
    }
  })(Hc = e.JSDocParser || (e.JSDocParser = {}));
})(Qi || (Qi = {}));
var xm = /* @__PURE__ */ new WeakSet();
function J6(e) {
  xm.has(e) && B.fail("Source file has already been incrementally parsed"), xm.add(e);
}
var hh = /* @__PURE__ */ new WeakSet();
function L6(e) {
  return hh.has(e);
}
function Wp(e) {
  hh.add(e);
}
var vl;
((e) => {
  function t(x, I, re, he) {
    if (he = he || B.shouldAssert(2), h(x, I, re, he), fg(re)) return x;
    if (x.statements.length === 0) return Qi.parseSourceFile(x.fileName, I, x.languageVersion, void 0, true, x.scriptKind, x.setExternalModuleIndicator, x.jsDocParsingMode);
    J6(x), Qi.fixupParentReferences(x);
    let ye = x.text, de = y(x), M = l(x, re);
    h(x, I, M, he), B.assert(M.span.start <= re.span.start), B.assert(wr(M.span) === wr(re.span)), B.assert(wr(K_(M)) === wr(K_(re)));
    let ae = K_(M).length - M.span.length;
    P(x, M.span.start, wr(M.span), wr(K_(M)), ae, ye, I, he);
    let Oe = Qi.parseSourceFile(x.fileName, I, x.languageVersion, de, true, x.scriptKind, x.setExternalModuleIndicator, x.jsDocParsingMode);
    return Oe.commentDirectives = a(x.commentDirectives, Oe.commentDirectives, M.span.start, wr(M.span), ae, ye, I, he), Oe.impliedNodeFormat = x.impliedNodeFormat, h6(x, Oe), Oe;
  }
  e.updateSourceFile = t;
  function a(x, I, re, he, ye, de, M, ae) {
    if (!x) return I;
    let Oe, V = false;
    for (let W of x) {
      let { range: dt, type: nr } = W;
      if (dt.end < re) Oe = An(Oe, W);
      else if (dt.pos > he) {
        oe();
        let gn = { range: { pos: dt.pos + ye, end: dt.end + ye }, type: nr };
        Oe = An(Oe, gn), ae && B.assert(de.substring(dt.pos, dt.end) === M.substring(gn.range.pos, gn.range.end));
      }
    }
    return oe(), Oe;
    function oe() {
      V || (V = true, Oe ? I && Oe.push(...I) : Oe = I);
    }
  }
  function o(x, I, re, he, ye, de, M) {
    re ? Oe(x) : ae(x);
    return;
    function ae(V) {
      let oe = "";
      if (M && m(V) && (oe = ye.substring(V.pos, V.end)), Kd(V, I), yi(V, V.pos + he, V.end + he), M && m(V) && B.assert(oe === de.substring(V.pos, V.end)), Ht(V, ae, Oe), Xi(V)) for (let W of V.jsDoc) ae(W);
      A(V, M);
    }
    function Oe(V) {
      yi(V, V.pos + he, V.end + he);
      for (let oe of V) ae(oe);
    }
  }
  function m(x) {
    switch (x.kind) {
      case 11:
      case 9:
      case 80:
        return true;
    }
    return false;
  }
  function v(x, I, re, he, ye) {
    B.assert(x.end >= I, "Adjusting an element that was entirely before the change range"), B.assert(x.pos <= re, "Adjusting an element that was entirely after the change range"), B.assert(x.pos <= x.end);
    let de = Math.min(x.pos, he), M = x.end >= re ? x.end + ye : Math.min(x.end, he);
    if (B.assert(de <= M), x.parent) {
      let ae = x.parent;
      B.assertGreaterThanOrEqual(de, ae.pos), B.assertLessThanOrEqual(M, ae.end);
    }
    yi(x, de, M);
  }
  function A(x, I) {
    if (I) {
      let re = x.pos, he = (ye) => {
        B.assert(ye.pos >= re), re = ye.end;
      };
      if (Xi(x)) for (let ye of x.jsDoc) he(ye);
      Ht(x, he), B.assert(re <= x.end);
    }
  }
  function P(x, I, re, he, ye, de, M, ae) {
    Oe(x);
    return;
    function Oe(oe) {
      if (B.assert(oe.pos <= oe.end), oe.pos > re) {
        o(oe, x, false, ye, de, M, ae);
        return;
      }
      let W = oe.end;
      if (W >= I) {
        if (Wp(oe), Kd(oe, x), v(oe, I, re, he, ye), Ht(oe, Oe, V), Xi(oe)) for (let dt of oe.jsDoc) Oe(dt);
        A(oe, ae);
        return;
      }
      B.assert(W < I);
    }
    function V(oe) {
      if (B.assert(oe.pos <= oe.end), oe.pos > re) {
        o(oe, x, true, ye, de, M, ae);
        return;
      }
      let W = oe.end;
      if (W >= I) {
        Wp(oe), v(oe, I, re, he, ye);
        for (let dt of oe) Oe(dt);
        return;
      }
      B.assert(W < I);
    }
  }
  function l(x, I) {
    let he = I.span.start;
    for (let M = 0; he > 0 && M <= 1; M++) {
      let ae = Q(x, he);
      B.assert(ae.pos <= he);
      let Oe = ae.pos;
      he = Math.max(0, Oe - 1);
    }
    let ye = pg(he, wr(I.span)), de = I.newLength + (I.span.start - he);
    return Km(ye, de);
  }
  function Q(x, I) {
    let re = x, he;
    if (Ht(x, de), he) {
      let M = ye(he);
      M.pos > re.pos && (re = M);
    }
    return re;
    function ye(M) {
      for (; ; ) {
        let ae = Q2(M);
        if (ae) M = ae;
        else return M;
      }
    }
    function de(M) {
      if (!Hi(M)) if (M.pos <= I) {
        if (M.pos >= re.pos && (re = M), I < M.end) return Ht(M, de), true;
        B.assert(M.end <= I), he = M;
      } else return B.assert(M.pos > I), true;
    }
  }
  function h(x, I, re, he) {
    let ye = x.text;
    if (re && (B.assert(ye.length - re.span.length + re.newLength === I.length), he || B.shouldAssert(3))) {
      let de = ye.substr(0, re.span.start), M = I.substr(0, re.span.start);
      B.assert(de === M);
      let ae = ye.substring(wr(re.span), ye.length), Oe = I.substring(wr(K_(re)), I.length);
      B.assert(ae === Oe);
    }
  }
  function y(x) {
    let I = x.statements, re = 0;
    B.assert(re < I.length);
    let he = I[re], ye = -1;
    return { currentNode(M) {
      return M !== ye && (he && he.end === M && re < I.length - 1 && (re++, he = I[re]), (!he || he.pos !== M) && de(M)), ye = M, B.assert(!he || he.pos === M), he;
    } };
    function de(M) {
      I = void 0, re = -1, he = void 0, Ht(x, ae, Oe);
      return;
      function ae(V) {
        return M >= V.pos && M < V.end ? (Ht(V, ae, Oe), true) : false;
      }
      function Oe(V) {
        if (M >= V.pos && M < V.end) for (let oe = 0; oe < V.length; oe++) {
          let W = V[oe];
          if (W) {
            if (W.pos === M) return I = V, re = oe, he = W, true;
            if (W.pos < M && M < W.end) return Ht(W, ae, Oe), true;
          }
        }
        return false;
      }
    }
  }
  e.createSyntaxCursor = y;
  let g;
  ((x) => {
    x[x.Value = -1] = "Value";
  })(g || (g = {}));
})(vl || (vl = {}));
function j6(e) {
  return R6(e) !== void 0;
}
function R6(e) {
  let t = Rm(e, gb);
  if (t) return t;
  if (Oy(e, ".ts")) {
    let a = jm(e), o = a.lastIndexOf(".d.");
    if (o >= 0) return a.substring(o);
  }
}
function U6(e, t, a, o) {
  if (e) {
    if (e === "import") return 99;
    if (e === "require") return 1;
    o(t, a - t, E.resolution_mode_should_be_either_require_or_import);
  }
}
function B6(e, t) {
  let a = [];
  for (let o of Jp(t, 0) || bt) {
    let m = t.substring(o.pos, o.end);
    W6(a, o, m);
  }
  e.pragmas = /* @__PURE__ */ new Map();
  for (let o of a) {
    if (e.pragmas.has(o.name)) {
      let m = e.pragmas.get(o.name);
      m instanceof Array ? m.push(o.args) : e.pragmas.set(o.name, [m, o.args]);
      continue;
    }
    e.pragmas.set(o.name, o.args);
  }
}
function q6(e, t) {
  e.checkJsDirective = void 0, e.referencedFiles = [], e.typeReferenceDirectives = [], e.libReferenceDirectives = [], e.amdDependencies = [], e.hasNoDefaultLib = false, e.pragmas.forEach((a, o) => {
    switch (o) {
      case "reference": {
        let m = e.referencedFiles, v = e.typeReferenceDirectives, A = e.libReferenceDirectives;
        Un(bp(a), (P) => {
          let { types: l, lib: Q, path: h, ["resolution-mode"]: y, preserve: g } = P.arguments, x = g === "true" ? true : void 0;
          if (P.arguments["no-default-lib"] === "true") e.hasNoDefaultLib = true;
          else if (l) {
            let I = U6(y, l.pos, l.end, t);
            v.push({ pos: l.pos, end: l.end, fileName: l.value, ...I ? { resolutionMode: I } : {}, ...x ? { preserve: x } : {} });
          } else Q ? A.push({ pos: Q.pos, end: Q.end, fileName: Q.value, ...x ? { preserve: x } : {} }) : h ? m.push({ pos: h.pos, end: h.end, fileName: h.value, ...x ? { preserve: x } : {} }) : t(P.range.pos, P.range.end - P.range.pos, E.Invalid_reference_directive_syntax);
        });
        break;
      }
      case "amd-dependency": {
        e.amdDependencies = Pp(bp(a), (m) => ({ name: m.arguments.name, path: m.arguments.path }));
        break;
      }
      case "amd-module": {
        if (a instanceof Array) for (let m of a) e.moduleName && t(m.range.pos, m.range.end - m.range.pos, E.An_AMD_module_cannot_have_multiple_name_assignments), e.moduleName = m.arguments.name;
        else e.moduleName = a.arguments.name;
        break;
      }
      case "ts-nocheck":
      case "ts-check": {
        Un(bp(a), (m) => {
          (!e.checkJsDirective || m.range.pos > e.checkJsDirective.pos) && (e.checkJsDirective = { enabled: o === "ts-check", end: m.range.end, pos: m.range.pos });
        });
        break;
      }
      case "jsx":
      case "jsxfrag":
      case "jsximportsource":
      case "jsxruntime":
        return;
      default:
        B.fail("Unhandled pragma kind");
    }
  });
}
var Dp = /* @__PURE__ */ new Map();
function z6(e) {
  if (Dp.has(e)) return Dp.get(e);
  let t = new RegExp(`(\\s${e}\\s*=\\s*)(?:(?:'([^']*)')|(?:"([^"]*)"))`, "im");
  return Dp.set(e, t), t;
}
var F6 = /^\/\/\/\s*<(\S+)\s.*?\/>/m, V6 = /^\/\/\/?\s*@([^\s:]+)((?:[^\S\r\n]|:).*)?$/m;
function W6(e, t, a) {
  let o = t.kind === 2 && F6.exec(a);
  if (o) {
    let v = o[1].toLowerCase(), A = Lm[v];
    if (!A || !(A.kind & 1)) return;
    if (A.args) {
      let P = {};
      for (let l of A.args) {
        let h = z6(l.name).exec(a);
        if (!h && !l.optional) return;
        if (h) {
          let y = h[2] || h[3];
          if (l.captureSpan) {
            let g = t.pos + h.index + h[1].length + 1;
            P[l.name] = { value: y, pos: g, end: g + y.length };
          } else P[l.name] = y;
        }
      }
      e.push({ name: v, args: { arguments: P, range: t } });
    } else e.push({ name: v, args: { arguments: {}, range: t } });
    return;
  }
  let m = t.kind === 2 && V6.exec(a);
  if (m) return Sm(e, t, 2, m);
  if (t.kind === 3) {
    let v = /@(\S+)(\s+(?:\S.*)?)?$/gm, A;
    for (; A = v.exec(a); ) Sm(e, t, 4, A);
  }
}
function Sm(e, t, a, o) {
  if (!o) return;
  let m = o[1].toLowerCase(), v = Lm[m];
  if (!v || !(v.kind & a)) return;
  let A = o[2], P = G6(v, A);
  P !== "fail" && e.push({ name: m, args: { arguments: P, range: t } });
}
function G6(e, t) {
  if (!t) return {};
  if (!e.args) return {};
  let a = t.trim().split(/\s+/), o = {};
  for (let m = 0; m < e.args.length; m++) {
    let v = e.args[m];
    if (!a[m] && !v.optional) return "fail";
    if (v.captureSpan) return B.fail("Capture spans not yet implemented for non-xml pragmas");
    o[v.name] = a[m];
  }
  return o;
}
function pi(e, t) {
  return e.kind !== t.kind ? false : e.kind === 80 ? e.escapedText === t.escapedText : e.kind === 110 ? true : e.kind === 295 ? e.namespace.escapedText === t.namespace.escapedText && e.name.escapedText === t.name.escapedText : e.name.escapedText === t.name.escapedText && pi(e.expression, t.expression);
}
var ss = sf(ys.Latest, true);
function yh(e, t, a, o) {
  let m = ff(e) ? new Gf(e, t, a) : e === 80 ? new bh(80, t, a) : e === 81 ? new vh(81, t, a) : new gh(e, t, a);
  return m.parent = o, m.flags = o.flags & 101441536, m;
}
var Gf = class {
  constructor(e, t, a) {
    this.pos = t, this.end = a, this.kind = e, this.id = 0, this.flags = 0, this.modifierFlagsCache = 0, this.transformFlags = 0, this.parent = void 0, this.original = void 0, this.emitNode = void 0;
  }
  assertHasRealPosition(e) {
    B.assert(!fs(this.pos) && !fs(this.end), e || "Node must have a real position for this operation");
  }
  getSourceFile() {
    return hi(this);
  }
  getStart(e, t) {
    return this.assertHasRealPosition(), hl(this, e, t);
  }
  getFullStart() {
    return this.assertHasRealPosition(), this.pos;
  }
  getEnd() {
    return this.assertHasRealPosition(), this.end;
  }
  getWidth(e) {
    return this.assertHasRealPosition(), this.getEnd() - this.getStart(e);
  }
  getFullWidth() {
    return this.assertHasRealPosition(), this.end - this.pos;
  }
  getLeadingTriviaWidth(e) {
    return this.assertHasRealPosition(), this.getStart(e) - this.pos;
  }
  getFullText(e) {
    return this.assertHasRealPosition(), (e || this.getSourceFile()).text.substring(this.pos, this.end);
  }
  getText(e) {
    return this.assertHasRealPosition(), e || (e = this.getSourceFile()), e.text.substring(this.getStart(e), this.getEnd());
  }
  getChildCount(e) {
    return this.getChildren(e).length;
  }
  getChildAt(e, t) {
    return this.getChildren(t)[e];
  }
  getChildren(e = hi(this)) {
    return this.assertHasRealPosition("Node without a real position cannot be scanned and thus has no token nodes - use forEachChild and collect the result if that's fine"), ch(this, e) ?? m6(this, e, Y6(this, e));
  }
  getFirstToken(e) {
    this.assertHasRealPosition();
    let t = this.getChildren(e);
    if (!t.length) return;
    let a = km(t, (o) => o.kind < 309 || o.kind > 351);
    return a.kind < 166 ? a : a.getFirstToken(e);
  }
  getLastToken(e) {
    this.assertHasRealPosition();
    let t = this.getChildren(e), a = Yi(t);
    if (a) return a.kind < 166 ? a : a.getLastToken(e);
  }
  forEachChild(e, t) {
    return Ht(this, e, t);
  }
};
function Y6(e, t) {
  let a = [];
  if (Zg(e)) return e.forEachChild((A) => {
    a.push(A);
  }), a;
  ss.setText((t || e.getSourceFile()).text);
  let o = e.pos, m = (A) => {
    os(a, o, A.pos, e), a.push(A), o = A.end;
  }, v = (A) => {
    os(a, o, A.pos, e), a.push(X6(A, e)), o = A.end;
  };
  return Un(e.jsDoc, m), o = e.pos, e.forEachChild(m, v), os(a, o, e.end, e), ss.setText(void 0), a;
}
function os(e, t, a, o) {
  for (ss.resetTokenState(t); t < a; ) {
    let m = ss.scan(), v = ss.getTokenEnd();
    if (v <= a) {
      if (m === 80) {
        if (wb(o)) continue;
        B.fail(`Did not expect ${B.formatSyntaxKind(o.kind)} to have an Identifier in its trivia`);
      }
      e.push(yh(m, t, v, o));
    }
    if (t = v, m === 1) break;
  }
}
function X6(e, t) {
  let a = yh(352, e.pos, e.end, t), o = [], m = e.pos;
  for (let v of e) os(o, m, v.pos, t), o.push(v), m = v.end;
  return os(o, m, e.end, t), a._children = o, a;
}
var Yf = class {
  constructor(e, t, a) {
    this.pos = t, this.end = a, this.kind = e, this.id = 0, this.flags = 0, this.transformFlags = 0, this.parent = void 0, this.emitNode = void 0;
  }
  getSourceFile() {
    return hi(this);
  }
  getStart(e, t) {
    return hl(this, e, t);
  }
  getFullStart() {
    return this.pos;
  }
  getEnd() {
    return this.end;
  }
  getWidth(e) {
    return this.getEnd() - this.getStart(e);
  }
  getFullWidth() {
    return this.end - this.pos;
  }
  getLeadingTriviaWidth(e) {
    return this.getStart(e) - this.pos;
  }
  getFullText(e) {
    return (e || this.getSourceFile()).text.substring(this.pos, this.end);
  }
  getText(e) {
    return e || (e = this.getSourceFile()), e.text.substring(this.getStart(e), this.getEnd());
  }
  getChildCount() {
    return this.getChildren().length;
  }
  getChildAt(e) {
    return this.getChildren()[e];
  }
  getChildren() {
    return this.kind === 1 && this.jsDoc || bt;
  }
  getFirstToken() {
  }
  getLastToken() {
  }
  forEachChild() {
  }
}, H6 = class {
  constructor(e, t) {
    this.flags = e, this.escapedName = t, this.declarations = void 0, this.valueDeclaration = void 0, this.id = 0, this.mergeId = 0, this.parent = void 0, this.members = void 0, this.exports = void 0, this.exportSymbol = void 0, this.constEnumOnlyModule = void 0, this.isReferenced = void 0, this.lastAssignmentPos = void 0, this.links = void 0;
  }
  getFlags() {
    return this.flags;
  }
  get name() {
    return Lp(this);
  }
  getEscapedName() {
    return this.escapedName;
  }
  getName() {
    return this.name;
  }
  getDeclarations() {
    return this.declarations;
  }
  getDocumentationComment(e) {
    if (!this.documentationComment) if (this.documentationComment = bt, !this.declarations && Rd(this) && this.links.target && Rd(this.links.target) && this.links.target.links.tupleLabelDeclaration) {
      let t = this.links.target.links.tupleLabelDeclaration;
      this.documentationComment = _s([t], e);
    } else this.documentationComment = _s(this.declarations, e);
    return this.documentationComment;
  }
  getContextualDocumentationComment(e, t) {
    if (e) {
      if (tl(e) && (this.contextualGetAccessorDocumentationComment || (this.contextualGetAccessorDocumentationComment = bt, this.contextualGetAccessorDocumentationComment = _s(Gr(this.declarations, tl), t)), ts(this.contextualGetAccessorDocumentationComment))) return this.contextualGetAccessorDocumentationComment;
      if (el(e) && (this.contextualSetAccessorDocumentationComment || (this.contextualSetAccessorDocumentationComment = bt, this.contextualSetAccessorDocumentationComment = _s(Gr(this.declarations, el), t)), ts(this.contextualSetAccessorDocumentationComment))) return this.contextualSetAccessorDocumentationComment;
    }
    return this.getDocumentationComment(t);
  }
  getJsDocTags(e) {
    return this.tags === void 0 && (this.tags = bt, this.tags = ll(this.declarations, e)), this.tags;
  }
  getContextualJsDocTags(e, t) {
    if (e) {
      if (tl(e) && (this.contextualGetAccessorTags || (this.contextualGetAccessorTags = bt, this.contextualGetAccessorTags = ll(Gr(this.declarations, tl), t)), ts(this.contextualGetAccessorTags))) return this.contextualGetAccessorTags;
      if (el(e) && (this.contextualSetAccessorTags || (this.contextualSetAccessorTags = bt, this.contextualSetAccessorTags = ll(Gr(this.declarations, el), t)), ts(this.contextualSetAccessorTags))) return this.contextualSetAccessorTags;
    }
    return this.getJsDocTags(t);
  }
}, gh = class extends Yf {
  constructor(e, t, a) {
    super(e, t, a);
  }
}, bh = class extends Yf {
  constructor(e, t, a) {
    super(e, t, a);
  }
  get text() {
    return Pn(this);
  }
}, vh = class extends Yf {
  constructor(e, t, a) {
    super(e, t, a);
  }
  get text() {
    return Pn(this);
  }
}, $6 = class {
  constructor(e, t) {
    this.flags = t, this.checker = e;
  }
  getFlags() {
    return this.flags;
  }
  getSymbol() {
    return this.symbol;
  }
  getProperties() {
    return this.checker.getPropertiesOfType(this);
  }
  getProperty(e) {
    return this.checker.getPropertyOfType(this, e);
  }
  getApparentProperties() {
    return this.checker.getAugmentedPropertiesOfType(this);
  }
  getCallSignatures() {
    return this.checker.getSignaturesOfType(this, 0);
  }
  getConstructSignatures() {
    return this.checker.getSignaturesOfType(this, 1);
  }
  getStringIndexType() {
    return this.checker.getIndexTypeOfType(this, 0);
  }
  getNumberIndexType() {
    return this.checker.getIndexTypeOfType(this, 1);
  }
  getBaseTypes() {
    return this.isClassOrInterface() ? this.checker.getBaseTypes(this) : void 0;
  }
  isNullableType() {
    return this.checker.isNullableType(this);
  }
  getNonNullableType() {
    return this.checker.getNonNullableType(this);
  }
  getNonOptionalType() {
    return this.checker.getNonOptionalType(this);
  }
  getConstraint() {
    return this.checker.getBaseConstraintOfType(this);
  }
  getDefault() {
    return this.checker.getDefaultFromTypeParameter(this);
  }
  isUnion() {
    return !!(this.flags & 1048576);
  }
  isIntersection() {
    return !!(this.flags & 2097152);
  }
  isUnionOrIntersection() {
    return !!(this.flags & 3145728);
  }
  isLiteral() {
    return !!(this.flags & 2432);
  }
  isStringLiteral() {
    return !!(this.flags & 128);
  }
  isNumberLiteral() {
    return !!(this.flags & 256);
  }
  isTypeParameter() {
    return !!(this.flags & 262144);
  }
  isClassOrInterface() {
    return !!(kp(this) & 3);
  }
  isClass() {
    return !!(kp(this) & 1);
  }
  isIndexType() {
    return !!(this.flags & 4194304);
  }
  get typeArguments() {
    if (kp(this) & 4) return this.checker.getTypeArguments(this);
  }
}, Q6 = class {
  constructor(e, t) {
    this.flags = t, this.checker = e;
  }
  getDeclaration() {
    return this.declaration;
  }
  getTypeParameters() {
    return this.typeParameters;
  }
  getParameters() {
    return this.parameters;
  }
  getReturnType() {
    return this.checker.getReturnTypeOfSignature(this);
  }
  getTypeParameterAtPosition(e) {
    let t = this.checker.getParameterType(this, e);
    if (t.isIndexType() && Sb(t.type)) {
      let a = t.type.getConstraint();
      if (a) return this.checker.getIndexType(a);
    }
    return t;
  }
  getDocumentationComment() {
    return this.documentationComment || (this.documentationComment = _s(Ip(this.declaration), this.checker));
  }
  getJsDocTags() {
    return this.jsDocTags || (this.jsDocTags = ll(Ip(this.declaration), this.checker));
  }
};
function Th(e) {
  return i1(e).some((t) => t.tagName.text === "inheritDoc" || t.tagName.text === "inheritdoc");
}
function ll(e, t) {
  if (!e) return bt;
  let a = ts_JsDoc_exports.getJsDocTagsFromDeclarations(e, t);
  if (t && (a.length === 0 || e.some(Th))) {
    let o = /* @__PURE__ */ new Set();
    for (let m of e) {
      let v = xh(t, m, (A) => {
        var P;
        if (!o.has(A)) return o.add(A), m.kind === 177 || m.kind === 178 ? A.getContextualJsDocTags(m, t) : ((P = A.declarations) == null ? void 0 : P.length) === 1 ? A.getJsDocTags(t) : void 0;
      });
      v && (a = [...v, ...a]);
    }
  }
  return a;
}
function _s(e, t) {
  if (!e) return bt;
  let a = ts_JsDoc_exports.getJsDocCommentsFromDeclarations(e, t);
  if (t && (a.length === 0 || e.some(Th))) {
    let o = /* @__PURE__ */ new Set();
    for (let m of e) {
      let v = xh(t, m, (A) => {
        if (!o.has(A)) return o.add(A), m.kind === 177 || m.kind === 178 ? A.getContextualDocumentationComment(m, t) : A.getDocumentationComment(t);
      });
      v && (a = a.length === 0 ? v.slice() : v.concat(lineBreakPart(), a));
    }
  }
  return a;
}
function xh(e, t, a) {
  var o;
  let m = ((o = t.parent) == null ? void 0 : o.kind) === 176 ? t.parent.parent : t.parent;
  if (!m) return;
  let v = B2(t);
  return ny(N2(m), (A) => {
    let P = e.getTypeAtLocation(A), l = v && P.symbol ? e.getTypeOfSymbol(P.symbol) : P, Q = e.getPropertyOfType(l, t.symbol.name);
    return Q ? a(Q) : void 0;
  });
}
var K6 = class extends Gf {
  constructor(e, t, a) {
    super(e, t, a);
  }
  update(e, t) {
    return M6(this, e, t);
  }
  getLineAndCharacterOfPosition(e) {
    return Wm(this, e);
  }
  getLineStarts() {
    return Mp(this);
  }
  getPositionOfLineAndCharacter(e, t, a) {
    return ng(Mp(this), e, t, this.text, a);
  }
  getLineEndOfPosition(e) {
    let { line: t } = this.getLineAndCharacterOfPosition(e), a = this.getLineStarts(), o;
    t + 1 >= a.length && (o = this.getEnd()), o || (o = a[t + 1] - 1);
    let m = this.getFullText();
    return m[o] === `
` && m[o - 1] === "\r" ? o - 1 : o;
  }
  getNamedDeclarations() {
    return this.namedDeclarations || (this.namedDeclarations = this.computeNamedDeclarations()), this.namedDeclarations;
  }
  computeNamedDeclarations() {
    let e = hy();
    return this.forEachChild(m), e;
    function t(v) {
      let A = o(v);
      A && e.add(A, v);
    }
    function a(v) {
      let A = e.get(v);
      return A || e.set(v, A = []), A;
    }
    function o(v) {
      let A = lf(v);
      return A && (kf(A) && Xr(A.expression) ? A.expression.name.text : s1(A) ? getNameFromPropertyName(A) : void 0);
    }
    function m(v) {
      switch (v.kind) {
        case 262:
        case 218:
        case 174:
        case 173:
          let A = v, P = o(A);
          if (P) {
            let h = a(P), y = Yi(h);
            y && A.parent === y.parent && A.symbol === y.symbol ? A.body && !y.body && (h[h.length - 1] = A) : h.push(A);
          }
          Ht(v, m);
          break;
        case 263:
        case 231:
        case 264:
        case 265:
        case 266:
        case 267:
        case 271:
        case 281:
        case 276:
        case 273:
        case 274:
        case 177:
        case 178:
        case 187:
          t(v), Ht(v, m);
          break;
        case 169:
          if (!bs(v, 31)) break;
        case 260:
        case 208: {
          let h = v;
          if (Vg(h.name)) {
            Ht(h.name, m);
            break;
          }
          h.initializer && m(h.initializer);
        }
        case 306:
        case 172:
        case 171:
          t(v);
          break;
        case 278:
          let l = v;
          l.exportClause && (eh(l.exportClause) ? Un(l.exportClause.elements, m) : m(l.exportClause.name));
          break;
        case 272:
          let Q = v.importClause;
          Q && (Q.name && t(Q.name), Q.namedBindings && (Q.namedBindings.kind === 274 ? t(Q.namedBindings) : Un(Q.namedBindings.elements, m)));
          break;
        case 226:
          yf(v) !== 0 && t(v);
        default:
          Ht(v, m);
      }
    }
  }
}, Z6 = class {
  constructor(e, t, a) {
    this.fileName = e, this.text = t, this.skipTrivia = a || ((o) => o);
  }
  getLineAndCharacterOfPosition(e) {
    return Wm(this, e);
  }
};
function ev() {
  return { getNodeConstructor: () => Gf, getTokenConstructor: () => gh, getIdentifierConstructor: () => bh, getPrivateIdentifierConstructor: () => vh, getSourceFileConstructor: () => K6, getSymbolConstructor: () => H6, getTypeConstructor: () => $6, getSignatureConstructor: () => Q6, getSourceMapSourceConstructor: () => Z6 };
}
_b(ev());
var Il = new Proxy({}, { get: () => true });
var wh = Il["4.8"];
function er(e, t = false) {
  var a;
  if (e != null) {
    if (wh) {
      if (t || Nl(e)) {
        let o = t1(e);
        return o ? [...o] : void 0;
      }
      return;
    }
    return (a = e.modifiers) == null ? void 0 : a.filter((o) => !El(o));
  }
}
function na(e, t = false) {
  var a;
  if (e != null) {
    if (wh) {
      if (t || Wf(e)) {
        let o = uf(e);
        return o ? [...o] : void 0;
      }
      return;
    }
    return (a = e.decorators) == null ? void 0 : a.filter(El);
  }
}
var Eh = {};
var Ol = new Proxy({}, { get: (e, t) => t });
var Ah = Ol, Ch = Ol;
var C = Ah, Rt = Ch;
var Dh = Il["5.0"], ue = Ie, iv = /* @__PURE__ */ new Set([ue.AmpersandAmpersandToken, ue.BarBarToken, ue.QuestionQuestionToken]), av = /* @__PURE__ */ new Set([Ie.AmpersandAmpersandEqualsToken, Ie.AmpersandEqualsToken, Ie.AsteriskAsteriskEqualsToken, Ie.AsteriskEqualsToken, Ie.BarBarEqualsToken, Ie.BarEqualsToken, Ie.CaretEqualsToken, Ie.EqualsToken, Ie.GreaterThanGreaterThanEqualsToken, Ie.GreaterThanGreaterThanGreaterThanEqualsToken, Ie.LessThanLessThanEqualsToken, Ie.MinusEqualsToken, Ie.PercentEqualsToken, Ie.PlusEqualsToken, Ie.QuestionQuestionEqualsToken, Ie.SlashEqualsToken]), _v = /* @__PURE__ */ new Set([ue.AmpersandAmpersandToken, ue.AmpersandToken, ue.AsteriskAsteriskToken, ue.AsteriskToken, ue.BarBarToken, ue.BarToken, ue.CaretToken, ue.EqualsEqualsEqualsToken, ue.EqualsEqualsToken, ue.ExclamationEqualsEqualsToken, ue.ExclamationEqualsToken, ue.GreaterThanEqualsToken, ue.GreaterThanGreaterThanGreaterThanToken, ue.GreaterThanGreaterThanToken, ue.GreaterThanToken, ue.InKeyword, ue.InstanceOfKeyword, ue.LessThanEqualsToken, ue.LessThanLessThanToken, ue.LessThanToken, ue.MinusToken, ue.PercentToken, ue.PlusToken, ue.SlashToken]);
function sv(e) {
  return av.has(e.kind);
}
function ov(e) {
  return iv.has(e.kind);
}
function cv(e) {
  return _v.has(e.kind);
}
function $r(e) {
  return it(e);
}
function Ph(e) {
  return e.kind !== ue.SemicolonClassElement;
}
function Xe(e, t) {
  let a = er(t);
  return (a == null ? void 0 : a.some((o) => o.kind === e)) === true;
}
function Nh(e) {
  let t = er(e);
  return t == null ? null : t[t.length - 1] ?? null;
}
function Ih(e) {
  return e.kind === ue.CommaToken;
}
function lv(e) {
  return e.kind === ue.SingleLineCommentTrivia || e.kind === ue.MultiLineCommentTrivia;
}
function uv(e) {
  return e.kind === ue.JSDocComment;
}
function Oh(e) {
  if (sv(e)) return { type: C.AssignmentExpression, operator: $r(e.kind) };
  if (ov(e)) return { type: C.LogicalExpression, operator: $r(e.kind) };
  if (cv(e)) return { type: C.BinaryExpression, operator: $r(e.kind) };
  throw new Error(`Unexpected binary operator ${it(e.kind)}`);
}
function Ts(e, t) {
  let a = t.getLineAndCharacterOfPosition(e);
  return { column: a.character, line: a.line + 1 };
}
function Qr(e, t) {
  let [a, o] = e.map((m) => Ts(m, t));
  return { end: o, start: a };
}
function Mh(e) {
  if (e.kind === Ie.Block) switch (e.parent.kind) {
    case Ie.Constructor:
    case Ie.GetAccessor:
    case Ie.SetAccessor:
    case Ie.ArrowFunction:
    case Ie.FunctionExpression:
    case Ie.FunctionDeclaration:
    case Ie.MethodDeclaration:
      return true;
    default:
      return false;
  }
  return true;
}
function $a(e, t) {
  return [e.getStart(t), e.getEnd()];
}
function pv(e) {
  return e.kind >= ue.FirstToken && e.kind <= ue.LastToken;
}
function Jh(e) {
  return e.kind >= ue.JsxElement && e.kind <= ue.JsxAttribute;
}
function Ml(e) {
  return e.flags & on.Let ? "let" : (e.flags & on.AwaitUsing) === on.AwaitUsing ? "await using" : e.flags & on.Const ? "const" : e.flags & on.Using ? "using" : "var";
}
function xi(e) {
  let t = er(e);
  if (t != null) for (let a of t) switch (a.kind) {
    case ue.PublicKeyword:
      return "public";
    case ue.ProtectedKeyword:
      return "protected";
    case ue.PrivateKeyword:
      return "private";
  }
}
function ra(e, t, a) {
  return o(t);
  function o(m) {
    return a1(m) && m.pos === e.end ? m : gv(m.getChildren(a), (v) => (v.pos <= e.pos && v.end > e.end || v.pos === e.end) && yv(v, a) ? o(v) : void 0);
  }
}
function fv(e, t) {
  let a = e;
  for (; a; ) {
    if (t(a)) return a;
    a = a.parent;
  }
}
function dv(e) {
  return !!fv(e, Jh);
}
function Qf(e) {
  return Sr(false, e, /&(?:#\d+|#x[\da-fA-F]+|[0-9a-zA-Z]+);/g, (t) => {
    let a = t.slice(1, -1);
    if (a[0] === "#") {
      let o = a[1] === "x" ? parseInt(a.slice(2), 16) : parseInt(a.slice(1), 10);
      return o > 1114111 ? t : String.fromCodePoint(o);
    }
    return Eh[a] || t;
  });
}
function ia(e) {
  return e.kind === ue.ComputedPropertyName;
}
function Kf(e) {
  return !!e.questionToken;
}
function Zf(e) {
  return e.type === C.ChainExpression;
}
function Lh(e, t) {
  return Zf(t) && e.expression.kind !== Ie.ParenthesizedExpression;
}
function mv(e) {
  let t;
  if (Dh && e.kind === ue.Identifier ? t = Sl(e) : "originalKeywordKind" in e && (t = e.originalKeywordKind), t) return t === ue.NullKeyword ? Rt.Null : t >= ue.FirstFutureReservedWord && t <= ue.LastKeyword ? Rt.Identifier : Rt.Keyword;
  if (e.kind >= ue.FirstKeyword && e.kind <= ue.LastFutureReservedWord) return e.kind === ue.FalseKeyword || e.kind === ue.TrueKeyword ? Rt.Boolean : Rt.Keyword;
  if (e.kind >= ue.FirstPunctuation && e.kind <= ue.LastPunctuation) return Rt.Punctuator;
  if (e.kind >= ue.NoSubstitutionTemplateLiteral && e.kind <= ue.TemplateTail) return Rt.Template;
  switch (e.kind) {
    case ue.NumericLiteral:
      return Rt.Numeric;
    case ue.JsxText:
      return Rt.JSXText;
    case ue.StringLiteral:
      return e.parent.kind === ue.JsxAttribute || e.parent.kind === ue.JsxElement ? Rt.JSXText : Rt.String;
    case ue.RegularExpressionLiteral:
      return Rt.RegularExpression;
    case ue.Identifier:
    case ue.ConstructorKeyword:
    case ue.GetKeyword:
    case ue.SetKeyword:
  }
  if (e.kind === ue.Identifier) {
    if (Jh(e.parent)) return Rt.JSXIdentifier;
    if (e.parent.kind === ue.PropertyAccessExpression && dv(e)) return Rt.JSXIdentifier;
  }
  return Rt.Identifier;
}
function hv(e, t) {
  let a = e.kind === ue.JsxText ? e.getFullStart() : e.getStart(t), o = e.getEnd(), m = t.text.slice(a, o), v = mv(e), A = [a, o], P = Qr(A, t);
  return v === Rt.RegularExpression ? { type: v, loc: P, range: A, regex: { flags: m.slice(m.lastIndexOf("/") + 1), pattern: m.slice(1, m.lastIndexOf("/")) }, value: m } : { type: v, loc: P, range: A, value: m };
}
function jh(e) {
  let t = [];
  function a(o) {
    lv(o) || uv(o) || (pv(o) && o.kind !== ue.EndOfFileToken ? t.push(hv(o, e)) : o.getChildren(e).forEach(a));
  }
  return a(e), t;
}
var $f = class extends Error {
  constructor(t, a, o) {
    super(t);
    __publicField(this, "fileName");
    __publicField(this, "location");
    this.fileName = a, this.location = o, Object.defineProperty(this, "name", { configurable: true, enumerable: false, value: new.target.name });
  }
  get index() {
    return this.location.start.offset;
  }
  get lineNumber() {
    return this.location.start.line;
  }
  get column() {
    return this.location.start.column;
  }
};
function ed(e, t, a, o = a) {
  let [m, v] = [a, o].map((A) => {
    let { character: P, line: l } = t.getLineAndCharacterOfPosition(A);
    return { column: P, line: l + 1, offset: A };
  });
  return new $f(e, t.fileName, { end: v, start: m });
}
function Rh(e) {
  var t;
  return !!("illegalDecorators" in e && ((t = e.illegalDecorators) != null && t.length));
}
function yv(e, t) {
  return e.kind === ue.EndOfFileToken ? !!e.jsDoc : e.getWidth(t) !== 0;
}
function gv(e, t) {
  if (e !== void 0) for (let a = 0; a < e.length; a++) {
    let o = t(e[a], a);
    if (o !== void 0) return o;
  }
}
function bv(e) {
  return (Dh ? Sl(e) : e.originalKeywordKind) === ue.ThisKeyword;
}
function Uh(e) {
  return !!e && e.kind === ue.Identifier && bv(e);
}
function Bh(e) {
  if (!Uh(e)) return false;
  for (; N1(e.parent) && e.parent.left === e; ) e = e.parent;
  return e.parent.kind === ue.TypeQuery;
}
function vv(e) {
  return e == null ? true : e.pos === e.end && e.pos >= 0 && e.kind !== ue.EndOfFileToken;
}
function td(e) {
  return !vv(e);
}
function qh(e) {
  return cf(e.parent, mf);
}
function Tv(e) {
  return Xe(ue.AbstractKeyword, e);
}
function xv(e) {
  if (e.parameters.length && !Pl(e)) {
    let t = e.parameters[0];
    if (Sv(t)) return t;
  }
  return null;
}
function Sv(e) {
  return Uh(e.name);
}
function zh(e) {
  switch (e.kind) {
    case ue.ClassDeclaration:
      return true;
    case ue.ClassExpression:
      return true;
    case ue.PropertyDeclaration: {
      let { parent: t } = e;
      return !!(Wa(t) || vi(t) && !Tv(e));
    }
    case ue.GetAccessor:
    case ue.SetAccessor:
    case ue.MethodDeclaration: {
      let { parent: t } = e;
      return !!e.body && (Wa(t) || vi(t));
    }
    case ue.Parameter: {
      let { parent: t } = e, a = t.parent;
      return !!t && "body" in t && !!t.body && (t.kind === ue.Constructor || t.kind === ue.MethodDeclaration || t.kind === ue.SetAccessor) && xv(t) !== e && !!a && a.kind === ue.ClassDeclaration;
    }
  }
  return false;
}
function Jl(e) {
  switch (e.kind) {
    case ue.Identifier:
      return true;
    case ue.PropertyAccessExpression:
    case ue.ElementAccessExpression:
      return !(e.flags & on.OptionalChain);
    case ue.ParenthesizedExpression:
    case ue.TypeAssertionExpression:
    case ue.AsExpression:
    case ue.SatisfiesExpression:
    case ue.ExpressionWithTypeArguments:
    case ue.NonNullExpression:
      return Jl(e.expression);
    default:
      return false;
  }
}
function Fh(e) {
  let t = er(e), a = e;
  for (; (!t || t.length === 0) && Ti(a.parent); ) {
    let o = er(a.parent);
    o != null && o.length && (t = o), a = a.parent;
  }
  return t;
}
var T = Ie;
function ad(e) {
  return ed("message" in e && e.message || e.messageText, e.file, e.start);
}
var me, rd, Vh, Be, Vt, Qa, id, Ll = class {
  constructor(t, a) {
    yp(this, me);
    qi(this, "allowPattern", false);
    qi(this, "ast");
    qi(this, "esTreeNodeToTSNodeMap", /* @__PURE__ */ new WeakMap());
    qi(this, "options");
    qi(this, "tsNodeToESTreeNodeMap", /* @__PURE__ */ new WeakMap());
    this.ast = t, this.options = { ...a };
  }
  assertModuleSpecifier(t, a) {
    var o;
    !a && t.moduleSpecifier == null && ge(this, me, Vt).call(this, t, "Module specifier must be a string literal."), t.moduleSpecifier && ((o = t.moduleSpecifier) == null ? void 0 : o.kind) !== T.StringLiteral && ge(this, me, Vt).call(this, t.moduleSpecifier, "Module specifier must be a string literal.");
  }
  convertBindingNameWithTypeAnnotation(t, a, o) {
    let m = this.convertPattern(t);
    return a && (m.typeAnnotation = this.convertTypeAnnotation(a, o), this.fixParentLocation(m, m.typeAnnotation.range)), m;
  }
  convertBodyExpressions(t, a) {
    let o = Mh(a);
    return t.map((m) => {
      let v = this.convertChild(m);
      if (o) {
        if (v != null && v.expression && Cl(m) && Ya(m.expression)) {
          let A = v.expression.raw;
          return v.directive = A.slice(1, -1), v;
        }
        o = false;
      }
      return v;
    }).filter((m) => m);
  }
  convertChainExpression(t, a) {
    let { child: o, isOptional: m } = t.type === C.MemberExpression ? { child: t.object, isOptional: t.optional } : t.type === C.CallExpression ? { child: t.callee, isOptional: t.optional } : { child: t.expression, isOptional: false }, v = Lh(a, o);
    if (!v && !m) return t;
    if (v && Zf(o)) {
      let A = o.expression;
      t.type === C.MemberExpression ? t.object = A : t.type === C.CallExpression ? t.callee = A : t.expression = A;
    }
    return this.createNode(a, { type: C.ChainExpression, expression: t });
  }
  convertChild(t, a) {
    return this.converter(t, a, false);
  }
  convertPattern(t, a) {
    return this.converter(t, a, true);
  }
  convertTypeAnnotation(t, a) {
    let o = (a == null ? void 0 : a.kind) === T.FunctionType || (a == null ? void 0 : a.kind) === T.ConstructorType ? 2 : 1, v = [t.getFullStart() - o, t.end], A = Qr(v, this.ast);
    return { type: C.TSTypeAnnotation, loc: A, range: v, typeAnnotation: this.convertChild(t) };
  }
  convertTypeArgumentsToTypeParameterInstantiation(t, a) {
    let o = ra(t, this.ast, this.ast);
    return this.createNode(a, { type: C.TSTypeParameterInstantiation, range: [t.pos - 1, o.end], params: t.map((m) => this.convertChild(m)) });
  }
  convertTSTypeParametersToTypeParametersDeclaration(t) {
    let a = ra(t, this.ast, this.ast), o = [t.pos - 1, a.end];
    return { type: C.TSTypeParameterDeclaration, loc: Qr(o, this.ast), range: o, params: t.map((m) => this.convertChild(m)) };
  }
  convertParameters(t) {
    return t != null && t.length ? t.map((a) => {
      var m;
      let o = this.convertChild(a);
      return o.decorators = ((m = na(a)) == null ? void 0 : m.map((v) => this.convertChild(v))) ?? [], o;
    }) : [];
  }
  converter(t, a, o) {
    if (!t) return null;
    ge(this, me, Vh).call(this, t);
    let m = this.allowPattern;
    o != null && (this.allowPattern = o);
    let v = this.convertNode(t, a ?? t.parent);
    return this.registerTSNodeInNodeMap(t, v), this.allowPattern = m, v;
  }
  convertImportAttributes(t) {
    return t == null ? [] : t.elements.map((a) => this.convertChild(a));
  }
  convertJSXIdentifier(t) {
    let a = this.createNode(t, { type: C.JSXIdentifier, name: t.getText() });
    return this.registerTSNodeInNodeMap(t, a), a;
  }
  convertJSXNamespaceOrIdentifier(t) {
    if (t.kind === Ie.JsxNamespacedName) {
      let m = this.createNode(t, { type: C.JSXNamespacedName, name: this.createNode(t.name, { type: C.JSXIdentifier, name: t.name.text }), namespace: this.createNode(t.namespace, { type: C.JSXIdentifier, name: t.namespace.text }) });
      return this.registerTSNodeInNodeMap(t, m), m;
    }
    let a = t.getText(), o = a.indexOf(":");
    if (o > 0) {
      let m = $a(t, this.ast), v = this.createNode(t, { type: C.JSXNamespacedName, range: m, name: this.createNode(t, { type: C.JSXIdentifier, range: [m[0] + o + 1, m[1]], name: a.slice(o + 1) }), namespace: this.createNode(t, { type: C.JSXIdentifier, range: [m[0], m[0] + o], name: a.slice(0, o) }) });
      return this.registerTSNodeInNodeMap(t, v), v;
    }
    return this.convertJSXIdentifier(t);
  }
  convertJSXTagName(t, a) {
    let o;
    switch (t.kind) {
      case T.PropertyAccessExpression:
        t.name.kind === T.PrivateIdentifier && ge(this, me, Be).call(this, t.name, "Non-private identifier expected."), o = this.createNode(t, { type: C.JSXMemberExpression, object: this.convertJSXTagName(t.expression, a), property: this.convertJSXIdentifier(t.name) });
        break;
      case T.ThisKeyword:
      case T.Identifier:
      default:
        return this.convertJSXNamespaceOrIdentifier(t);
    }
    return this.registerTSNodeInNodeMap(t, o), o;
  }
  convertMethodSignature(t) {
    return this.createNode(t, { type: C.TSMethodSignature, accessibility: xi(t), computed: ia(t.name), key: this.convertChild(t.name), kind: (() => {
      switch (t.kind) {
        case T.GetAccessor:
          return "get";
        case T.SetAccessor:
          return "set";
        case T.MethodSignature:
          return "method";
      }
    })(), optional: Kf(t), params: this.convertParameters(t.parameters), readonly: Xe(T.ReadonlyKeyword, t), returnType: t.type && this.convertTypeAnnotation(t.type, t), static: Xe(T.StaticKeyword, t), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
  }
  fixParentLocation(t, a) {
    a[0] < t.range[0] && (t.range[0] = a[0], t.loc.start = Ts(t.range[0], this.ast)), a[1] > t.range[1] && (t.range[1] = a[1], t.loc.end = Ts(t.range[1], this.ast));
  }
  convertNode(t, a) {
    var o, m, v, A, P, l, Q, h;
    switch (t.kind) {
      case T.SourceFile:
        return this.createNode(t, { type: C.Program, range: [t.getStart(this.ast), t.endOfFileToken.end], body: this.convertBodyExpressions(t.statements, t), comments: void 0, sourceType: t.externalModuleIndicator ? "module" : "script", tokens: void 0 });
      case T.Block:
        return this.createNode(t, { type: C.BlockStatement, body: this.convertBodyExpressions(t.statements, t) });
      case T.Identifier:
        return Bh(t) ? this.createNode(t, { type: C.ThisExpression }) : this.createNode(t, { type: C.Identifier, decorators: [], name: t.text, optional: false, typeAnnotation: void 0 });
      case T.PrivateIdentifier:
        return this.createNode(t, { type: C.PrivateIdentifier, name: t.text.slice(1) });
      case T.WithStatement:
        return this.createNode(t, { type: C.WithStatement, body: this.convertChild(t.statement), object: this.convertChild(t.expression) });
      case T.ReturnStatement:
        return this.createNode(t, { type: C.ReturnStatement, argument: this.convertChild(t.expression) });
      case T.LabeledStatement:
        return this.createNode(t, { type: C.LabeledStatement, body: this.convertChild(t.statement), label: this.convertChild(t.label) });
      case T.ContinueStatement:
        return this.createNode(t, { type: C.ContinueStatement, label: this.convertChild(t.label) });
      case T.BreakStatement:
        return this.createNode(t, { type: C.BreakStatement, label: this.convertChild(t.label) });
      case T.IfStatement:
        return this.createNode(t, { type: C.IfStatement, alternate: this.convertChild(t.elseStatement), consequent: this.convertChild(t.thenStatement), test: this.convertChild(t.expression) });
      case T.SwitchStatement:
        return t.caseBlock.clauses.filter((y) => y.kind === T.DefaultClause).length > 1 && ge(this, me, Be).call(this, t, "A 'default' clause cannot appear more than once in a 'switch' statement."), this.createNode(t, { type: C.SwitchStatement, cases: t.caseBlock.clauses.map((y) => this.convertChild(y)), discriminant: this.convertChild(t.expression) });
      case T.CaseClause:
      case T.DefaultClause:
        return this.createNode(t, { type: C.SwitchCase, consequent: t.statements.map((y) => this.convertChild(y)), test: t.kind === T.CaseClause ? this.convertChild(t.expression) : null });
      case T.ThrowStatement:
        return t.expression.end === t.expression.pos && ge(this, me, Vt).call(this, t, "A throw statement must throw an expression."), this.createNode(t, { type: C.ThrowStatement, argument: this.convertChild(t.expression) });
      case T.TryStatement:
        return this.createNode(t, { type: C.TryStatement, block: this.convertChild(t.tryBlock), finalizer: this.convertChild(t.finallyBlock), handler: this.convertChild(t.catchClause) });
      case T.CatchClause:
        return (o = t.variableDeclaration) != null && o.initializer && ge(this, me, Be).call(this, t.variableDeclaration.initializer, "Catch clause variable cannot have an initializer."), this.createNode(t, { type: C.CatchClause, body: this.convertChild(t.block), param: t.variableDeclaration ? this.convertBindingNameWithTypeAnnotation(t.variableDeclaration.name, t.variableDeclaration.type) : null });
      case T.WhileStatement:
        return this.createNode(t, { type: C.WhileStatement, body: this.convertChild(t.statement), test: this.convertChild(t.expression) });
      case T.DoStatement:
        return this.createNode(t, { type: C.DoWhileStatement, body: this.convertChild(t.statement), test: this.convertChild(t.expression) });
      case T.ForStatement:
        return this.createNode(t, { type: C.ForStatement, body: this.convertChild(t.statement), init: this.convertChild(t.initializer), test: this.convertChild(t.condition), update: this.convertChild(t.incrementor) });
      case T.ForInStatement:
        return ge(this, me, rd).call(this, t.initializer, t.kind), this.createNode(t, { type: C.ForInStatement, body: this.convertChild(t.statement), left: this.convertPattern(t.initializer), right: this.convertChild(t.expression) });
      case T.ForOfStatement:
        return ge(this, me, rd).call(this, t.initializer, t.kind), this.createNode(t, { type: C.ForOfStatement, await: !!(t.awaitModifier && t.awaitModifier.kind === T.AwaitKeyword), body: this.convertChild(t.statement), left: this.convertPattern(t.initializer), right: this.convertChild(t.expression) });
      case T.FunctionDeclaration: {
        let y = Xe(T.DeclareKeyword, t), g = Xe(T.AsyncKeyword, t), x = !!t.asteriskToken;
        y ? t.body ? ge(this, me, Be).call(this, t, "An implementation cannot be declared in ambient contexts.") : g ? ge(this, me, Be).call(this, t, "'async' modifier cannot be used in an ambient context.") : x && ge(this, me, Be).call(this, t, "Generators are not allowed in an ambient context.") : !t.body && x && ge(this, me, Be).call(this, t, "A function signature cannot be declared as a generator.");
        let I = this.createNode(t, { type: t.body ? C.FunctionDeclaration : C.TSDeclareFunction, async: g, body: this.convertChild(t.body) || void 0, declare: y, expression: false, generator: x, id: this.convertChild(t.name), params: this.convertParameters(t.parameters), returnType: t.type && this.convertTypeAnnotation(t.type, t), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
        return this.fixExports(t, I);
      }
      case T.VariableDeclaration: {
        let y = !!t.exclamationToken, g = this.convertChild(t.initializer), x = this.convertBindingNameWithTypeAnnotation(t.name, t.type, t);
        return y && (g ? ge(this, me, Be).call(this, t, "Declarations with initializers cannot also have definite assignment assertions.") : (x.type !== C.Identifier || !x.typeAnnotation) && ge(this, me, Be).call(this, t, "Declarations with definite assignment assertions must also have type annotations.")), this.createNode(t, { type: C.VariableDeclarator, definite: y, id: x, init: g });
      }
      case T.VariableStatement: {
        let y = this.createNode(t, { type: C.VariableDeclaration, declarations: t.declarationList.declarations.map((g) => this.convertChild(g)), declare: Xe(T.DeclareKeyword, t), kind: Ml(t.declarationList) });
        return y.declarations.length || ge(this, me, Vt).call(this, t, "A variable declaration list must have at least one variable declarator."), (y.kind === "using" || y.kind === "await using") && t.declarationList.declarations.forEach((g, x) => {
          y.declarations[x].init == null && ge(this, me, Be).call(this, g, `'${y.kind}' declarations must be initialized.`), y.declarations[x].id.type !== C.Identifier && ge(this, me, Be).call(this, g.name, `'${y.kind}' declarations may not have binding patterns.`);
        }), (y.declare || ["await using", "const", "using"].includes(y.kind)) && t.declarationList.declarations.forEach((g, x) => {
          y.declarations[x].definite && ge(this, me, Be).call(this, g, "A definite assignment assertion '!' is not permitted in this context.");
        }), y.declare && t.declarationList.declarations.forEach((g, x) => {
          y.declarations[x].init && (["let", "var"].includes(y.kind) || y.declarations[x].id.typeAnnotation) && ge(this, me, Be).call(this, g, "Initializers are not permitted in ambient contexts.");
        }), this.fixExports(t, y);
      }
      case T.VariableDeclarationList: {
        let y = this.createNode(t, { type: C.VariableDeclaration, declarations: t.declarations.map((g) => this.convertChild(g)), declare: false, kind: Ml(t) });
        return (y.kind === "using" || y.kind === "await using") && t.declarations.forEach((g, x) => {
          y.declarations[x].init != null && ge(this, me, Be).call(this, g, `'${y.kind}' declarations may not be initialized in for statement.`), y.declarations[x].id.type !== C.Identifier && ge(this, me, Be).call(this, g.name, `'${y.kind}' declarations may not have binding patterns.`);
        }), y;
      }
      case T.ExpressionStatement:
        return this.createNode(t, { type: C.ExpressionStatement, directive: void 0, expression: this.convertChild(t.expression) });
      case T.ThisKeyword:
        return this.createNode(t, { type: C.ThisExpression });
      case T.ArrayLiteralExpression:
        return this.allowPattern ? this.createNode(t, { type: C.ArrayPattern, decorators: [], elements: t.elements.map((y) => this.convertPattern(y)), optional: false, typeAnnotation: void 0 }) : this.createNode(t, { type: C.ArrayExpression, elements: t.elements.map((y) => this.convertChild(y)) });
      case T.ObjectLiteralExpression: {
        if (this.allowPattern) return this.createNode(t, { type: C.ObjectPattern, decorators: [], optional: false, properties: t.properties.map((g) => this.convertPattern(g)), typeAnnotation: void 0 });
        let y = [];
        for (let g of t.properties) (g.kind === T.GetAccessor || g.kind === T.SetAccessor || g.kind === T.MethodDeclaration) && !g.body && ge(this, me, Vt).call(this, g.end - 1, "'{' expected."), y.push(this.convertChild(g));
        return this.createNode(t, { type: C.ObjectExpression, properties: y });
      }
      case T.PropertyAssignment: {
        let { exclamationToken: y, questionToken: g } = t;
        return g && ge(this, me, Be).call(this, g, "A property assignment cannot have a question token."), y && ge(this, me, Be).call(this, y, "A property assignment cannot have an exclamation token."), this.createNode(t, { type: C.Property, computed: ia(t.name), key: this.convertChild(t.name), kind: "init", method: false, optional: false, shorthand: false, value: this.converter(t.initializer, t, this.allowPattern) });
      }
      case T.ShorthandPropertyAssignment: {
        let { exclamationToken: y, modifiers: g, questionToken: x } = t;
        return g && ge(this, me, Be).call(this, g[0], "A shorthand property assignment cannot have modifiers."), x && ge(this, me, Be).call(this, x, "A shorthand property assignment cannot have a question token."), y && ge(this, me, Be).call(this, y, "A shorthand property assignment cannot have an exclamation token."), t.objectAssignmentInitializer ? this.createNode(t, { type: C.Property, computed: false, key: this.convertChild(t.name), kind: "init", method: false, optional: false, shorthand: true, value: this.createNode(t, { type: C.AssignmentPattern, decorators: [], left: this.convertPattern(t.name), optional: false, right: this.convertChild(t.objectAssignmentInitializer), typeAnnotation: void 0 }) }) : this.createNode(t, { type: C.Property, computed: false, key: this.convertChild(t.name), kind: "init", method: false, optional: false, shorthand: true, value: this.convertChild(t.name) });
      }
      case T.ComputedPropertyName:
        return this.convertChild(t.expression);
      case T.PropertyDeclaration: {
        let y = Xe(T.AbstractKeyword, t);
        y && t.initializer && ge(this, me, Be).call(this, t.initializer, "Abstract property cannot have an initializer.");
        let g = Xe(T.AccessorKeyword, t), x = g ? y ? C.TSAbstractAccessorProperty : C.AccessorProperty : y ? C.TSAbstractPropertyDefinition : C.PropertyDefinition, I = this.convertChild(t.name);
        return this.createNode(t, { type: x, accessibility: xi(t), computed: ia(t.name), declare: Xe(T.DeclareKeyword, t), decorators: ((m = na(t)) == null ? void 0 : m.map((re) => this.convertChild(re))) ?? [], definite: !!t.exclamationToken, key: I, optional: (I.type === C.Literal || t.name.kind === T.Identifier || t.name.kind === T.ComputedPropertyName || t.name.kind === T.PrivateIdentifier) && !!t.questionToken, override: Xe(T.OverrideKeyword, t), readonly: Xe(T.ReadonlyKeyword, t), static: Xe(T.StaticKeyword, t), typeAnnotation: t.type && this.convertTypeAnnotation(t.type, t), value: y ? null : this.convertChild(t.initializer) });
      }
      case T.GetAccessor:
      case T.SetAccessor:
        if (t.parent.kind === T.InterfaceDeclaration || t.parent.kind === T.TypeLiteral) return this.convertMethodSignature(t);
      case T.MethodDeclaration: {
        let y = this.createNode(t, { type: t.body ? C.FunctionExpression : C.TSEmptyBodyFunctionExpression, range: [t.parameters.pos - 1, t.end], async: Xe(T.AsyncKeyword, t), body: this.convertChild(t.body), declare: false, expression: false, generator: !!t.asteriskToken, id: null, params: [], returnType: t.type && this.convertTypeAnnotation(t.type, t), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
        y.typeParameters && this.fixParentLocation(y, y.typeParameters.range);
        let g;
        if (a.kind === T.ObjectLiteralExpression) y.params = t.parameters.map((x) => this.convertChild(x)), g = this.createNode(t, { type: C.Property, computed: ia(t.name), key: this.convertChild(t.name), kind: "init", method: t.kind === T.MethodDeclaration, optional: !!t.questionToken, shorthand: false, value: y });
        else {
          y.params = this.convertParameters(t.parameters);
          let x = Xe(T.AbstractKeyword, t) ? C.TSAbstractMethodDefinition : C.MethodDefinition;
          g = this.createNode(t, { type: x, accessibility: xi(t), computed: ia(t.name), decorators: ((v = na(t)) == null ? void 0 : v.map((I) => this.convertChild(I))) ?? [], key: this.convertChild(t.name), kind: "method", optional: !!t.questionToken, override: Xe(T.OverrideKeyword, t), static: Xe(T.StaticKeyword, t), value: y });
        }
        return t.kind === T.GetAccessor ? g.kind = "get" : t.kind === T.SetAccessor ? g.kind = "set" : !g.static && t.name.kind === T.StringLiteral && t.name.text === "constructor" && g.type !== C.Property && (g.kind = "constructor"), g;
      }
      case T.Constructor: {
        let y = Nh(t), g = (y && ra(y, t, this.ast)) ?? t.getFirstToken(), x = this.createNode(t, { type: t.body ? C.FunctionExpression : C.TSEmptyBodyFunctionExpression, range: [t.parameters.pos - 1, t.end], async: false, body: this.convertChild(t.body), declare: false, expression: false, generator: false, id: null, params: this.convertParameters(t.parameters), returnType: t.type && this.convertTypeAnnotation(t.type, t), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
        x.typeParameters && this.fixParentLocation(x, x.typeParameters.range);
        let I = this.createNode(t, { type: C.Identifier, range: [g.getStart(this.ast), g.end], decorators: [], name: "constructor", optional: false, typeAnnotation: void 0 }), re = Xe(T.StaticKeyword, t);
        return this.createNode(t, { type: Xe(T.AbstractKeyword, t) ? C.TSAbstractMethodDefinition : C.MethodDefinition, accessibility: xi(t), computed: false, decorators: [], key: I, kind: re ? "method" : "constructor", optional: false, override: false, static: re, value: x });
      }
      case T.FunctionExpression:
        return this.createNode(t, { type: C.FunctionExpression, async: Xe(T.AsyncKeyword, t), body: this.convertChild(t.body), declare: false, expression: false, generator: !!t.asteriskToken, id: this.convertChild(t.name), params: this.convertParameters(t.parameters), returnType: t.type && this.convertTypeAnnotation(t.type, t), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
      case T.SuperKeyword:
        return this.createNode(t, { type: C.Super });
      case T.ArrayBindingPattern:
        return this.createNode(t, { type: C.ArrayPattern, decorators: [], elements: t.elements.map((y) => this.convertPattern(y)), optional: false, typeAnnotation: void 0 });
      case T.OmittedExpression:
        return null;
      case T.ObjectBindingPattern:
        return this.createNode(t, { type: C.ObjectPattern, decorators: [], optional: false, properties: t.elements.map((y) => this.convertPattern(y)), typeAnnotation: void 0 });
      case T.BindingElement: {
        if (a.kind === T.ArrayBindingPattern) {
          let g = this.convertChild(t.name, a);
          return t.initializer ? this.createNode(t, { type: C.AssignmentPattern, decorators: [], left: g, optional: false, right: this.convertChild(t.initializer), typeAnnotation: void 0 }) : t.dotDotDotToken ? this.createNode(t, { type: C.RestElement, argument: g, decorators: [], optional: false, typeAnnotation: void 0, value: void 0 }) : g;
        }
        let y;
        return t.dotDotDotToken ? y = this.createNode(t, { type: C.RestElement, argument: this.convertChild(t.propertyName ?? t.name), decorators: [], optional: false, typeAnnotation: void 0, value: void 0 }) : y = this.createNode(t, { type: C.Property, computed: !!(t.propertyName && t.propertyName.kind === T.ComputedPropertyName), key: this.convertChild(t.propertyName ?? t.name), kind: "init", method: false, optional: false, shorthand: !t.propertyName, value: this.convertChild(t.name) }), t.initializer && (y.value = this.createNode(t, { type: C.AssignmentPattern, range: [t.name.getStart(this.ast), t.initializer.end], decorators: [], left: this.convertChild(t.name), optional: false, right: this.convertChild(t.initializer), typeAnnotation: void 0 })), y;
      }
      case T.ArrowFunction:
        return this.createNode(t, { type: C.ArrowFunctionExpression, async: Xe(T.AsyncKeyword, t), body: this.convertChild(t.body), expression: t.body.kind !== T.Block, generator: false, id: null, params: this.convertParameters(t.parameters), returnType: t.type && this.convertTypeAnnotation(t.type, t), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
      case T.YieldExpression:
        return this.createNode(t, { type: C.YieldExpression, argument: this.convertChild(t.expression), delegate: !!t.asteriskToken });
      case T.AwaitExpression:
        return this.createNode(t, { type: C.AwaitExpression, argument: this.convertChild(t.expression) });
      case T.NoSubstitutionTemplateLiteral:
        return this.createNode(t, { type: C.TemplateLiteral, expressions: [], quasis: [this.createNode(t, { type: C.TemplateElement, tail: true, value: { cooked: t.text, raw: this.ast.text.slice(t.getStart(this.ast) + 1, t.end - 1) } })] });
      case T.TemplateExpression: {
        let y = this.createNode(t, { type: C.TemplateLiteral, expressions: [], quasis: [this.convertChild(t.head)] });
        return t.templateSpans.forEach((g) => {
          y.expressions.push(this.convertChild(g.expression)), y.quasis.push(this.convertChild(g.literal));
        }), y;
      }
      case T.TaggedTemplateExpression:
        return this.createNode(t, { type: C.TaggedTemplateExpression, quasi: this.convertChild(t.template), tag: this.convertChild(t.tag), typeArguments: t.typeArguments && this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t) });
      case T.TemplateHead:
      case T.TemplateMiddle:
      case T.TemplateTail: {
        let y = t.kind === T.TemplateTail;
        return this.createNode(t, { type: C.TemplateElement, tail: y, value: { cooked: t.text, raw: this.ast.text.slice(t.getStart(this.ast) + 1, t.end - (y ? 1 : 2)) } });
      }
      case T.SpreadAssignment:
      case T.SpreadElement:
        return this.allowPattern ? this.createNode(t, { type: C.RestElement, argument: this.convertPattern(t.expression), decorators: [], optional: false, typeAnnotation: void 0, value: void 0 }) : this.createNode(t, { type: C.SpreadElement, argument: this.convertChild(t.expression) });
      case T.Parameter: {
        let y, g;
        return t.dotDotDotToken ? y = g = this.createNode(t, { type: C.RestElement, argument: this.convertChild(t.name), decorators: [], optional: false, typeAnnotation: void 0, value: void 0 }) : t.initializer ? (y = this.convertChild(t.name), g = this.createNode(t, { type: C.AssignmentPattern, decorators: [], left: y, optional: false, right: this.convertChild(t.initializer), typeAnnotation: void 0 }), er(t) && (g.range[0] = y.range[0], g.loc = Qr(g.range, this.ast))) : y = g = this.convertChild(t.name, a), t.type && (y.typeAnnotation = this.convertTypeAnnotation(t.type, t), this.fixParentLocation(y, y.typeAnnotation.range)), t.questionToken && (t.questionToken.end > y.range[1] && (y.range[1] = t.questionToken.end, y.loc.end = Ts(y.range[1], this.ast)), y.optional = true), er(t) ? this.createNode(t, { type: C.TSParameterProperty, accessibility: xi(t), decorators: [], override: Xe(T.OverrideKeyword, t), parameter: g, readonly: Xe(T.ReadonlyKeyword, t), static: Xe(T.StaticKeyword, t) }) : g;
      }
      case T.ClassDeclaration:
        !t.name && (!Xe(Ie.ExportKeyword, t) || !Xe(Ie.DefaultKeyword, t)) && ge(this, me, Vt).call(this, t, "A class declaration without the 'default' modifier must have a name.");
      case T.ClassExpression: {
        let y = t.heritageClauses ?? [], g = t.kind === T.ClassDeclaration ? C.ClassDeclaration : C.ClassExpression, x, I;
        for (let he of y) {
          let { token: ye, types: de } = he;
          de.length === 0 && ge(this, me, Vt).call(this, he, `'${it(ye)}' list cannot be empty.`), ye === T.ExtendsKeyword ? (x && ge(this, me, Vt).call(this, he, "'extends' clause already seen."), I && ge(this, me, Vt).call(this, he, "'extends' clause must precede 'implements' clause."), de.length > 1 && ge(this, me, Vt).call(this, de[1], "Classes can only extend a single class."), x ?? (x = he)) : ye === T.ImplementsKeyword && (I && ge(this, me, Vt).call(this, he, "'implements' clause already seen."), I ?? (I = he));
        }
        let re = this.createNode(t, { type: g, abstract: Xe(T.AbstractKeyword, t), body: this.createNode(t, { type: C.ClassBody, range: [t.members.pos - 1, t.end], body: t.members.filter(Ph).map((he) => this.convertChild(he)) }), declare: Xe(T.DeclareKeyword, t), decorators: ((A = na(t)) == null ? void 0 : A.map((he) => this.convertChild(he))) ?? [], id: this.convertChild(t.name), implements: (I == null ? void 0 : I.types.map((he) => this.convertChild(he))) ?? [], superClass: x != null && x.types[0] ? this.convertChild(x.types[0].expression) : null, superTypeArguments: void 0, typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
        return (P = x == null ? void 0 : x.types[0]) != null && P.typeArguments && (re.superTypeArguments = this.convertTypeArgumentsToTypeParameterInstantiation(x.types[0].typeArguments, x.types[0])), this.fixExports(t, re);
      }
      case T.ModuleBlock:
        return this.createNode(t, { type: C.TSModuleBlock, body: this.convertBodyExpressions(t.statements, t) });
      case T.ImportDeclaration: {
        this.assertModuleSpecifier(t, false);
        let y = this.createNode(t, ge(this, me, Qa).call(this, { type: C.ImportDeclaration, attributes: this.convertImportAttributes(t.attributes ?? t.assertClause), importKind: "value", source: this.convertChild(t.moduleSpecifier), specifiers: [] }, "assertions", "attributes", true));
        if (t.importClause && (t.importClause.isTypeOnly && (y.importKind = "type"), t.importClause.name && y.specifiers.push(this.convertChild(t.importClause)), t.importClause.namedBindings)) switch (t.importClause.namedBindings.kind) {
          case T.NamespaceImport:
            y.specifiers.push(this.convertChild(t.importClause.namedBindings));
            break;
          case T.NamedImports:
            y.specifiers.push(...t.importClause.namedBindings.elements.map((g) => this.convertChild(g)));
            break;
        }
        return y;
      }
      case T.NamespaceImport:
        return this.createNode(t, { type: C.ImportNamespaceSpecifier, local: this.convertChild(t.name) });
      case T.ImportSpecifier:
        return this.createNode(t, { type: C.ImportSpecifier, imported: this.convertChild(t.propertyName ?? t.name), importKind: t.isTypeOnly ? "type" : "value", local: this.convertChild(t.name) });
      case T.ImportClause: {
        let y = this.convertChild(t.name);
        return this.createNode(t, { type: C.ImportDefaultSpecifier, range: y.range, local: y });
      }
      case T.ExportDeclaration:
        return ((l = t.exportClause) == null ? void 0 : l.kind) === T.NamedExports ? (this.assertModuleSpecifier(t, true), this.createNode(t, ge(this, me, Qa).call(this, { type: C.ExportNamedDeclaration, attributes: this.convertImportAttributes(t.attributes ?? t.assertClause), declaration: null, exportKind: t.isTypeOnly ? "type" : "value", source: this.convertChild(t.moduleSpecifier), specifiers: t.exportClause.elements.map((y) => this.convertChild(y, t)) }, "assertions", "attributes", true))) : (this.assertModuleSpecifier(t, false), this.createNode(t, ge(this, me, Qa).call(this, { type: C.ExportAllDeclaration, attributes: this.convertImportAttributes(t.attributes ?? t.assertClause), exported: ((Q = t.exportClause) == null ? void 0 : Q.kind) === T.NamespaceExport ? this.convertChild(t.exportClause.name) : null, exportKind: t.isTypeOnly ? "type" : "value", source: this.convertChild(t.moduleSpecifier) }, "assertions", "attributes", true)));
      case T.ExportSpecifier: {
        let y = t.propertyName ?? t.name;
        return y.kind === T.StringLiteral && a.kind === T.ExportDeclaration && ((h = a.moduleSpecifier) == null ? void 0 : h.kind) !== T.StringLiteral && ge(this, me, Be).call(this, y, "A string literal cannot be used as a local exported binding without `from`."), this.createNode(t, { type: C.ExportSpecifier, exported: this.convertChild(t.name), exportKind: t.isTypeOnly ? "type" : "value", local: this.convertChild(y) });
      }
      case T.ExportAssignment:
        return t.isExportEquals ? this.createNode(t, { type: C.TSExportAssignment, expression: this.convertChild(t.expression) }) : this.createNode(t, { type: C.ExportDefaultDeclaration, declaration: this.convertChild(t.expression), exportKind: "value" });
      case T.PrefixUnaryExpression:
      case T.PostfixUnaryExpression: {
        let y = $r(t.operator);
        return y === "++" || y === "--" ? (Jl(t.operand) || ge(this, me, Vt).call(this, t.operand, "Invalid left-hand side expression in unary operation"), this.createNode(t, { type: C.UpdateExpression, argument: this.convertChild(t.operand), operator: y, prefix: t.kind === T.PrefixUnaryExpression })) : this.createNode(t, { type: C.UnaryExpression, argument: this.convertChild(t.operand), operator: y, prefix: t.kind === T.PrefixUnaryExpression });
      }
      case T.DeleteExpression:
        return this.createNode(t, { type: C.UnaryExpression, argument: this.convertChild(t.expression), operator: "delete", prefix: true });
      case T.VoidExpression:
        return this.createNode(t, { type: C.UnaryExpression, argument: this.convertChild(t.expression), operator: "void", prefix: true });
      case T.TypeOfExpression:
        return this.createNode(t, { type: C.UnaryExpression, argument: this.convertChild(t.expression), operator: "typeof", prefix: true });
      case T.TypeOperator:
        return this.createNode(t, { type: C.TSTypeOperator, operator: $r(t.operator), typeAnnotation: this.convertChild(t.type) });
      case T.BinaryExpression: {
        if (Ih(t.operatorToken)) {
          let g = this.createNode(t, { type: C.SequenceExpression, expressions: [] }), x = this.convertChild(t.left);
          return x.type === C.SequenceExpression && t.left.kind !== T.ParenthesizedExpression ? g.expressions.push(...x.expressions) : g.expressions.push(x), g.expressions.push(this.convertChild(t.right)), g;
        }
        let y = Oh(t.operatorToken);
        return this.allowPattern && y.type === C.AssignmentExpression ? this.createNode(t, { type: C.AssignmentPattern, decorators: [], left: this.convertPattern(t.left, t), optional: false, right: this.convertChild(t.right), typeAnnotation: void 0 }) : this.createNode(t, { ...y, left: this.converter(t.left, t, y.type === C.AssignmentExpression), right: this.convertChild(t.right) });
      }
      case T.PropertyAccessExpression: {
        let y = this.convertChild(t.expression), g = this.convertChild(t.name), I = this.createNode(t, { type: C.MemberExpression, computed: false, object: y, optional: t.questionDotToken != null, property: g });
        return this.convertChainExpression(I, t);
      }
      case T.ElementAccessExpression: {
        let y = this.convertChild(t.expression), g = this.convertChild(t.argumentExpression), I = this.createNode(t, { type: C.MemberExpression, computed: true, object: y, optional: t.questionDotToken != null, property: g });
        return this.convertChainExpression(I, t);
      }
      case T.CallExpression: {
        if (t.expression.kind === T.ImportKeyword) return t.arguments.length !== 1 && t.arguments.length !== 2 && ge(this, me, Vt).call(this, t.arguments[2] ?? t, "Dynamic import requires exactly one or two arguments."), this.createNode(t, ge(this, me, Qa).call(this, { type: C.ImportExpression, options: t.arguments[1] ? this.convertChild(t.arguments[1]) : null, source: this.convertChild(t.arguments[0]) }, "attributes", "options", true));
        let y = this.convertChild(t.expression), g = t.arguments.map((re) => this.convertChild(re)), x = t.typeArguments && this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t), I = this.createNode(t, { type: C.CallExpression, arguments: g, callee: y, optional: t.questionDotToken != null, typeArguments: x });
        return this.convertChainExpression(I, t);
      }
      case T.NewExpression: {
        let y = t.typeArguments && this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t);
        return this.createNode(t, { type: C.NewExpression, arguments: t.arguments ? t.arguments.map((g) => this.convertChild(g)) : [], callee: this.convertChild(t.expression), typeArguments: y });
      }
      case T.ConditionalExpression:
        return this.createNode(t, { type: C.ConditionalExpression, alternate: this.convertChild(t.whenFalse), consequent: this.convertChild(t.whenTrue), test: this.convertChild(t.condition) });
      case T.MetaProperty:
        return this.createNode(t, { type: C.MetaProperty, meta: this.createNode(t.getFirstToken(), { type: C.Identifier, decorators: [], name: $r(t.keywordToken), optional: false, typeAnnotation: void 0 }), property: this.convertChild(t.name) });
      case T.Decorator:
        return this.createNode(t, { type: C.Decorator, expression: this.convertChild(t.expression) });
      case T.StringLiteral:
        return this.createNode(t, { type: C.Literal, raw: t.getText(), value: a.kind === T.JsxAttribute ? Qf(t.text) : t.text });
      case T.NumericLiteral:
        return this.createNode(t, { type: C.Literal, raw: t.getText(), value: Number(t.text) });
      case T.BigIntLiteral: {
        let y = $a(t, this.ast), g = this.ast.text.slice(y[0], y[1]), x = Sr(false, g.slice(0, -1), "_", ""), I = typeof BigInt < "u" ? BigInt(x) : null;
        return this.createNode(t, { type: C.Literal, range: y, bigint: I == null ? x : String(I), raw: g, value: I });
      }
      case T.RegularExpressionLiteral: {
        let y = t.text.slice(1, t.text.lastIndexOf("/")), g = t.text.slice(t.text.lastIndexOf("/") + 1), x = null;
        try {
          x = new RegExp(y, g);
        } catch {
        }
        return this.createNode(t, { type: C.Literal, raw: t.text, regex: { flags: g, pattern: y }, value: x });
      }
      case T.TrueKeyword:
        return this.createNode(t, { type: C.Literal, raw: "true", value: true });
      case T.FalseKeyword:
        return this.createNode(t, { type: C.Literal, raw: "false", value: false });
      case T.NullKeyword:
        return this.createNode(t, { type: C.Literal, raw: "null", value: null });
      case T.EmptyStatement:
        return this.createNode(t, { type: C.EmptyStatement });
      case T.DebuggerStatement:
        return this.createNode(t, { type: C.DebuggerStatement });
      case T.JsxElement:
        return this.createNode(t, { type: C.JSXElement, children: t.children.map((y) => this.convertChild(y)), closingElement: this.convertChild(t.closingElement), openingElement: this.convertChild(t.openingElement) });
      case T.JsxFragment:
        return this.createNode(t, { type: C.JSXFragment, children: t.children.map((y) => this.convertChild(y)), closingFragment: this.convertChild(t.closingFragment), openingFragment: this.convertChild(t.openingFragment) });
      case T.JsxSelfClosingElement:
        return this.createNode(t, { type: C.JSXElement, children: [], closingElement: null, openingElement: this.createNode(t, { type: C.JSXOpeningElement, range: $a(t, this.ast), attributes: t.attributes.properties.map((y) => this.convertChild(y)), name: this.convertJSXTagName(t.tagName, t), selfClosing: true, typeArguments: t.typeArguments ? this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t) : void 0 }) });
      case T.JsxOpeningElement:
        return this.createNode(t, { type: C.JSXOpeningElement, attributes: t.attributes.properties.map((y) => this.convertChild(y)), name: this.convertJSXTagName(t.tagName, t), selfClosing: false, typeArguments: t.typeArguments && this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t) });
      case T.JsxClosingElement:
        return this.createNode(t, { type: C.JSXClosingElement, name: this.convertJSXTagName(t.tagName, t) });
      case T.JsxOpeningFragment:
        return this.createNode(t, { type: C.JSXOpeningFragment });
      case T.JsxClosingFragment:
        return this.createNode(t, { type: C.JSXClosingFragment });
      case T.JsxExpression: {
        let y = t.expression ? this.convertChild(t.expression) : this.createNode(t, { type: C.JSXEmptyExpression, range: [t.getStart(this.ast) + 1, t.getEnd() - 1] });
        return t.dotDotDotToken ? this.createNode(t, { type: C.JSXSpreadChild, expression: y }) : this.createNode(t, { type: C.JSXExpressionContainer, expression: y });
      }
      case T.JsxAttribute:
        return this.createNode(t, { type: C.JSXAttribute, name: this.convertJSXNamespaceOrIdentifier(t.name), value: this.convertChild(t.initializer) });
      case T.JsxText: {
        let y = t.getFullStart(), g = t.getEnd(), x = this.ast.text.slice(y, g);
        return this.createNode(t, { type: C.JSXText, range: [y, g], raw: x, value: Qf(x) });
      }
      case T.JsxSpreadAttribute:
        return this.createNode(t, { type: C.JSXSpreadAttribute, argument: this.convertChild(t.expression) });
      case T.QualifiedName:
        return this.createNode(t, { type: C.TSQualifiedName, left: this.convertChild(t.left), right: this.convertChild(t.right) });
      case T.TypeReference:
        return this.createNode(t, { type: C.TSTypeReference, typeArguments: t.typeArguments && this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t), typeName: this.convertChild(t.typeName) });
      case T.TypeParameter:
        return this.createNode(t, { type: C.TSTypeParameter, const: Xe(T.ConstKeyword, t), constraint: t.constraint && this.convertChild(t.constraint), default: t.default ? this.convertChild(t.default) : void 0, in: Xe(T.InKeyword, t), name: this.convertChild(t.name), out: Xe(T.OutKeyword, t) });
      case T.ThisType:
        return this.createNode(t, { type: C.TSThisType });
      case T.AnyKeyword:
      case T.BigIntKeyword:
      case T.BooleanKeyword:
      case T.NeverKeyword:
      case T.NumberKeyword:
      case T.ObjectKeyword:
      case T.StringKeyword:
      case T.SymbolKeyword:
      case T.UnknownKeyword:
      case T.VoidKeyword:
      case T.UndefinedKeyword:
      case T.IntrinsicKeyword:
        return this.createNode(t, { type: C[`TS${T[t.kind]}`] });
      case T.NonNullExpression: {
        let y = this.createNode(t, { type: C.TSNonNullExpression, expression: this.convertChild(t.expression) });
        return this.convertChainExpression(y, t);
      }
      case T.TypeLiteral:
        return this.createNode(t, { type: C.TSTypeLiteral, members: t.members.map((y) => this.convertChild(y)) });
      case T.ArrayType:
        return this.createNode(t, { type: C.TSArrayType, elementType: this.convertChild(t.elementType) });
      case T.IndexedAccessType:
        return this.createNode(t, { type: C.TSIndexedAccessType, indexType: this.convertChild(t.indexType), objectType: this.convertChild(t.objectType) });
      case T.ConditionalType:
        return this.createNode(t, { type: C.TSConditionalType, checkType: this.convertChild(t.checkType), extendsType: this.convertChild(t.extendsType), falseType: this.convertChild(t.falseType), trueType: this.convertChild(t.trueType) });
      case T.TypeQuery:
        return this.createNode(t, { type: C.TSTypeQuery, exprName: this.convertChild(t.exprName), typeArguments: t.typeArguments && this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t) });
      case T.MappedType:
        return t.members && t.members.length > 0 && ge(this, me, Vt).call(this, t.members[0], "A mapped type may not declare properties or methods."), this.createNode(t, ge(this, me, id).call(this, { type: C.TSMappedType, constraint: this.convertChild(t.typeParameter.constraint), key: this.convertChild(t.typeParameter.name), nameType: this.convertChild(t.nameType) ?? null, optional: t.questionToken && (t.questionToken.kind === T.QuestionToken || $r(t.questionToken.kind)), readonly: t.readonlyToken && (t.readonlyToken.kind === T.ReadonlyKeyword || $r(t.readonlyToken.kind)), typeAnnotation: t.type && this.convertChild(t.type) }, "typeParameter", "'constraint' and 'key'", this.convertChild(t.typeParameter)));
      case T.ParenthesizedExpression:
        return this.convertChild(t.expression, a);
      case T.TypeAliasDeclaration: {
        let y = this.createNode(t, { type: C.TSTypeAliasDeclaration, declare: Xe(T.DeclareKeyword, t), id: this.convertChild(t.name), typeAnnotation: this.convertChild(t.type), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
        return this.fixExports(t, y);
      }
      case T.MethodSignature:
        return this.convertMethodSignature(t);
      case T.PropertySignature: {
        let { initializer: y } = t;
        return y && ge(this, me, Be).call(this, y, "A property signature cannot have an initializer."), this.createNode(t, { type: C.TSPropertySignature, accessibility: xi(t), computed: ia(t.name), key: this.convertChild(t.name), optional: Kf(t), readonly: Xe(T.ReadonlyKeyword, t), static: Xe(T.StaticKeyword, t), typeAnnotation: t.type && this.convertTypeAnnotation(t.type, t) });
      }
      case T.IndexSignature:
        return this.createNode(t, { type: C.TSIndexSignature, accessibility: xi(t), parameters: t.parameters.map((y) => this.convertChild(y)), readonly: Xe(T.ReadonlyKeyword, t), static: Xe(T.StaticKeyword, t), typeAnnotation: t.type && this.convertTypeAnnotation(t.type, t) });
      case T.ConstructorType:
        return this.createNode(t, { type: C.TSConstructorType, abstract: Xe(T.AbstractKeyword, t), params: this.convertParameters(t.parameters), returnType: t.type && this.convertTypeAnnotation(t.type, t), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
      case T.FunctionType: {
        let { modifiers: y } = t;
        y && ge(this, me, Be).call(this, y[0], "A function type cannot have modifiers.");
      }
      case T.ConstructSignature:
      case T.CallSignature: {
        let y = t.kind === T.ConstructSignature ? C.TSConstructSignatureDeclaration : t.kind === T.CallSignature ? C.TSCallSignatureDeclaration : C.TSFunctionType;
        return this.createNode(t, { type: y, params: this.convertParameters(t.parameters), returnType: t.type && this.convertTypeAnnotation(t.type, t), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
      }
      case T.ExpressionWithTypeArguments: {
        let y = a.kind, g = y === T.InterfaceDeclaration ? C.TSInterfaceHeritage : y === T.HeritageClause ? C.TSClassImplements : C.TSInstantiationExpression;
        return this.createNode(t, { type: g, expression: this.convertChild(t.expression), typeArguments: t.typeArguments && this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t) });
      }
      case T.InterfaceDeclaration: {
        let y = t.heritageClauses ?? [], g = [];
        for (let I of y) {
          I.token !== T.ExtendsKeyword && ge(this, me, Be).call(this, I, I.token === T.ImplementsKeyword ? "Interface declaration cannot have 'implements' clause." : "Unexpected token.");
          for (let re of I.types) g.push(this.convertChild(re, t));
        }
        let x = this.createNode(t, { type: C.TSInterfaceDeclaration, body: this.createNode(t, { type: C.TSInterfaceBody, range: [t.members.pos - 1, t.end], body: t.members.map((I) => this.convertChild(I)) }), declare: Xe(T.DeclareKeyword, t), extends: g, id: this.convertChild(t.name), typeParameters: t.typeParameters && this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) });
        return this.fixExports(t, x);
      }
      case T.TypePredicate: {
        let y = this.createNode(t, { type: C.TSTypePredicate, asserts: t.assertsModifier != null, parameterName: this.convertChild(t.parameterName), typeAnnotation: null });
        return t.type && (y.typeAnnotation = this.convertTypeAnnotation(t.type, t), y.typeAnnotation.loc = y.typeAnnotation.typeAnnotation.loc, y.typeAnnotation.range = y.typeAnnotation.typeAnnotation.range), y;
      }
      case T.ImportType: {
        let y = $a(t, this.ast);
        if (t.isTypeOf) {
          let x = ra(t.getFirstToken(), t, this.ast);
          y[0] = x.getStart(this.ast);
        }
        let g = this.createNode(t, { type: C.TSImportType, range: y, argument: this.convertChild(t.argument), attributes: this.convertImportAttributes(t.attributes), qualifier: this.convertChild(t.qualifier), typeArguments: t.typeArguments ? this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t) : null });
        return t.isTypeOf ? this.createNode(t, { type: C.TSTypeQuery, exprName: g, typeArguments: void 0 }) : g;
      }
      case T.EnumDeclaration: {
        let y = t.members.map((x) => this.convertChild(x)), g = this.createNode(t, ge(this, me, id).call(this, { type: C.TSEnumDeclaration, body: this.createNode(t, { type: C.TSEnumBody, range: [t.members.pos - 1, t.end], members: y }), const: Xe(T.ConstKeyword, t), declare: Xe(T.DeclareKeyword, t), id: this.convertChild(t.name) }, "members", "'body.members'", t.members.map((x) => this.convertChild(x))));
        return this.fixExports(t, g);
      }
      case T.EnumMember:
        return this.createNode(t, { type: C.TSEnumMember, computed: t.name.kind === Ie.ComputedPropertyName, id: this.convertChild(t.name), initializer: t.initializer && this.convertChild(t.initializer) });
      case T.ModuleDeclaration: {
        let y = Xe(T.DeclareKeyword, t), g = this.createNode(t, { type: C.TSModuleDeclaration, ...(() => {
          if (t.flags & on.GlobalAugmentation) {
            let I = this.convertChild(t.name), re = this.convertChild(t.body);
            return (re == null || re.type === C.TSModuleDeclaration) && ge(this, me, Vt).call(this, t.body ?? t, "Expected a valid module body"), I.type !== C.Identifier && ge(this, me, Vt).call(this, t.name, "global module augmentation must have an Identifier id"), { body: re, declare: false, global: false, id: I, kind: "global" };
          }
          if (!(t.flags & on.Namespace)) {
            let I = this.convertChild(t.body);
            return { kind: "module", ...I != null ? { body: I } : {}, declare: false, global: false, id: this.convertChild(t.name) };
          }
          t.body == null && ge(this, me, Vt).call(this, t, "Expected a module body"), t.name.kind !== Ie.Identifier && ge(this, me, Vt).call(this, t.name, "`namespace`s must have an Identifier id");
          let x = this.createNode(t.name, { type: C.Identifier, range: [t.name.getStart(this.ast), t.name.getEnd()], decorators: [], name: t.name.text, optional: false, typeAnnotation: void 0 });
          for (; t.body && Ti(t.body) && t.body.name; ) {
            t = t.body, y || (y = Xe(T.DeclareKeyword, t));
            let I = t.name, re = this.createNode(I, { type: C.Identifier, range: [I.getStart(this.ast), I.getEnd()], decorators: [], name: I.text, optional: false, typeAnnotation: void 0 });
            x = this.createNode(I, { type: C.TSQualifiedName, range: [x.range[0], re.range[1]], left: x, right: re });
          }
          return { body: this.convertChild(t.body), declare: false, global: false, id: x, kind: "namespace" };
        })() });
        return g.declare = y, t.flags & on.GlobalAugmentation && (g.global = true), this.fixExports(t, g);
      }
      case T.ParenthesizedType:
        return this.convertChild(t.type);
      case T.UnionType:
        return this.createNode(t, { type: C.TSUnionType, types: t.types.map((y) => this.convertChild(y)) });
      case T.IntersectionType:
        return this.createNode(t, { type: C.TSIntersectionType, types: t.types.map((y) => this.convertChild(y)) });
      case T.AsExpression:
        return this.createNode(t, { type: C.TSAsExpression, expression: this.convertChild(t.expression), typeAnnotation: this.convertChild(t.type) });
      case T.InferType:
        return this.createNode(t, { type: C.TSInferType, typeParameter: this.convertChild(t.typeParameter) });
      case T.LiteralType:
        return t.literal.kind === T.NullKeyword ? this.createNode(t.literal, { type: C.TSNullKeyword }) : this.createNode(t, { type: C.TSLiteralType, literal: this.convertChild(t.literal) });
      case T.TypeAssertionExpression:
        return this.createNode(t, { type: C.TSTypeAssertion, expression: this.convertChild(t.expression), typeAnnotation: this.convertChild(t.type) });
      case T.ImportEqualsDeclaration:
        return this.fixExports(t, this.createNode(t, { type: C.TSImportEqualsDeclaration, id: this.convertChild(t.name), importKind: t.isTypeOnly ? "type" : "value", moduleReference: this.convertChild(t.moduleReference) }));
      case T.ExternalModuleReference:
        return t.expression.kind !== T.StringLiteral && ge(this, me, Be).call(this, t.expression, "String literal expected."), this.createNode(t, { type: C.TSExternalModuleReference, expression: this.convertChild(t.expression) });
      case T.NamespaceExportDeclaration:
        return this.createNode(t, { type: C.TSNamespaceExportDeclaration, id: this.convertChild(t.name) });
      case T.AbstractKeyword:
        return this.createNode(t, { type: C.TSAbstractKeyword });
      case T.TupleType: {
        let y = t.elements.map((g) => this.convertChild(g));
        return this.createNode(t, { type: C.TSTupleType, elementTypes: y });
      }
      case T.NamedTupleMember: {
        let y = this.createNode(t, { type: C.TSNamedTupleMember, elementType: this.convertChild(t.type, t), label: this.convertChild(t.name, t), optional: t.questionToken != null });
        return t.dotDotDotToken ? (y.range[0] = y.label.range[0], y.loc.start = y.label.loc.start, this.createNode(t, { type: C.TSRestType, typeAnnotation: y })) : y;
      }
      case T.OptionalType:
        return this.createNode(t, { type: C.TSOptionalType, typeAnnotation: this.convertChild(t.type) });
      case T.RestType:
        return this.createNode(t, { type: C.TSRestType, typeAnnotation: this.convertChild(t.type) });
      case T.TemplateLiteralType: {
        let y = this.createNode(t, { type: C.TSTemplateLiteralType, quasis: [this.convertChild(t.head)], types: [] });
        return t.templateSpans.forEach((g) => {
          y.types.push(this.convertChild(g.type)), y.quasis.push(this.convertChild(g.literal));
        }), y;
      }
      case T.ClassStaticBlockDeclaration:
        return this.createNode(t, { type: C.StaticBlock, body: this.convertBodyExpressions(t.body.statements, t) });
      case T.AssertEntry:
      case T.ImportAttribute:
        return this.createNode(t, { type: C.ImportAttribute, key: this.convertChild(t.name), value: this.convertChild(t.value) });
      case T.SatisfiesExpression:
        return this.createNode(t, { type: C.TSSatisfiesExpression, expression: this.convertChild(t.expression), typeAnnotation: this.convertChild(t.type) });
      default:
        return this.deeplyCopy(t);
    }
  }
  createNode(t, a) {
    let o = a;
    return o.range ?? (o.range = $a(t, this.ast)), o.loc ?? (o.loc = Qr(o.range, this.ast)), o && this.options.shouldPreserveNodeMaps && this.esTreeNodeToTSNodeMap.set(o, t), o;
  }
  convertProgram() {
    return this.converter(this.ast);
  }
  deeplyCopy(t) {
    t.kind === Ie.JSDocFunctionType && ge(this, me, Be).call(this, t, "JSDoc types can only be used inside documentation comments.");
    let a = `TS${T[t.kind]}`;
    if (this.options.errorOnUnknownASTType && !C[a]) throw new Error(`Unknown AST_NODE_TYPE: "${a}"`);
    let o = this.createNode(t, { type: a });
    "type" in t && (o.typeAnnotation = t.type && "kind" in t.type && o1(t.type) ? this.convertTypeAnnotation(t.type, t) : null), "typeArguments" in t && (o.typeArguments = t.typeArguments && "pos" in t.typeArguments ? this.convertTypeArgumentsToTypeParameterInstantiation(t.typeArguments, t) : null), "typeParameters" in t && (o.typeParameters = t.typeParameters && "pos" in t.typeParameters ? this.convertTSTypeParametersToTypeParametersDeclaration(t.typeParameters) : null);
    let m = na(t);
    m != null && m.length && (o.decorators = m.map((A) => this.convertChild(A)));
    let v = /* @__PURE__ */ new Set(["_children", "decorators", "end", "flags", "heritageClauses", "illegalDecorators", "jsDoc", "kind", "locals", "localSymbol", "modifierFlagsCache", "modifiers", "nextContainer", "parent", "pos", "symbol", "transformFlags", "type", "typeArguments", "typeParameters"]);
    return Object.entries(t).filter(([A]) => !v.has(A)).forEach(([A, P]) => {
      Array.isArray(P) ? o[A] = P.map((l) => this.convertChild(l)) : P && typeof P == "object" && P.kind ? o[A] = this.convertChild(P) : o[A] = P;
    }), o;
  }
  fixExports(t, a) {
    let m = Ti(t) && !!(t.flags & on.Namespace) ? Fh(t) : er(t);
    if ((m == null ? void 0 : m[0].kind) === T.ExportKeyword) {
      this.registerTSNodeInNodeMap(t, a);
      let v = m[0], A = m[1], P = (A == null ? void 0 : A.kind) === T.DefaultKeyword, l = P ? ra(A, this.ast, this.ast) : ra(v, this.ast, this.ast);
      if (a.range[0] = l.getStart(this.ast), a.loc = Qr(a.range, this.ast), P) return this.createNode(t, { type: C.ExportDefaultDeclaration, range: [v.getStart(this.ast), a.range[1]], declaration: a, exportKind: "value" });
      let Q = a.type === C.TSInterfaceDeclaration || a.type === C.TSTypeAliasDeclaration, h = "declare" in a && a.declare;
      return this.createNode(t, ge(this, me, Qa).call(this, { type: C.ExportNamedDeclaration, range: [v.getStart(this.ast), a.range[1]], attributes: [], declaration: a, exportKind: Q || h ? "type" : "value", source: null, specifiers: [] }, "assertions", "attributes", true));
    }
    return a;
  }
  getASTMaps() {
    return { esTreeNodeToTSNodeMap: this.esTreeNodeToTSNodeMap, tsNodeToESTreeNodeMap: this.tsNodeToESTreeNodeMap };
  }
  registerTSNodeInNodeMap(t, a) {
    a && this.options.shouldPreserveNodeMaps && !this.tsNodeToESTreeNodeMap.has(t) && this.tsNodeToESTreeNodeMap.set(t, a);
  }
};
me = /* @__PURE__ */ new WeakSet(), rd = function(t, a) {
  let o = a === Ie.ForInStatement ? "for...in" : "for...of";
  if (K1(t)) {
    t.declarations.length !== 1 && ge(this, me, Be).call(this, t, `Only a single variable declaration is allowed in a '${o}' statement.`);
    let m = t.declarations[0];
    m.initializer ? ge(this, me, Be).call(this, m, `The variable declaration of a '${o}' statement cannot have an initializer.`) : m.type && ge(this, me, Be).call(this, m, `The variable declaration of a '${o}' statement cannot have a type annotation.`), a === Ie.ForInStatement && t.flags & on.Using && ge(this, me, Be).call(this, t, "The left-hand side of a 'for...in' statement cannot be a 'using' declaration.");
  } else !Jl(t) && t.kind !== Ie.ObjectLiteralExpression && t.kind !== Ie.ArrayLiteralExpression && ge(this, me, Be).call(this, t, `The left-hand side of a '${o}' statement must be a variable or a property access.`);
}, Vh = function(t) {
  if (!this.options.allowInvalidAST) {
    Rh(t) && ge(this, me, Be).call(this, t.illegalDecorators[0], "Decorators are not valid here.");
    for (let a of na(t, true) ?? []) zh(t) || (ms(t) && !td(t.body) ? ge(this, me, Be).call(this, a, "A decorator can only decorate a method implementation, not an overload.") : ge(this, me, Be).call(this, a, "Decorators are not valid here."));
    for (let a of er(t, true) ?? []) {
      if (a.kind !== T.ReadonlyKeyword && ((t.kind === T.PropertySignature || t.kind === T.MethodSignature) && ge(this, me, Be).call(this, a, `'${it(a.kind)}' modifier cannot appear on a type member`), t.kind === T.IndexSignature && (a.kind !== T.StaticKeyword || !vi(t.parent)) && ge(this, me, Be).call(this, a, `'${it(a.kind)}' modifier cannot appear on an index signature`)), a.kind !== T.InKeyword && a.kind !== T.OutKeyword && a.kind !== T.ConstKeyword && t.kind === T.TypeParameter && ge(this, me, Be).call(this, a, `'${it(a.kind)}' modifier cannot appear on a type parameter`), (a.kind === T.InKeyword || a.kind === T.OutKeyword) && (t.kind !== T.TypeParameter || !(vs(t.parent) || vi(t.parent) || Dl(t.parent))) && ge(this, me, Be).call(this, a, `'${it(a.kind)}' modifier can only appear on a type parameter of a class, interface or type alias`), a.kind === T.ReadonlyKeyword && t.kind !== T.PropertyDeclaration && t.kind !== T.PropertySignature && t.kind !== T.IndexSignature && t.kind !== T.Parameter && ge(this, me, Be).call(this, a, "'readonly' modifier can only appear on a property declaration or index signature."), a.kind === T.DeclareKeyword && vi(t.parent) && !Va(t) && ge(this, me, Be).call(this, a, `'${it(a.kind)}' modifier cannot appear on class elements of this kind.`), a.kind === T.DeclareKeyword && Ha(t)) {
        let o = Ml(t.declarationList);
        (o === "using" || o === "await using") && ge(this, me, Be).call(this, a, `'declare' modifier cannot appear on a '${o}' declaration.`);
      }
      if (a.kind === T.AbstractKeyword && t.kind !== T.ClassDeclaration && t.kind !== T.ConstructorType && t.kind !== T.MethodDeclaration && t.kind !== T.PropertyDeclaration && t.kind !== T.GetAccessor && t.kind !== T.SetAccessor && ge(this, me, Be).call(this, a, `'${it(a.kind)}' modifier can only appear on a class, method, or property declaration.`), (a.kind === T.StaticKeyword || a.kind === T.PublicKeyword || a.kind === T.ProtectedKeyword || a.kind === T.PrivateKeyword) && (t.parent.kind === T.ModuleBlock || t.parent.kind === T.SourceFile) && ge(this, me, Be).call(this, a, `'${it(a.kind)}' modifier cannot appear on a module or namespace element.`), a.kind === T.AccessorKeyword && t.kind !== T.PropertyDeclaration && ge(this, me, Be).call(this, a, "'accessor' modifier can only appear on a property declaration."), a.kind === T.AsyncKeyword && t.kind !== T.MethodDeclaration && t.kind !== T.FunctionDeclaration && t.kind !== T.FunctionExpression && t.kind !== T.ArrowFunction && ge(this, me, Be).call(this, a, "'async' modifier cannot be used here."), t.kind === T.Parameter && (a.kind === T.StaticKeyword || a.kind === T.ExportKeyword || a.kind === T.DeclareKeyword || a.kind === T.AsyncKeyword) && ge(this, me, Be).call(this, a, `'${it(a.kind)}' modifier cannot appear on a parameter.`), a.kind === T.PublicKeyword || a.kind === T.ProtectedKeyword || a.kind === T.PrivateKeyword) for (let o of er(t) ?? []) o !== a && (o.kind === T.PublicKeyword || o.kind === T.ProtectedKeyword || o.kind === T.PrivateKeyword) && ge(this, me, Be).call(this, o, "Accessibility modifier already seen.");
      if (t.kind === T.Parameter && (a.kind === T.PublicKeyword || a.kind === T.PrivateKeyword || a.kind === T.ProtectedKeyword || a.kind === T.ReadonlyKeyword || a.kind === T.OverrideKeyword)) {
        let o = qh(t);
        o.kind === T.Constructor && td(o.body) || ge(this, me, Be).call(this, a, "A parameter property is only allowed in a constructor implementation.");
      }
    }
  }
}, Be = function(t, a) {
  let o, m;
  throw typeof t == "number" ? o = m = t : (o = t.getStart(this.ast), m = t.getEnd()), ed(a, this.ast, o, m);
}, Vt = function(t, a) {
  this.options.allowInvalidAST || ge(this, me, Be).call(this, t, a);
}, Qa = function(t, a, o, m = false) {
  let v = m;
  return Object.defineProperty(t, a, { configurable: true, get: this.options.suppressDeprecatedPropertyWarnings ? () => t[o] : () => (v || ((void 0)(`The '${a}' property is deprecated on ${t.type} nodes. Use '${o}' instead. See https://typescript-eslint.io/troubleshooting/faqs/general#the-key-property-is-deprecated-on-type-nodes-use-key-instead-warnings.`, "DeprecationWarning"), v = true), t[o]), set(A) {
    Object.defineProperty(t, a, { enumerable: true, value: A, writable: true });
  } }), t;
}, id = function(t, a, o, m) {
  let v = false;
  return Object.defineProperty(t, a, { configurable: true, get: this.options.suppressDeprecatedPropertyWarnings ? () => m : () => (v || ((void 0)(`The '${a}' property is deprecated on ${t.type} nodes. Use ${o} instead. See https://typescript-eslint.io/troubleshooting/faqs/general#the-key-property-is-deprecated-on-type-nodes-use-key-instead-warnings.`, "DeprecationWarning"), v = true), m), set(A) {
    Object.defineProperty(t, a, { enumerable: true, value: A, writable: true });
  } }), t;
};
function wv(e, t, a = e.getSourceFile()) {
  let o = [];
  for (; ; ) {
    if (df(e.kind)) t(e);
    else {
      let m = e.getChildren(a);
      if (m.length === 1) {
        e = m[0];
        continue;
      }
      for (let v = m.length - 1; v >= 0; --v) o.push(m[v]);
    }
    if (o.length === 0) break;
    e = o.pop();
  }
}
function Gh(e, t, a = e.getSourceFile()) {
  let o = a.text, m = a.languageVariant !== Tl.JSX;
  return wv(e, (A) => {
    if (A.pos !== A.end && (A.kind !== Ie.JsxText && Hm(o, A.pos === 0 ? (_f(o) ?? "").length : A.pos, v), m || kv(A))) return $m(o, A.end, v);
  }, a);
  function v(A, P, l) {
    t(o, { end: P, kind: l, pos: A });
  }
}
function kv(e) {
  switch (e.kind) {
    case Ie.CloseBraceToken:
      return e.parent.kind !== Ie.JsxExpression || !_d(e.parent.parent);
    case Ie.GreaterThanToken:
      switch (e.parent.kind) {
        case Ie.JsxClosingElement:
        case Ie.JsxClosingFragment:
          return !_d(e.parent.parent.parent);
        case Ie.JsxOpeningElement:
          return e.end !== e.parent.end;
        case Ie.JsxOpeningFragment:
          return false;
        case Ie.JsxSelfClosingElement:
          return e.end !== e.parent.end || !_d(e.parent.parent);
      }
  }
  return true;
}
function _d(e) {
  return e.kind === Ie.JsxElement || e.kind === Ie.JsxFragment;
}
var [YT, XT] = wm.split(".").map((e) => Number.parseInt(e, 10));
nn.Intrinsic ?? nn.Any | nn.Unknown | nn.String | nn.Number | nn.BigInt | nn.Boolean | nn.BooleanLiteral | nn.ESSymbol | nn.Void | nn.Undefined | nn.Null | nn.Never | nn.NonPrimitive;
function Yh(e, t) {
  let a = [];
  return Gh(e, (o, m) => {
    let v = m.kind === Ie.SingleLineCommentTrivia ? Rt.Line : Rt.Block, A = [m.pos, m.end], P = Qr(A, e), l = A[0] + 2, Q = m.kind === Ie.SingleLineCommentTrivia ? A[1] - l : A[1] - l - 2;
    a.push({ type: v, loc: P, range: A, value: t.slice(l, l + Q) });
  }, e), a;
}
var Xh = () => {
};
function Hh(e, t, a) {
  let { parseDiagnostics: o } = e;
  if (o.length) throw ad(o[0]);
  let m = new Ll(e, { allowInvalidAST: t.allowInvalidAST, errorOnUnknownASTType: t.errorOnUnknownASTType, shouldPreserveNodeMaps: a, suppressDeprecatedPropertyWarnings: t.suppressDeprecatedPropertyWarnings }), v = m.convertProgram();
  return (!t.range || !t.loc) && Xh(), t.tokens && (v.tokens = jh(e)), t.comment && (v.comments = Yh(e, t.codeFullText)), { astMaps: m.getASTMaps(), estree: v };
}
function jl(e) {
  if (typeof e != "object" || e == null) return false;
  let t = e;
  return t.kind === Ie.SourceFile && typeof t.getFullText == "function";
}
var Iv = function(e) {
  return e && e.__esModule ? e : { default: e };
};
var Ov = Iv({ extname: (e) => "." + e.split(".").pop() });
function Qh(e, t) {
  switch (Ov.default.extname(e).toLowerCase()) {
    case Nn.Cjs:
    case Nn.Js:
    case Nn.Mjs:
      return Dr.JS;
    case Nn.Cts:
    case Nn.Mts:
    case Nn.Ts:
      return Dr.TS;
    case Nn.Json:
      return Dr.JSON;
    case Nn.Jsx:
      return Dr.JSX;
    case Nn.Tsx:
      return Dr.TSX;
    default:
      return t ? Dr.TSX : Dr.TS;
  }
}
var Jv = { default: Ia }, Lv = (0, Jv.default)("typescript-eslint:typescript-estree:create-program:createSourceFile");
function Kh(e) {
  return Lv("Getting AST without type information in %s mode for: %s", e.jsx ? "TSX" : "TS", e.filePath), jl(e.code) ? e.code : dh(e.filePath, e.codeFullText, { jsDocParsingMode: e.jsDocParsingMode, languageVersion: ys.Latest, setExternalModuleIndicator: e.setExternalModuleIndicator }, true, Qh(e.filePath, e.jsx));
}
var Zh = () => {
};
var e0 = (e) => e;
var t0 = class {
};
var r0 = () => false;
var Xv = function(e) {
  return e && e.__esModule ? e : { default: e };
};
var sd = { default: Ia }, Hv = Xv({ extname: (e) => "." + e.split(".").pop() }), $v = (0, sd.default)("typescript-eslint:typescript-estree:parseSettings:createParseSettings"), Qv, Kv = null, a0, _0, s0, o0, xs = { ParseAll: (a0 = Ga) == null ? void 0 : a0.ParseAll, ParseForTypeErrors: (_0 = Ga) == null ? void 0 : _0.ParseForTypeErrors, ParseForTypeInfo: (s0 = Ga) == null ? void 0 : s0.ParseForTypeInfo, ParseNone: (o0 = Ga) == null ? void 0 : o0.ParseNone };
function c0(e, t = {}) {
  var h;
  let a = Zv(e), o = r0(), m = typeof t.tsconfigRootDir == "string" ? t.tsconfigRootDir : "/prettier-security-dirname-placeholder";
  typeof t.loggerFn == "function";
  let A = e0(typeof t.filePath == "string" && t.filePath !== "<input>" ? t.filePath : e4(t.jsx)), P = Hv.default.extname(A).toLowerCase(), l = (() => {
    switch (t.jsDocParsingMode) {
      case "all":
        return xs.ParseAll;
      case "none":
        return xs.ParseNone;
      case "type-info":
        return xs.ParseForTypeInfo;
      default:
        return xs.ParseAll;
    }
  })(), Q = { loc: t.loc === true, range: t.range === true, allowInvalidAST: t.allowInvalidAST === true, code: e, codeFullText: a, comment: t.comment === true, comments: [], debugLevel: t.debugLevel === true ? /* @__PURE__ */ new Set(["typescript-eslint"]) : Array.isArray(t.debugLevel) ? new Set(t.debugLevel) : /* @__PURE__ */ new Set(), errorOnTypeScriptSyntacticAndSemanticIssues: false, errorOnUnknownASTType: t.errorOnUnknownASTType === true, extraFileExtensions: Array.isArray(t.extraFileExtensions) && t.extraFileExtensions.every((y) => typeof y == "string") ? t.extraFileExtensions : [], filePath: A, jsDocParsingMode: l, jsx: t.jsx === true, log: typeof t.loggerFn == "function" ? t.loggerFn : t.loggerFn === false ? () => {
  } : console.log, preserveNodeMaps: t.preserveNodeMaps !== false, programs: Array.isArray(t.programs) ? t.programs : null, projects: /* @__PURE__ */ new Map(), projectService: t.projectService || t.project && t.projectService !== false && (void 0).env.TYPESCRIPT_ESLINT_PROJECT_SERVICE === "true" ? Kv ?? (Kv = Zh(t.projectService)) : void 0, setExternalModuleIndicator: t.sourceType === "module" || t.sourceType == null && P === Nn.Mjs || t.sourceType == null && P === Nn.Mts ? (y) => {
    y.externalModuleIndicator = true;
  } : void 0, singleRun: o, suppressDeprecatedPropertyWarnings: t.suppressDeprecatedPropertyWarnings ?? true, tokens: t.tokens === true ? [] : null, tsconfigMatchCache: Qv ?? (Qv = new t0(((h = t.cacheLifetime) == null ? void 0 : h.glob) ?? void 0)), tsconfigRootDir: m };
  if (Q.debugLevel.size > 0) {
    let y = [];
    Q.debugLevel.has("typescript-eslint") && y.push("typescript-eslint:*"), (Q.debugLevel.has("eslint") || sd.default.enabled("eslint:*,-eslint:code-path")) && y.push("eslint:*,-eslint:code-path"), sd.default.enable(y.join(","));
  }
  if (Array.isArray(t.programs)) {
    if (!t.programs.length) throw new Error("You have set parserOptions.programs to an empty array. This will cause all files to not be found in existing programs. Either provide one or more existing TypeScript Program instances in the array, or remove the parserOptions.programs setting.");
    $v("parserOptions.programs was provided, so parserOptions.project will be ignored.");
  }
  return !Q.programs && !Q.projectService && (Q.projects = /* @__PURE__ */ new Map()), t.jsDocParsingMode == null && Q.projects.size === 0 && Q.programs == null && Q.projectService == null && (Q.jsDocParsingMode = xs.ParseNone), Q;
}
function Zv(e) {
  return jl(e) ? e.getFullText(e) : typeof e == "string" ? e : String(e);
}
function e4(e) {
  return e ? "estree.tsx" : "estree.ts";
}
function l0(e, t) {
  let { ast: a } = a4(e, t, false);
  return a;
}
function a4(e, t, a) {
  let o = c0(e, t);
  if (t != null && t.errorOnTypeScriptSyntacticAndSemanticIssues) throw new Error('"errorOnTypeScriptSyntacticAndSemanticIssues" is only supported for parseAndGenerateServices()');
  let m = Kh(o), { astMaps: v, estree: A } = Hh(m, o, a);
  return { ast: A, esTreeNodeToTSNodeMap: v.esTreeNodeToTSNodeMap, tsNodeToESTreeNodeMap: v.tsNodeToESTreeNodeMap };
}
function _4(e, t) {
  let a = new SyntaxError(e + " (" + t.loc.start.line + ":" + t.loc.start.column + ")");
  return Object.assign(a, t);
}
var u0 = _4;
function s4(e) {
  let t = [];
  for (let a of e) try {
    return a();
  } catch (o) {
    t.push(o);
  }
  throw Object.assign(new Error("All combinations failed"), { errors: t });
}
var p0 = s4;
var o4 = (e, t, a) => {
  if (!(e && t == null)) return Array.isArray(t) || typeof t == "string" ? t[a < 0 ? t.length + a : a] : t.at(a);
}, od = o4;
function c4(e) {
  return Array.isArray(e) && e.length > 0;
}
var f0 = c4;
function tr(e) {
  var o, m, v;
  let t = ((o = e.range) == null ? void 0 : o[0]) ?? e.start, a = (v = ((m = e.declaration) == null ? void 0 : m.decorators) ?? e.decorators) == null ? void 0 : v[0];
  return a ? Math.min(tr(a), t) : t;
}
function Kr(e) {
  var t;
  return ((t = e.range) == null ? void 0 : t[1]) ?? e.end;
}
function l4(e) {
  let t = new Set(e);
  return (a) => t.has(a == null ? void 0 : a.type);
}
var d0 = l4;
var u4 = d0(["Block", "CommentBlock", "MultiLine"]), Ss = u4;
function p4(e) {
  let t = `*${e.value}*`.split(`
`);
  return t.length > 1 && t.every((a) => a.trimStart()[0] === "*");
}
var cd = p4;
function f4(e) {
  return Ss(e) && e.value[0] === "*" && /@(?:type|satisfies)\b/u.test(e.value);
}
var m0 = f4;
var ws = null;
function ks(e) {
  if (ws !== null && typeof ws.property) {
    let t = ws;
    return ws = ks.prototype = null, t;
  }
  return ws = ks.prototype = e ?? /* @__PURE__ */ Object.create(null), new ks();
}
var d4 = 10;
for (let e = 0; e <= d4; e++) ks();
function ld(e) {
  return ks(e);
}
function m4(e, t = "type") {
  ld(e);
  function a(o) {
    let m = o[t], v = e[m];
    if (!Array.isArray(v)) throw Object.assign(new Error(`Missing visitor keys for '${m}'.`), { node: o });
    return v;
  }
  return a;
}
var h0 = m4;
var y0 = { ArrayExpression: ["elements"], AssignmentExpression: ["left", "right"], BinaryExpression: ["left", "right"], InterpreterDirective: [], Directive: ["value"], DirectiveLiteral: [], BlockStatement: ["directives", "body"], BreakStatement: ["label"], CallExpression: ["callee", "arguments", "typeParameters", "typeArguments"], CatchClause: ["param", "body"], ConditionalExpression: ["test", "consequent", "alternate"], ContinueStatement: ["label"], DebuggerStatement: [], DoWhileStatement: ["body", "test"], EmptyStatement: [], ExpressionStatement: ["expression"], File: ["program"], ForInStatement: ["left", "right", "body"], ForStatement: ["init", "test", "update", "body"], FunctionDeclaration: ["id", "typeParameters", "params", "predicate", "returnType", "body"], FunctionExpression: ["id", "typeParameters", "params", "returnType", "body"], Identifier: ["typeAnnotation", "decorators"], IfStatement: ["test", "consequent", "alternate"], LabeledStatement: ["label", "body"], StringLiteral: [], NumericLiteral: [], NullLiteral: [], BooleanLiteral: [], RegExpLiteral: [], LogicalExpression: ["left", "right"], MemberExpression: ["object", "property"], NewExpression: ["callee", "arguments", "typeParameters", "typeArguments"], Program: ["directives", "body"], ObjectExpression: ["properties"], ObjectMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], ObjectProperty: ["key", "value", "decorators"], RestElement: ["argument", "typeAnnotation", "decorators"], ReturnStatement: ["argument"], SequenceExpression: ["expressions"], ParenthesizedExpression: ["expression"], SwitchCase: ["test", "consequent"], SwitchStatement: ["discriminant", "cases"], ThisExpression: [], ThrowStatement: ["argument"], TryStatement: ["block", "handler", "finalizer"], UnaryExpression: ["argument"], UpdateExpression: ["argument"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id", "init"], WhileStatement: ["test", "body"], WithStatement: ["object", "body"], AssignmentPattern: ["left", "right", "decorators", "typeAnnotation"], ArrayPattern: ["elements", "typeAnnotation", "decorators"], ArrowFunctionExpression: ["typeParameters", "params", "predicate", "returnType", "body"], ClassBody: ["body"], ClassExpression: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body", "superTypeArguments"], ClassDeclaration: ["decorators", "id", "typeParameters", "superClass", "superTypeParameters", "mixins", "implements", "body", "superTypeArguments"], ExportAllDeclaration: ["source", "attributes", "exported"], ExportDefaultDeclaration: ["declaration"], ExportNamedDeclaration: ["declaration", "specifiers", "source", "attributes"], ExportSpecifier: ["local", "exported"], ForOfStatement: ["left", "right", "body"], ImportDeclaration: ["specifiers", "source", "attributes"], ImportDefaultSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportSpecifier: ["imported", "local"], ImportExpression: ["source", "options"], MetaProperty: ["meta", "property"], ClassMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], ObjectPattern: ["properties", "typeAnnotation", "decorators"], SpreadElement: ["argument"], Super: [], TaggedTemplateExpression: ["tag", "typeParameters", "quasi", "typeArguments"], TemplateElement: [], TemplateLiteral: ["quasis", "expressions"], YieldExpression: ["argument"], AwaitExpression: ["argument"], BigIntLiteral: [], ExportNamespaceSpecifier: ["exported"], OptionalMemberExpression: ["object", "property"], OptionalCallExpression: ["callee", "arguments", "typeParameters", "typeArguments"], ClassProperty: ["decorators", "variance", "key", "typeAnnotation", "value"], ClassAccessorProperty: ["decorators", "key", "typeAnnotation", "value"], ClassPrivateProperty: ["decorators", "variance", "key", "typeAnnotation", "value"], ClassPrivateMethod: ["decorators", "key", "typeParameters", "params", "returnType", "body"], PrivateName: ["id"], StaticBlock: ["body"], AnyTypeAnnotation: [], ArrayTypeAnnotation: ["elementType"], BooleanTypeAnnotation: [], BooleanLiteralTypeAnnotation: [], NullLiteralTypeAnnotation: [], ClassImplements: ["id", "typeParameters"], DeclareClass: ["id", "typeParameters", "extends", "mixins", "implements", "body"], DeclareFunction: ["id", "predicate"], DeclareInterface: ["id", "typeParameters", "extends", "body"], DeclareModule: ["id", "body"], DeclareModuleExports: ["typeAnnotation"], DeclareTypeAlias: ["id", "typeParameters", "right"], DeclareOpaqueType: ["id", "typeParameters", "supertype"], DeclareVariable: ["id"], DeclareExportDeclaration: ["declaration", "specifiers", "source", "attributes"], DeclareExportAllDeclaration: ["source", "attributes"], DeclaredPredicate: ["value"], ExistsTypeAnnotation: [], FunctionTypeAnnotation: ["typeParameters", "this", "params", "rest", "returnType"], FunctionTypeParam: ["name", "typeAnnotation"], GenericTypeAnnotation: ["id", "typeParameters"], InferredPredicate: [], InterfaceExtends: ["id", "typeParameters"], InterfaceDeclaration: ["id", "typeParameters", "extends", "body"], InterfaceTypeAnnotation: ["extends", "body"], IntersectionTypeAnnotation: ["types"], MixedTypeAnnotation: [], EmptyTypeAnnotation: [], NullableTypeAnnotation: ["typeAnnotation"], NumberLiteralTypeAnnotation: [], NumberTypeAnnotation: [], ObjectTypeAnnotation: ["properties", "indexers", "callProperties", "internalSlots"], ObjectTypeInternalSlot: ["id", "value"], ObjectTypeCallProperty: ["value"], ObjectTypeIndexer: ["variance", "id", "key", "value"], ObjectTypeProperty: ["key", "value", "variance"], ObjectTypeSpreadProperty: ["argument"], OpaqueType: ["id", "typeParameters", "supertype", "impltype"], QualifiedTypeIdentifier: ["qualification", "id"], StringLiteralTypeAnnotation: [], StringTypeAnnotation: [], SymbolTypeAnnotation: [], ThisTypeAnnotation: [], TupleTypeAnnotation: ["types", "elementTypes"], TypeofTypeAnnotation: ["argument", "typeArguments"], TypeAlias: ["id", "typeParameters", "right"], TypeAnnotation: ["typeAnnotation"], TypeCastExpression: ["expression", "typeAnnotation"], TypeParameter: ["bound", "default", "variance"], TypeParameterDeclaration: ["params"], TypeParameterInstantiation: ["params"], UnionTypeAnnotation: ["types"], Variance: [], VoidTypeAnnotation: [], EnumDeclaration: ["id", "body"], EnumBooleanBody: ["members"], EnumNumberBody: ["members"], EnumStringBody: ["members"], EnumSymbolBody: ["members"], EnumBooleanMember: ["id", "init"], EnumNumberMember: ["id", "init"], EnumStringMember: ["id", "init"], EnumDefaultedMember: ["id"], IndexedAccessType: ["objectType", "indexType"], OptionalIndexedAccessType: ["objectType", "indexType"], JSXAttribute: ["name", "value"], JSXClosingElement: ["name"], JSXElement: ["openingElement", "children", "closingElement"], JSXEmptyExpression: [], JSXExpressionContainer: ["expression"], JSXSpreadChild: ["expression"], JSXIdentifier: [], JSXMemberExpression: ["object", "property"], JSXNamespacedName: ["namespace", "name"], JSXOpeningElement: ["name", "typeParameters", "typeArguments", "attributes"], JSXSpreadAttribute: ["argument"], JSXText: [], JSXFragment: ["openingFragment", "children", "closingFragment"], JSXOpeningFragment: [], JSXClosingFragment: [], Noop: [], Placeholder: [], V8IntrinsicIdentifier: [], ArgumentPlaceholder: [], BindExpression: ["object", "callee"], ImportAttribute: ["key", "value"], Decorator: ["expression"], DoExpression: ["body"], ExportDefaultSpecifier: ["exported"], RecordExpression: ["properties"], TupleExpression: ["elements"], ModuleExpression: ["body"], TopicReference: [], PipelineTopicExpression: ["expression"], PipelineBareFunction: ["callee"], PipelinePrimaryTopicReference: [], TSParameterProperty: ["parameter", "decorators"], TSDeclareFunction: ["id", "typeParameters", "params", "returnType", "body"], TSDeclareMethod: ["decorators", "key", "typeParameters", "params", "returnType"], TSQualifiedName: ["left", "right"], TSCallSignatureDeclaration: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSConstructSignatureDeclaration: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSPropertySignature: ["key", "typeAnnotation"], TSMethodSignature: ["key", "typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSIndexSignature: ["parameters", "typeAnnotation"], TSAnyKeyword: [], TSBooleanKeyword: [], TSBigIntKeyword: [], TSIntrinsicKeyword: [], TSNeverKeyword: [], TSNullKeyword: [], TSNumberKeyword: [], TSObjectKeyword: [], TSStringKeyword: [], TSSymbolKeyword: [], TSUndefinedKeyword: [], TSUnknownKeyword: [], TSVoidKeyword: [], TSThisType: [], TSFunctionType: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSConstructorType: ["typeParameters", "parameters", "typeAnnotation", "params", "returnType"], TSTypeReference: ["typeName", "typeParameters", "typeArguments"], TSTypePredicate: ["parameterName", "typeAnnotation"], TSTypeQuery: ["exprName", "typeParameters", "typeArguments"], TSTypeLiteral: ["members"], TSArrayType: ["elementType"], TSTupleType: ["elementTypes"], TSOptionalType: ["typeAnnotation"], TSRestType: ["typeAnnotation"], TSNamedTupleMember: ["label", "elementType"], TSUnionType: ["types"], TSIntersectionType: ["types"], TSConditionalType: ["checkType", "extendsType", "trueType", "falseType"], TSInferType: ["typeParameter"], TSParenthesizedType: ["typeAnnotation"], TSTypeOperator: ["typeAnnotation"], TSIndexedAccessType: ["objectType", "indexType"], TSMappedType: ["typeParameter", "nameType", "typeAnnotation"], TSTemplateLiteralType: ["quasis", "types"], TSLiteralType: ["literal"], TSExpressionWithTypeArguments: ["expression", "typeParameters"], TSInterfaceDeclaration: ["id", "typeParameters", "extends", "body"], TSInterfaceBody: ["body"], TSTypeAliasDeclaration: ["id", "typeParameters", "typeAnnotation"], TSInstantiationExpression: ["expression", "typeParameters", "typeArguments"], TSAsExpression: ["expression", "typeAnnotation"], TSSatisfiesExpression: ["expression", "typeAnnotation"], TSTypeAssertion: ["typeAnnotation", "expression"], TSEnumBody: ["members"], TSEnumDeclaration: ["id", "members"], TSEnumMember: ["id", "initializer"], TSModuleDeclaration: ["id", "body"], TSModuleBlock: ["body"], TSImportType: ["argument", "options", "qualifier", "typeParameters", "typeArguments"], TSImportEqualsDeclaration: ["id", "moduleReference"], TSExternalModuleReference: ["expression"], TSNonNullExpression: ["expression"], TSExportAssignment: ["expression"], TSNamespaceExportDeclaration: ["id"], TSTypeAnnotation: ["typeAnnotation"], TSTypeParameterInstantiation: ["params"], TSTypeParameterDeclaration: ["params"], TSTypeParameter: ["constraint", "default", "name"], ChainExpression: ["expression"], ExperimentalRestProperty: ["argument"], ExperimentalSpreadProperty: ["argument"], Literal: [], MethodDefinition: ["decorators", "key", "value"], PrivateIdentifier: [], Property: ["key", "value"], PropertyDefinition: ["decorators", "key", "typeAnnotation", "value", "variance"], AccessorProperty: ["decorators", "key", "typeAnnotation", "value"], TSAbstractAccessorProperty: ["decorators", "key", "typeAnnotation"], TSAbstractKeyword: [], TSAbstractMethodDefinition: ["key", "value"], TSAbstractPropertyDefinition: ["decorators", "key", "typeAnnotation"], TSAsyncKeyword: [], TSClassImplements: ["expression", "typeArguments", "typeParameters"], TSDeclareKeyword: [], TSEmptyBodyFunctionExpression: ["id", "typeParameters", "params", "returnType"], TSExportKeyword: [], TSInterfaceHeritage: ["expression", "typeArguments", "typeParameters"], TSPrivateKeyword: [], TSProtectedKeyword: [], TSPublicKeyword: [], TSReadonlyKeyword: [], TSStaticKeyword: [], AsConstExpression: ["expression"], AsExpression: ["expression", "typeAnnotation"], BigIntLiteralTypeAnnotation: [], BigIntTypeAnnotation: [], ComponentDeclaration: ["id", "params", "body", "typeParameters", "rendersType"], ComponentParameter: ["name", "local"], ComponentTypeAnnotation: ["params", "rest", "typeParameters", "rendersType"], ComponentTypeParameter: ["name", "typeAnnotation"], ConditionalTypeAnnotation: ["checkType", "extendsType", "trueType", "falseType"], DeclareComponent: ["id", "params", "rest", "typeParameters", "rendersType"], DeclareEnum: ["id", "body"], DeclareHook: ["id"], DeclareNamespace: ["id", "body"], EnumBigIntBody: ["members"], EnumBigIntMember: ["id", "init"], HookDeclaration: ["id", "params", "body", "typeParameters", "returnType"], HookTypeAnnotation: ["params", "returnType", "rest", "typeParameters"], InferTypeAnnotation: ["typeParameter"], KeyofTypeAnnotation: ["argument"], ObjectTypeMappedTypeProperty: ["keyTparam", "propType", "sourceType", "variance"], QualifiedTypeofIdentifier: ["qualification", "id"], TupleTypeLabeledElement: ["label", "elementType", "variance"], TupleTypeSpreadElement: ["label", "typeAnnotation"], TypeOperator: ["typeAnnotation"], TypePredicate: ["parameterName", "typeAnnotation", "asserts"], NGRoot: ["node"], NGPipeExpression: ["left", "right", "arguments"], NGChainedExpression: ["expressions"], NGEmptyExpression: [], NGMicrosyntax: ["body"], NGMicrosyntaxKey: [], NGMicrosyntaxExpression: ["expression", "alias"], NGMicrosyntaxKeyedExpression: ["key", "expression"], NGMicrosyntaxLet: ["key", "value"], NGMicrosyntaxAs: ["key", "alias"], JsExpressionRoot: ["node"], JsonRoot: ["node"], TSJSDocAllType: [], TSJSDocUnknownType: [], TSJSDocNullableType: ["typeAnnotation"], TSJSDocNonNullableType: ["typeAnnotation"], NeverTypeAnnotation: [], UndefinedTypeAnnotation: [], UnknownTypeAnnotation: [], SatisfiesExpression: ["expression", "typeAnnotation"] };
var h4 = h0(y0), g0 = h4;
function ud(e, t) {
  if (!(e !== null && typeof e == "object")) return e;
  if (Array.isArray(e)) {
    for (let o = 0; o < e.length; o++) e[o] = ud(e[o], t);
    return e;
  }
  let a = g0(e);
  for (let o = 0; o < a.length; o++) e[a[o]] = ud(e[a[o]], t);
  return t(e) || e;
}
var Rl = ud;
function y4(e, t) {
  let { parser: a, text: o } = t;
  if (e.type === "File" && e.program.interpreter) {
    let { program: { interpreter: m }, comments: v } = e;
    delete e.program.interpreter, v.unshift(m);
  }
  if (a === "babel") {
    let m = /* @__PURE__ */ new Set();
    e = Rl(e, (v) => {
      var A;
      (A = v.leadingComments) != null && A.some(m0) && m.add(tr(v));
    }), e = Rl(e, (v) => {
      if (v.type === "ParenthesizedExpression") {
        let { expression: A } = v;
        if (A.type === "TypeCastExpression") return A.range = [...v.range], A;
        let P = tr(v);
        if (!m.has(P)) return A.extra = { ...A.extra, parenthesized: true }, A;
      }
    });
  }
  if (e = Rl(e, (m) => {
    switch (m.type) {
      case "LogicalExpression":
        if (b0(m)) return pd(m);
        break;
      case "VariableDeclaration": {
        let v = od(false, m.declarations, -1);
        v != null && v.init && o[Kr(v)] !== ";" && (m.range = [tr(m), Kr(v)]);
        break;
      }
      case "TSParenthesizedType":
        return m.typeAnnotation;
      case "TSTypeParameter":
        if (typeof m.name == "string") {
          let v = tr(m);
          m.name = { type: "Identifier", name: m.name, range: [v, v + m.name.length] };
        }
        break;
      case "TopicReference":
        e.extra = { ...e.extra, __isUsingHackPipeline: true };
        break;
      case "TSUnionType":
      case "TSIntersectionType":
        if (m.types.length === 1) return m.types[0];
        break;
    }
  }), f0(e.comments)) {
    let m = od(false, e.comments, -1);
    for (let v = e.comments.length - 2; v >= 0; v--) {
      let A = e.comments[v];
      Kr(A) === tr(m) && Ss(A) && Ss(m) && cd(A) && cd(m) && (e.comments.splice(v + 1, 1), A.value += "*//*" + m.value, A.range = [tr(A), Kr(m)]), m = A;
    }
  }
  return e.type === "Program" && (e.range = [0, o.length]), e;
}
function b0(e) {
  return e.type === "LogicalExpression" && e.right.type === "LogicalExpression" && e.operator === e.right.operator;
}
function pd(e) {
  return b0(e) ? pd({ type: "LogicalExpression", operator: e.operator, left: pd({ type: "LogicalExpression", operator: e.operator, left: e.left, right: e.right.left, range: [tr(e.left), Kr(e.right.left)] }), right: e.right.right, range: [tr(e), Kr(e)] }) : e;
}
var v0 = y4;
var g4 = /\*\/$/, b4 = /^\/\*\*?/, v4 = /^\s*(\/\*\*?(.|\r?\n)*?\*\/)/, T4 = /(^|\s+)\/\/([^\n\r]*)/g, T0 = /^(\r?\n)+/, x4 = /(?:^|\r?\n) *(@[^\n\r]*?) *\r?\n *(?![^\n\r@]*\/\/[^]*)([^\s@][^\n\r@]+?) *\r?\n/g, x0 = /(?:^|\r?\n) *@(\S+) *([^\n\r]*)/g, S4 = /(\r?\n|^) *\* ?/g, w4 = [];
function S0(e) {
  let t = e.match(v4);
  return t ? t[0].trimStart() : "";
}
function w0(e) {
  let t = `
`;
  e = Sr(false, e.replace(b4, "").replace(g4, ""), S4, "$1");
  let a = "";
  for (; a !== e; ) a = e, e = Sr(false, e, x4, `${t}$1 $2${t}`);
  e = e.replace(T0, "").trimEnd();
  let o = /* @__PURE__ */ Object.create(null), m = Sr(false, e, x0, "").replace(T0, "").trimEnd(), v;
  for (; v = x0.exec(e); ) {
    let A = Sr(false, v[2], T4, "");
    if (typeof o[v[1]] == "string" || Array.isArray(o[v[1]])) {
      let P = o[v[1]];
      o[v[1]] = [...w4, ...Array.isArray(P) ? P : [P], A];
    } else o[v[1]] = A;
  }
  return { comments: m, pragmas: o };
}
function k4(e) {
  if (!e.startsWith("#!")) return "";
  let t = e.indexOf(`
`);
  return t === -1 ? e : e.slice(0, t);
}
var k0 = k4;
function E4(e) {
  let t = k0(e);
  t && (e = e.slice(t.length + 1));
  let a = S0(e), { pragmas: o, comments: m } = w0(a);
  return { shebang: t, text: e, pragmas: o, comments: m };
}
function E0(e) {
  let { pragmas: t } = E4(e);
  return Object.prototype.hasOwnProperty.call(t, "prettier") || Object.prototype.hasOwnProperty.call(t, "format");
}
function A4(e) {
  return e = typeof e == "function" ? { parse: e } : e, { astFormat: "estree", hasPragma: E0, locStart: tr, locEnd: Kr, ...e };
}
var A0 = A4;
function C4(e) {
  let { filepath: t } = e;
  if (t) {
    if (t = t.toLowerCase(), t.endsWith(".cjs") || t.endsWith(".cts")) return "script";
    if (t.endsWith(".mjs") || t.endsWith(".mts")) return "module";
  }
}
var C0 = C4;
function D4(e) {
  return e.charAt(0) === "#" && e.charAt(1) === "!" ? "//" + e.slice(2) : e;
}
var D0 = D4;
var P4 = { loc: true, range: true, comment: true, tokens: true, loggerFn: false, project: false, jsDocParsingMode: "none", suppressDeprecatedPropertyWarnings: true };
function N4(e) {
  if (!(e != null && e.location)) return e;
  let { message: t, location: { start: a, end: o } } = e;
  return u0(t, { loc: { start: { line: a.line, column: a.column + 1 }, end: { line: o.line, column: o.column + 1 } }, cause: e });
}
var I4 = (e) => /\.(?:js|mjs|cjs|jsx|ts|mts|cts|tsx)$/iu.test(e);
function O4(e, t) {
  let a = t == null ? void 0 : t.filepath, o = [{ ...P4, filePath: a }], m = C0(t);
  if (m ? o = o.map((A) => ({ ...A, sourceType: m })) : o = ["module", "script"].flatMap((P) => o.map((l) => ({ ...l, sourceType: P }))), a && I4(a)) return o;
  let v = J4(e);
  return [v, !v].flatMap((A) => o.map((P) => ({ ...P, jsx: A })));
}
function M4(e, t = {}) {
  let a = D0(e), o = O4(e, t), m;
  try {
    m = p0(o.map((v) => () => l0(a, v)));
  } catch ({ errors: [v] }) {
    throw N4(v);
  }
  return v0(m, { text: e });
}
function J4(e) {
  return new RegExp(["(?:^[^\"'`]*</)", "|", "(?:^[^/]{2}.*/>)"].join(""), "mu").test(e);
}
var L4 = A0(M4);
var uS = dd;
export {
  uS as default,
  fd as parsers
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
