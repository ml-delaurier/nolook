var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var Ws = Object.defineProperty;
var Or = (e5) => {
  throw TypeError(e5);
};
var Fe = (e5, t) => {
  for (var r in t) Ws(e5, r, { get: t[r], enumerable: true });
};
var Br = (e5, t, r) => t.has(e5) || Or("Cannot " + r);
var I = (e5, t, r) => (Br(e5, t, "read from private field"), t.get(e5)), Lt = (e5, t, r) => t.has(e5) ? Or("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e5) : t.set(e5, r), Y = (e5, t, r, s) => (Br(e5, t, "write to private field"), t.set(e5, r), r);
var Pr = {};
Fe(Pr, { languages: () => ps, parsers: () => xr, printers: () => wi });
var js = (e5, t, r, s) => {
  if (!(e5 && t == null)) return t.replaceAll ? t.replaceAll(r, s) : r.global ? t.replace(r, s) : t.split(r).join(s);
}, He = js;
var Dt = "string", Gt = "array", Kt = "cursor", _t = "indent", Ot = "align", Wt = "trim", Bt = "group", It = "fill", bt = "if-break", jt = "indent-if-break", Qt = "line-suffix", Jt = "line-suffix-boundary", j = "line", $t = "label", Rt = "break-parent", fe = /* @__PURE__ */ new Set([Kt, _t, Ot, Wt, Bt, It, bt, jt, Qt, Jt, j, $t, Rt]);
var Qs = (e5, t, r) => {
  if (!(e5 && t == null)) return Array.isArray(t) || typeof t == "string" ? t[r < 0 ? t.length + r : r] : t.at(r);
}, G = Qs;
function Js(e5) {
  if (typeof e5 == "string") return Dt;
  if (Array.isArray(e5)) return Gt;
  if (!e5) return;
  let { type: t } = e5;
  if (fe.has(t)) return t;
}
var qt = Js;
var $s = (e5) => new Intl.ListFormat("en-US", { type: "disjunction" }).format(e5);
function Xs(e5) {
  let t = e5 === null ? "null" : typeof e5;
  if (t !== "string" && t !== "object") return `Unexpected doc '${t}', 
Expected it to be 'string' or 'object'.`;
  if (qt(e5)) throw new Error("doc is valid.");
  let r = Object.prototype.toString.call(e5);
  if (r !== "[object Object]") return `Unexpected doc '${r}'.`;
  let s = $s([...fe].map((n) => `'${n}'`));
  return `Unexpected doc.type '${e5.type}'.
Expected it to be ${s}.`;
}
var Ue = class extends Error {
  constructor(t) {
    super(Xs(t));
    __publicField(this, "name", "InvalidDocError");
    this.doc = t;
  }
}, Me = Ue;
function tn(e5, t) {
  if (typeof e5 == "string") return t(e5);
  let r = /* @__PURE__ */ new Map();
  return s(e5);
  function s(i) {
    if (r.has(i)) return r.get(i);
    let a = n(i);
    return r.set(i, a), a;
  }
  function n(i) {
    switch (qt(i)) {
      case Gt:
        return t(i.map(s));
      case It:
        return t({ ...i, parts: i.parts.map(s) });
      case bt:
        return t({ ...i, breakContents: s(i.breakContents), flatContents: s(i.flatContents) });
      case Bt: {
        let { expandedStates: a, contents: o } = i;
        return a ? (a = a.map(s), o = a[0]) : o = s(o), t({ ...i, contents: o, expandedStates: a });
      }
      case Ot:
      case _t:
      case jt:
      case $t:
      case Qt:
        return t({ ...i, contents: s(i.contents) });
      case Dt:
      case Kt:
      case Wt:
      case Jt:
      case j:
      case Rt:
        return t(i);
      default:
        throw new Me(i);
    }
  }
}
function Ir(e5, t = Rr) {
  return tn(e5, (r) => typeof r == "string" ? yt(t, r.split(`
`)) : r);
}
var ze = () => {
}, Ye = ze;
function B(e5) {
  return { type: _t, contents: e5 };
}
function en(e5, t) {
  return { type: Ot, contents: t, n: e5 };
}
function R(e5, t = {}) {
  return Ye(t.expandedStates), { type: Bt, id: t.id, contents: e5, break: !!t.shouldBreak, expandedStates: t.expandedStates };
}
function Xt(e5) {
  return en(-1, e5);
}
function Ge(e5) {
  return { type: It, parts: e5 };
}
function Ke(e5, t = "", r = {}) {
  return { type: bt, breakContents: e5, flatContents: t, groupId: r.groupId };
}
var Vr = { type: Rt };
var rn = { type: j, hard: true }, sn = { type: j, hard: true, literal: true }, L = { type: j }, H = { type: j, soft: true }, tt = [rn, Vr], Rr = [sn, Vr];
function yt(e5, t) {
  let r = [];
  for (let s = 0; s < t.length; s++) s !== 0 && r.push(e5), r.push(t[s]);
  return r;
}
var me = "'", Fr = '"';
function nn(e5, t) {
  let r = t === true || t === me ? me : Fr, s = r === me ? Fr : me, n = 0, i = 0;
  for (let a of e5) a === r ? n++ : a === s && i++;
  return n > i ? s : r;
}
var de = nn;
function We(e5) {
  if (typeof e5 != "string") throw new TypeError("Expected a string");
  return e5.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
var z, je = class {
  constructor(t) {
    Lt(this, z);
    Y(this, z, new Set(t));
  }
  getLeadingWhitespaceCount(t) {
    let r = I(this, z), s = 0;
    for (let n = 0; n < t.length && r.has(t.charAt(n)); n++) s++;
    return s;
  }
  getTrailingWhitespaceCount(t) {
    let r = I(this, z), s = 0;
    for (let n = t.length - 1; n >= 0 && r.has(t.charAt(n)); n--) s++;
    return s;
  }
  getLeadingWhitespace(t) {
    let r = this.getLeadingWhitespaceCount(t);
    return t.slice(0, r);
  }
  getTrailingWhitespace(t) {
    let r = this.getTrailingWhitespaceCount(t);
    return t.slice(t.length - r);
  }
  hasLeadingWhitespace(t) {
    return I(this, z).has(t.charAt(0));
  }
  hasTrailingWhitespace(t) {
    return I(this, z).has(G(false, t, -1));
  }
  trimStart(t) {
    let r = this.getLeadingWhitespaceCount(t);
    return t.slice(r);
  }
  trimEnd(t) {
    let r = this.getTrailingWhitespaceCount(t);
    return t.slice(0, t.length - r);
  }
  trim(t) {
    return this.trimEnd(this.trimStart(t));
  }
  split(t, r = false) {
    let s = `[${We([...I(this, z)].join(""))}]+`, n = new RegExp(r ? `(${s})` : s, "u");
    return t.split(n);
  }
  hasWhitespaceCharacter(t) {
    let r = I(this, z);
    return Array.prototype.some.call(t, (s) => r.has(s));
  }
  hasNonWhitespaceCharacter(t) {
    let r = I(this, z);
    return Array.prototype.some.call(t, (s) => !r.has(s));
  }
  isWhitespaceOnly(t) {
    let r = I(this, z);
    return Array.prototype.every.call(t, (s) => r.has(s));
  }
};
z = /* @__PURE__ */ new WeakMap();
var Hr = je;
var an = ["	", `
`, "\f", "\r", " "], on = new Hr(an), K = on;
function ln(e5) {
  return Array.isArray(e5) && e5.length > 0;
}
var Zt = ln;
var Qe = class extends Error {
  constructor(t, r, s = "type") {
    super(`Unexpected ${r} node ${s}: ${JSON.stringify(t[s])}.`);
    __publicField(this, "name", "UnexpectedNodeError");
    this.node = t;
  }
}, Ur = Qe;
function Mr(e5, t, r) {
  if (e5.type === "TextNode") {
    let s = e5.chars.trim();
    if (!s) return null;
    r.tag === "style" && r.children.length === 1 && r.children[0] === e5 ? t.chars = "" : t.chars = K.split(s).join(" ");
  }
  e5.type === "ElementNode" && (delete t.startTag, delete t.openTag, delete t.parts, delete t.endTag, delete t.closeTag, delete t.nameNode, delete t.body, delete t.blockParamNodes, delete t.params, delete t.path), e5.type === "Block" && (delete t.blockParamNodes, delete t.params), e5.type === "AttrNode" && e5.name.toLowerCase() === "class" && delete t.value, e5.type === "PathExpression" && (t.head = e5.head.original);
}
Mr.ignoredProperties = /* @__PURE__ */ new Set(["loc", "selfClosing"]);
var zr = Mr;
function cn(e5) {
  let { node: t } = e5;
  if (t.type !== "TextNode") return;
  let { parent: r } = e5;
  if (!(r.type === "ElementNode" && r.tag === "style" && r.children.length === 1 && r.children[0] === t)) return;
  let s = r.attributes.find((n) => n.type === "AttrNode" && n.name === "lang");
  if (!(s && !(s.value.type === "TextNode" && (s.value.chars === "" || s.value.chars === "css")))) return async (n) => {
    let i = await n(t.chars, { parser: "css" });
    return i ? [tt, i, Xt(H)] : [];
  };
}
var Yr = cn;
var te = null;
function ee(e5) {
  if (te !== null && typeof te.property) {
    let t = te;
    return te = ee.prototype = null, t;
  }
  return te = ee.prototype = e5 ?? /* @__PURE__ */ Object.create(null), new ee();
}
var un = 10;
for (let e5 = 0; e5 <= un; e5++) ee();
function Je(e5) {
  return ee(e5);
}
function hn(e5, t = "type") {
  Je(e5);
  function r(s) {
    let n = s[t], i = e5[n];
    if (!Array.isArray(i)) throw Object.assign(new Error(`Missing visitor keys for '${n}'.`), { node: s });
    return i;
  }
  return r;
}
var Gr = hn;
var Kr = { Template: ["body"], Block: ["body"], MustacheStatement: ["path", "params", "hash"], BlockStatement: ["path", "params", "hash", "program", "inverse"], ElementModifierStatement: ["path", "params", "hash"], CommentStatement: [], MustacheCommentStatement: [], ElementNode: ["attributes", "modifiers", "children", "comments"], AttrNode: ["value"], TextNode: [], ConcatStatement: ["parts"], SubExpression: ["path", "params", "hash"], PathExpression: [], StringLiteral: [], BooleanLiteral: [], NumberLiteral: [], NullLiteral: [], UndefinedLiteral: [], Hash: ["pairs"], HashPair: ["value"] };
var pn = Gr(Kr), Wr = pn;
function St(e5) {
  return e5.loc.start.offset;
}
function re(e5) {
  return e5.loc.end.offset;
}
var jr = /* @__PURE__ */ new Set(["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
function Jr(e5) {
  return e5.toUpperCase() === e5;
}
function fn(e5) {
  return e5.type === "ElementNode" && typeof e5.tag == "string" && !e5.tag.startsWith(":") && (Jr(e5.tag[0]) || e5.tag.includes("."));
}
function mn(e5) {
  return jr.has(e5.toLowerCase()) && !Jr(e5[0]);
}
function $e(e5) {
  return e5.selfClosing === true || mn(e5.tag) || fn(e5) && e5.children.every((t) => ge(t));
}
function ge(e5) {
  return e5.type === "TextNode" && !/\S/u.test(e5.chars);
}
function Qr(e5) {
  return (e5 == null ? void 0 : e5.type) === "MustacheCommentStatement" && typeof e5.value == "string" && e5.value.trim() === "prettier-ignore";
}
function $r(e5) {
  return Qr(e5.node) || e5.isInArray && (e5.key === "children" || e5.key === "body" || e5.key === "parts") && Qr(e5.siblings[e5.index - 2]);
}
var is = 2;
function dn(e5, t, r) {
  var n, i, a, o, c, h, p, m, S;
  let { node: s } = e5;
  switch (s.type) {
    case "Block":
    case "Program":
    case "Template":
      return R(e5.map(r, "body"));
    case "ElementNode": {
      let y = R(bn(e5, r)), E = t.htmlWhitespaceSensitivity === "ignore" && ((n = e5.next) == null ? void 0 : n.type) === "ElementNode" ? H : "";
      if ($e(s)) return [y, E];
      let C = ["</", s.tag, ">"];
      return s.children.length === 0 ? [y, B(C), E] : t.htmlWhitespaceSensitivity === "ignore" ? [y, B(Xr(e5, t, r)), tt, B(C), E] : [y, B(R(Xr(e5, t, r))), B(C), E];
    }
    case "BlockStatement":
      return wn(e5) ? [Tn(e5, r), es(e5, r, t), rs(e5, r, t)] : [vn(e5, r), R([es(e5, r, t), rs(e5, r, t), Nn(e5, r, t)])];
    case "ElementModifierStatement":
      return R(["{{", ns(e5, r), "}}"]);
    case "MustacheStatement":
      return R([be(s), ns(e5, r), ye(s)]);
    case "SubExpression":
      return R(["(", _n(e5, r), H, ")"]);
    case "AttrNode": {
      let { name: y, value: E } = s, C = E.type === "TextNode";
      if (C && E.chars === "" && St(E) === re(E)) return y;
      let w = C ? de(E.chars, t.singleQuote) : E.type === "ConcatStatement" ? de(E.parts.map((q) => q.type === "TextNode" ? q.chars : "").join(""), t.singleQuote) : "", U = r("value");
      return [y, "=", w, y === "class" && w ? R(B(U)) : U, w];
    }
    case "ConcatStatement":
      return e5.map(r, "parts");
    case "Hash":
      return yt(L, e5.map(r, "pairs"));
    case "HashPair":
      return [s.key, "=", r("value")];
    case "TextNode": {
      if (e5.parent.tag === "pre" || e5.parent.tag === "style") return s.chars;
      let y = He(false, s.chars, "{{", String.raw`\{{`), E = xn(e5);
      if (E) {
        if (E === "class") {
          let X = y.trim().split(/\s+/u).join(" "), rt = false, V = false;
          return e5.parent.type === "ConcatStatement" && (((i = e5.previous) == null ? void 0 : i.type) === "MustacheStatement" && /^\s/u.test(y) && (rt = true), ((a = e5.next) == null ? void 0 : a.type) === "MustacheStatement" && /\s$/u.test(y) && X !== "" && (V = true)), [rt ? L : "", X, V ? L : ""];
        }
        return Ir(y);
      }
      let C = K.isWhitespaceOnly(y), { isFirst: x, isLast: w } = e5;
      if (t.htmlWhitespaceSensitivity !== "ignore") {
        let X = w && e5.parent.type === "Template", rt = x && e5.parent.type === "Template";
        if (C) {
          if (rt || X) return "";
          let A = [L], nt = Vt(y);
          return nt && (A = se(nt)), w && (A = A.map((ue) => Xt(ue))), A;
        }
        let V = K.getLeadingWhitespace(y), xt = [];
        if (V) {
          xt = [L];
          let A = Vt(V);
          A && (xt = se(A)), y = y.slice(V.length);
        }
        let F = K.getTrailingWhitespace(y), st = [];
        if (F) {
          if (!X) {
            st = [L];
            let A = Vt(F);
            A && (st = se(A)), w && (st = st.map((nt) => Xt(nt)));
          }
          y = y.slice(0, -F.length);
        }
        return [...xt, Ge(ss(y)), ...st];
      }
      let U = Vt(y), q = Pn(y), $ = An(y);
      if ((x || w) && C && (e5.parent.type === "Block" || e5.parent.type === "ElementNode" || e5.parent.type === "Template")) return "";
      C && U ? (q = Math.min(U, is), $ = 0) : ((((o = e5.next) == null ? void 0 : o.type) === "BlockStatement" || ((c = e5.next) == null ? void 0 : c.type) === "ElementNode") && ($ = Math.max($, 1)), (((h = e5.previous) == null ? void 0 : h.type) === "BlockStatement" || ((p = e5.previous) == null ? void 0 : p.type) === "ElementNode") && (q = Math.max(q, 1)));
      let Nt = "", Ct = "";
      return $ === 0 && ((m = e5.next) == null ? void 0 : m.type) === "MustacheStatement" && (Ct = " "), q === 0 && ((S = e5.previous) == null ? void 0 : S.type) === "MustacheStatement" && (Nt = " "), x && (q = 0, Nt = ""), w && ($ = 0, Ct = ""), K.hasLeadingWhitespace(y) && (y = Nt + K.trimStart(y)), K.hasTrailingWhitespace(y) && (y = K.trimEnd(y) + Ct), [...se(q), Ge(ss(y)), ...se($)];
    }
    case "MustacheCommentStatement": {
      let y = St(s), E = re(s), C = t.originalText.charAt(y + 2) === "~", x = t.originalText.charAt(E - 3) === "~", w = s.value.includes("}}") ? "--" : "";
      return ["{{", C ? "~" : "", "!", w, s.value, w, x ? "~" : "", "}}"];
    }
    case "PathExpression":
      return Rn(s);
    case "BooleanLiteral":
      return String(s.value);
    case "CommentStatement":
      return ["<!--", s.value, "-->"];
    case "StringLiteral":
      return Ln(e5, t);
    case "NumberLiteral":
      return String(s.value);
    case "UndefinedLiteral":
      return "undefined";
    case "NullLiteral":
      return "null";
    case "AtHead":
    case "VarHead":
    case "ThisHead":
    default:
      throw new Ur(s, "Handlebars");
  }
}
function gn(e5, t) {
  return St(e5) - St(t);
}
function bn(e5, t) {
  let { node: r } = e5, s = ["attributes", "modifiers", "comments"].filter((i) => Zt(r[i])), n = s.flatMap((i) => r[i]).sort(gn);
  for (let i of s) e5.each(({ node: a }) => {
    let o = n.indexOf(a);
    n.splice(o, 1, [L, t()]);
  }, i);
  return Zt(r.blockParams) && n.push(L, Ze(r)), ["<", r.tag, B(n), yn(r)];
}
function Xr(e5, t, r) {
  let { node: s } = e5, n = s.children.every((i) => ge(i));
  return t.htmlWhitespaceSensitivity === "ignore" && n ? "" : e5.map(({ isFirst: i }) => {
    let a = r();
    return i && t.htmlWhitespaceSensitivity === "ignore" ? [H, a] : a;
  }, "children");
}
function yn(e5) {
  return $e(e5) ? Ke([H, "/>"], [" />", H]) : Ke([H, ">"], ">");
}
function be(e5) {
  var s;
  let t = e5.trusting ? "{{{" : "{{", r = (s = e5.strip) != null && s.open ? "~" : "";
  return [t, r];
}
function ye(e5) {
  var s;
  let t = e5.trusting ? "}}}" : "}}";
  return [(s = e5.strip) != null && s.close ? "~" : "", t];
}
function kn(e5) {
  let t = be(e5), r = e5.openStrip.open ? "~" : "";
  return [t, r, "#"];
}
function Sn(e5) {
  let t = ye(e5);
  return [e5.openStrip.close ? "~" : "", t];
}
function Zr(e5) {
  let t = be(e5), r = e5.closeStrip.open ? "~" : "";
  return [t, r, "/"];
}
function ts(e5) {
  let t = ye(e5);
  return [e5.closeStrip.close ? "~" : "", t];
}
function as(e5) {
  let t = be(e5), r = e5.inverseStrip.open ? "~" : "";
  return [t, r];
}
function os(e5) {
  let t = ye(e5);
  return [e5.inverseStrip.close ? "~" : "", t];
}
function vn(e5, t) {
  let { node: r } = e5, s = [], n = ke(e5, t);
  return n && s.push(R(n)), Zt(r.program.blockParams) && s.push(Ze(r.program)), R([kn(r), Xe(e5, t), s.length > 0 ? B([L, yt(L, s)]) : "", H, Sn(r)]);
}
function En(e5, t) {
  return [t.htmlWhitespaceSensitivity === "ignore" ? tt : "", as(e5), "else", os(e5)];
}
var ls = (e5, t) => e5.head.type === "VarHead" && t.head.type === "VarHead" && e5.head.name === t.head.name;
function wn(e5) {
  var s;
  let { grandparent: t, node: r } = e5;
  return ((s = t == null ? void 0 : t.inverse) == null ? void 0 : s.body.length) === 1 && t.inverse.body[0] === r && ls(t.inverse.body[0].path, t.path);
}
function Tn(e5, t) {
  let { node: r, grandparent: s } = e5;
  return R([as(s), ["else", " ", s.inverse.body[0].path.head.name], B([L, R(ke(e5, t)), ...Zt(r.program.blockParams) ? [L, Ze(r.program)] : []]), H, os(s)]);
}
function Nn(e5, t, r) {
  let { node: s } = e5;
  return r.htmlWhitespaceSensitivity === "ignore" ? [cs(s) ? H : tt, Zr(s), t("path"), ts(s)] : [Zr(s), t("path"), ts(s)];
}
function cs(e5) {
  return e5.type === "BlockStatement" && e5.program.body.every((t) => ge(t));
}
function Cn(e5) {
  return us(e5) && e5.inverse.body.length === 1 && e5.inverse.body[0].type === "BlockStatement" && ls(e5.inverse.body[0].path, e5.path);
}
function us(e5) {
  return e5.type === "BlockStatement" && e5.inverse;
}
function es(e5, t, r) {
  let { node: s } = e5;
  if (cs(s)) return "";
  let n = t("program");
  return r.htmlWhitespaceSensitivity === "ignore" ? B([tt, n]) : B(n);
}
function rs(e5, t, r) {
  let { node: s } = e5, n = t("inverse"), i = r.htmlWhitespaceSensitivity === "ignore" ? [tt, n] : n;
  return Cn(s) ? i : us(s) ? [En(s, r), B(i)] : "";
}
function ss(e5) {
  return yt(L, K.split(e5));
}
function xn(e5) {
  for (let t = 0; t < 2; t++) {
    let r = e5.getParentNode(t);
    if ((r == null ? void 0 : r.type) === "AttrNode") return r.name.toLowerCase();
  }
}
function Vt(e5) {
  return e5 = typeof e5 == "string" ? e5 : "", e5.split(`
`).length - 1;
}
function Pn(e5) {
  e5 = typeof e5 == "string" ? e5 : "";
  let t = (e5.match(/^([^\S\n\r]*[\n\r])+/gu) || [])[0] || "";
  return Vt(t);
}
function An(e5) {
  e5 = typeof e5 == "string" ? e5 : "";
  let t = (e5.match(/([\n\r][^\S\n\r]*)+$/gu) || [])[0] || "";
  return Vt(t);
}
function se(e5 = 0) {
  return Array.from({ length: Math.min(e5, is) }).fill(tt);
}
function Ln(e5, t) {
  let { node: { value: r } } = e5, s = de(r, Dn(e5) ? !t.singleQuote : t.singleQuote);
  return [s, He(false, r, s, `\\${s}`), s];
}
function Dn(e5) {
  let { ancestors: t } = e5, r = t.findIndex((s) => s.type !== "SubExpression");
  return r !== -1 && t[r + 1].type === "ConcatStatement" && t[r + 2].type === "AttrNode";
}
function _n(e5, t) {
  let r = Xe(e5, t), s = ke(e5, t);
  return s ? B([r, L, R(s)]) : r;
}
function ns(e5, t) {
  let r = Xe(e5, t), s = ke(e5, t);
  return s ? [B([r, L, s]), H] : r;
}
function Xe(e5, t) {
  return t("path");
}
function ke(e5, t) {
  var n;
  let { node: r } = e5, s = [];
  return r.params.length > 0 && s.push(...e5.map(t, "params")), ((n = r.hash) == null ? void 0 : n.pairs.length) > 0 && s.push(t("hash")), s.length === 0 ? "" : yt(L, s);
}
function Ze(e5) {
  return ["as |", e5.blockParams.join(" "), "|"];
}
var On = new Set("!\"#%&'()*+,./;<=>@[\\]^`{|}~"), Bn = /* @__PURE__ */ new Set(["true", "false", "null", "undefined"]), In = (e5, t) => t === 0 && e5.startsWith("@") ? false : t !== 0 && Bn.has(e5) || /\s/u.test(e5) || /^\d/u.test(e5) || Array.prototype.some.call(e5, (r) => On.has(r));
function Rn(e5) {
  return e5.tail.length === 0 && e5.original.includes("/") ? e5.original : [e5.head.original, ...e5.tail].map((r, s) => In(r, s) ? `[${r}]` : r).join(".");
}
var qn = { print: dn, massageAstNode: zr, hasPrettierIgnore: $r, getVisitorKeys: Wr, embed: Yr }, hs = qn;
var ps = [{ linguistLanguageId: 155, name: "Handlebars", type: "markup", color: "#f7931e", aliases: ["hbs", "htmlbars"], extensions: [".handlebars", ".hbs"], tmScope: "text.html.handlebars", aceMode: "handlebars", parsers: ["glimmer"], vscodeLanguageIds: ["handlebars"] }];
var xr = {};
Fe(xr, { glimmer: () => Ei });
var tr = Object.assign;
var fs = console;
function ds(e5, t = "unexpected unreachable branch") {
  throw fs.log("unreachable", e5), fs.log(`${t} :: ${JSON.stringify(e5)} (${e5})`), new Error("code reached unreachable");
}
var Fn = function() {
  var e5 = function(it, d, k, g) {
    for (k = k || {}, g = it.length; g--; k[it[g]] = d) ;
    return k;
  }, t = [2, 44], r = [1, 20], s = [5, 14, 15, 19, 29, 34, 39, 44, 47, 48, 52, 56, 60], n = [1, 35], i = [1, 38], a = [1, 30], o = [1, 31], c = [1, 32], h = [1, 33], p = [1, 34], m = [1, 37], S = [14, 15, 19, 29, 34, 39, 44, 47, 48, 52, 56, 60], y = [14, 15, 19, 29, 34, 44, 47, 48, 52, 56, 60], E = [15, 18], C = [14, 15, 19, 29, 34, 47, 48, 52, 56, 60], x = [33, 64, 71, 79, 80, 81, 82, 83, 84], w = [23, 33, 55, 64, 67, 71, 74, 79, 80, 81, 82, 83, 84], U = [1, 51], q = [23, 33, 55, 64, 67, 71, 74, 79, 80, 81, 82, 83, 84, 86], $ = [2, 43], Nt = [55, 64, 71, 79, 80, 81, 82, 83, 84], Ct = [1, 58], X = [1, 59], rt = [1, 66], V = [33, 64, 71, 74, 79, 80, 81, 82, 83, 84], xt = [23, 64, 71, 79, 80, 81, 82, 83, 84], F = [1, 76], st = [64, 67, 71, 79, 80, 81, 82, 83, 84], A = [33, 74], nt = [23, 33, 55, 67, 71, 74], ue = [1, 106], De = [1, 118], Ar = [71, 76], _e = { trace: function() {
  }, yy: {}, symbols_: { error: 2, root: 3, program: 4, EOF: 5, program_repetition0: 6, statement: 7, mustache: 8, block: 9, rawBlock: 10, partial: 11, partialBlock: 12, content: 13, COMMENT: 14, CONTENT: 15, openRawBlock: 16, rawBlock_repetition0: 17, END_RAW_BLOCK: 18, OPEN_RAW_BLOCK: 19, helperName: 20, openRawBlock_repetition0: 21, openRawBlock_option0: 22, CLOSE_RAW_BLOCK: 23, openBlock: 24, block_option0: 25, closeBlock: 26, openInverse: 27, block_option1: 28, OPEN_BLOCK: 29, openBlock_repetition0: 30, openBlock_option0: 31, openBlock_option1: 32, CLOSE: 33, OPEN_INVERSE: 34, openInverse_repetition0: 35, openInverse_option0: 36, openInverse_option1: 37, openInverseChain: 38, OPEN_INVERSE_CHAIN: 39, openInverseChain_repetition0: 40, openInverseChain_option0: 41, openInverseChain_option1: 42, inverseAndProgram: 43, INVERSE: 44, inverseChain: 45, inverseChain_option0: 46, OPEN_ENDBLOCK: 47, OPEN: 48, expr: 49, mustache_repetition0: 50, mustache_option0: 51, OPEN_UNESCAPED: 52, mustache_repetition1: 53, mustache_option1: 54, CLOSE_UNESCAPED: 55, OPEN_PARTIAL: 56, partial_repetition0: 57, partial_option0: 58, openPartialBlock: 59, OPEN_PARTIAL_BLOCK: 60, openPartialBlock_repetition0: 61, openPartialBlock_option0: 62, sexpr: 63, OPEN_SEXPR: 64, sexpr_repetition0: 65, sexpr_option0: 66, CLOSE_SEXPR: 67, hash: 68, hash_repetition_plus0: 69, hashSegment: 70, ID: 71, EQUALS: 72, blockParams: 73, OPEN_BLOCK_PARAMS: 74, blockParams_repetition_plus0: 75, CLOSE_BLOCK_PARAMS: 76, path: 77, dataName: 78, STRING: 79, NUMBER: 80, BOOLEAN: 81, UNDEFINED: 82, NULL: 83, DATA: 84, pathSegments: 85, SEP: 86, $accept: 0, $end: 1 }, terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 52: "OPEN_UNESCAPED", 55: "CLOSE_UNESCAPED", 56: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 64: "OPEN_SEXPR", 67: "CLOSE_SEXPR", 71: "ID", 72: "EQUALS", 74: "OPEN_BLOCK_PARAMS", 76: "CLOSE_BLOCK_PARAMS", 79: "STRING", 80: "NUMBER", 81: "BOOLEAN", 82: "UNDEFINED", 83: "NULL", 84: "DATA", 86: "SEP" }, productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [49, 1], [49, 1], [63, 5], [68, 1], [70, 3], [73, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [78, 2], [77, 1], [85, 3], [85, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [50, 0], [50, 2], [51, 0], [51, 1], [53, 0], [53, 2], [54, 0], [54, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [65, 0], [65, 2], [66, 0], [66, 1], [69, 1], [69, 2], [75, 1], [75, 2]], performAction: function(d, k, g, b, N, l, Pt) {
    var u = l.length - 1;
    switch (N) {
      case 1:
        return l[u - 1];
      case 2:
        this.$ = b.prepareProgram(l[u]);
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 20:
      case 27:
      case 28:
      case 33:
      case 34:
        this.$ = l[u];
        break;
      case 9:
        this.$ = { type: "CommentStatement", value: b.stripComment(l[u]), strip: b.stripFlags(l[u], l[u]), loc: b.locInfo(this._$) };
        break;
      case 10:
        this.$ = { type: "ContentStatement", original: l[u], value: l[u], loc: b.locInfo(this._$) };
        break;
      case 11:
        this.$ = b.prepareRawBlock(l[u - 2], l[u - 1], l[u], this._$);
        break;
      case 12:
        this.$ = { path: l[u - 3], params: l[u - 2], hash: l[u - 1] };
        break;
      case 13:
        this.$ = b.prepareBlock(l[u - 3], l[u - 2], l[u - 1], l[u], false, this._$);
        break;
      case 14:
        this.$ = b.prepareBlock(l[u - 3], l[u - 2], l[u - 1], l[u], true, this._$);
        break;
      case 15:
        this.$ = { open: l[u - 5], path: l[u - 4], params: l[u - 3], hash: l[u - 2], blockParams: l[u - 1], strip: b.stripFlags(l[u - 5], l[u]) };
        break;
      case 16:
      case 17:
        this.$ = { path: l[u - 4], params: l[u - 3], hash: l[u - 2], blockParams: l[u - 1], strip: b.stripFlags(l[u - 5], l[u]) };
        break;
      case 18:
        this.$ = { strip: b.stripFlags(l[u - 1], l[u - 1]), program: l[u] };
        break;
      case 19:
        var at = b.prepareBlock(l[u - 2], l[u - 1], l[u], l[u], false, this._$), Yt = b.prepareProgram([at], l[u - 1].loc);
        Yt.chained = true, this.$ = { strip: l[u - 2].strip, program: Yt, chain: true };
        break;
      case 21:
        this.$ = { path: l[u - 1], strip: b.stripFlags(l[u - 2], l[u]) };
        break;
      case 22:
      case 23:
        this.$ = b.prepareMustache(l[u - 3], l[u - 2], l[u - 1], l[u - 4], b.stripFlags(l[u - 4], l[u]), this._$);
        break;
      case 24:
        this.$ = { type: "PartialStatement", name: l[u - 3], params: l[u - 2], hash: l[u - 1], indent: "", strip: b.stripFlags(l[u - 4], l[u]), loc: b.locInfo(this._$) };
        break;
      case 25:
        this.$ = b.preparePartialBlock(l[u - 2], l[u - 1], l[u], this._$);
        break;
      case 26:
        this.$ = { path: l[u - 3], params: l[u - 2], hash: l[u - 1], strip: b.stripFlags(l[u - 4], l[u]) };
        break;
      case 29:
        this.$ = { type: "SubExpression", path: l[u - 3], params: l[u - 2], hash: l[u - 1], loc: b.locInfo(this._$) };
        break;
      case 30:
        this.$ = { type: "Hash", pairs: l[u], loc: b.locInfo(this._$) };
        break;
      case 31:
        this.$ = { type: "HashPair", key: b.id(l[u - 2]), value: l[u], loc: b.locInfo(this._$) };
        break;
      case 32:
        this.$ = b.id(l[u - 1]);
        break;
      case 35:
        this.$ = { type: "StringLiteral", value: l[u], original: l[u], loc: b.locInfo(this._$) };
        break;
      case 36:
        this.$ = { type: "NumberLiteral", value: Number(l[u]), original: Number(l[u]), loc: b.locInfo(this._$) };
        break;
      case 37:
        this.$ = { type: "BooleanLiteral", value: l[u] === "true", original: l[u] === "true", loc: b.locInfo(this._$) };
        break;
      case 38:
        this.$ = { type: "UndefinedLiteral", original: void 0, value: void 0, loc: b.locInfo(this._$) };
        break;
      case 39:
        this.$ = { type: "NullLiteral", original: null, value: null, loc: b.locInfo(this._$) };
        break;
      case 40:
        this.$ = b.preparePath(true, l[u], this._$);
        break;
      case 41:
        this.$ = b.preparePath(false, l[u], this._$);
        break;
      case 42:
        l[u - 2].push({ part: b.id(l[u]), original: l[u], separator: l[u - 1] }), this.$ = l[u - 2];
        break;
      case 43:
        this.$ = [{ part: b.id(l[u]), original: l[u] }];
        break;
      case 44:
      case 46:
      case 48:
      case 56:
      case 62:
      case 68:
      case 76:
      case 80:
      case 84:
      case 88:
      case 92:
        this.$ = [];
        break;
      case 45:
      case 47:
      case 49:
      case 57:
      case 63:
      case 69:
      case 77:
      case 81:
      case 85:
      case 89:
      case 93:
      case 97:
      case 99:
        l[u - 1].push(l[u]);
        break;
      case 96:
      case 98:
        this.$ = [l[u]];
        break;
    }
  }, table: [e5([5, 14, 15, 19, 29, 34, 48, 52, 56, 60], t, { 3: 1, 4: 2, 6: 3 }), { 1: [3] }, { 5: [1, 4] }, e5([5, 39, 44, 47], [2, 2], { 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 24: 15, 27: 16, 16: 17, 59: 19, 14: [1, 12], 15: r, 19: [1, 23], 29: [1, 21], 34: [1, 22], 48: [1, 13], 52: [1, 14], 56: [1, 18], 60: [1, 24] }), { 1: [2, 1] }, e5(s, [2, 45]), e5(s, [2, 3]), e5(s, [2, 4]), e5(s, [2, 5]), e5(s, [2, 6]), e5(s, [2, 7]), e5(s, [2, 8]), e5(s, [2, 9]), { 20: 26, 49: 25, 63: 27, 64: n, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, { 20: 26, 49: 39, 63: 27, 64: n, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(S, t, { 6: 3, 4: 40 }), e5(y, t, { 6: 3, 4: 41 }), e5(E, [2, 46], { 17: 42 }), { 20: 26, 49: 43, 63: 27, 64: n, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(C, t, { 6: 3, 4: 44 }), e5([5, 14, 15, 18, 19, 29, 34, 39, 44, 47, 48, 52, 56, 60], [2, 10]), { 20: 45, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, { 20: 46, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, { 20: 47, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, { 20: 26, 49: 48, 63: 27, 64: n, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(x, [2, 76], { 50: 49 }), e5(w, [2, 27]), e5(w, [2, 28]), e5(w, [2, 33]), e5(w, [2, 34]), e5(w, [2, 35]), e5(w, [2, 36]), e5(w, [2, 37]), e5(w, [2, 38]), e5(w, [2, 39]), { 20: 26, 49: 50, 63: 27, 64: n, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(w, [2, 41], { 86: U }), { 71: i, 85: 52 }, e5(q, $), e5(Nt, [2, 80], { 53: 53 }), { 25: 54, 38: 56, 39: Ct, 43: 57, 44: X, 45: 55, 47: [2, 52] }, { 28: 60, 43: 61, 44: X, 47: [2, 54] }, { 13: 63, 15: r, 18: [1, 62] }, e5(x, [2, 84], { 57: 64 }), { 26: 65, 47: rt }, e5(V, [2, 56], { 30: 67 }), e5(V, [2, 62], { 35: 68 }), e5(xt, [2, 48], { 21: 69 }), e5(x, [2, 88], { 61: 70 }), { 20: 26, 33: [2, 78], 49: 72, 51: 71, 63: 27, 64: n, 68: 73, 69: 74, 70: 75, 71: F, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(st, [2, 92], { 65: 77 }), { 71: [1, 78] }, e5(w, [2, 40], { 86: U }), { 20: 26, 49: 80, 54: 79, 55: [2, 82], 63: 27, 64: n, 68: 81, 69: 74, 70: 75, 71: F, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, { 26: 82, 47: rt }, { 47: [2, 53] }, e5(S, t, { 6: 3, 4: 83 }), { 47: [2, 20] }, { 20: 84, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(C, t, { 6: 3, 4: 85 }), { 26: 86, 47: rt }, { 47: [2, 55] }, e5(s, [2, 11]), e5(E, [2, 47]), { 20: 26, 33: [2, 86], 49: 88, 58: 87, 63: 27, 64: n, 68: 89, 69: 74, 70: 75, 71: F, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(s, [2, 25]), { 20: 90, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(A, [2, 58], { 20: 26, 63: 27, 77: 28, 78: 29, 85: 36, 69: 74, 70: 75, 31: 91, 49: 92, 68: 93, 64: n, 71: F, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m }), e5(A, [2, 64], { 20: 26, 63: 27, 77: 28, 78: 29, 85: 36, 69: 74, 70: 75, 36: 94, 49: 95, 68: 96, 64: n, 71: F, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m }), { 20: 26, 22: 97, 23: [2, 50], 49: 98, 63: 27, 64: n, 68: 99, 69: 74, 70: 75, 71: F, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, { 20: 26, 33: [2, 90], 49: 101, 62: 100, 63: 27, 64: n, 68: 102, 69: 74, 70: 75, 71: F, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, { 33: [1, 103] }, e5(x, [2, 77]), { 33: [2, 79] }, e5([23, 33, 55, 67, 74], [2, 30], { 70: 104, 71: [1, 105] }), e5(nt, [2, 96]), e5(q, $, { 72: ue }), { 20: 26, 49: 108, 63: 27, 64: n, 66: 107, 67: [2, 94], 68: 109, 69: 74, 70: 75, 71: F, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, e5(q, [2, 42]), { 55: [1, 110] }, e5(Nt, [2, 81]), { 55: [2, 83] }, e5(s, [2, 13]), { 38: 56, 39: Ct, 43: 57, 44: X, 45: 112, 46: 111, 47: [2, 74] }, e5(V, [2, 68], { 40: 113 }), { 47: [2, 18] }, e5(s, [2, 14]), { 33: [1, 114] }, e5(x, [2, 85]), { 33: [2, 87] }, { 33: [1, 115] }, { 32: 116, 33: [2, 60], 73: 117, 74: De }, e5(V, [2, 57]), e5(A, [2, 59]), { 33: [2, 66], 37: 119, 73: 120, 74: De }, e5(V, [2, 63]), e5(A, [2, 65]), { 23: [1, 121] }, e5(xt, [2, 49]), { 23: [2, 51] }, { 33: [1, 122] }, e5(x, [2, 89]), { 33: [2, 91] }, e5(s, [2, 22]), e5(nt, [2, 97]), { 72: ue }, { 20: 26, 49: 123, 63: 27, 64: n, 71: i, 77: 28, 78: 29, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m, 85: 36 }, { 67: [1, 124] }, e5(st, [2, 93]), { 67: [2, 95] }, e5(s, [2, 23]), { 47: [2, 19] }, { 47: [2, 75] }, e5(A, [2, 70], { 20: 26, 63: 27, 77: 28, 78: 29, 85: 36, 69: 74, 70: 75, 41: 125, 49: 126, 68: 127, 64: n, 71: F, 79: a, 80: o, 81: c, 82: h, 83: p, 84: m }), e5(s, [2, 24]), e5(s, [2, 21]), { 33: [1, 128] }, { 33: [2, 61] }, { 71: [1, 130], 75: 129 }, { 33: [1, 131] }, { 33: [2, 67] }, e5(E, [2, 12]), e5(C, [2, 26]), e5(nt, [2, 31]), e5(w, [2, 29]), { 33: [2, 72], 42: 132, 73: 133, 74: De }, e5(V, [2, 69]), e5(A, [2, 71]), e5(S, [2, 15]), { 71: [1, 135], 76: [1, 134] }, e5(Ar, [2, 98]), e5(y, [2, 16]), { 33: [1, 136] }, { 33: [2, 73] }, { 33: [2, 32] }, e5(Ar, [2, 99]), e5(S, [2, 17])], defaultActions: { 4: [2, 1], 55: [2, 53], 57: [2, 20], 61: [2, 55], 73: [2, 79], 81: [2, 83], 85: [2, 18], 89: [2, 87], 99: [2, 51], 102: [2, 91], 109: [2, 95], 111: [2, 19], 112: [2, 75], 117: [2, 61], 120: [2, 67], 133: [2, 73], 134: [2, 32] }, parseError: function(d, k) {
    if (k.recoverable) this.trace(d);
    else {
      var g = new Error(d);
      throw g.hash = k, g;
    }
  }, parse: function(d) {
    var k = this, g = [0], N = [null], l = [], Pt = this.table, u = "", at = 0, Yt = 0, Lr = 0, zs = 2, Dr = 1, Ys = l.slice.call(arguments, 1), P = Object.create(this.lexer), dt = { yy: {} };
    for (var Be in this.yy) Object.prototype.hasOwnProperty.call(this.yy, Be) && (dt.yy[Be] = this.yy[Be]);
    P.setInput(d, dt.yy), dt.yy.lexer = P, dt.yy.parser = this, typeof P.yylloc > "u" && (P.yylloc = {});
    var Ie = P.yylloc;
    l.push(Ie);
    var Gs = P.options && P.options.ranges;
    typeof dt.yy.parseError == "function" ? this.parseError = dt.yy.parseError : this.parseError = Object.getPrototypeOf(this).parseError;
    for (var Ks = function() {
      var W;
      return W = P.lex() || Dr, typeof W != "number" && (W = k.symbols_[W] || W), W;
    }, O, Re, gt, M, Ni, qe, At = {}, he, Z, _r, pe; ; ) {
      if (gt = g[g.length - 1], this.defaultActions[gt] ? M = this.defaultActions[gt] : ((O === null || typeof O > "u") && (O = Ks()), M = Pt[gt] && Pt[gt][O]), typeof M > "u" || !M.length || !M[0]) {
        var Ve = "";
        pe = [];
        for (he in Pt[gt]) this.terminals_[he] && he > zs && pe.push("'" + this.terminals_[he] + "'");
        P.showPosition ? Ve = "Parse error on line " + (at + 1) + `:
` + P.showPosition() + `
Expecting ` + pe.join(", ") + ", got '" + (this.terminals_[O] || O) + "'" : Ve = "Parse error on line " + (at + 1) + ": Unexpected " + (O == Dr ? "end of input" : "'" + (this.terminals_[O] || O) + "'"), this.parseError(Ve, { text: P.match, token: this.terminals_[O] || O, line: P.yylineno, loc: Ie, expected: pe });
      }
      if (M[0] instanceof Array && M.length > 1) throw new Error("Parse Error: multiple actions possible at state: " + gt + ", token: " + O);
      switch (M[0]) {
        case 1:
          g.push(O), N.push(P.yytext), l.push(P.yylloc), g.push(M[1]), O = null, Re ? (O = Re, Re = null) : (Yt = P.yyleng, u = P.yytext, at = P.yylineno, Ie = P.yylloc, Lr > 0);
          break;
        case 2:
          if (Z = this.productions_[M[1]][1], At.$ = N[N.length - Z], At._$ = { first_line: l[l.length - (Z || 1)].first_line, last_line: l[l.length - 1].last_line, first_column: l[l.length - (Z || 1)].first_column, last_column: l[l.length - 1].last_column }, Gs && (At._$.range = [l[l.length - (Z || 1)].range[0], l[l.length - 1].range[1]]), qe = this.performAction.apply(At, [u, Yt, at, dt.yy, M[1], N, l].concat(Ys)), typeof qe < "u") return qe;
          Z && (g = g.slice(0, -1 * Z * 2), N = N.slice(0, -1 * Z), l = l.slice(0, -1 * Z)), g.push(this.productions_[M[1]][0]), N.push(At.$), l.push(At._$), _r = Pt[g[g.length - 2]][g[g.length - 1]], g.push(_r);
          break;
        case 3:
          return true;
      }
    }
    return true;
  } }, Ms = /* @__PURE__ */ function() {
    var it = { EOF: 1, parseError: function(k, g) {
      if (this.yy.parser) this.yy.parser.parseError(k, g);
      else throw new Error(k);
    }, setInput: function(d, k) {
      return this.yy = k || this.yy || {}, this._input = d, this._more = this._backtrack = this.done = false, this.yylineno = this.yyleng = 0, this.yytext = this.matched = this.match = "", this.conditionStack = ["INITIAL"], this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 }, this.options.ranges && (this.yylloc.range = [0, 0]), this.offset = 0, this;
    }, input: function() {
      var d = this._input[0];
      this.yytext += d, this.yyleng++, this.offset++, this.match += d, this.matched += d;
      var k = d.match(/(?:\r\n?|\n).*/g);
      return k ? (this.yylineno++, this.yylloc.last_line++) : this.yylloc.last_column++, this.options.ranges && this.yylloc.range[1]++, this._input = this._input.slice(1), d;
    }, unput: function(d) {
      var k = d.length, g = d.split(/(?:\r\n?|\n)/g);
      this._input = d + this._input, this.yytext = this.yytext.substr(0, this.yytext.length - k), this.offset -= k;
      var b = this.match.split(/(?:\r\n?|\n)/g);
      this.match = this.match.substr(0, this.match.length - 1), this.matched = this.matched.substr(0, this.matched.length - 1), g.length - 1 && (this.yylineno -= g.length - 1);
      var N = this.yylloc.range;
      return this.yylloc = { first_line: this.yylloc.first_line, last_line: this.yylineno + 1, first_column: this.yylloc.first_column, last_column: g ? (g.length === b.length ? this.yylloc.first_column : 0) + b[b.length - g.length].length - g[0].length : this.yylloc.first_column - k }, this.options.ranges && (this.yylloc.range = [N[0], N[0] + this.yyleng - k]), this.yyleng = this.yytext.length, this;
    }, more: function() {
      return this._more = true, this;
    }, reject: function() {
      if (this.options.backtrack_lexer) this._backtrack = true;
      else return this.parseError("Lexical error on line " + (this.yylineno + 1) + `. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).
` + this.showPosition(), { text: "", token: null, line: this.yylineno });
      return this;
    }, less: function(d) {
      this.unput(this.match.slice(d));
    }, pastInput: function() {
      var d = this.matched.substr(0, this.matched.length - this.match.length);
      return (d.length > 20 ? "..." : "") + d.substr(-20).replace(/\n/g, "");
    }, upcomingInput: function() {
      var d = this.match;
      return d.length < 20 && (d += this._input.substr(0, 20 - d.length)), (d.substr(0, 20) + (d.length > 20 ? "..." : "")).replace(/\n/g, "");
    }, showPosition: function() {
      var d = this.pastInput(), k = new Array(d.length + 1).join("-");
      return d + this.upcomingInput() + `
` + k + "^";
    }, test_match: function(d, k) {
      var g, b, N;
      if (this.options.backtrack_lexer && (N = { yylineno: this.yylineno, yylloc: { first_line: this.yylloc.first_line, last_line: this.last_line, first_column: this.yylloc.first_column, last_column: this.yylloc.last_column }, yytext: this.yytext, match: this.match, matches: this.matches, matched: this.matched, yyleng: this.yyleng, offset: this.offset, _more: this._more, _input: this._input, yy: this.yy, conditionStack: this.conditionStack.slice(0), done: this.done }, this.options.ranges && (N.yylloc.range = this.yylloc.range.slice(0))), b = d[0].match(/(?:\r\n?|\n).*/g), b && (this.yylineno += b.length), this.yylloc = { first_line: this.yylloc.last_line, last_line: this.yylineno + 1, first_column: this.yylloc.last_column, last_column: b ? b[b.length - 1].length - b[b.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + d[0].length }, this.yytext += d[0], this.match += d[0], this.matches = d, this.yyleng = this.yytext.length, this.options.ranges && (this.yylloc.range = [this.offset, this.offset += this.yyleng]), this._more = false, this._backtrack = false, this._input = this._input.slice(d[0].length), this.matched += d[0], g = this.performAction.call(this, this.yy, this, k, this.conditionStack[this.conditionStack.length - 1]), this.done && this._input && (this.done = false), g) return g;
      if (this._backtrack) {
        for (var l in N) this[l] = N[l];
        return false;
      }
      return false;
    }, next: function() {
      if (this.done) return this.EOF;
      this._input || (this.done = true);
      var d, k, g, b;
      this._more || (this.yytext = "", this.match = "");
      for (var N = this._currentRules(), l = 0; l < N.length; l++) if (g = this._input.match(this.rules[N[l]]), g && (!k || g[0].length > k[0].length)) {
        if (k = g, b = l, this.options.backtrack_lexer) {
          if (d = this.test_match(g, N[l]), d !== false) return d;
          if (this._backtrack) {
            k = false;
            continue;
          } else return false;
        } else if (!this.options.flex) break;
      }
      return k ? (d = this.test_match(k, N[b]), d !== false ? d : false) : this._input === "" ? this.EOF : this.parseError("Lexical error on line " + (this.yylineno + 1) + `. Unrecognized text.
` + this.showPosition(), { text: "", token: null, line: this.yylineno });
    }, lex: function() {
      var k = this.next();
      return k || this.lex();
    }, begin: function(k) {
      this.conditionStack.push(k);
    }, popState: function() {
      var k = this.conditionStack.length - 1;
      return k > 0 ? this.conditionStack.pop() : this.conditionStack[0];
    }, _currentRules: function() {
      return this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1] ? this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules : this.conditions.INITIAL.rules;
    }, topState: function(k) {
      return k = this.conditionStack.length - 1 - Math.abs(k || 0), k >= 0 ? this.conditionStack[k] : "INITIAL";
    }, pushState: function(k) {
      this.begin(k);
    }, stateStackSize: function() {
      return this.conditionStack.length;
    }, options: {}, performAction: function(k, g, b, N) {
      function l(u, at) {
        return g.yytext = g.yytext.substring(u, g.yyleng - at + u);
      }
      switch (b) {
        case 0:
          if (g.yytext.slice(-2) === "\\\\" ? (l(0, 1), this.begin("mu")) : g.yytext.slice(-1) === "\\" ? (l(0, 1), this.begin("emu")) : this.begin("mu"), g.yytext) return 15;
          break;
        case 1:
          return 15;
        case 2:
          return this.popState(), 15;
        case 3:
          return this.begin("raw"), 15;
        case 4:
          return this.popState(), this.conditionStack[this.conditionStack.length - 1] === "raw" ? 15 : (l(5, 9), 18);
        case 5:
          return 15;
        case 6:
          return this.popState(), 14;
        case 7:
          return 64;
        case 8:
          return 67;
        case 9:
          return 19;
        case 10:
          return this.popState(), this.begin("raw"), 23;
        case 11:
          return 56;
        case 12:
          return 60;
        case 13:
          return 29;
        case 14:
          return 47;
        case 15:
          return this.popState(), 44;
        case 16:
          return this.popState(), 44;
        case 17:
          return 34;
        case 18:
          return 39;
        case 19:
          return 52;
        case 20:
          return 48;
        case 21:
          this.unput(g.yytext), this.popState(), this.begin("com");
          break;
        case 22:
          return this.popState(), 14;
        case 23:
          return 48;
        case 24:
          return 72;
        case 25:
          return 71;
        case 26:
          return 71;
        case 27:
          return 86;
        case 28:
          break;
        case 29:
          return this.popState(), 55;
        case 30:
          return this.popState(), 33;
        case 31:
          return g.yytext = l(1, 2).replace(/\\"/g, '"'), 79;
        case 32:
          return g.yytext = l(1, 2).replace(/\\'/g, "'"), 79;
        case 33:
          return 84;
        case 34:
          return 81;
        case 35:
          return 81;
        case 36:
          return 82;
        case 37:
          return 83;
        case 38:
          return 80;
        case 39:
          return 74;
        case 40:
          return 76;
        case 41:
          return 71;
        case 42:
          return g.yytext = g.yytext.replace(/\\([\\\]])/g, "$1"), 71;
        case 43:
          return "INVALID";
        case 44:
          return 5;
      }
    }, rules: [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]+?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/], conditions: { mu: { rules: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], inclusive: false }, emu: { rules: [2], inclusive: false }, com: { rules: [6], inclusive: false }, raw: { rules: [3, 4, 5], inclusive: false }, INITIAL: { rules: [0, 1, 44], inclusive: true } } };
    return it;
  }();
  _e.lexer = Ms;
  function Oe() {
    this.yy = {};
  }
  return Oe.prototype = _e, _e.Parser = Oe, new Oe();
}(), Se = Fn;
var er = ["description", "fileName", "lineNumber", "endLineNumber", "message", "name", "number", "stack"];
function rr(e5, t) {
  var r = t && t.loc, s, n, i, a;
  r && (s = r.start.line, n = r.end.line, i = r.start.column, a = r.end.column, e5 += " - " + s + ":" + i);
  for (var o = Error.prototype.constructor.call(this, e5), c = 0; c < er.length; c++) this[er[c]] = o[er[c]];
  Error.captureStackTrace && Error.captureStackTrace(this, rr);
  try {
    r && (this.lineNumber = s, this.endLineNumber = n, Object.defineProperty ? (Object.defineProperty(this, "column", { value: i, enumerable: true }), Object.defineProperty(this, "endColumn", { value: a, enumerable: true })) : (this.column = i, this.endColumn = a));
  } catch {
  }
}
rr.prototype = new Error();
var ot = rr;
function ve() {
  this.parents = [];
}
ve.prototype = { constructor: ve, mutating: false, acceptKey: function(e5, t) {
  var r = this.accept(e5[t]);
  if (this.mutating) {
    if (r && !ve.prototype[r.type]) throw new ot('Unexpected node type "' + r.type + '" found when accepting ' + t + " on " + e5.type);
    e5[t] = r;
  }
}, acceptRequired: function(e5, t) {
  if (this.acceptKey(e5, t), !e5[t]) throw new ot(e5.type + " requires " + t);
}, acceptArray: function(e5) {
  for (var t = 0, r = e5.length; t < r; t++) this.acceptKey(e5, t), e5[t] || (e5.splice(t, 1), t--, r--);
}, accept: function(e5) {
  if (e5) {
    if (!this[e5.type]) throw new ot("Unknown type: " + e5.type, e5);
    this.current && this.parents.unshift(this.current), this.current = e5;
    var t = this[e5.type](e5);
    if (this.current = this.parents.shift(), !this.mutating || t) return t;
    if (t !== false) return e5;
  }
}, Program: function(e5) {
  this.acceptArray(e5.body);
}, MustacheStatement: Ee, Decorator: Ee, BlockStatement: gs, DecoratorBlock: gs, PartialStatement: bs, PartialBlockStatement: function(e5) {
  bs.call(this, e5), this.acceptKey(e5, "program");
}, ContentStatement: function() {
}, CommentStatement: function() {
}, SubExpression: Ee, PathExpression: function() {
}, StringLiteral: function() {
}, NumberLiteral: function() {
}, BooleanLiteral: function() {
}, UndefinedLiteral: function() {
}, NullLiteral: function() {
}, Hash: function(e5) {
  this.acceptArray(e5.pairs);
}, HashPair: function(e5) {
  this.acceptRequired(e5, "value");
} };
function Ee(e5) {
  this.acceptRequired(e5, "path"), this.acceptArray(e5.params), this.acceptKey(e5, "hash");
}
function gs(e5) {
  Ee.call(this, e5), this.acceptKey(e5, "program"), this.acceptKey(e5, "inverse");
}
function bs(e5) {
  this.acceptRequired(e5, "name"), this.acceptArray(e5.params), this.acceptKey(e5, "hash");
}
var ys = ve;
function Q(e5) {
  e5 === void 0 && (e5 = {}), this.options = e5;
}
Q.prototype = new ys();
Q.prototype.Program = function(e5) {
  var t = !this.options.ignoreStandalone, r = !this.isRootSeen;
  this.isRootSeen = true;
  for (var s = e5.body, n = 0, i = s.length; n < i; n++) {
    var a = s[n], o = this.accept(a);
    if (o) {
      var c = sr(s, n, r), h = nr(s, n, r), p = o.openStandalone && c, m = o.closeStandalone && h, S = o.inlineStandalone && c && h;
      o.close && vt(s, n, true), o.open && lt(s, n, true), t && S && (vt(s, n), lt(s, n) && a.type === "PartialStatement" && (a.indent = /([ \t]+$)/.exec(s[n - 1].original)[1])), t && p && (vt((a.program || a.inverse).body), lt(s, n)), t && m && (vt(s, n), lt((a.inverse || a.program).body));
    }
  }
  return e5;
};
Q.prototype.BlockStatement = Q.prototype.DecoratorBlock = Q.prototype.PartialBlockStatement = function(e5) {
  this.accept(e5.program), this.accept(e5.inverse);
  var t = e5.program || e5.inverse, r = e5.program && e5.inverse, s = r, n = r;
  if (r && r.chained) for (s = r.body[0].program; n.chained; ) n = n.body[n.body.length - 1].program;
  var i = { open: e5.openStrip.open, close: e5.closeStrip.close, openStandalone: nr(t.body), closeStandalone: sr((s || t).body) };
  if (e5.openStrip.close && vt(t.body, null, true), r) {
    var a = e5.inverseStrip;
    a.open && lt(t.body, null, true), a.close && vt(s.body, null, true), e5.closeStrip.open && lt(n.body, null, true), !this.options.ignoreStandalone && sr(t.body) && nr(s.body) && (lt(t.body), vt(s.body));
  } else e5.closeStrip.open && lt(t.body, null, true);
  return i;
};
Q.prototype.Decorator = Q.prototype.MustacheStatement = function(e5) {
  return e5.strip;
};
Q.prototype.PartialStatement = Q.prototype.CommentStatement = function(e5) {
  var t = e5.strip || {};
  return { inlineStandalone: true, open: t.open, close: t.close };
};
function sr(e5, t, r) {
  t === void 0 && (t = e5.length);
  var s = e5[t - 1], n = e5[t - 2];
  if (!s) return r;
  if (s.type === "ContentStatement") return (n || !r ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(s.original);
}
function nr(e5, t, r) {
  t === void 0 && (t = -1);
  var s = e5[t + 1], n = e5[t + 2];
  if (!s) return r;
  if (s.type === "ContentStatement") return (n || !r ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(s.original);
}
function vt(e5, t, r) {
  var s = e5[t == null ? 0 : t + 1];
  if (!(!s || s.type !== "ContentStatement" || !r && s.rightStripped)) {
    var n = s.value;
    s.value = s.value.replace(r ? /^\s+/ : /^[ \t]*\r?\n?/, ""), s.rightStripped = s.value !== n;
  }
}
function lt(e5, t, r) {
  var s = e5[t == null ? e5.length - 1 : t - 1];
  if (!(!s || s.type !== "ContentStatement" || !r && s.leftStripped)) {
    var n = s.value;
    return s.value = s.value.replace(r ? /\s+$/ : /[ \t]+$/, ""), s.leftStripped = s.value !== n, s.leftStripped;
  }
}
var ks = Q;
var ne = {};
Fe(ne, { SourceLocation: () => ar, id: () => Hn, prepareBlock: () => Kn, prepareMustache: () => Yn, preparePartialBlock: () => jn, preparePath: () => zn, prepareProgram: () => Wn, prepareRawBlock: () => Gn, stripComment: () => Mn, stripFlags: () => Un });
function ir(e5, t) {
  if (t = t.path ? t.path.original : t, e5.path.original !== t) {
    var r = { loc: e5.path.loc };
    throw new ot(e5.path.original + " doesn't match " + t, r);
  }
}
function ar(e5, t) {
  this.source = e5, this.start = { line: t.first_line, column: t.first_column }, this.end = { line: t.last_line, column: t.last_column };
}
function Hn(e5) {
  return /^\[.*\]$/.test(e5) ? e5.substring(1, e5.length - 1) : e5;
}
function Un(e5, t) {
  return { open: e5.charAt(2) === "~", close: t.charAt(t.length - 3) === "~" };
}
function Mn(e5) {
  return e5.replace(/^\{\{~?!-?-?/, "").replace(/-?-?~?\}\}$/, "");
}
function zn(e5, t, r) {
  r = this.locInfo(r);
  for (var s = e5 ? "@" : "", n = [], i = 0, a = 0, o = t.length; a < o; a++) {
    var c = t[a].part, h = t[a].original !== c;
    if (s += (t[a].separator || "") + c, !h && (c === ".." || c === "." || c === "this")) {
      if (n.length > 0) throw new ot("Invalid path: " + s, { loc: r });
      c === ".." && i++;
    } else n.push(c);
  }
  return { type: "PathExpression", data: e5, depth: i, parts: n, original: s, loc: r };
}
function Yn(e5, t, r, s, n, i) {
  var a = s.charAt(3) || s.charAt(2), o = a !== "{" && a !== "&", c = /\*/.test(s);
  return { type: c ? "Decorator" : "MustacheStatement", path: e5, params: t, hash: r, escaped: o, strip: n, loc: this.locInfo(i) };
}
function Gn(e5, t, r, s) {
  ir(e5, r), s = this.locInfo(s);
  var n = { type: "Program", body: t, strip: {}, loc: s };
  return { type: "BlockStatement", path: e5.path, params: e5.params, hash: e5.hash, program: n, openStrip: {}, inverseStrip: {}, closeStrip: {}, loc: s };
}
function Kn(e5, t, r, s, n, i) {
  s && s.path && ir(e5, s);
  var a = /\*/.test(e5.open);
  t.blockParams = e5.blockParams;
  var o, c;
  if (r) {
    if (a) throw new ot("Unexpected inverse block on decorator", r);
    r.chain && (r.program.body[0].closeStrip = s.strip), c = r.strip, o = r.program;
  }
  return n && (n = o, o = t, t = n), { type: a ? "DecoratorBlock" : "BlockStatement", path: e5.path, params: e5.params, hash: e5.hash, program: t, inverse: o, openStrip: e5.strip, inverseStrip: c, closeStrip: s && s.strip, loc: this.locInfo(i) };
}
function Wn(e5, t) {
  if (!t && e5.length) {
    var r = e5[0].loc, s = e5[e5.length - 1].loc;
    r && s && (t = { source: r.source, start: { line: r.start.line, column: r.start.column }, end: { line: s.end.line, column: s.end.column } });
  }
  return { type: "Program", body: e5, strip: {}, loc: t };
}
function jn(e5, t, r, s) {
  return ir(e5, r), { type: "PartialBlockStatement", name: e5.path, params: e5.params, hash: e5.hash, program: t, openStrip: e5.strip, closeStrip: r && r.strip, loc: this.locInfo(s) };
}
var Ss = {};
for (we in ne) Object.prototype.hasOwnProperty.call(ne, we) && (Ss[we] = ne[we]);
var we;
function Te(e5, t) {
  if (e5.type === "Program") return e5;
  Se.yy = Ss, Se.yy.locInfo = function(s) {
    return new ar(t && t.srcName, s);
  };
  var r = Se.parse(e5);
  return r;
}
function or(e5, t) {
  var r = Te(e5, t), s = new ks(t);
  return s.accept(r);
}
var Es = { Aacute: "Á", aacute: "á", Abreve: "Ă", abreve: "ă", ac: "∾", acd: "∿", acE: "∾̳", Acirc: "Â", acirc: "â", acute: "´", Acy: "А", acy: "а", AElig: "Æ", aelig: "æ", af: "⁡", Afr: "𝔄", afr: "𝔞", Agrave: "À", agrave: "à", alefsym: "ℵ", aleph: "ℵ", Alpha: "Α", alpha: "α", Amacr: "Ā", amacr: "ā", amalg: "⨿", amp: "&", AMP: "&", andand: "⩕", And: "⩓", and: "∧", andd: "⩜", andslope: "⩘", andv: "⩚", ang: "∠", ange: "⦤", angle: "∠", angmsdaa: "⦨", angmsdab: "⦩", angmsdac: "⦪", angmsdad: "⦫", angmsdae: "⦬", angmsdaf: "⦭", angmsdag: "⦮", angmsdah: "⦯", angmsd: "∡", angrt: "∟", angrtvb: "⊾", angrtvbd: "⦝", angsph: "∢", angst: "Å", angzarr: "⍼", Aogon: "Ą", aogon: "ą", Aopf: "𝔸", aopf: "𝕒", apacir: "⩯", ap: "≈", apE: "⩰", ape: "≊", apid: "≋", apos: "'", ApplyFunction: "⁡", approx: "≈", approxeq: "≊", Aring: "Å", aring: "å", Ascr: "𝒜", ascr: "𝒶", Assign: "≔", ast: "*", asymp: "≈", asympeq: "≍", Atilde: "Ã", atilde: "ã", Auml: "Ä", auml: "ä", awconint: "∳", awint: "⨑", backcong: "≌", backepsilon: "϶", backprime: "‵", backsim: "∽", backsimeq: "⋍", Backslash: "∖", Barv: "⫧", barvee: "⊽", barwed: "⌅", Barwed: "⌆", barwedge: "⌅", bbrk: "⎵", bbrktbrk: "⎶", bcong: "≌", Bcy: "Б", bcy: "б", bdquo: "„", becaus: "∵", because: "∵", Because: "∵", bemptyv: "⦰", bepsi: "϶", bernou: "ℬ", Bernoullis: "ℬ", Beta: "Β", beta: "β", beth: "ℶ", between: "≬", Bfr: "𝔅", bfr: "𝔟", bigcap: "⋂", bigcirc: "◯", bigcup: "⋃", bigodot: "⨀", bigoplus: "⨁", bigotimes: "⨂", bigsqcup: "⨆", bigstar: "★", bigtriangledown: "▽", bigtriangleup: "△", biguplus: "⨄", bigvee: "⋁", bigwedge: "⋀", bkarow: "⤍", blacklozenge: "⧫", blacksquare: "▪", blacktriangle: "▴", blacktriangledown: "▾", blacktriangleleft: "◂", blacktriangleright: "▸", blank: "␣", blk12: "▒", blk14: "░", blk34: "▓", block: "█", bne: "=⃥", bnequiv: "≡⃥", bNot: "⫭", bnot: "⌐", Bopf: "𝔹", bopf: "𝕓", bot: "⊥", bottom: "⊥", bowtie: "⋈", boxbox: "⧉", boxdl: "┐", boxdL: "╕", boxDl: "╖", boxDL: "╗", boxdr: "┌", boxdR: "╒", boxDr: "╓", boxDR: "╔", boxh: "─", boxH: "═", boxhd: "┬", boxHd: "╤", boxhD: "╥", boxHD: "╦", boxhu: "┴", boxHu: "╧", boxhU: "╨", boxHU: "╩", boxminus: "⊟", boxplus: "⊞", boxtimes: "⊠", boxul: "┘", boxuL: "╛", boxUl: "╜", boxUL: "╝", boxur: "└", boxuR: "╘", boxUr: "╙", boxUR: "╚", boxv: "│", boxV: "║", boxvh: "┼", boxvH: "╪", boxVh: "╫", boxVH: "╬", boxvl: "┤", boxvL: "╡", boxVl: "╢", boxVL: "╣", boxvr: "├", boxvR: "╞", boxVr: "╟", boxVR: "╠", bprime: "‵", breve: "˘", Breve: "˘", brvbar: "¦", bscr: "𝒷", Bscr: "ℬ", bsemi: "⁏", bsim: "∽", bsime: "⋍", bsolb: "⧅", bsol: "\\", bsolhsub: "⟈", bull: "•", bullet: "•", bump: "≎", bumpE: "⪮", bumpe: "≏", Bumpeq: "≎", bumpeq: "≏", Cacute: "Ć", cacute: "ć", capand: "⩄", capbrcup: "⩉", capcap: "⩋", cap: "∩", Cap: "⋒", capcup: "⩇", capdot: "⩀", CapitalDifferentialD: "ⅅ", caps: "∩︀", caret: "⁁", caron: "ˇ", Cayleys: "ℭ", ccaps: "⩍", Ccaron: "Č", ccaron: "č", Ccedil: "Ç", ccedil: "ç", Ccirc: "Ĉ", ccirc: "ĉ", Cconint: "∰", ccups: "⩌", ccupssm: "⩐", Cdot: "Ċ", cdot: "ċ", cedil: "¸", Cedilla: "¸", cemptyv: "⦲", cent: "¢", centerdot: "·", CenterDot: "·", cfr: "𝔠", Cfr: "ℭ", CHcy: "Ч", chcy: "ч", check: "✓", checkmark: "✓", Chi: "Χ", chi: "χ", circ: "ˆ", circeq: "≗", circlearrowleft: "↺", circlearrowright: "↻", circledast: "⊛", circledcirc: "⊚", circleddash: "⊝", CircleDot: "⊙", circledR: "®", circledS: "Ⓢ", CircleMinus: "⊖", CirclePlus: "⊕", CircleTimes: "⊗", cir: "○", cirE: "⧃", cire: "≗", cirfnint: "⨐", cirmid: "⫯", cirscir: "⧂", ClockwiseContourIntegral: "∲", CloseCurlyDoubleQuote: "”", CloseCurlyQuote: "’", clubs: "♣", clubsuit: "♣", colon: ":", Colon: "∷", Colone: "⩴", colone: "≔", coloneq: "≔", comma: ",", commat: "@", comp: "∁", compfn: "∘", complement: "∁", complexes: "ℂ", cong: "≅", congdot: "⩭", Congruent: "≡", conint: "∮", Conint: "∯", ContourIntegral: "∮", copf: "𝕔", Copf: "ℂ", coprod: "∐", Coproduct: "∐", copy: "©", COPY: "©", copysr: "℗", CounterClockwiseContourIntegral: "∳", crarr: "↵", cross: "✗", Cross: "⨯", Cscr: "𝒞", cscr: "𝒸", csub: "⫏", csube: "⫑", csup: "⫐", csupe: "⫒", ctdot: "⋯", cudarrl: "⤸", cudarrr: "⤵", cuepr: "⋞", cuesc: "⋟", cularr: "↶", cularrp: "⤽", cupbrcap: "⩈", cupcap: "⩆", CupCap: "≍", cup: "∪", Cup: "⋓", cupcup: "⩊", cupdot: "⊍", cupor: "⩅", cups: "∪︀", curarr: "↷", curarrm: "⤼", curlyeqprec: "⋞", curlyeqsucc: "⋟", curlyvee: "⋎", curlywedge: "⋏", curren: "¤", curvearrowleft: "↶", curvearrowright: "↷", cuvee: "⋎", cuwed: "⋏", cwconint: "∲", cwint: "∱", cylcty: "⌭", dagger: "†", Dagger: "‡", daleth: "ℸ", darr: "↓", Darr: "↡", dArr: "⇓", dash: "‐", Dashv: "⫤", dashv: "⊣", dbkarow: "⤏", dblac: "˝", Dcaron: "Ď", dcaron: "ď", Dcy: "Д", dcy: "д", ddagger: "‡", ddarr: "⇊", DD: "ⅅ", dd: "ⅆ", DDotrahd: "⤑", ddotseq: "⩷", deg: "°", Del: "∇", Delta: "Δ", delta: "δ", demptyv: "⦱", dfisht: "⥿", Dfr: "𝔇", dfr: "𝔡", dHar: "⥥", dharl: "⇃", dharr: "⇂", DiacriticalAcute: "´", DiacriticalDot: "˙", DiacriticalDoubleAcute: "˝", DiacriticalGrave: "`", DiacriticalTilde: "˜", diam: "⋄", diamond: "⋄", Diamond: "⋄", diamondsuit: "♦", diams: "♦", die: "¨", DifferentialD: "ⅆ", digamma: "ϝ", disin: "⋲", div: "÷", divide: "÷", divideontimes: "⋇", divonx: "⋇", DJcy: "Ђ", djcy: "ђ", dlcorn: "⌞", dlcrop: "⌍", dollar: "$", Dopf: "𝔻", dopf: "𝕕", Dot: "¨", dot: "˙", DotDot: "⃜", doteq: "≐", doteqdot: "≑", DotEqual: "≐", dotminus: "∸", dotplus: "∔", dotsquare: "⊡", doublebarwedge: "⌆", DoubleContourIntegral: "∯", DoubleDot: "¨", DoubleDownArrow: "⇓", DoubleLeftArrow: "⇐", DoubleLeftRightArrow: "⇔", DoubleLeftTee: "⫤", DoubleLongLeftArrow: "⟸", DoubleLongLeftRightArrow: "⟺", DoubleLongRightArrow: "⟹", DoubleRightArrow: "⇒", DoubleRightTee: "⊨", DoubleUpArrow: "⇑", DoubleUpDownArrow: "⇕", DoubleVerticalBar: "∥", DownArrowBar: "⤓", downarrow: "↓", DownArrow: "↓", Downarrow: "⇓", DownArrowUpArrow: "⇵", DownBreve: "̑", downdownarrows: "⇊", downharpoonleft: "⇃", downharpoonright: "⇂", DownLeftRightVector: "⥐", DownLeftTeeVector: "⥞", DownLeftVectorBar: "⥖", DownLeftVector: "↽", DownRightTeeVector: "⥟", DownRightVectorBar: "⥗", DownRightVector: "⇁", DownTeeArrow: "↧", DownTee: "⊤", drbkarow: "⤐", drcorn: "⌟", drcrop: "⌌", Dscr: "𝒟", dscr: "𝒹", DScy: "Ѕ", dscy: "ѕ", dsol: "⧶", Dstrok: "Đ", dstrok: "đ", dtdot: "⋱", dtri: "▿", dtrif: "▾", duarr: "⇵", duhar: "⥯", dwangle: "⦦", DZcy: "Џ", dzcy: "џ", dzigrarr: "⟿", Eacute: "É", eacute: "é", easter: "⩮", Ecaron: "Ě", ecaron: "ě", Ecirc: "Ê", ecirc: "ê", ecir: "≖", ecolon: "≕", Ecy: "Э", ecy: "э", eDDot: "⩷", Edot: "Ė", edot: "ė", eDot: "≑", ee: "ⅇ", efDot: "≒", Efr: "𝔈", efr: "𝔢", eg: "⪚", Egrave: "È", egrave: "è", egs: "⪖", egsdot: "⪘", el: "⪙", Element: "∈", elinters: "⏧", ell: "ℓ", els: "⪕", elsdot: "⪗", Emacr: "Ē", emacr: "ē", empty: "∅", emptyset: "∅", EmptySmallSquare: "◻", emptyv: "∅", EmptyVerySmallSquare: "▫", emsp13: " ", emsp14: " ", emsp: " ", ENG: "Ŋ", eng: "ŋ", ensp: " ", Eogon: "Ę", eogon: "ę", Eopf: "𝔼", eopf: "𝕖", epar: "⋕", eparsl: "⧣", eplus: "⩱", epsi: "ε", Epsilon: "Ε", epsilon: "ε", epsiv: "ϵ", eqcirc: "≖", eqcolon: "≕", eqsim: "≂", eqslantgtr: "⪖", eqslantless: "⪕", Equal: "⩵", equals: "=", EqualTilde: "≂", equest: "≟", Equilibrium: "⇌", equiv: "≡", equivDD: "⩸", eqvparsl: "⧥", erarr: "⥱", erDot: "≓", escr: "ℯ", Escr: "ℰ", esdot: "≐", Esim: "⩳", esim: "≂", Eta: "Η", eta: "η", ETH: "Ð", eth: "ð", Euml: "Ë", euml: "ë", euro: "€", excl: "!", exist: "∃", Exists: "∃", expectation: "ℰ", exponentiale: "ⅇ", ExponentialE: "ⅇ", fallingdotseq: "≒", Fcy: "Ф", fcy: "ф", female: "♀", ffilig: "ﬃ", fflig: "ﬀ", ffllig: "ﬄ", Ffr: "𝔉", ffr: "𝔣", filig: "ﬁ", FilledSmallSquare: "◼", FilledVerySmallSquare: "▪", fjlig: "fj", flat: "♭", fllig: "ﬂ", fltns: "▱", fnof: "ƒ", Fopf: "𝔽", fopf: "𝕗", forall: "∀", ForAll: "∀", fork: "⋔", forkv: "⫙", Fouriertrf: "ℱ", fpartint: "⨍", frac12: "½", frac13: "⅓", frac14: "¼", frac15: "⅕", frac16: "⅙", frac18: "⅛", frac23: "⅔", frac25: "⅖", frac34: "¾", frac35: "⅗", frac38: "⅜", frac45: "⅘", frac56: "⅚", frac58: "⅝", frac78: "⅞", frasl: "⁄", frown: "⌢", fscr: "𝒻", Fscr: "ℱ", gacute: "ǵ", Gamma: "Γ", gamma: "γ", Gammad: "Ϝ", gammad: "ϝ", gap: "⪆", Gbreve: "Ğ", gbreve: "ğ", Gcedil: "Ģ", Gcirc: "Ĝ", gcirc: "ĝ", Gcy: "Г", gcy: "г", Gdot: "Ġ", gdot: "ġ", ge: "≥", gE: "≧", gEl: "⪌", gel: "⋛", geq: "≥", geqq: "≧", geqslant: "⩾", gescc: "⪩", ges: "⩾", gesdot: "⪀", gesdoto: "⪂", gesdotol: "⪄", gesl: "⋛︀", gesles: "⪔", Gfr: "𝔊", gfr: "𝔤", gg: "≫", Gg: "⋙", ggg: "⋙", gimel: "ℷ", GJcy: "Ѓ", gjcy: "ѓ", gla: "⪥", gl: "≷", glE: "⪒", glj: "⪤", gnap: "⪊", gnapprox: "⪊", gne: "⪈", gnE: "≩", gneq: "⪈", gneqq: "≩", gnsim: "⋧", Gopf: "𝔾", gopf: "𝕘", grave: "`", GreaterEqual: "≥", GreaterEqualLess: "⋛", GreaterFullEqual: "≧", GreaterGreater: "⪢", GreaterLess: "≷", GreaterSlantEqual: "⩾", GreaterTilde: "≳", Gscr: "𝒢", gscr: "ℊ", gsim: "≳", gsime: "⪎", gsiml: "⪐", gtcc: "⪧", gtcir: "⩺", gt: ">", GT: ">", Gt: "≫", gtdot: "⋗", gtlPar: "⦕", gtquest: "⩼", gtrapprox: "⪆", gtrarr: "⥸", gtrdot: "⋗", gtreqless: "⋛", gtreqqless: "⪌", gtrless: "≷", gtrsim: "≳", gvertneqq: "≩︀", gvnE: "≩︀", Hacek: "ˇ", hairsp: " ", half: "½", hamilt: "ℋ", HARDcy: "Ъ", hardcy: "ъ", harrcir: "⥈", harr: "↔", hArr: "⇔", harrw: "↭", Hat: "^", hbar: "ℏ", Hcirc: "Ĥ", hcirc: "ĥ", hearts: "♥", heartsuit: "♥", hellip: "…", hercon: "⊹", hfr: "𝔥", Hfr: "ℌ", HilbertSpace: "ℋ", hksearow: "⤥", hkswarow: "⤦", hoarr: "⇿", homtht: "∻", hookleftarrow: "↩", hookrightarrow: "↪", hopf: "𝕙", Hopf: "ℍ", horbar: "―", HorizontalLine: "─", hscr: "𝒽", Hscr: "ℋ", hslash: "ℏ", Hstrok: "Ħ", hstrok: "ħ", HumpDownHump: "≎", HumpEqual: "≏", hybull: "⁃", hyphen: "‐", Iacute: "Í", iacute: "í", ic: "⁣", Icirc: "Î", icirc: "î", Icy: "И", icy: "и", Idot: "İ", IEcy: "Е", iecy: "е", iexcl: "¡", iff: "⇔", ifr: "𝔦", Ifr: "ℑ", Igrave: "Ì", igrave: "ì", ii: "ⅈ", iiiint: "⨌", iiint: "∭", iinfin: "⧜", iiota: "℩", IJlig: "Ĳ", ijlig: "ĳ", Imacr: "Ī", imacr: "ī", image: "ℑ", ImaginaryI: "ⅈ", imagline: "ℐ", imagpart: "ℑ", imath: "ı", Im: "ℑ", imof: "⊷", imped: "Ƶ", Implies: "⇒", incare: "℅", in: "∈", infin: "∞", infintie: "⧝", inodot: "ı", intcal: "⊺", int: "∫", Int: "∬", integers: "ℤ", Integral: "∫", intercal: "⊺", Intersection: "⋂", intlarhk: "⨗", intprod: "⨼", InvisibleComma: "⁣", InvisibleTimes: "⁢", IOcy: "Ё", iocy: "ё", Iogon: "Į", iogon: "į", Iopf: "𝕀", iopf: "𝕚", Iota: "Ι", iota: "ι", iprod: "⨼", iquest: "¿", iscr: "𝒾", Iscr: "ℐ", isin: "∈", isindot: "⋵", isinE: "⋹", isins: "⋴", isinsv: "⋳", isinv: "∈", it: "⁢", Itilde: "Ĩ", itilde: "ĩ", Iukcy: "І", iukcy: "і", Iuml: "Ï", iuml: "ï", Jcirc: "Ĵ", jcirc: "ĵ", Jcy: "Й", jcy: "й", Jfr: "𝔍", jfr: "𝔧", jmath: "ȷ", Jopf: "𝕁", jopf: "𝕛", Jscr: "𝒥", jscr: "𝒿", Jsercy: "Ј", jsercy: "ј", Jukcy: "Є", jukcy: "є", Kappa: "Κ", kappa: "κ", kappav: "ϰ", Kcedil: "Ķ", kcedil: "ķ", Kcy: "К", kcy: "к", Kfr: "𝔎", kfr: "𝔨", kgreen: "ĸ", KHcy: "Х", khcy: "х", KJcy: "Ќ", kjcy: "ќ", Kopf: "𝕂", kopf: "𝕜", Kscr: "𝒦", kscr: "𝓀", lAarr: "⇚", Lacute: "Ĺ", lacute: "ĺ", laemptyv: "⦴", lagran: "ℒ", Lambda: "Λ", lambda: "λ", lang: "⟨", Lang: "⟪", langd: "⦑", langle: "⟨", lap: "⪅", Laplacetrf: "ℒ", laquo: "«", larrb: "⇤", larrbfs: "⤟", larr: "←", Larr: "↞", lArr: "⇐", larrfs: "⤝", larrhk: "↩", larrlp: "↫", larrpl: "⤹", larrsim: "⥳", larrtl: "↢", latail: "⤙", lAtail: "⤛", lat: "⪫", late: "⪭", lates: "⪭︀", lbarr: "⤌", lBarr: "⤎", lbbrk: "❲", lbrace: "{", lbrack: "[", lbrke: "⦋", lbrksld: "⦏", lbrkslu: "⦍", Lcaron: "Ľ", lcaron: "ľ", Lcedil: "Ļ", lcedil: "ļ", lceil: "⌈", lcub: "{", Lcy: "Л", lcy: "л", ldca: "⤶", ldquo: "“", ldquor: "„", ldrdhar: "⥧", ldrushar: "⥋", ldsh: "↲", le: "≤", lE: "≦", LeftAngleBracket: "⟨", LeftArrowBar: "⇤", leftarrow: "←", LeftArrow: "←", Leftarrow: "⇐", LeftArrowRightArrow: "⇆", leftarrowtail: "↢", LeftCeiling: "⌈", LeftDoubleBracket: "⟦", LeftDownTeeVector: "⥡", LeftDownVectorBar: "⥙", LeftDownVector: "⇃", LeftFloor: "⌊", leftharpoondown: "↽", leftharpoonup: "↼", leftleftarrows: "⇇", leftrightarrow: "↔", LeftRightArrow: "↔", Leftrightarrow: "⇔", leftrightarrows: "⇆", leftrightharpoons: "⇋", leftrightsquigarrow: "↭", LeftRightVector: "⥎", LeftTeeArrow: "↤", LeftTee: "⊣", LeftTeeVector: "⥚", leftthreetimes: "⋋", LeftTriangleBar: "⧏", LeftTriangle: "⊲", LeftTriangleEqual: "⊴", LeftUpDownVector: "⥑", LeftUpTeeVector: "⥠", LeftUpVectorBar: "⥘", LeftUpVector: "↿", LeftVectorBar: "⥒", LeftVector: "↼", lEg: "⪋", leg: "⋚", leq: "≤", leqq: "≦", leqslant: "⩽", lescc: "⪨", les: "⩽", lesdot: "⩿", lesdoto: "⪁", lesdotor: "⪃", lesg: "⋚︀", lesges: "⪓", lessapprox: "⪅", lessdot: "⋖", lesseqgtr: "⋚", lesseqqgtr: "⪋", LessEqualGreater: "⋚", LessFullEqual: "≦", LessGreater: "≶", lessgtr: "≶", LessLess: "⪡", lesssim: "≲", LessSlantEqual: "⩽", LessTilde: "≲", lfisht: "⥼", lfloor: "⌊", Lfr: "𝔏", lfr: "𝔩", lg: "≶", lgE: "⪑", lHar: "⥢", lhard: "↽", lharu: "↼", lharul: "⥪", lhblk: "▄", LJcy: "Љ", ljcy: "љ", llarr: "⇇", ll: "≪", Ll: "⋘", llcorner: "⌞", Lleftarrow: "⇚", llhard: "⥫", lltri: "◺", Lmidot: "Ŀ", lmidot: "ŀ", lmoustache: "⎰", lmoust: "⎰", lnap: "⪉", lnapprox: "⪉", lne: "⪇", lnE: "≨", lneq: "⪇", lneqq: "≨", lnsim: "⋦", loang: "⟬", loarr: "⇽", lobrk: "⟦", longleftarrow: "⟵", LongLeftArrow: "⟵", Longleftarrow: "⟸", longleftrightarrow: "⟷", LongLeftRightArrow: "⟷", Longleftrightarrow: "⟺", longmapsto: "⟼", longrightarrow: "⟶", LongRightArrow: "⟶", Longrightarrow: "⟹", looparrowleft: "↫", looparrowright: "↬", lopar: "⦅", Lopf: "𝕃", lopf: "𝕝", loplus: "⨭", lotimes: "⨴", lowast: "∗", lowbar: "_", LowerLeftArrow: "↙", LowerRightArrow: "↘", loz: "◊", lozenge: "◊", lozf: "⧫", lpar: "(", lparlt: "⦓", lrarr: "⇆", lrcorner: "⌟", lrhar: "⇋", lrhard: "⥭", lrm: "‎", lrtri: "⊿", lsaquo: "‹", lscr: "𝓁", Lscr: "ℒ", lsh: "↰", Lsh: "↰", lsim: "≲", lsime: "⪍", lsimg: "⪏", lsqb: "[", lsquo: "‘", lsquor: "‚", Lstrok: "Ł", lstrok: "ł", ltcc: "⪦", ltcir: "⩹", lt: "<", LT: "<", Lt: "≪", ltdot: "⋖", lthree: "⋋", ltimes: "⋉", ltlarr: "⥶", ltquest: "⩻", ltri: "◃", ltrie: "⊴", ltrif: "◂", ltrPar: "⦖", lurdshar: "⥊", luruhar: "⥦", lvertneqq: "≨︀", lvnE: "≨︀", macr: "¯", male: "♂", malt: "✠", maltese: "✠", Map: "⤅", map: "↦", mapsto: "↦", mapstodown: "↧", mapstoleft: "↤", mapstoup: "↥", marker: "▮", mcomma: "⨩", Mcy: "М", mcy: "м", mdash: "—", mDDot: "∺", measuredangle: "∡", MediumSpace: " ", Mellintrf: "ℳ", Mfr: "𝔐", mfr: "𝔪", mho: "℧", micro: "µ", midast: "*", midcir: "⫰", mid: "∣", middot: "·", minusb: "⊟", minus: "−", minusd: "∸", minusdu: "⨪", MinusPlus: "∓", mlcp: "⫛", mldr: "…", mnplus: "∓", models: "⊧", Mopf: "𝕄", mopf: "𝕞", mp: "∓", mscr: "𝓂", Mscr: "ℳ", mstpos: "∾", Mu: "Μ", mu: "μ", multimap: "⊸", mumap: "⊸", nabla: "∇", Nacute: "Ń", nacute: "ń", nang: "∠⃒", nap: "≉", napE: "⩰̸", napid: "≋̸", napos: "ŉ", napprox: "≉", natural: "♮", naturals: "ℕ", natur: "♮", nbsp: " ", nbump: "≎̸", nbumpe: "≏̸", ncap: "⩃", Ncaron: "Ň", ncaron: "ň", Ncedil: "Ņ", ncedil: "ņ", ncong: "≇", ncongdot: "⩭̸", ncup: "⩂", Ncy: "Н", ncy: "н", ndash: "–", nearhk: "⤤", nearr: "↗", neArr: "⇗", nearrow: "↗", ne: "≠", nedot: "≐̸", NegativeMediumSpace: "​", NegativeThickSpace: "​", NegativeThinSpace: "​", NegativeVeryThinSpace: "​", nequiv: "≢", nesear: "⤨", nesim: "≂̸", NestedGreaterGreater: "≫", NestedLessLess: "≪", NewLine: `
`, nexist: "∄", nexists: "∄", Nfr: "𝔑", nfr: "𝔫", ngE: "≧̸", nge: "≱", ngeq: "≱", ngeqq: "≧̸", ngeqslant: "⩾̸", nges: "⩾̸", nGg: "⋙̸", ngsim: "≵", nGt: "≫⃒", ngt: "≯", ngtr: "≯", nGtv: "≫̸", nharr: "↮", nhArr: "⇎", nhpar: "⫲", ni: "∋", nis: "⋼", nisd: "⋺", niv: "∋", NJcy: "Њ", njcy: "њ", nlarr: "↚", nlArr: "⇍", nldr: "‥", nlE: "≦̸", nle: "≰", nleftarrow: "↚", nLeftarrow: "⇍", nleftrightarrow: "↮", nLeftrightarrow: "⇎", nleq: "≰", nleqq: "≦̸", nleqslant: "⩽̸", nles: "⩽̸", nless: "≮", nLl: "⋘̸", nlsim: "≴", nLt: "≪⃒", nlt: "≮", nltri: "⋪", nltrie: "⋬", nLtv: "≪̸", nmid: "∤", NoBreak: "⁠", NonBreakingSpace: " ", nopf: "𝕟", Nopf: "ℕ", Not: "⫬", not: "¬", NotCongruent: "≢", NotCupCap: "≭", NotDoubleVerticalBar: "∦", NotElement: "∉", NotEqual: "≠", NotEqualTilde: "≂̸", NotExists: "∄", NotGreater: "≯", NotGreaterEqual: "≱", NotGreaterFullEqual: "≧̸", NotGreaterGreater: "≫̸", NotGreaterLess: "≹", NotGreaterSlantEqual: "⩾̸", NotGreaterTilde: "≵", NotHumpDownHump: "≎̸", NotHumpEqual: "≏̸", notin: "∉", notindot: "⋵̸", notinE: "⋹̸", notinva: "∉", notinvb: "⋷", notinvc: "⋶", NotLeftTriangleBar: "⧏̸", NotLeftTriangle: "⋪", NotLeftTriangleEqual: "⋬", NotLess: "≮", NotLessEqual: "≰", NotLessGreater: "≸", NotLessLess: "≪̸", NotLessSlantEqual: "⩽̸", NotLessTilde: "≴", NotNestedGreaterGreater: "⪢̸", NotNestedLessLess: "⪡̸", notni: "∌", notniva: "∌", notnivb: "⋾", notnivc: "⋽", NotPrecedes: "⊀", NotPrecedesEqual: "⪯̸", NotPrecedesSlantEqual: "⋠", NotReverseElement: "∌", NotRightTriangleBar: "⧐̸", NotRightTriangle: "⋫", NotRightTriangleEqual: "⋭", NotSquareSubset: "⊏̸", NotSquareSubsetEqual: "⋢", NotSquareSuperset: "⊐̸", NotSquareSupersetEqual: "⋣", NotSubset: "⊂⃒", NotSubsetEqual: "⊈", NotSucceeds: "⊁", NotSucceedsEqual: "⪰̸", NotSucceedsSlantEqual: "⋡", NotSucceedsTilde: "≿̸", NotSuperset: "⊃⃒", NotSupersetEqual: "⊉", NotTilde: "≁", NotTildeEqual: "≄", NotTildeFullEqual: "≇", NotTildeTilde: "≉", NotVerticalBar: "∤", nparallel: "∦", npar: "∦", nparsl: "⫽⃥", npart: "∂̸", npolint: "⨔", npr: "⊀", nprcue: "⋠", nprec: "⊀", npreceq: "⪯̸", npre: "⪯̸", nrarrc: "⤳̸", nrarr: "↛", nrArr: "⇏", nrarrw: "↝̸", nrightarrow: "↛", nRightarrow: "⇏", nrtri: "⋫", nrtrie: "⋭", nsc: "⊁", nsccue: "⋡", nsce: "⪰̸", Nscr: "𝒩", nscr: "𝓃", nshortmid: "∤", nshortparallel: "∦", nsim: "≁", nsime: "≄", nsimeq: "≄", nsmid: "∤", nspar: "∦", nsqsube: "⋢", nsqsupe: "⋣", nsub: "⊄", nsubE: "⫅̸", nsube: "⊈", nsubset: "⊂⃒", nsubseteq: "⊈", nsubseteqq: "⫅̸", nsucc: "⊁", nsucceq: "⪰̸", nsup: "⊅", nsupE: "⫆̸", nsupe: "⊉", nsupset: "⊃⃒", nsupseteq: "⊉", nsupseteqq: "⫆̸", ntgl: "≹", Ntilde: "Ñ", ntilde: "ñ", ntlg: "≸", ntriangleleft: "⋪", ntrianglelefteq: "⋬", ntriangleright: "⋫", ntrianglerighteq: "⋭", Nu: "Ν", nu: "ν", num: "#", numero: "№", numsp: " ", nvap: "≍⃒", nvdash: "⊬", nvDash: "⊭", nVdash: "⊮", nVDash: "⊯", nvge: "≥⃒", nvgt: ">⃒", nvHarr: "⤄", nvinfin: "⧞", nvlArr: "⤂", nvle: "≤⃒", nvlt: "<⃒", nvltrie: "⊴⃒", nvrArr: "⤃", nvrtrie: "⊵⃒", nvsim: "∼⃒", nwarhk: "⤣", nwarr: "↖", nwArr: "⇖", nwarrow: "↖", nwnear: "⤧", Oacute: "Ó", oacute: "ó", oast: "⊛", Ocirc: "Ô", ocirc: "ô", ocir: "⊚", Ocy: "О", ocy: "о", odash: "⊝", Odblac: "Ő", odblac: "ő", odiv: "⨸", odot: "⊙", odsold: "⦼", OElig: "Œ", oelig: "œ", ofcir: "⦿", Ofr: "𝔒", ofr: "𝔬", ogon: "˛", Ograve: "Ò", ograve: "ò", ogt: "⧁", ohbar: "⦵", ohm: "Ω", oint: "∮", olarr: "↺", olcir: "⦾", olcross: "⦻", oline: "‾", olt: "⧀", Omacr: "Ō", omacr: "ō", Omega: "Ω", omega: "ω", Omicron: "Ο", omicron: "ο", omid: "⦶", ominus: "⊖", Oopf: "𝕆", oopf: "𝕠", opar: "⦷", OpenCurlyDoubleQuote: "“", OpenCurlyQuote: "‘", operp: "⦹", oplus: "⊕", orarr: "↻", Or: "⩔", or: "∨", ord: "⩝", order: "ℴ", orderof: "ℴ", ordf: "ª", ordm: "º", origof: "⊶", oror: "⩖", orslope: "⩗", orv: "⩛", oS: "Ⓢ", Oscr: "𝒪", oscr: "ℴ", Oslash: "Ø", oslash: "ø", osol: "⊘", Otilde: "Õ", otilde: "õ", otimesas: "⨶", Otimes: "⨷", otimes: "⊗", Ouml: "Ö", ouml: "ö", ovbar: "⌽", OverBar: "‾", OverBrace: "⏞", OverBracket: "⎴", OverParenthesis: "⏜", para: "¶", parallel: "∥", par: "∥", parsim: "⫳", parsl: "⫽", part: "∂", PartialD: "∂", Pcy: "П", pcy: "п", percnt: "%", period: ".", permil: "‰", perp: "⊥", pertenk: "‱", Pfr: "𝔓", pfr: "𝔭", Phi: "Φ", phi: "φ", phiv: "ϕ", phmmat: "ℳ", phone: "☎", Pi: "Π", pi: "π", pitchfork: "⋔", piv: "ϖ", planck: "ℏ", planckh: "ℎ", plankv: "ℏ", plusacir: "⨣", plusb: "⊞", pluscir: "⨢", plus: "+", plusdo: "∔", plusdu: "⨥", pluse: "⩲", PlusMinus: "±", plusmn: "±", plussim: "⨦", plustwo: "⨧", pm: "±", Poincareplane: "ℌ", pointint: "⨕", popf: "𝕡", Popf: "ℙ", pound: "£", prap: "⪷", Pr: "⪻", pr: "≺", prcue: "≼", precapprox: "⪷", prec: "≺", preccurlyeq: "≼", Precedes: "≺", PrecedesEqual: "⪯", PrecedesSlantEqual: "≼", PrecedesTilde: "≾", preceq: "⪯", precnapprox: "⪹", precneqq: "⪵", precnsim: "⋨", pre: "⪯", prE: "⪳", precsim: "≾", prime: "′", Prime: "″", primes: "ℙ", prnap: "⪹", prnE: "⪵", prnsim: "⋨", prod: "∏", Product: "∏", profalar: "⌮", profline: "⌒", profsurf: "⌓", prop: "∝", Proportional: "∝", Proportion: "∷", propto: "∝", prsim: "≾", prurel: "⊰", Pscr: "𝒫", pscr: "𝓅", Psi: "Ψ", psi: "ψ", puncsp: " ", Qfr: "𝔔", qfr: "𝔮", qint: "⨌", qopf: "𝕢", Qopf: "ℚ", qprime: "⁗", Qscr: "𝒬", qscr: "𝓆", quaternions: "ℍ", quatint: "⨖", quest: "?", questeq: "≟", quot: '"', QUOT: '"', rAarr: "⇛", race: "∽̱", Racute: "Ŕ", racute: "ŕ", radic: "√", raemptyv: "⦳", rang: "⟩", Rang: "⟫", rangd: "⦒", range: "⦥", rangle: "⟩", raquo: "»", rarrap: "⥵", rarrb: "⇥", rarrbfs: "⤠", rarrc: "⤳", rarr: "→", Rarr: "↠", rArr: "⇒", rarrfs: "⤞", rarrhk: "↪", rarrlp: "↬", rarrpl: "⥅", rarrsim: "⥴", Rarrtl: "⤖", rarrtl: "↣", rarrw: "↝", ratail: "⤚", rAtail: "⤜", ratio: "∶", rationals: "ℚ", rbarr: "⤍", rBarr: "⤏", RBarr: "⤐", rbbrk: "❳", rbrace: "}", rbrack: "]", rbrke: "⦌", rbrksld: "⦎", rbrkslu: "⦐", Rcaron: "Ř", rcaron: "ř", Rcedil: "Ŗ", rcedil: "ŗ", rceil: "⌉", rcub: "}", Rcy: "Р", rcy: "р", rdca: "⤷", rdldhar: "⥩", rdquo: "”", rdquor: "”", rdsh: "↳", real: "ℜ", realine: "ℛ", realpart: "ℜ", reals: "ℝ", Re: "ℜ", rect: "▭", reg: "®", REG: "®", ReverseElement: "∋", ReverseEquilibrium: "⇋", ReverseUpEquilibrium: "⥯", rfisht: "⥽", rfloor: "⌋", rfr: "𝔯", Rfr: "ℜ", rHar: "⥤", rhard: "⇁", rharu: "⇀", rharul: "⥬", Rho: "Ρ", rho: "ρ", rhov: "ϱ", RightAngleBracket: "⟩", RightArrowBar: "⇥", rightarrow: "→", RightArrow: "→", Rightarrow: "⇒", RightArrowLeftArrow: "⇄", rightarrowtail: "↣", RightCeiling: "⌉", RightDoubleBracket: "⟧", RightDownTeeVector: "⥝", RightDownVectorBar: "⥕", RightDownVector: "⇂", RightFloor: "⌋", rightharpoondown: "⇁", rightharpoonup: "⇀", rightleftarrows: "⇄", rightleftharpoons: "⇌", rightrightarrows: "⇉", rightsquigarrow: "↝", RightTeeArrow: "↦", RightTee: "⊢", RightTeeVector: "⥛", rightthreetimes: "⋌", RightTriangleBar: "⧐", RightTriangle: "⊳", RightTriangleEqual: "⊵", RightUpDownVector: "⥏", RightUpTeeVector: "⥜", RightUpVectorBar: "⥔", RightUpVector: "↾", RightVectorBar: "⥓", RightVector: "⇀", ring: "˚", risingdotseq: "≓", rlarr: "⇄", rlhar: "⇌", rlm: "‏", rmoustache: "⎱", rmoust: "⎱", rnmid: "⫮", roang: "⟭", roarr: "⇾", robrk: "⟧", ropar: "⦆", ropf: "𝕣", Ropf: "ℝ", roplus: "⨮", rotimes: "⨵", RoundImplies: "⥰", rpar: ")", rpargt: "⦔", rppolint: "⨒", rrarr: "⇉", Rrightarrow: "⇛", rsaquo: "›", rscr: "𝓇", Rscr: "ℛ", rsh: "↱", Rsh: "↱", rsqb: "]", rsquo: "’", rsquor: "’", rthree: "⋌", rtimes: "⋊", rtri: "▹", rtrie: "⊵", rtrif: "▸", rtriltri: "⧎", RuleDelayed: "⧴", ruluhar: "⥨", rx: "℞", Sacute: "Ś", sacute: "ś", sbquo: "‚", scap: "⪸", Scaron: "Š", scaron: "š", Sc: "⪼", sc: "≻", sccue: "≽", sce: "⪰", scE: "⪴", Scedil: "Ş", scedil: "ş", Scirc: "Ŝ", scirc: "ŝ", scnap: "⪺", scnE: "⪶", scnsim: "⋩", scpolint: "⨓", scsim: "≿", Scy: "С", scy: "с", sdotb: "⊡", sdot: "⋅", sdote: "⩦", searhk: "⤥", searr: "↘", seArr: "⇘", searrow: "↘", sect: "§", semi: ";", seswar: "⤩", setminus: "∖", setmn: "∖", sext: "✶", Sfr: "𝔖", sfr: "𝔰", sfrown: "⌢", sharp: "♯", SHCHcy: "Щ", shchcy: "щ", SHcy: "Ш", shcy: "ш", ShortDownArrow: "↓", ShortLeftArrow: "←", shortmid: "∣", shortparallel: "∥", ShortRightArrow: "→", ShortUpArrow: "↑", shy: "­", Sigma: "Σ", sigma: "σ", sigmaf: "ς", sigmav: "ς", sim: "∼", simdot: "⩪", sime: "≃", simeq: "≃", simg: "⪞", simgE: "⪠", siml: "⪝", simlE: "⪟", simne: "≆", simplus: "⨤", simrarr: "⥲", slarr: "←", SmallCircle: "∘", smallsetminus: "∖", smashp: "⨳", smeparsl: "⧤", smid: "∣", smile: "⌣", smt: "⪪", smte: "⪬", smtes: "⪬︀", SOFTcy: "Ь", softcy: "ь", solbar: "⌿", solb: "⧄", sol: "/", Sopf: "𝕊", sopf: "𝕤", spades: "♠", spadesuit: "♠", spar: "∥", sqcap: "⊓", sqcaps: "⊓︀", sqcup: "⊔", sqcups: "⊔︀", Sqrt: "√", sqsub: "⊏", sqsube: "⊑", sqsubset: "⊏", sqsubseteq: "⊑", sqsup: "⊐", sqsupe: "⊒", sqsupset: "⊐", sqsupseteq: "⊒", square: "□", Square: "□", SquareIntersection: "⊓", SquareSubset: "⊏", SquareSubsetEqual: "⊑", SquareSuperset: "⊐", SquareSupersetEqual: "⊒", SquareUnion: "⊔", squarf: "▪", squ: "□", squf: "▪", srarr: "→", Sscr: "𝒮", sscr: "𝓈", ssetmn: "∖", ssmile: "⌣", sstarf: "⋆", Star: "⋆", star: "☆", starf: "★", straightepsilon: "ϵ", straightphi: "ϕ", strns: "¯", sub: "⊂", Sub: "⋐", subdot: "⪽", subE: "⫅", sube: "⊆", subedot: "⫃", submult: "⫁", subnE: "⫋", subne: "⊊", subplus: "⪿", subrarr: "⥹", subset: "⊂", Subset: "⋐", subseteq: "⊆", subseteqq: "⫅", SubsetEqual: "⊆", subsetneq: "⊊", subsetneqq: "⫋", subsim: "⫇", subsub: "⫕", subsup: "⫓", succapprox: "⪸", succ: "≻", succcurlyeq: "≽", Succeeds: "≻", SucceedsEqual: "⪰", SucceedsSlantEqual: "≽", SucceedsTilde: "≿", succeq: "⪰", succnapprox: "⪺", succneqq: "⪶", succnsim: "⋩", succsim: "≿", SuchThat: "∋", sum: "∑", Sum: "∑", sung: "♪", sup1: "¹", sup2: "²", sup3: "³", sup: "⊃", Sup: "⋑", supdot: "⪾", supdsub: "⫘", supE: "⫆", supe: "⊇", supedot: "⫄", Superset: "⊃", SupersetEqual: "⊇", suphsol: "⟉", suphsub: "⫗", suplarr: "⥻", supmult: "⫂", supnE: "⫌", supne: "⊋", supplus: "⫀", supset: "⊃", Supset: "⋑", supseteq: "⊇", supseteqq: "⫆", supsetneq: "⊋", supsetneqq: "⫌", supsim: "⫈", supsub: "⫔", supsup: "⫖", swarhk: "⤦", swarr: "↙", swArr: "⇙", swarrow: "↙", swnwar: "⤪", szlig: "ß", Tab: "	", target: "⌖", Tau: "Τ", tau: "τ", tbrk: "⎴", Tcaron: "Ť", tcaron: "ť", Tcedil: "Ţ", tcedil: "ţ", Tcy: "Т", tcy: "т", tdot: "⃛", telrec: "⌕", Tfr: "𝔗", tfr: "𝔱", there4: "∴", therefore: "∴", Therefore: "∴", Theta: "Θ", theta: "θ", thetasym: "ϑ", thetav: "ϑ", thickapprox: "≈", thicksim: "∼", ThickSpace: "  ", ThinSpace: " ", thinsp: " ", thkap: "≈", thksim: "∼", THORN: "Þ", thorn: "þ", tilde: "˜", Tilde: "∼", TildeEqual: "≃", TildeFullEqual: "≅", TildeTilde: "≈", timesbar: "⨱", timesb: "⊠", times: "×", timesd: "⨰", tint: "∭", toea: "⤨", topbot: "⌶", topcir: "⫱", top: "⊤", Topf: "𝕋", topf: "𝕥", topfork: "⫚", tosa: "⤩", tprime: "‴", trade: "™", TRADE: "™", triangle: "▵", triangledown: "▿", triangleleft: "◃", trianglelefteq: "⊴", triangleq: "≜", triangleright: "▹", trianglerighteq: "⊵", tridot: "◬", trie: "≜", triminus: "⨺", TripleDot: "⃛", triplus: "⨹", trisb: "⧍", tritime: "⨻", trpezium: "⏢", Tscr: "𝒯", tscr: "𝓉", TScy: "Ц", tscy: "ц", TSHcy: "Ћ", tshcy: "ћ", Tstrok: "Ŧ", tstrok: "ŧ", twixt: "≬", twoheadleftarrow: "↞", twoheadrightarrow: "↠", Uacute: "Ú", uacute: "ú", uarr: "↑", Uarr: "↟", uArr: "⇑", Uarrocir: "⥉", Ubrcy: "Ў", ubrcy: "ў", Ubreve: "Ŭ", ubreve: "ŭ", Ucirc: "Û", ucirc: "û", Ucy: "У", ucy: "у", udarr: "⇅", Udblac: "Ű", udblac: "ű", udhar: "⥮", ufisht: "⥾", Ufr: "𝔘", ufr: "𝔲", Ugrave: "Ù", ugrave: "ù", uHar: "⥣", uharl: "↿", uharr: "↾", uhblk: "▀", ulcorn: "⌜", ulcorner: "⌜", ulcrop: "⌏", ultri: "◸", Umacr: "Ū", umacr: "ū", uml: "¨", UnderBar: "_", UnderBrace: "⏟", UnderBracket: "⎵", UnderParenthesis: "⏝", Union: "⋃", UnionPlus: "⊎", Uogon: "Ų", uogon: "ų", Uopf: "𝕌", uopf: "𝕦", UpArrowBar: "⤒", uparrow: "↑", UpArrow: "↑", Uparrow: "⇑", UpArrowDownArrow: "⇅", updownarrow: "↕", UpDownArrow: "↕", Updownarrow: "⇕", UpEquilibrium: "⥮", upharpoonleft: "↿", upharpoonright: "↾", uplus: "⊎", UpperLeftArrow: "↖", UpperRightArrow: "↗", upsi: "υ", Upsi: "ϒ", upsih: "ϒ", Upsilon: "Υ", upsilon: "υ", UpTeeArrow: "↥", UpTee: "⊥", upuparrows: "⇈", urcorn: "⌝", urcorner: "⌝", urcrop: "⌎", Uring: "Ů", uring: "ů", urtri: "◹", Uscr: "𝒰", uscr: "𝓊", utdot: "⋰", Utilde: "Ũ", utilde: "ũ", utri: "▵", utrif: "▴", uuarr: "⇈", Uuml: "Ü", uuml: "ü", uwangle: "⦧", vangrt: "⦜", varepsilon: "ϵ", varkappa: "ϰ", varnothing: "∅", varphi: "ϕ", varpi: "ϖ", varpropto: "∝", varr: "↕", vArr: "⇕", varrho: "ϱ", varsigma: "ς", varsubsetneq: "⊊︀", varsubsetneqq: "⫋︀", varsupsetneq: "⊋︀", varsupsetneqq: "⫌︀", vartheta: "ϑ", vartriangleleft: "⊲", vartriangleright: "⊳", vBar: "⫨", Vbar: "⫫", vBarv: "⫩", Vcy: "В", vcy: "в", vdash: "⊢", vDash: "⊨", Vdash: "⊩", VDash: "⊫", Vdashl: "⫦", veebar: "⊻", vee: "∨", Vee: "⋁", veeeq: "≚", vellip: "⋮", verbar: "|", Verbar: "‖", vert: "|", Vert: "‖", VerticalBar: "∣", VerticalLine: "|", VerticalSeparator: "❘", VerticalTilde: "≀", VeryThinSpace: " ", Vfr: "𝔙", vfr: "𝔳", vltri: "⊲", vnsub: "⊂⃒", vnsup: "⊃⃒", Vopf: "𝕍", vopf: "𝕧", vprop: "∝", vrtri: "⊳", Vscr: "𝒱", vscr: "𝓋", vsubnE: "⫋︀", vsubne: "⊊︀", vsupnE: "⫌︀", vsupne: "⊋︀", Vvdash: "⊪", vzigzag: "⦚", Wcirc: "Ŵ", wcirc: "ŵ", wedbar: "⩟", wedge: "∧", Wedge: "⋀", wedgeq: "≙", weierp: "℘", Wfr: "𝔚", wfr: "𝔴", Wopf: "𝕎", wopf: "𝕨", wp: "℘", wr: "≀", wreath: "≀", Wscr: "𝒲", wscr: "𝓌", xcap: "⋂", xcirc: "◯", xcup: "⋃", xdtri: "▽", Xfr: "𝔛", xfr: "𝔵", xharr: "⟷", xhArr: "⟺", Xi: "Ξ", xi: "ξ", xlarr: "⟵", xlArr: "⟸", xmap: "⟼", xnis: "⋻", xodot: "⨀", Xopf: "𝕏", xopf: "𝕩", xoplus: "⨁", xotime: "⨂", xrarr: "⟶", xrArr: "⟹", Xscr: "𝒳", xscr: "𝓍", xsqcup: "⨆", xuplus: "⨄", xutri: "△", xvee: "⋁", xwedge: "⋀", Yacute: "Ý", yacute: "ý", YAcy: "Я", yacy: "я", Ycirc: "Ŷ", ycirc: "ŷ", Ycy: "Ы", ycy: "ы", yen: "¥", Yfr: "𝔜", yfr: "𝔶", YIcy: "Ї", yicy: "ї", Yopf: "𝕐", yopf: "𝕪", Yscr: "𝒴", yscr: "𝓎", YUcy: "Ю", yucy: "ю", yuml: "ÿ", Yuml: "Ÿ", Zacute: "Ź", zacute: "ź", Zcaron: "Ž", zcaron: "ž", Zcy: "З", zcy: "з", Zdot: "Ż", zdot: "ż", zeetrf: "ℨ", ZeroWidthSpace: "​", Zeta: "Ζ", zeta: "ζ", zfr: "𝔷", Zfr: "ℨ", ZHcy: "Ж", zhcy: "ж", zigrarr: "⇝", zopf: "𝕫", Zopf: "ℤ", Zscr: "𝒵", zscr: "𝓏", zwj: "‍", zwnj: "‌" }, Qn = /^#[xX]([A-Fa-f0-9]+)$/, Jn = /^#([0-9]+)$/, $n = /^([A-Za-z0-9]+)$/, lr = function() {
  function e5(t) {
    this.named = t;
  }
  return e5.prototype.parse = function(t) {
    if (t) {
      var r = t.match(Qn);
      if (r) return String.fromCharCode(parseInt(r[1], 16));
      if (r = t.match(Jn), r) return String.fromCharCode(parseInt(r[1], 10));
      if (r = t.match($n), r) return this.named[r[1]];
    }
  }, e5;
}(), Xn = /[\t\n\f ]/, Zn = /[A-Za-z]/, ti = /\r\n?/g;
function _(e5) {
  return Xn.test(e5);
}
function vs(e5) {
  return Zn.test(e5);
}
function ei(e5) {
  return e5.replace(ti, `
`);
}
var cr = function() {
  function e5(t, r, s) {
    s === void 0 && (s = "precompile"), this.delegate = t, this.entityParser = r, this.mode = s, this.state = "beforeData", this.line = -1, this.column = -1, this.input = "", this.index = -1, this.tagNameBuffer = "", this.states = { beforeData: function() {
      var n = this.peek();
      if (n === "<" && !this.isIgnoredEndTag()) this.transitionTo("tagOpen"), this.markTagStart(), this.consume();
      else {
        if (this.mode === "precompile" && n === `
`) {
          var i = this.tagNameBuffer.toLowerCase();
          (i === "pre" || i === "textarea") && this.consume();
        }
        this.transitionTo("data"), this.delegate.beginData();
      }
    }, data: function() {
      var n = this.peek(), i = this.tagNameBuffer;
      n === "<" && !this.isIgnoredEndTag() ? (this.delegate.finishData(), this.transitionTo("tagOpen"), this.markTagStart(), this.consume()) : n === "&" && i !== "script" && i !== "style" ? (this.consume(), this.delegate.appendToData(this.consumeCharRef() || "&")) : (this.consume(), this.delegate.appendToData(n));
    }, tagOpen: function() {
      var n = this.consume();
      n === "!" ? this.transitionTo("markupDeclarationOpen") : n === "/" ? this.transitionTo("endTagOpen") : (n === "@" || n === ":" || vs(n)) && (this.transitionTo("tagName"), this.tagNameBuffer = "", this.delegate.beginStartTag(), this.appendToTagName(n));
    }, markupDeclarationOpen: function() {
      var n = this.consume();
      if (n === "-" && this.peek() === "-") this.consume(), this.transitionTo("commentStart"), this.delegate.beginComment();
      else {
        var i = n.toUpperCase() + this.input.substring(this.index, this.index + 6).toUpperCase();
        i === "DOCTYPE" && (this.consume(), this.consume(), this.consume(), this.consume(), this.consume(), this.consume(), this.transitionTo("doctype"), this.delegate.beginDoctype && this.delegate.beginDoctype());
      }
    }, doctype: function() {
      var n = this.consume();
      _(n) && this.transitionTo("beforeDoctypeName");
    }, beforeDoctypeName: function() {
      var n = this.consume();
      _(n) || (this.transitionTo("doctypeName"), this.delegate.appendToDoctypeName && this.delegate.appendToDoctypeName(n.toLowerCase()));
    }, doctypeName: function() {
      var n = this.consume();
      _(n) ? this.transitionTo("afterDoctypeName") : n === ">" ? (this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData")) : this.delegate.appendToDoctypeName && this.delegate.appendToDoctypeName(n.toLowerCase());
    }, afterDoctypeName: function() {
      var n = this.consume();
      if (!_(n)) if (n === ">") this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData");
      else {
        var i = n.toUpperCase() + this.input.substring(this.index, this.index + 5).toUpperCase(), a = i.toUpperCase() === "PUBLIC", o = i.toUpperCase() === "SYSTEM";
        (a || o) && (this.consume(), this.consume(), this.consume(), this.consume(), this.consume(), this.consume()), a ? this.transitionTo("afterDoctypePublicKeyword") : o && this.transitionTo("afterDoctypeSystemKeyword");
      }
    }, afterDoctypePublicKeyword: function() {
      var n = this.peek();
      _(n) ? (this.transitionTo("beforeDoctypePublicIdentifier"), this.consume()) : n === '"' ? (this.transitionTo("doctypePublicIdentifierDoubleQuoted"), this.consume()) : n === "'" ? (this.transitionTo("doctypePublicIdentifierSingleQuoted"), this.consume()) : n === ">" && (this.consume(), this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData"));
    }, doctypePublicIdentifierDoubleQuoted: function() {
      var n = this.consume();
      n === '"' ? this.transitionTo("afterDoctypePublicIdentifier") : n === ">" ? (this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData")) : this.delegate.appendToDoctypePublicIdentifier && this.delegate.appendToDoctypePublicIdentifier(n);
    }, doctypePublicIdentifierSingleQuoted: function() {
      var n = this.consume();
      n === "'" ? this.transitionTo("afterDoctypePublicIdentifier") : n === ">" ? (this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData")) : this.delegate.appendToDoctypePublicIdentifier && this.delegate.appendToDoctypePublicIdentifier(n);
    }, afterDoctypePublicIdentifier: function() {
      var n = this.consume();
      _(n) ? this.transitionTo("betweenDoctypePublicAndSystemIdentifiers") : n === ">" ? (this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData")) : n === '"' ? this.transitionTo("doctypeSystemIdentifierDoubleQuoted") : n === "'" && this.transitionTo("doctypeSystemIdentifierSingleQuoted");
    }, betweenDoctypePublicAndSystemIdentifiers: function() {
      var n = this.consume();
      _(n) || (n === ">" ? (this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData")) : n === '"' ? this.transitionTo("doctypeSystemIdentifierDoubleQuoted") : n === "'" && this.transitionTo("doctypeSystemIdentifierSingleQuoted"));
    }, doctypeSystemIdentifierDoubleQuoted: function() {
      var n = this.consume();
      n === '"' ? this.transitionTo("afterDoctypeSystemIdentifier") : n === ">" ? (this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData")) : this.delegate.appendToDoctypeSystemIdentifier && this.delegate.appendToDoctypeSystemIdentifier(n);
    }, doctypeSystemIdentifierSingleQuoted: function() {
      var n = this.consume();
      n === "'" ? this.transitionTo("afterDoctypeSystemIdentifier") : n === ">" ? (this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData")) : this.delegate.appendToDoctypeSystemIdentifier && this.delegate.appendToDoctypeSystemIdentifier(n);
    }, afterDoctypeSystemIdentifier: function() {
      var n = this.consume();
      _(n) || n === ">" && (this.delegate.endDoctype && this.delegate.endDoctype(), this.transitionTo("beforeData"));
    }, commentStart: function() {
      var n = this.consume();
      n === "-" ? this.transitionTo("commentStartDash") : n === ">" ? (this.delegate.finishComment(), this.transitionTo("beforeData")) : (this.delegate.appendToCommentData(n), this.transitionTo("comment"));
    }, commentStartDash: function() {
      var n = this.consume();
      n === "-" ? this.transitionTo("commentEnd") : n === ">" ? (this.delegate.finishComment(), this.transitionTo("beforeData")) : (this.delegate.appendToCommentData("-"), this.transitionTo("comment"));
    }, comment: function() {
      var n = this.consume();
      n === "-" ? this.transitionTo("commentEndDash") : this.delegate.appendToCommentData(n);
    }, commentEndDash: function() {
      var n = this.consume();
      n === "-" ? this.transitionTo("commentEnd") : (this.delegate.appendToCommentData("-" + n), this.transitionTo("comment"));
    }, commentEnd: function() {
      var n = this.consume();
      n === ">" ? (this.delegate.finishComment(), this.transitionTo("beforeData")) : (this.delegate.appendToCommentData("--" + n), this.transitionTo("comment"));
    }, tagName: function() {
      var n = this.consume();
      _(n) ? this.transitionTo("beforeAttributeName") : n === "/" ? this.transitionTo("selfClosingStartTag") : n === ">" ? (this.delegate.finishTag(), this.transitionTo("beforeData")) : this.appendToTagName(n);
    }, endTagName: function() {
      var n = this.consume();
      _(n) ? (this.transitionTo("beforeAttributeName"), this.tagNameBuffer = "") : n === "/" ? (this.transitionTo("selfClosingStartTag"), this.tagNameBuffer = "") : n === ">" ? (this.delegate.finishTag(), this.transitionTo("beforeData"), this.tagNameBuffer = "") : this.appendToTagName(n);
    }, beforeAttributeName: function() {
      var n = this.peek();
      if (_(n)) {
        this.consume();
        return;
      } else n === "/" ? (this.transitionTo("selfClosingStartTag"), this.consume()) : n === ">" ? (this.consume(), this.delegate.finishTag(), this.transitionTo("beforeData")) : n === "=" ? (this.delegate.reportSyntaxError("attribute name cannot start with equals sign"), this.transitionTo("attributeName"), this.delegate.beginAttribute(), this.consume(), this.delegate.appendToAttributeName(n)) : (this.transitionTo("attributeName"), this.delegate.beginAttribute());
    }, attributeName: function() {
      var n = this.peek();
      _(n) ? (this.transitionTo("afterAttributeName"), this.consume()) : n === "/" ? (this.delegate.beginAttributeValue(false), this.delegate.finishAttributeValue(), this.consume(), this.transitionTo("selfClosingStartTag")) : n === "=" ? (this.transitionTo("beforeAttributeValue"), this.consume()) : n === ">" ? (this.delegate.beginAttributeValue(false), this.delegate.finishAttributeValue(), this.consume(), this.delegate.finishTag(), this.transitionTo("beforeData")) : n === '"' || n === "'" || n === "<" ? (this.delegate.reportSyntaxError(n + " is not a valid character within attribute names"), this.consume(), this.delegate.appendToAttributeName(n)) : (this.consume(), this.delegate.appendToAttributeName(n));
    }, afterAttributeName: function() {
      var n = this.peek();
      if (_(n)) {
        this.consume();
        return;
      } else n === "/" ? (this.delegate.beginAttributeValue(false), this.delegate.finishAttributeValue(), this.consume(), this.transitionTo("selfClosingStartTag")) : n === "=" ? (this.consume(), this.transitionTo("beforeAttributeValue")) : n === ">" ? (this.delegate.beginAttributeValue(false), this.delegate.finishAttributeValue(), this.consume(), this.delegate.finishTag(), this.transitionTo("beforeData")) : (this.delegate.beginAttributeValue(false), this.delegate.finishAttributeValue(), this.transitionTo("attributeName"), this.delegate.beginAttribute(), this.consume(), this.delegate.appendToAttributeName(n));
    }, beforeAttributeValue: function() {
      var n = this.peek();
      _(n) ? this.consume() : n === '"' ? (this.transitionTo("attributeValueDoubleQuoted"), this.delegate.beginAttributeValue(true), this.consume()) : n === "'" ? (this.transitionTo("attributeValueSingleQuoted"), this.delegate.beginAttributeValue(true), this.consume()) : n === ">" ? (this.delegate.beginAttributeValue(false), this.delegate.finishAttributeValue(), this.consume(), this.delegate.finishTag(), this.transitionTo("beforeData")) : (this.transitionTo("attributeValueUnquoted"), this.delegate.beginAttributeValue(false), this.consume(), this.delegate.appendToAttributeValue(n));
    }, attributeValueDoubleQuoted: function() {
      var n = this.consume();
      n === '"' ? (this.delegate.finishAttributeValue(), this.transitionTo("afterAttributeValueQuoted")) : n === "&" ? this.delegate.appendToAttributeValue(this.consumeCharRef() || "&") : this.delegate.appendToAttributeValue(n);
    }, attributeValueSingleQuoted: function() {
      var n = this.consume();
      n === "'" ? (this.delegate.finishAttributeValue(), this.transitionTo("afterAttributeValueQuoted")) : n === "&" ? this.delegate.appendToAttributeValue(this.consumeCharRef() || "&") : this.delegate.appendToAttributeValue(n);
    }, attributeValueUnquoted: function() {
      var n = this.peek();
      _(n) ? (this.delegate.finishAttributeValue(), this.consume(), this.transitionTo("beforeAttributeName")) : n === "/" ? (this.delegate.finishAttributeValue(), this.consume(), this.transitionTo("selfClosingStartTag")) : n === "&" ? (this.consume(), this.delegate.appendToAttributeValue(this.consumeCharRef() || "&")) : n === ">" ? (this.delegate.finishAttributeValue(), this.consume(), this.delegate.finishTag(), this.transitionTo("beforeData")) : (this.consume(), this.delegate.appendToAttributeValue(n));
    }, afterAttributeValueQuoted: function() {
      var n = this.peek();
      _(n) ? (this.consume(), this.transitionTo("beforeAttributeName")) : n === "/" ? (this.consume(), this.transitionTo("selfClosingStartTag")) : n === ">" ? (this.consume(), this.delegate.finishTag(), this.transitionTo("beforeData")) : this.transitionTo("beforeAttributeName");
    }, selfClosingStartTag: function() {
      var n = this.peek();
      n === ">" ? (this.consume(), this.delegate.markTagAsSelfClosing(), this.delegate.finishTag(), this.transitionTo("beforeData")) : this.transitionTo("beforeAttributeName");
    }, endTagOpen: function() {
      var n = this.consume();
      (n === "@" || n === ":" || vs(n)) && (this.transitionTo("endTagName"), this.tagNameBuffer = "", this.delegate.beginEndTag(), this.appendToTagName(n));
    } }, this.reset();
  }
  return e5.prototype.reset = function() {
    this.transitionTo("beforeData"), this.input = "", this.tagNameBuffer = "", this.index = 0, this.line = 1, this.column = 0, this.delegate.reset();
  }, e5.prototype.transitionTo = function(t) {
    this.state = t;
  }, e5.prototype.tokenize = function(t) {
    this.reset(), this.tokenizePart(t), this.tokenizeEOF();
  }, e5.prototype.tokenizePart = function(t) {
    for (this.input += ei(t); this.index < this.input.length; ) {
      var r = this.states[this.state];
      if (r !== void 0) r.call(this);
      else throw new Error("unhandled state " + this.state);
    }
  }, e5.prototype.tokenizeEOF = function() {
    this.flushData();
  }, e5.prototype.flushData = function() {
    this.state === "data" && (this.delegate.finishData(), this.transitionTo("beforeData"));
  }, e5.prototype.peek = function() {
    return this.input.charAt(this.index);
  }, e5.prototype.consume = function() {
    var t = this.peek();
    return this.index++, t === `
` ? (this.line++, this.column = 0) : this.column++, t;
  }, e5.prototype.consumeCharRef = function() {
    var t = this.input.indexOf(";", this.index);
    if (t !== -1) {
      var r = this.input.slice(this.index, t), s = this.entityParser.parse(r);
      if (s) {
        for (var n = r.length; n; ) this.consume(), n--;
        return this.consume(), s;
      }
    }
  }, e5.prototype.markTagStart = function() {
    this.delegate.tagOpen();
  }, e5.prototype.appendToTagName = function(t) {
    this.tagNameBuffer += t, this.delegate.appendToTagName(t);
  }, e5.prototype.isIgnoredEndTag = function() {
    var t = this.tagNameBuffer;
    return t === "title" && this.input.substring(this.index, this.index + 8) !== "</title>" || t === "style" && this.input.substring(this.index, this.index + 8) !== "</style>" || t === "script" && this.input.substring(this.index, this.index + 9) !== "<\/script>";
  }, e5;
}();
var dr = /* @__PURE__ */ new Set(["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
function ni(e5) {
  var t;
  return dr.has(e5.toLowerCase()) && ((t = e5[0]) == null ? void 0 : t.toLowerCase()) === e5[0];
}
function ce(e5) {
  return !!e5 && e5.length > 0;
}
function Nr(e5) {
  return e5.length === 0 ? void 0 : e5[e5.length - 1];
}
function ii(e5) {
  return e5.length === 0 ? void 0 : e5[0];
}
var pt = Object.freeze({ line: 1, column: 0 }), ai = Object.freeze({ source: "(synthetic)", start: pt, end: pt }), gr = Object.freeze({ source: "(nonexistent)", start: pt, end: pt }), ht = Object.freeze({ source: "(broken)", start: pt, end: pt }), br = class {
  constructor(t) {
    this._whens = t;
  }
  first(t) {
    for (let r of this._whens) {
      let s = r.match(t);
      if (ce(s)) return s[0];
    }
    return null;
  }
}, Pe = class {
  get(t, r) {
    let s = this._map.get(t);
    return s || (s = r(), this._map.set(t, s), s);
  }
  add(t, r) {
    this._map.set(t, r);
  }
  match(t) {
    let r = function(a) {
      switch (a) {
        case "Broken":
        case "InternalsSynthetic":
        case "NonExistent":
          return "IS_INVISIBLE";
        default:
          return a;
      }
    }(t), s = [], n = this._map.get(r), i = this._map.get("MATCH_ANY");
    return n && s.push(n), i && s.push(i), s;
  }
  constructor() {
    this._map = /* @__PURE__ */ new Map();
  }
};
function _s(e5) {
  return e5(new yr()).validate();
}
var yr = class {
  validate() {
    return (t, r) => this.matchFor(t.kind, r.kind)(t, r);
  }
  matchFor(t, r) {
    let s = this._whens.match(t);
    return ce(), new br(s).first(r);
  }
  when(t, r, s) {
    return this._whens.get(t, () => new Pe()).add(r, s), this;
  }
  constructor() {
    this._whens = new Pe();
  }
}, kr = class e {
  static synthetic(t) {
    let r = D.synthetic(t);
    return new e({ loc: r, chars: t });
  }
  static load(t, r) {
    return new e({ loc: D.load(t, r[1]), chars: r[0] });
  }
  constructor(t) {
    this.loc = t.loc, this.chars = t.chars;
  }
  getString() {
    return this.chars;
  }
  serialize() {
    return [this.chars, this.loc.serialize()];
  }
}, D = class e2 {
  static get NON_EXISTENT() {
    return new et("NonExistent", gr).wrap();
  }
  static load(t, r) {
    return typeof r == "number" ? e2.forCharPositions(t, r, r) : typeof r == "string" ? e2.synthetic(r) : Array.isArray(r) ? e2.forCharPositions(t, r[0], r[1]) : r === "NonExistent" ? e2.NON_EXISTENT : r === "Broken" ? e2.broken(ht) : void ds(r);
  }
  static forHbsLoc(t, r) {
    let s = new mt(t, r.start), n = new mt(t, r.end);
    return new oe(t, { start: s, end: n }, r).wrap();
  }
  static forCharPositions(t, r, s) {
    let n = new Tt(t, r), i = new Tt(t, s);
    return new ae(t, { start: n, end: i }).wrap();
  }
  static synthetic(t) {
    return new et("InternalsSynthetic", gr, t).wrap();
  }
  static broken(t = ht) {
    return new et("Broken", t).wrap();
  }
  constructor(t) {
    var r;
    this.data = t, this.isInvisible = (r = t.kind) !== "CharPosition" && r !== "HbsPosition";
  }
  getStart() {
    return this.data.getStart().wrap();
  }
  getEnd() {
    return this.data.getEnd().wrap();
  }
  get loc() {
    let t = this.data.toHbsSpan();
    return t === null ? ht : t.toHbsLoc();
  }
  get module() {
    return this.data.getModule();
  }
  get startPosition() {
    return this.loc.start;
  }
  get endPosition() {
    return this.loc.end;
  }
  toJSON() {
    return this.loc;
  }
  withStart(t) {
    return J(t.data, this.data.getEnd());
  }
  withEnd(t) {
    return J(this.data.getStart(), t.data);
  }
  asString() {
    return this.data.asString();
  }
  toSlice(t) {
    let r = this.data.asString();
    return new kr({ loc: this, chars: t || r });
  }
  get start() {
    return this.loc.start;
  }
  set start(t) {
    this.data.locDidUpdate({ start: t });
  }
  get end() {
    return this.loc.end;
  }
  set end(t) {
    this.data.locDidUpdate({ end: t });
  }
  get source() {
    return this.module;
  }
  collapse(t) {
    switch (t) {
      case "start":
        return this.getStart().collapsed();
      case "end":
        return this.getEnd().collapsed();
    }
  }
  extend(t) {
    return J(this.data.getStart(), t.data.getEnd());
  }
  serialize() {
    return this.data.serialize();
  }
  slice({ skipStart: t = 0, skipEnd: r = 0 }) {
    return J(this.getStart().move(t).data, this.getEnd().move(-r).data);
  }
  sliceStartChars({ skipStart: t = 0, chars: r }) {
    return J(this.getStart().move(t).data, this.getStart().move(t + r).data);
  }
  sliceEndChars({ skipEnd: t = 0, chars: r }) {
    return J(this.getEnd().move(t - r).data, this.getStart().move(-t).data);
  }
}, Ut, ae = class {
  constructor(t, r) {
    Lt(this, Ut);
    this.source = t, this.charPositions = r, this.kind = "CharPosition", Y(this, Ut, null);
  }
  wrap() {
    return new D(this);
  }
  asString() {
    return this.source.slice(this.charPositions.start.charPos, this.charPositions.end.charPos);
  }
  getModule() {
    return this.source.module;
  }
  getStart() {
    return this.charPositions.start;
  }
  getEnd() {
    return this.charPositions.end;
  }
  locDidUpdate() {
  }
  toHbsSpan() {
    let t = I(this, Ut);
    if (t === null) {
      let r = this.charPositions.start.toHbsPos(), s = this.charPositions.end.toHbsPos();
      t = Y(this, Ut, r === null || s === null ? ft : new oe(this.source, { start: r, end: s }));
    }
    return t === ft ? null : t;
  }
  serialize() {
    let { start: { charPos: t }, end: { charPos: r } } = this.charPositions;
    return t === r ? t : [t, r];
  }
  toCharPosSpan() {
    return this;
  }
};
Ut = /* @__PURE__ */ new WeakMap();
var ut, Et, oe = class {
  constructor(t, r, s = null) {
    Lt(this, ut);
    Lt(this, Et);
    this.source = t, this.hbsPositions = r, this.kind = "HbsPosition", Y(this, ut, null), Y(this, Et, s);
  }
  serialize() {
    let t = this.toCharPosSpan();
    return t === null ? "Broken" : t.wrap().serialize();
  }
  wrap() {
    return new D(this);
  }
  updateProvided(t, r) {
    I(this, Et) && (I(this, Et)[r] = t), Y(this, ut, null), Y(this, Et, { start: t, end: t });
  }
  locDidUpdate({ start: t, end: r }) {
    t !== void 0 && (this.updateProvided(t, "start"), this.hbsPositions.start = new mt(this.source, t, null)), r !== void 0 && (this.updateProvided(r, "end"), this.hbsPositions.end = new mt(this.source, r, null));
  }
  asString() {
    let t = this.toCharPosSpan();
    return t === null ? "" : t.asString();
  }
  getModule() {
    return this.source.module;
  }
  getStart() {
    return this.hbsPositions.start;
  }
  getEnd() {
    return this.hbsPositions.end;
  }
  toHbsLoc() {
    return { start: this.hbsPositions.start.hbsPos, end: this.hbsPositions.end.hbsPos };
  }
  toHbsSpan() {
    return this;
  }
  toCharPosSpan() {
    let t = I(this, ut);
    if (t === null) {
      let r = this.hbsPositions.start.toCharPos(), s = this.hbsPositions.end.toCharPos();
      if (!r || !s) return t = Y(this, ut, ft), null;
      t = Y(this, ut, new ae(this.source, { start: r, end: s }));
    }
    return t === ft ? null : t;
  }
};
ut = /* @__PURE__ */ new WeakMap(), Et = /* @__PURE__ */ new WeakMap();
var et = class {
  constructor(t, r, s = null) {
    this.kind = t, this.loc = r, this.string = s;
  }
  serialize() {
    switch (this.kind) {
      case "Broken":
      case "NonExistent":
        return this.kind;
      case "InternalsSynthetic":
        return this.string || "";
    }
  }
  wrap() {
    return new D(this);
  }
  asString() {
    return this.string || "";
  }
  locDidUpdate({ start: t, end: r }) {
    t !== void 0 && (this.loc.start = t), r !== void 0 && (this.loc.end = r);
  }
  getModule() {
    return "an unknown module";
  }
  getStart() {
    return new le(this.kind, this.loc.start);
  }
  getEnd() {
    return new le(this.kind, this.loc.end);
  }
  toCharPosSpan() {
    return this;
  }
  toHbsSpan() {
    return null;
  }
  toHbsLoc() {
    return ht;
  }
}, J = _s((e5) => e5.when("HbsPosition", "HbsPosition", (t, r) => new oe(t.source, { start: t, end: r }).wrap()).when("CharPosition", "CharPosition", (t, r) => new ae(t.source, { start: t, end: r }).wrap()).when("CharPosition", "HbsPosition", (t, r) => {
  let s = r.toCharPos();
  return s === null ? new et("Broken", ht).wrap() : J(t, s);
}).when("HbsPosition", "CharPosition", (t, r) => {
  let s = t.toCharPos();
  return s === null ? new et("Broken", ht).wrap() : J(s, r);
}).when("IS_INVISIBLE", "MATCH_ANY", (t) => new et(t.kind, ht).wrap()).when("MATCH_ANY", "IS_INVISIBLE", (t, r) => new et(r.kind, ht).wrap())), ft = "BROKEN", Mt = class e3 {
  static forHbsPos(t, r) {
    return new mt(t, r, null).wrap();
  }
  static broken(t = pt) {
    return new le("Broken", t).wrap();
  }
  constructor(t) {
    this.data = t;
  }
  get offset() {
    let t = this.data.toCharPos();
    return t === null ? null : t.offset;
  }
  eql(t) {
    return oi(this.data, t.data);
  }
  until(t) {
    return J(this.data, t.data);
  }
  move(t) {
    let r = this.data.toCharPos();
    if (r === null) return e3.broken();
    {
      let s = r.offset + t;
      return r.source.validate(s) ? new Tt(r.source, s).wrap() : e3.broken();
    }
  }
  collapsed() {
    return J(this.data, this.data);
  }
  toJSON() {
    return this.data.toJSON();
  }
}, Tt = class {
  constructor(t, r) {
    this.source = t, this.charPos = r, this.kind = "CharPosition", this._locPos = null;
  }
  toCharPos() {
    return this;
  }
  toJSON() {
    let t = this.toHbsPos();
    return t === null ? pt : t.toJSON();
  }
  wrap() {
    return new Mt(this);
  }
  get offset() {
    return this.charPos;
  }
  toHbsPos() {
    let t = this._locPos;
    if (t === null) {
      let r = this.source.hbsPosFor(this.charPos);
      this._locPos = t = r === null ? ft : new mt(this.source, r, this.charPos);
    }
    return t === ft ? null : t;
  }
}, mt = class {
  constructor(t, r, s = null) {
    this.source = t, this.hbsPos = r, this.kind = "HbsPosition", this._charPos = s === null ? null : new Tt(t, s);
  }
  toCharPos() {
    let t = this._charPos;
    if (t === null) {
      let r = this.source.charPosFor(this.hbsPos);
      this._charPos = t = r === null ? ft : new Tt(this.source, r);
    }
    return t === ft ? null : t;
  }
  toJSON() {
    return this.hbsPos;
  }
  wrap() {
    return new Mt(this);
  }
  toHbsPos() {
    return this;
  }
}, le = class {
  constructor(t, r) {
    this.kind = t, this.pos = r;
  }
  toCharPos() {
    return null;
  }
  toJSON() {
    return this.pos;
  }
  wrap() {
    return new Mt(this);
  }
  get offset() {
    return null;
  }
}, oi = _s((e5) => e5.when("HbsPosition", "HbsPosition", ({ hbsPos: t }, { hbsPos: r }) => t.column === r.column && t.line === r.line).when("CharPosition", "CharPosition", ({ charPos: t }, { charPos: r }) => t === r).when("CharPosition", "HbsPosition", ({ offset: t }, r) => {
  var s;
  return t === ((s = r.toCharPos()) == null ? void 0 : s.offset);
}).when("HbsPosition", "CharPosition", (t, { offset: r }) => {
  var s;
  return ((s = t.toCharPos()) == null ? void 0 : s.offset) === r;
}).when("MATCH_ANY", "MATCH_ANY", () => false)), wt = class e4 {
  static from(t, r = {}) {
    var s;
    return new e4(t, (s = r.meta) == null ? void 0 : s.moduleName);
  }
  constructor(t, r = "an unknown module") {
    this.source = t, this.module = r;
  }
  validate(t) {
    return t >= 0 && t <= this.source.length;
  }
  slice(t, r) {
    return this.source.slice(t, r);
  }
  offsetFor(t, r) {
    return Mt.forHbsPos(this, { line: t, column: r });
  }
  spanFor({ start: t, end: r }) {
    return D.forHbsLoc(this, { start: { line: t.line, column: t.column }, end: { line: r.line, column: r.column } });
  }
  hbsPosFor(t) {
    let r = 0, s = 0;
    if (t > this.source.length) return null;
    for (; ; ) {
      let n = this.source.indexOf(`
`, s);
      if (t <= n || n === -1) return { line: r + 1, column: t - s };
      r += 1, s = n + 1;
    }
  }
  charPosFor(t) {
    let { line: r, column: s } = t, n = this.source.length, i = 0, a = 0;
    for (; a < n; ) {
      let o = this.source.indexOf(`
`, a);
      if (o === -1 && (o = this.source.length), i === r - 1) {
        if (a + s > o) return o;
        return a + s;
      }
      if (o === -1) return 0;
      i += 1, a = o + 1;
    }
    return n;
  }
};
function v(e5, t) {
  let { module: r, loc: s } = t, { line: n, column: i } = s.start, a = t.asString(), o = a ? `

|
|  ${a.split(`
`).join(`
|  `)}
|

` : "", c = new Error(`${e5}: ${o}(error occurred in '${r}' @ line ${n} : column ${i})`);
  return c.name = "SyntaxError", c.location = t, c.code = a, c;
}
var li = { Template: ["body"], Block: ["body"], MustacheStatement: ["path", "params", "hash"], BlockStatement: ["path", "params", "hash", "program", "inverse"], ElementModifierStatement: ["path", "params", "hash"], CommentStatement: [], MustacheCommentStatement: [], ElementNode: ["attributes", "modifiers", "children", "comments"], AttrNode: ["value"], TextNode: [], ConcatStatement: ["parts"], SubExpression: ["path", "params", "hash"], PathExpression: [], StringLiteral: [], BooleanLiteral: [], NumberLiteral: [], NullLiteral: [], UndefinedLiteral: [], Hash: ["pairs"], HashPair: ["value"] }, Cr = function() {
  function e5(t, r, s, n) {
    let i = Error.call(this, t);
    this.key = n, this.message = t, this.node = r, this.parent = s, i.stack && (this.stack = i.stack);
  }
  return e5.prototype = Object.create(Error.prototype), e5.prototype.constructor = e5, e5;
}();
function Ts(e5, t, r) {
  return new Cr("Cannot remove a node unless it is part of an array", e5, t, r);
}
function ci(e5, t, r) {
  return new Cr("Cannot replace a node with multiple nodes unless it is part of an array", e5, t, r);
}
function Ns(e5, t) {
  return new Cr("Replacing and removing in key handlers is not yet supported.", e5, null, t);
}
var zt = class {
  constructor(t, r = null, s = null) {
    this.node = t, this.parent = r, this.parentKey = s;
  }
  get parentNode() {
    return this.parent ? this.parent.node : null;
  }
  parents() {
    return { [Symbol.iterator]: () => new Sr(this) };
  }
}, Sr = class {
  constructor(t) {
    this.path = t;
  }
  next() {
    return this.path.parent ? (this.path = this.path.parent, { done: false, value: this.path }) : { done: true, value: null };
  }
};
function Os(e5) {
  return typeof e5 == "function" ? e5 : e5.enter;
}
function Bs(e5) {
  return typeof e5 == "function" ? void 0 : e5.exit;
}
function Ae(e5, t) {
  let r, s, n, { node: i, parent: a, parentKey: o } = t, c = function(h, p) {
    if (h.Program && (p === "Template" && !h.Template || p === "Block" && !h.Block)) return h.Program;
    let m = h[p];
    return m !== void 0 ? m : h.All;
  }(e5, i.type);
  if (c !== void 0 && (r = Os(c), s = Bs(c)), r !== void 0 && (n = r(i, t)), n != null) {
    if (JSON.stringify(i) !== JSON.stringify(n)) return Array.isArray(n) ? (Is(e5, n, a, o), n) : Ae(e5, new zt(n, a, o)) || n;
    n = void 0;
  }
  if (n === void 0) {
    let h = li[i.type];
    for (let p = 0; p < h.length; p++) ui(e5, c, t, h[p]);
    s !== void 0 && (n = s(i, t));
  }
  return n;
}
function Cs(e5, t, r) {
  e5[t] = r;
}
function ui(e5, t, r, s) {
  let n, i, { node: a } = r, o = function(c, h) {
    return c[h];
  }(a, s);
  if (o) {
    if (t !== void 0) {
      let c = function(h, p) {
        let m = typeof h != "function" ? h.keys : void 0;
        if (m === void 0) return;
        let S = m[p];
        return S !== void 0 ? S : m.All;
      }(t, s);
      c !== void 0 && (n = Os(c), i = Bs(c));
    }
    if (n !== void 0 && n(a, s) !== void 0) throw Ns(a, s);
    if (Array.isArray(o)) Is(e5, o, r, s);
    else {
      let c = Ae(e5, new zt(o, r, s));
      c !== void 0 && function(h, p, m, S) {
        if (S === null) throw Ts(m, h, p);
        if (Array.isArray(S)) {
          if (S.length !== 1) throw S.length === 0 ? Ts(m, h, p) : ci(m, h, p);
          Cs(h, p, S[0]);
        } else Cs(h, p, S);
      }(a, s, o, c);
    }
    if (i !== void 0 && i(a, s) !== void 0) throw Ns(a, s);
  }
}
function Is(e5, t, r, s) {
  for (let n = 0; n < t.length; n++) {
    let i = t[n], a = Ae(e5, new zt(i, r, s));
    a !== void 0 && (n += hi(t, n, a) - 1);
  }
}
function hi(e5, t, r) {
  return r === null ? (e5.splice(t, 1), 0) : Array.isArray(r) ? (e5.splice(t, 1, ...r), r.length) : (e5.splice(t, 1, r), 1);
}
function pi(e5, t) {
  Ae(t, new zt(e5));
}
function Ht(e5, t) {
  (function(r) {
    switch (r.type) {
      case "Block":
      case "Template":
        return r.body;
      case "ElementNode":
        return r.children;
    }
  })(e5).push(t);
}
function Rs(e5) {
  return e5.type === "StringLiteral" || e5.type === "BooleanLiteral" || e5.type === "NumberLiteral" || e5.type === "NullLiteral" || e5.type === "UndefinedLiteral";
}
var ur;
function hr() {
  return ur || (ur = new wt("", "(synthetic)")), ur;
}
function xs(e5, t) {
  return f.var({ name: e5, loc: T(t || null) });
}
function ct(e5, t) {
  let r = T(t || null);
  if (typeof e5 != "string") {
    if ("type" in e5) return e5;
    {
      e5.head.indexOf(".");
      let { head: i, tail: a } = e5;
      return f.path({ head: f.head({ original: i, loc: r.sliceStartChars({ chars: i.length }) }), tail: a, loc: T(t || null) });
    }
  }
  let { head: s, tail: n } = function(i, a) {
    let [o, ...c] = i.split("."), h = f.head({ original: o, loc: T(a || null) });
    return f.path({ head: h, tail: c, loc: T(a || null) });
  }(e5, r);
  return f.path({ head: s, tail: n, loc: r });
}
function xe(e5, t, r) {
  return f.literal({ type: e5, value: t, loc: T(r || null) });
}
function ie(e5 = [], t) {
  return f.hash({ pairs: e5, loc: T(t || null) });
}
function qs(e5) {
  return e5.map((t) => typeof t == "string" ? f.var({ name: t, loc: D.synthetic(t) }) : t);
}
function Ps(e5 = [], t = [], r = false, s) {
  return f.blockItself({ body: e5, params: qs(t), chained: r, loc: T(s || null) });
}
function As(e5 = [], t = [], r) {
  return f.template({ body: e5, blockParams: t, loc: T(r || null) });
}
function T(...e5) {
  if (e5.length === 1) {
    let t = e5[0];
    return t && typeof t == "object" ? D.forHbsLoc(hr(), t) : D.forHbsLoc(hr(), ai);
  }
  {
    let [t, r, s, n, i] = e5, a = i ? new wt("", i) : hr();
    return D.forHbsLoc(a, { start: { line: t, column: r }, end: { line: s || t, column: n || r } });
  }
}
var fi = { mustache: function(e5, t = [], r = ie([]), s = false, n, i) {
  return f.mustache({ path: ct(e5), params: t, hash: r, trusting: s, strip: i, loc: T(n || null) });
}, block: function(e5, t, r, s, n = null, i, a, o, c) {
  let h, p = null;
  return h = s.type === "Template" ? f.blockItself({ params: qs(s.blockParams), body: s.body, loc: s.loc }) : s, (n == null ? void 0 : n.type) === "Template" ? (n.blockParams.length, p = f.blockItself({ params: [], body: n.body, loc: n.loc })) : p = n, f.block({ path: ct(e5), params: t || [], hash: r || ie([]), defaultBlock: h, elseBlock: p, loc: T(i || null), openStrip: a, inverseStrip: o, closeStrip: c });
}, comment: function(e5, t) {
  return f.comment({ value: e5, loc: T(t || null) });
}, mustacheComment: function(e5, t) {
  return f.mustacheComment({ value: e5, loc: T(t || null) });
}, element: function(e5, t = {}) {
  let r, s, { attrs: n, blockParams: i, modifiers: a, comments: o, children: c, openTag: h, closeTag: p, loc: m } = t;
  typeof e5 == "string" ? e5.endsWith("/") ? (r = ct(e5.slice(0, -1)), s = true) : r = ct(e5) : "type" in e5 ? (e5.type, e5.type, r = e5) : "path" in e5 ? (e5.path.type, e5.path.type, r = e5.path, s = e5.selfClosing) : (r = ct(e5.name), s = e5.selfClosing);
  let S = i == null ? void 0 : i.map((E) => typeof E == "string" ? xs(E) : E), y = null;
  return p ? y = T(p) : p === void 0 && (y = s || ni(r.original) ? null : T(null)), f.element({ path: r, selfClosing: s || false, attributes: n || [], params: S || [], modifiers: a || [], comments: o || [], children: c || [], openTag: T(h || null), closeTag: y, loc: T(m || null) });
}, elementModifier: function(e5, t, r, s) {
  return f.elementModifier({ path: ct(e5), params: t || [], hash: r || ie([]), loc: T(s || null) });
}, attr: function(e5, t, r) {
  return f.attr({ name: e5, value: t, loc: T(r || null) });
}, text: function(e5 = "", t) {
  return f.text({ chars: e5, loc: T(t || null) });
}, sexpr: function(e5, t = [], r = ie([]), s) {
  return f.sexpr({ path: ct(e5), params: t, hash: r, loc: T(s || null) });
}, concat: function(e5, t) {
  if (!ce(e5)) throw new Error("b.concat requires at least one part");
  return f.concat({ parts: e5, loc: T(t || null) });
}, hash: ie, pair: function(e5, t, r) {
  return f.pair({ key: e5, value: t, loc: T(r || null) });
}, literal: xe, program: function(e5, t, r) {
  return t && t.length ? Ps(e5, t, false, r) : As(e5, [], r);
}, blockItself: Ps, template: As, loc: T, pos: function(e5, t) {
  return f.pos({ line: e5, column: t });
}, path: ct, fullPath: function(e5, t = [], r) {
  return f.path({ head: e5, tail: t, loc: T(r || null) });
}, head: function(e5, t) {
  return f.head({ original: e5, loc: T(t || null) });
}, at: function(e5, t) {
  return f.atName({ name: e5, loc: T(t || null) });
}, var: xs, this: function(e5) {
  return f.this({ loc: T(e5 || null) });
}, string: pr("StringLiteral"), boolean: pr("BooleanLiteral"), number: pr("NumberLiteral"), undefined: () => xe("UndefinedLiteral", void 0), null: () => xe("NullLiteral", null) };
function pr(e5) {
  return function(t, r) {
    return xe(e5, t, r);
  };
}
var Ce = { close: false, open: false }, f = new class {
  pos({ line: e5, column: t }) {
    return { line: e5, column: t };
  }
  blockItself({ body: e5, params: t, chained: r = false, loc: s }) {
    return { type: "Block", body: e5, params: t, get blockParams() {
      return this.params.map((n) => n.name);
    }, set blockParams(n) {
      this.params = n.map((i) => f.var({ name: i, loc: D.synthetic(i) }));
    }, chained: r, loc: s };
  }
  template({ body: e5, blockParams: t, loc: r }) {
    return { type: "Template", body: e5, blockParams: t, loc: r };
  }
  mustache({ path: e5, params: t, hash: r, trusting: s, loc: n, strip: i = Ce }) {
    return function({ path: a, params: o, hash: c, trusting: h, strip: p, loc: m }) {
      let S = { type: "MustacheStatement", path: a, params: o, hash: c, trusting: h, strip: p, loc: m };
      return Object.defineProperty(S, "escaped", { enumerable: false, get() {
        return !this.trusting;
      }, set(y) {
        this.trusting = !y;
      } }), S;
    }({ path: e5, params: t, hash: r, trusting: s, strip: i, loc: n });
  }
  block({ path: e5, params: t, hash: r, defaultBlock: s, elseBlock: n = null, loc: i, openStrip: a = Ce, inverseStrip: o = Ce, closeStrip: c = Ce }) {
    return { type: "BlockStatement", path: e5, params: t, hash: r, program: s, inverse: n, loc: i, openStrip: a, inverseStrip: o, closeStrip: c };
  }
  comment({ value: e5, loc: t }) {
    return { type: "CommentStatement", value: e5, loc: t };
  }
  mustacheComment({ value: e5, loc: t }) {
    return { type: "MustacheCommentStatement", value: e5, loc: t };
  }
  concat({ parts: e5, loc: t }) {
    return { type: "ConcatStatement", parts: e5, loc: t };
  }
  element({ path: e5, selfClosing: t, attributes: r, modifiers: s, params: n, comments: i, children: a, openTag: o, closeTag: c, loc: h }) {
    let p = t;
    return { type: "ElementNode", path: e5, attributes: r, modifiers: s, params: n, comments: i, children: a, openTag: o, closeTag: c, loc: h, get tag() {
      return this.path.original;
    }, set tag(m) {
      this.path.original = m;
    }, get blockParams() {
      return this.params.map((m) => m.name);
    }, set blockParams(m) {
      this.params = m.map((S) => f.var({ name: S, loc: D.synthetic(S) }));
    }, get selfClosing() {
      return p;
    }, set selfClosing(m) {
      p = m, this.closeTag = m ? null : D.synthetic(`</${this.tag}>`);
    } };
  }
  elementModifier({ path: e5, params: t, hash: r, loc: s }) {
    return { type: "ElementModifierStatement", path: e5, params: t, hash: r, loc: s };
  }
  attr({ name: e5, value: t, loc: r }) {
    return { type: "AttrNode", name: e5, value: t, loc: r };
  }
  text({ chars: e5, loc: t }) {
    return { type: "TextNode", chars: e5, loc: t };
  }
  sexpr({ path: e5, params: t, hash: r, loc: s }) {
    return { type: "SubExpression", path: e5, params: t, hash: r, loc: s };
  }
  path({ head: e5, tail: t, loc: r }) {
    return function({ head: s, tail: n, loc: i }) {
      let a = { type: "PathExpression", head: s, tail: n, get original() {
        return [this.head.original, ...this.tail].join(".");
      }, set original(o) {
        let [c, ...h] = o.split(".");
        this.head = fi.head(c, this.head.loc), this.tail = h;
      }, loc: i };
      return Object.defineProperty(a, "parts", { enumerable: false, get() {
        let o = this.original.split(".");
        return o[0] === "this" ? o.shift() : o[0].startsWith("@") && (o[0] = o[0].slice(1)), Object.freeze(o);
      }, set(o) {
        var h;
        let c = [...o];
        c[0] === "this" || (h = c[0]) != null && h.startsWith("@") || (this.head.type === "ThisHead" ? c.unshift("this") : this.head.type === "AtHead" && (c[0] = `@${c[0]}`)), this.original = c.join(".");
      } }), Object.defineProperty(a, "this", { enumerable: false, get() {
        return this.head.type === "ThisHead";
      } }), Object.defineProperty(a, "data", { enumerable: false, get() {
        return this.head.type === "AtHead";
      } }), a;
    }({ head: e5, tail: t, loc: r });
  }
  head({ original: e5, loc: t }) {
    return e5 === "this" ? this.this({ loc: t }) : e5[0] === "@" ? this.atName({ name: e5, loc: t }) : this.var({ name: e5, loc: t });
  }
  this({ loc: e5 }) {
    return { type: "ThisHead", get original() {
      return "this";
    }, loc: e5 };
  }
  atName({ name: e5, loc: t }) {
    let r = "", s = { type: "AtHead", get name() {
      return r;
    }, set name(n) {
      n[0], n.indexOf("."), r = n;
    }, get original() {
      return this.name;
    }, set original(n) {
      this.name = n;
    }, loc: t };
    return s.name = e5, s;
  }
  var({ name: e5, loc: t }) {
    let r = "", s = { type: "VarHead", get name() {
      return r;
    }, set name(n) {
      n[0], n.indexOf("."), r = n;
    }, get original() {
      return this.name;
    }, set original(n) {
      this.name = n;
    }, loc: t };
    return s.name = e5, s;
  }
  hash({ pairs: e5, loc: t }) {
    return { type: "Hash", pairs: e5, loc: t };
  }
  pair({ key: e5, value: t, loc: r }) {
    return { type: "HashPair", key: e5, value: t, loc: r };
  }
  literal({ type: e5, value: t, loc: r }) {
    return function({ type: s, value: n, loc: i }) {
      let a = { type: s, value: n, loc: i };
      return Object.defineProperty(a, "original", { enumerable: false, get() {
        return this.value;
      }, set(o) {
        this.value = o;
      } }), a;
    }({ type: e5, value: t, loc: r });
  }
}(), vr = class {
  constructor(t, r = new lr(Es), s = "precompile") {
    this.elementStack = [], this.currentAttribute = null, this.currentNode = null, this.source = t, this.lines = t.source.split(/\r\n?|\n/u), this.tokenizer = new cr(this, r, s);
  }
  offset() {
    let { line: t, column: r } = this.tokenizer;
    return this.source.offsetFor(t, r);
  }
  pos({ line: t, column: r }) {
    return this.source.offsetFor(t, r);
  }
  finish(t) {
    return tr({}, t, { loc: t.start.until(this.offset()) });
  }
  get currentAttr() {
    return this.currentAttribute;
  }
  get currentTag() {
    let t = this.currentNode;
    return t && (t.type === "StartTag" || t.type), t;
  }
  get currentStartTag() {
    let t = this.currentNode;
    return t && t.type, t;
  }
  get currentEndTag() {
    let t = this.currentNode;
    return t && t.type, t;
  }
  get currentComment() {
    let t = this.currentNode;
    return t && t.type, t;
  }
  get currentData() {
    let t = this.currentNode;
    return t && t.type, t;
  }
  acceptNode(t) {
    return this[t.type](t);
  }
  currentElement() {
    return Nr(this.elementStack);
  }
  sourceForNode(t, r) {
    let s, n, i, a = t.loc.start.line - 1, o = a - 1, c = t.loc.start.column, h = [];
    for (r ? (n = r.loc.end.line - 1, i = r.loc.end.column) : (n = t.loc.end.line - 1, i = t.loc.end.column); o < n; ) o++, s = this.lines[o], o === a ? a === n ? h.push(s.slice(c, i)) : h.push(s.slice(c)) : o === n ? h.push(s.slice(0, i)) : h.push(s);
    return h.join(`
`);
  }
}, Er = class extends vr {
  parse(t, r) {
    var i;
    t.loc;
    let s = f.template({ body: [], blockParams: r, loc: this.source.spanFor(t.loc) }), n = this.parseProgram(s, t);
    return (i = this.pendingError) == null || i.eof(n.loc.getEnd()), n;
  }
  Program(t, r) {
    t.loc;
    let s = f.blockItself({ body: [], params: r, chained: t.chained, loc: this.source.spanFor(t.loc) });
    return this.parseProgram(s, t);
  }
  parseProgram(t, r) {
    if (r.body.length === 0) return t;
    let s;
    try {
      this.elementStack.push(t);
      for (let n of r.body) this.acceptNode(n);
    } finally {
      s = this.elementStack.pop();
    }
    if (t !== s) {
      if ((s == null ? void 0 : s.type) === "ElementNode") throw v(`Unclosed element \`${s.tag}\``, s.loc);
      t.type;
    }
    return t;
  }
  BlockStatement(t) {
    var m;
    if (this.tokenizer.state === "comment") return t.loc, void this.appendToCommentData(this.sourceForNode(t));
    if (this.tokenizer.state !== "data" && this.tokenizer.state !== "beforeData") throw v("A block may only be used inside an HTML element or another block.", this.source.spanFor(t.loc));
    let { path: r, params: s, hash: n } = fr(this, t), i = this.source.spanFor(t.loc), a, o = [];
    if ((m = t.program.blockParams) != null && m.length) {
      let S = n.loc.collapse("end");
      S = t.program.loc ? S.withEnd(this.source.spanFor(t.program.loc).getStart()) : t.program.body[0] ? S.withEnd(this.source.spanFor(t.program.body[0].loc).getStart()) : S.withEnd(i.getEnd()), a = Ls(this.source, t, S);
      let y = S.asString(), E = y.indexOf("|") + 1, C = y.indexOf("|", E);
      for (let x of t.program.blockParams) {
        let w, U;
        w = E >= C ? -1 : y.indexOf(x, E), w === -1 || w + x.length > C ? (E = C, U = this.source.spanFor(gr)) : (E = w, U = S.sliceStartChars({ skipStart: E, chars: x.length }), E += x.length), o.push(f.var({ name: x, loc: U }));
      }
    } else a = Ls(this.source, t, i);
    let c = this.Program(a.program, o), h = a.inverse ? this.Program(a.inverse, []) : null, p = f.block({ path: r, params: s, hash: n, defaultBlock: c, elseBlock: h, loc: this.source.spanFor(t.loc), openStrip: t.openStrip, inverseStrip: t.inverseStrip, closeStrip: t.closeStrip });
    Ht(this.currentElement(), p);
  }
  MustacheStatement(t) {
    var o;
    (o = this.pendingError) == null || o.mustache(this.source.spanFor(t.loc));
    let { tokenizer: r } = this;
    if (r.state === "comment") return void this.appendToCommentData(this.sourceForNode(t));
    let s, { escaped: n, loc: i, strip: a } = t;
    if ("original" in t.path && t.path.original === "...attributes") throw v("Illegal use of ...attributes", this.source.spanFor(t.loc));
    if (Rs(t.path)) s = f.mustache({ path: this.acceptNode(t.path), params: [], hash: f.hash({ pairs: [], loc: this.source.spanFor(t.path.loc).collapse("end") }), trusting: !n, loc: this.source.spanFor(i), strip: a });
    else {
      let { path: c, params: h, hash: p } = fr(this, t);
      s = f.mustache({ path: c, params: h, hash: p, trusting: !n, loc: this.source.spanFor(i), strip: a });
    }
    switch (r.state) {
      case "tagOpen":
      case "tagName":
        throw v("Cannot use mustaches in an elements tagname", s.loc);
      case "beforeAttributeName":
        mr(this.currentStartTag, s);
        break;
      case "attributeName":
      case "afterAttributeName":
        this.beginAttributeValue(false), this.finishAttributeValue(), mr(this.currentStartTag, s), r.transitionTo("beforeAttributeName");
        break;
      case "afterAttributeValueQuoted":
        mr(this.currentStartTag, s), r.transitionTo("beforeAttributeName");
        break;
      case "beforeAttributeValue":
        this.beginAttributeValue(false), this.appendDynamicAttributeValuePart(s), r.transitionTo("attributeValueUnquoted");
        break;
      case "attributeValueDoubleQuoted":
      case "attributeValueSingleQuoted":
      case "attributeValueUnquoted":
        this.appendDynamicAttributeValuePart(s);
        break;
      default:
        Ht(this.currentElement(), s);
    }
    return s;
  }
  appendDynamicAttributeValuePart(t) {
    this.finalizeTextPart();
    let r = this.currentAttr;
    r.isDynamic = true, r.parts.push(t);
  }
  finalizeTextPart() {
    let t = this.currentAttr.currentPart;
    t !== null && (this.currentAttr.parts.push(t), this.startTextPart());
  }
  startTextPart() {
    this.currentAttr.currentPart = null;
  }
  ContentStatement(t) {
    (function(r, s) {
      let n = s.loc.start.line, i = s.loc.start.column, a = function(o, c) {
        if (c === "") return { lines: o.split(`
`).length - 1, columns: 0 };
        let [h] = o.split(c), p = h.split(/\n/u), m = p.length - 1;
        return { lines: m, columns: p[m].length };
      }(s.original, s.value);
      n += a.lines, a.lines ? i = a.columns : i += a.columns, r.line = n, r.column = i;
    })(this.tokenizer, t), this.tokenizer.tokenizePart(t.value), this.tokenizer.flushData();
  }
  CommentStatement(t) {
    let { tokenizer: r } = this;
    if (r.state === "comment") return this.appendToCommentData(this.sourceForNode(t)), null;
    let { value: s, loc: n } = t, i = f.mustacheComment({ value: s, loc: this.source.spanFor(n) });
    switch (r.state) {
      case "beforeAttributeName":
      case "afterAttributeName":
        this.currentStartTag.comments.push(i);
        break;
      case "beforeData":
      case "data":
        Ht(this.currentElement(), i);
        break;
      default:
        throw v(`Using a Handlebars comment when in the \`${r.state}\` state is not supported`, this.source.spanFor(t.loc));
    }
    return i;
  }
  PartialStatement(t) {
    throw v("Handlebars partials are not supported", this.source.spanFor(t.loc));
  }
  PartialBlockStatement(t) {
    throw v("Handlebars partial blocks are not supported", this.source.spanFor(t.loc));
  }
  Decorator(t) {
    throw v("Handlebars decorators are not supported", this.source.spanFor(t.loc));
  }
  DecoratorBlock(t) {
    throw v("Handlebars decorator blocks are not supported", this.source.spanFor(t.loc));
  }
  SubExpression(t) {
    let { path: r, params: s, hash: n } = fr(this, t);
    return f.sexpr({ path: r, params: s, hash: n, loc: this.source.spanFor(t.loc) });
  }
  PathExpression(t) {
    let { original: r } = t, s;
    if (r.indexOf("/") !== -1) {
      if (r.slice(0, 2) === "./") throw v('Using "./" is not supported in Glimmer and unnecessary', this.source.spanFor(t.loc));
      if (r.slice(0, 3) === "../") throw v('Changing context using "../" is not supported in Glimmer', this.source.spanFor(t.loc));
      if (r.indexOf(".") !== -1) throw v("Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths", this.source.spanFor(t.loc));
      s = [t.parts.join("/")];
    } else {
      if (r === ".") throw v("'.' is not a supported path in Glimmer; check for a path with a trailing '.'", this.source.spanFor(t.loc));
      s = t.parts;
    }
    let n, i = false;
    if (/^this(?:\..+)?$/u.test(r) && (i = true), i) n = f.this({ loc: this.source.spanFor({ start: t.loc.start, end: { line: t.loc.start.line, column: t.loc.start.column + 4 } }) });
    else if (t.data) {
      let a = s.shift();
      if (a === void 0) throw v("Attempted to parse a path expression, but it was not valid. Paths beginning with @ must start with a-z.", this.source.spanFor(t.loc));
      n = f.atName({ name: `@${a}`, loc: this.source.spanFor({ start: t.loc.start, end: { line: t.loc.start.line, column: t.loc.start.column + a.length + 1 } }) });
    } else {
      let a = s.shift();
      if (a === void 0) throw v("Attempted to parse a path expression, but it was not valid. Paths must start with a-z or A-Z.", this.source.spanFor(t.loc));
      n = f.var({ name: a, loc: this.source.spanFor({ start: t.loc.start, end: { line: t.loc.start.line, column: t.loc.start.column + a.length } }) });
    }
    return f.path({ head: n, tail: s, loc: this.source.spanFor(t.loc) });
  }
  Hash(t) {
    let r = t.pairs.map((s) => f.pair({ key: s.key, value: this.acceptNode(s.value), loc: this.source.spanFor(s.loc) }));
    return f.hash({ pairs: r, loc: this.source.spanFor(t.loc) });
  }
  StringLiteral(t) {
    return f.literal({ type: "StringLiteral", value: t.value, loc: this.source.spanFor(t.loc) });
  }
  BooleanLiteral(t) {
    return f.literal({ type: "BooleanLiteral", value: t.value, loc: this.source.spanFor(t.loc) });
  }
  NumberLiteral(t) {
    return f.literal({ type: "NumberLiteral", value: t.value, loc: this.source.spanFor(t.loc) });
  }
  UndefinedLiteral(t) {
    return f.literal({ type: "UndefinedLiteral", value: void 0, loc: this.source.spanFor(t.loc) });
  }
  NullLiteral(t) {
    return f.literal({ type: "NullLiteral", value: null, loc: this.source.spanFor(t.loc) });
  }
  constructor(...t) {
    super(...t), this.pendingError = null;
  }
};
function fr(e5, t) {
  let r;
  switch (t.path.type) {
    case "PathExpression":
      r = e5.PathExpression(t.path);
      break;
    case "SubExpression":
      r = e5.SubExpression(t.path);
      break;
    case "StringLiteral":
    case "UndefinedLiteral":
    case "NullLiteral":
    case "NumberLiteral":
    case "BooleanLiteral": {
      let i;
      throw i = t.path.type === "BooleanLiteral" ? t.path.original.toString() : t.path.type === "StringLiteral" ? `"${t.path.original}"` : t.path.type === "NullLiteral" ? "null" : t.path.type === "NumberLiteral" ? t.path.value.toString() : "undefined", v(`${t.path.type} "${t.path.type === "StringLiteral" ? t.path.original : i}" cannot be called as a sub-expression, replace (${i}) with ${i}`, e5.source.spanFor(t.path.loc));
    }
  }
  let s = t.params.map((i) => e5.acceptNode(i)), n = ce(s) ? Nr(s).loc : r.loc;
  return { path: r, params: s, hash: t.hash ? e5.Hash(t.hash) : f.hash({ pairs: [], loc: e5.source.spanFor(n).collapse("end") }) };
}
function mr(e5, t) {
  let { path: r, params: s, hash: n, loc: i } = t;
  if (Rs(r)) {
    let o = `{{${function(c) {
      return c.type === "UndefinedLiteral" ? "undefined" : JSON.stringify(c.value);
    }(r)}}}`;
    throw v(`In <${e5.name} ... ${o} ..., ${o} is not a valid modifier`, t.loc);
  }
  let a = f.elementModifier({ path: r, params: s, hash: n, loc: i });
  e5.modifiers.push(a);
}
function Ls(e5, t, r) {
  if (!t.program.loc) {
    let n = G(false, t.program.body, 0), i = G(false, t.program.body, -1);
    if (n && i) t.program.loc = { ...n.loc, end: i.loc.end };
    else {
      let a = e5.spanFor(t.loc);
      t.program.loc = r.withEnd(a.getEnd());
    }
  }
  let s = e5.spanFor(t.program.loc).getEnd();
  return t.inverse && !t.inverse.loc && (t.inverse.loc = s.collapsed()), t;
}
function Ft(e5) {
  return /[\t\n\f ]/u.test(e5);
}
var wr = class extends Er {
  reset() {
    this.currentNode = null;
  }
  beginComment() {
    this.currentNode = { type: "CommentStatement", value: "", start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn) };
  }
  appendToCommentData(t) {
    this.currentComment.value += t;
  }
  finishComment() {
    Ht(this.currentElement(), f.comment(this.finish(this.currentComment)));
  }
  beginData() {
    this.currentNode = { type: "TextNode", chars: "", start: this.offset() };
  }
  appendToData(t) {
    this.currentData.chars += t;
  }
  finishData() {
    Ht(this.currentElement(), f.text(this.finish(this.currentData)));
  }
  tagOpen() {
    this.tagOpenLine = this.tokenizer.line, this.tagOpenColumn = this.tokenizer.column;
  }
  beginStartTag() {
    this.currentNode = { type: "StartTag", name: "", nameStart: null, nameEnd: null, attributes: [], modifiers: [], comments: [], params: [], selfClosing: false, start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn) };
  }
  beginEndTag() {
    this.currentNode = { type: "EndTag", name: "", start: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn) };
  }
  finishTag() {
    let t = this.finish(this.currentTag);
    if (t.type === "StartTag") {
      if (this.finishStartTag(), t.name === ":") throw v("Invalid named block named detected, you may have created a named block without a name, or you may have began your name with a number. Named blocks must have names that are at least one character long, and begin with a lower case letter", this.source.spanFor({ start: this.currentTag.start.toJSON(), end: this.offset().toJSON() }));
      (dr.has(t.name) || t.selfClosing) && this.finishEndTag(true);
    } else t.type, t.type, this.finishEndTag(false);
  }
  finishStartTag() {
    let { name: t, nameStart: r, nameEnd: s } = this.currentStartTag, n = r.until(s), [i, ...a] = t.split("."), o = f.path({ head: f.head({ original: i, loc: n.sliceStartChars({ chars: i.length }) }), tail: a, loc: n }), { attributes: c, modifiers: h, comments: p, params: m, selfClosing: S, loc: y } = this.finish(this.currentStartTag), E = f.element({ path: o, selfClosing: S, attributes: c, modifiers: h, comments: p, params: m, children: [], openTag: y, closeTag: S ? null : D.broken(), loc: y });
    this.elementStack.push(E);
  }
  finishEndTag(t) {
    let { start: r } = this.currentTag, s = this.finish(this.currentTag), n = this.elementStack.pop();
    this.validateEndTag(s, n, t);
    let i = this.currentElement();
    t ? n.closeTag = null : n.selfClosing ? n.closeTag : n.closeTag = r.until(this.offset()), n.loc = n.loc.withEnd(this.offset()), Ht(i, f.element(n));
  }
  markTagAsSelfClosing() {
    let t = this.currentTag;
    if (t.type !== "StartTag") throw v("Invalid end tag: closing tag must not be self-closing", this.source.spanFor({ start: t.start.toJSON(), end: this.offset().toJSON() }));
    t.selfClosing = true;
  }
  appendToTagName(t) {
    let r = this.currentTag;
    if (r.name += t, r.type === "StartTag") {
      let s = this.offset();
      r.nameStart === null && (r.nameEnd, r.nameStart = s.move(-1)), r.nameEnd = s;
    }
  }
  beginAttribute() {
    let t = this.offset();
    this.currentAttribute = { name: "", parts: [], currentPart: null, isQuoted: false, isDynamic: false, start: t, valueSpan: t.collapsed() };
  }
  appendToAttributeName(t) {
    this.currentAttr.name += t, this.currentAttr.name === "as" && this.parsePossibleBlockParams();
  }
  beginAttributeValue(t) {
    this.currentAttr.isQuoted = t, this.startTextPart(), this.currentAttr.valueSpan = this.offset().collapsed();
  }
  appendToAttributeValue(t) {
    let r = this.currentAttr.parts, s = r[r.length - 1], n = this.currentAttr.currentPart;
    if (n) n.chars += t, n.loc = n.loc.withEnd(this.offset());
    else {
      let i = this.offset();
      i = t === `
` ? s ? s.loc.getEnd() : this.currentAttr.valueSpan.getStart() : i.move(-1), this.currentAttr.currentPart = f.text({ chars: t, loc: i.collapsed() });
    }
  }
  finishAttributeValue() {
    this.finalizeTextPart();
    let t = this.currentTag, r = this.offset();
    if (t.type === "EndTag") throw v("Invalid end tag: closing tag must not have attributes", this.source.spanFor({ start: t.start.toJSON(), end: r.toJSON() }));
    let { name: s, parts: n, start: i, isQuoted: a, isDynamic: o, valueSpan: c } = this.currentAttr;
    if (s.startsWith("|") && n.length === 0 && !a && !o) throw v("Invalid block parameters syntax: block parameters must be preceded by the `as` keyword", i.until(i.move(s.length)));
    let h = this.assembleAttributeValue(n, a, o, i.until(r));
    h.loc = c.withEnd(r);
    let p = f.attr({ name: s, value: h, loc: i.until(r) });
    this.currentStartTag.attributes.push(p);
  }
  parsePossibleBlockParams() {
    let t = /[!"#%&'()*+./;<=>@[\\\]^`{|}~]/u;
    this.tokenizer.state;
    let r = this.currentStartTag, s = this.currentAttr, n = { state: "PossibleAs" }, i = { PossibleAs: (o) => {
      if (n.state, Ft(o)) n = { state: "BeforeStartPipe" }, this.tokenizer.transitionTo("afterAttributeName"), this.tokenizer.consume();
      else {
        if (o === "|") throw v('Invalid block parameters syntax: expecting at least one space character between "as" and "|"', s.start.until(this.offset().move(1)));
        n = { state: "Done" };
      }
    }, BeforeStartPipe: (o) => {
      n.state, Ft(o) ? this.tokenizer.consume() : o === "|" ? (n = { state: "BeforeBlockParamName" }, this.tokenizer.transitionTo("beforeAttributeName"), this.tokenizer.consume()) : n = { state: "Done" };
    }, BeforeBlockParamName: (o) => {
      if (n.state, Ft(o)) this.tokenizer.consume();
      else if (o === "") n = { state: "Done" }, this.pendingError = { mustache(c) {
        throw v("Invalid block parameters syntax: mustaches cannot be used inside parameters list", c);
      }, eof(c) {
        throw v('Invalid block parameters syntax: expecting the tag to be closed with ">" or "/>" after parameters list', s.start.until(c));
      } };
      else if (o === "|") {
        if (r.params.length === 0) throw v("Invalid block parameters syntax: empty parameters list, expecting at least one identifier", s.start.until(this.offset().move(1)));
        n = { state: "AfterEndPipe" }, this.tokenizer.consume();
      } else {
        if (o === ">" || o === "/") throw v('Invalid block parameters syntax: incomplete parameters list, expecting "|" but the tag was closed prematurely', s.start.until(this.offset().move(1)));
        n = { state: "BlockParamName", name: o, start: this.offset() }, this.tokenizer.consume();
      }
    }, BlockParamName: (o) => {
      if (n.state, o === "") n = { state: "Done" }, this.pendingError = { mustache(c) {
        throw v("Invalid block parameters syntax: mustaches cannot be used inside parameters list", c);
      }, eof(c) {
        throw v('Invalid block parameters syntax: expecting the tag to be closed with ">" or "/>" after parameters list', s.start.until(c));
      } };
      else if (o === "|" || Ft(o)) {
        let c = n.start.until(this.offset());
        if (n.name === "this" || t.test(n.name)) throw v(`Invalid block parameters syntax: invalid identifier name \`${n.name}\``, c);
        r.params.push(f.var({ name: n.name, loc: c })), n = o === "|" ? { state: "AfterEndPipe" } : { state: "BeforeBlockParamName" }, this.tokenizer.consume();
      } else {
        if (o === ">" || o === "/") throw v('Invalid block parameters syntax: expecting "|" but the tag was closed prematurely', s.start.until(this.offset().move(1)));
        n.name += o, this.tokenizer.consume();
      }
    }, AfterEndPipe: (o) => {
      n.state, Ft(o) ? this.tokenizer.consume() : o === "" ? (n = { state: "Done" }, this.pendingError = { mustache(c) {
        throw v("Invalid block parameters syntax: modifiers cannot follow parameters list", c);
      }, eof(c) {
        throw v('Invalid block parameters syntax: expecting the tag to be closed with ">" or "/>" after parameters list', s.start.until(c));
      } }) : o === ">" || o === "/" ? n = { state: "Done" } : (n = { state: "Error", message: 'Invalid block parameters syntax: expecting the tag to be closed with ">" or "/>" after parameters list', start: this.offset() }, this.tokenizer.consume());
    }, Error: (o) => {
      if (n.state, o === "" || o === "/" || o === ">" || Ft(o)) throw v(n.message, n.start.until(this.offset()));
      this.tokenizer.consume();
    }, Done: () => {
    } }, a;
    do
      a = this.tokenizer.peek(), i[n.state](a);
    while (n.state !== "Done" && a !== "");
    n.state;
  }
  reportSyntaxError(t) {
    throw v(t, this.offset().collapsed());
  }
  assembleConcatenatedValue(t) {
    let r = ii(t), s = Nr(t);
    return f.concat({ parts: t, loc: this.source.spanFor(r.loc).extend(this.source.spanFor(s.loc)) });
  }
  validateEndTag(t, r, s) {
    if (dr.has(t.name) && !s) throw v(`<${t.name}> elements do not need end tags. You should remove it`, t.loc);
    if (r.type !== "ElementNode") throw v(`Closing tag </${t.name}> without an open tag`, t.loc);
    if (r.tag !== t.name) throw v(`Closing tag </${t.name}> did not match last open tag <${r.tag}> (on line ${r.loc.startPosition.line})`, t.loc);
  }
  assembleAttributeValue(t, r, s, n) {
    if (s) {
      if (r) return this.assembleConcatenatedValue(t);
      {
        let [i, a] = t;
        if (a === void 0 || a.type === "TextNode" && a.chars === "/") return i;
        throw v("An unquoted attribute value must be a string or a mustache, preceded by whitespace or a '=' character, and followed by whitespace, a '>' character, or '/>'", n);
      }
    }
    return ce(t) ? t[0] : f.text({ chars: "", loc: n });
  }
  constructor(...t) {
    super(...t), this.tagOpenLine = 0, this.tagOpenColumn = 0;
  }
}, mi = {}, Tr = class extends lr {
  constructor() {
    super({});
  }
  parse() {
  }
};
function Vs(e5, t = {}) {
  var c, h, p;
  let r, s, n, i = t.mode || "precompile";
  typeof e5 == "string" ? (r = new wt(e5, (c = t.meta) == null ? void 0 : c.moduleName), s = i === "codemod" ? Te(e5, t.parseOptions) : or(e5, t.parseOptions)) : e5 instanceof wt ? (r = e5, s = i === "codemod" ? Te(e5.source, t.parseOptions) : or(e5.source, t.parseOptions)) : (r = new wt("", (h = t.meta) == null ? void 0 : h.moduleName), s = e5), i === "codemod" && (n = new Tr());
  let a = D.forCharPositions(r, 0, r.source.length);
  s.loc = { source: "(program)", start: a.startPosition, end: a.endPosition };
  let o = new wr(r, n, i).parse(s, t.locals ?? []);
  if ((p = t.plugins) != null && p.ast) for (let m of t.plugins.ast) pi(o, m(tr({}, t, { syntax: mi }, { plugins: void 0 })).visitor);
  return o;
}
var Le = `
`, Fs = "\r", Hs = function() {
  function e5(t) {
    this.length = t.length;
    for (var r = [0], s = 0; s < t.length; ) switch (t[s]) {
      case Le:
        s += Le.length, r.push(s);
        break;
      case Fs:
        s += Fs.length, t[s] === Le && (s += Le.length), r.push(s);
        break;
      default:
        s++;
        break;
    }
    this.offsets = r;
  }
  return e5.prototype.locationForIndex = function(t) {
    if (t < 0 || t > this.length) return null;
    for (var r = 0, s = this.offsets; s[r + 1] <= t; ) r++;
    var n = t - s[r];
    return { line: r, column: n };
  }, e5.prototype.indexForLocation = function(t) {
    var r = t.line, s = t.column;
    return r < 0 || r >= this.offsets.length || s < 0 || s > this.lengthOfLine(r) ? null : this.offsets[r] + s;
  }, e5.prototype.lengthOfLine = function(t) {
    var r = this.offsets[t], s = t === this.offsets.length - 1 ? this.length : this.offsets[t + 1];
    return s - r;
  }, e5;
}();
function gi(e5, t) {
  let r = new SyntaxError(e5 + " (" + t.loc.start.line + ":" + t.loc.start.column + ")");
  return Object.assign(r, t);
}
var Us = gi;
function bi(e5) {
  let t = e5.children ?? e5.body;
  if (t) for (let r = 0; r < t.length - 1; r++) t[r].type === "TextNode" && t[r + 1].type === "MustacheStatement" && (t[r].chars = t[r].chars.replace(/\\$/u, "\\\\"));
}
function yi(e5) {
  let t = new Hs(e5), r = ({ line: n, column: i }) => t.indexForLocation({ line: n - 1, column: i }), s = (n) => {
    let { start: i, end: a } = n.loc;
    i.offset = r(i), a.offset = r(a);
  };
  return () => ({ name: "prettierParsePlugin", visitor: { All(n) {
    s(n), bi(n);
  } } });
}
function ki(e5) {
  let t;
  try {
    t = Vs(e5, { mode: "codemod", plugins: { ast: [yi(e5)] } });
  } catch (r) {
    let s = vi(r);
    if (s) {
      let n = Si(r);
      throw Us(n, { loc: s, cause: r });
    }
    throw r;
  }
  return t;
}
function Si(e5) {
  let { message: t } = e5, r = t.split(`
`);
  return r.length >= 4 && /^Parse error on line \d+:$/u.test(r[0]) && /^-*\^$/u.test(G(false, r, -2)) ? G(false, r, -1) : r.length >= 4 && /:\s?$/u.test(r[0]) && /^\(error occurred in '.*?' @ line \d+ : column \d+\)$/u.test(G(false, r, -1)) && r[1] === "" && G(false, r, -2) === "" && r.slice(2, -2).every((s) => s.startsWith("|")) ? r[0].trim().slice(0, -1) : t;
}
function vi(e5) {
  let { location: t, hash: r } = e5;
  if (t) {
    let { start: s, end: n } = t;
    return typeof n.line != "number" ? { start: s } : t;
  }
  if (r) {
    let { loc: { last_line: s, last_column: n } } = r;
    return { start: { line: s, column: n + 1 } };
  }
}
var Ei = { parse: ki, astFormat: "glimmer", locStart: St, locEnd: re };
var wi = { glimmer: hs };
var Do = Pr;
export {
  Do as default,
  ps as languages,
  xr as parsers,
  wi as printers
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
