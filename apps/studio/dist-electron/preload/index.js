"use strict";
const electron = require("electron");
const env = {
  WEBVIEW_PRELOAD_PATH: process.env.WEBVIEW_PRELOAD_PATH,
  APP_VERSION: process.env.APP_VERSION,
  IS_DEV: true,
  PLATFORM: process.platform
};
const store = {
  get(val) {
    return electron.ipcRenderer.sendSync("electron-store-get", val);
  },
  set(property, val) {
    electron.ipcRenderer.send("electron-store-set", property, val);
  },
  has(val) {
    return electron.ipcRenderer.sendSync("electron-store-has", val);
  }
};
const api = {
  send(channel, args) {
    electron.ipcRenderer.send(channel, args);
  },
  on(channel, func) {
    const subscription = (_event, ...args) => func(...args);
    electron.ipcRenderer.on(channel, subscription);
    return () => electron.ipcRenderer.removeListener(channel, subscription);
  },
  once(channel, func) {
    electron.ipcRenderer.once(channel, (_event, ...args) => func(...args));
  },
  invoke(channel, ...args) {
    return electron.ipcRenderer.invoke(channel, ...args);
  },
  removeListener(channel, listener) {
    electron.ipcRenderer.removeListener(
      channel,
      listener
    );
  },
  removeAllListeners(channel) {
    electron.ipcRenderer.removeAllListeners(channel);
  }
};
electron.contextBridge.exposeInMainWorld("api", api);
electron.contextBridge.exposeInMainWorld("store", store);
electron.contextBridge.exposeInMainWorld("env", env);
electron.contextBridge.exposeInMainWorld("process", process);
electron.webFrame.setZoomFactor(1);
electron.webFrame.setVisualZoomLevelLimits(1, 1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uL2VsZWN0cm9uL3ByZWxvYWQvYnJvd3NlcnZpZXcvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDaGFubmVscyB9IGZyb20gJ0Bvbmxvb2svbW9kZWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgdHlwZSB7IElwY1JlbmRlcmVyRXZlbnQgfSBmcm9tICdlbGVjdHJvbic7XG5pbXBvcnQgeyBjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlciwgd2ViRnJhbWUgfSBmcm9tICdlbGVjdHJvbic7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgICAgYXBpOiB0eXBlb2YgYXBpO1xuICAgICAgICBlbnY6IHR5cGVvZiBlbnY7XG4gICAgICAgIHN0b3JlOiB0eXBlb2Ygc3RvcmU7XG4gICAgfVxufVxuXG5jb25zdCBlbnYgPSB7XG4gICAgV0VCVklFV19QUkVMT0FEX1BBVEg6IHByb2Nlc3MuZW52LldFQlZJRVdfUFJFTE9BRF9QQVRILFxuICAgIEFQUF9WRVJTSU9OOiBwcm9jZXNzLmVudi5BUFBfVkVSU0lPTixcbiAgICBJU19ERVY6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnLFxuICAgIFBMQVRGT1JNOiBwcm9jZXNzLnBsYXRmb3JtLFxufTtcblxuY29uc3Qgc3RvcmUgPSB7XG4gICAgZ2V0KHZhbDogYW55KSB7XG4gICAgICAgIHJldHVybiBpcGNSZW5kZXJlci5zZW5kU3luYygnZWxlY3Ryb24tc3RvcmUtZ2V0JywgdmFsKTtcbiAgICB9LFxuICAgIHNldChwcm9wZXJ0eTogc3RyaW5nLCB2YWw6IGFueSkge1xuICAgICAgICBpcGNSZW5kZXJlci5zZW5kKCdlbGVjdHJvbi1zdG9yZS1zZXQnLCBwcm9wZXJ0eSwgdmFsKTtcbiAgICB9LFxuICAgIGhhcyh2YWw6IGFueSkge1xuICAgICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoJ2VsZWN0cm9uLXN0b3JlLWhhcycsIHZhbCk7XG4gICAgfSxcbn07XG5cbmNvbnN0IGFwaSA9IHtcbiAgICBzZW5kPFQ+KGNoYW5uZWw6IENoYW5uZWxzLCBhcmdzOiBUKSB7XG4gICAgICAgIGlwY1JlbmRlcmVyLnNlbmQoY2hhbm5lbCwgYXJncyk7XG4gICAgfSxcblxuICAgIG9uPFQ+KGNoYW5uZWw6IENoYW5uZWxzLCBmdW5jOiAoLi4uYXJnczogVFtdKSA9PiB2b2lkKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IChfZXZlbnQ6IElwY1JlbmRlcmVyRXZlbnQsIC4uLmFyZ3M6IFRbXSkgPT4gZnVuYyguLi5hcmdzKTtcbiAgICAgICAgaXBjUmVuZGVyZXIub24oY2hhbm5lbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuICgpID0+IGlwY1JlbmRlcmVyLnJlbW92ZUxpc3RlbmVyKGNoYW5uZWwsIHN1YnNjcmlwdGlvbik7XG4gICAgfSxcblxuICAgIG9uY2U8VD4oY2hhbm5lbDogQ2hhbm5lbHMsIGZ1bmM6ICguLi5hcmdzOiBUW10pID0+IHZvaWQpIHtcbiAgICAgICAgaXBjUmVuZGVyZXIub25jZShjaGFubmVsLCAoX2V2ZW50LCAuLi5hcmdzKSA9PiBmdW5jKC4uLmFyZ3MpKTtcbiAgICB9LFxuXG4gICAgaW52b2tlPFQsIFA+KGNoYW5uZWw6IENoYW5uZWxzLCAuLi5hcmdzOiBUW10pOiBQcm9taXNlPFA+IHtcbiAgICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLmludm9rZShjaGFubmVsLCAuLi5hcmdzKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlTGlzdGVuZXI8VD4oY2hhbm5lbDogQ2hhbm5lbHMsIGxpc3RlbmVyOiAoLi4uYXJnczogVFtdKSA9PiB2b2lkKSB7XG4gICAgICAgIGlwY1JlbmRlcmVyLnJlbW92ZUxpc3RlbmVyKFxuICAgICAgICAgICAgY2hhbm5lbCxcbiAgICAgICAgICAgIGxpc3RlbmVyIGFzIChldmVudDogRWxlY3Ryb24uSXBjUmVuZGVyZXJFdmVudCwgLi4uYXJnczogYW55W10pID0+IHZvaWQsXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHJlbW92ZUFsbExpc3RlbmVycyhjaGFubmVsOiBDaGFubmVscykge1xuICAgICAgICBpcGNSZW5kZXJlci5yZW1vdmVBbGxMaXN0ZW5lcnMoY2hhbm5lbCk7XG4gICAgfSxcbn07XG5cbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoJ2FwaScsIGFwaSk7XG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdzdG9yZScsIHN0b3JlKTtcbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoJ2VudicsIGVudik7XG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdwcm9jZXNzJywgcHJvY2Vzcyk7XG5cbi8vIFNldCB6b29tIGxldmVsXG53ZWJGcmFtZS5zZXRab29tRmFjdG9yKDEpO1xud2ViRnJhbWUuc2V0VmlzdWFsWm9vbUxldmVsTGltaXRzKDEsIDEpO1xuIl0sIm5hbWVzIjpbImlwY1JlbmRlcmVyIiwiY29udGV4dEJyaWRnZSIsIndlYkZyYW1lIl0sIm1hcHBpbmdzIjoiOztBQVlBLE1BQU0sTUFBTTtBQUFBLEVBQ1Isc0JBQXNCLFFBQVksSUFBQTtBQUFBLEVBQ2xDLGFBQWEsUUFBWSxJQUFBO0FBQUEsRUFDekIsUUFBUTtBQUFBLEVBQ1IsVUFBVSxRQUFRO0FBQ3RCO0FBRUEsTUFBTSxRQUFRO0FBQUEsRUFDVixJQUFJLEtBQVU7QUFDSCxXQUFBQSxxQkFBWSxTQUFTLHNCQUFzQixHQUFHO0FBQUEsRUFDekQ7QUFBQSxFQUNBLElBQUksVUFBa0IsS0FBVTtBQUNoQkEsYUFBQUEsWUFBQSxLQUFLLHNCQUFzQixVQUFVLEdBQUc7QUFBQSxFQUN4RDtBQUFBLEVBQ0EsSUFBSSxLQUFVO0FBQ0gsV0FBQUEscUJBQVksU0FBUyxzQkFBc0IsR0FBRztBQUFBLEVBQUE7QUFFN0Q7QUFFQSxNQUFNLE1BQU07QUFBQSxFQUNSLEtBQVEsU0FBbUIsTUFBUztBQUNwQkEseUJBQUEsS0FBSyxTQUFTLElBQUk7QUFBQSxFQUNsQztBQUFBLEVBRUEsR0FBTSxTQUFtQixNQUE4QjtBQUNuRCxVQUFNLGVBQWUsQ0FBQyxXQUE2QixTQUFjLEtBQUssR0FBRyxJQUFJO0FBQ2pFQSx5QkFBQSxHQUFHLFNBQVMsWUFBWTtBQUNwQyxXQUFPLE1BQU1BLFNBQUEsWUFBWSxlQUFlLFNBQVMsWUFBWTtBQUFBLEVBQ2pFO0FBQUEsRUFFQSxLQUFRLFNBQW1CLE1BQThCO0FBQ3pDQSx5QkFBQSxLQUFLLFNBQVMsQ0FBQyxXQUFXLFNBQVMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUFBLEVBQ2hFO0FBQUEsRUFFQSxPQUFhLFlBQXNCLE1BQXVCO0FBQ3RELFdBQU9BLHFCQUFZLE9BQU8sU0FBUyxHQUFHLElBQUk7QUFBQSxFQUM5QztBQUFBLEVBRUEsZUFBa0IsU0FBbUIsVUFBa0M7QUFDdkRBLGFBQUFBLFlBQUE7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQUEsRUFFQSxtQkFBbUIsU0FBbUI7QUFDbENBLGFBQUEsWUFBWSxtQkFBbUIsT0FBTztBQUFBLEVBQUE7QUFFOUM7QUFFQUMsU0FBQUEsY0FBYyxrQkFBa0IsT0FBTyxHQUFHO0FBQzFDQSxTQUFBQSxjQUFjLGtCQUFrQixTQUFTLEtBQUs7QUFDOUNBLFNBQUFBLGNBQWMsa0JBQWtCLE9BQU8sR0FBRztBQUMxQ0EsU0FBQUEsY0FBYyxrQkFBa0IsV0FBVyxPQUFPO0FBR2xEQyxTQUFBQSxTQUFTLGNBQWMsQ0FBQztBQUN4QkEsU0FBQUEsU0FBUyx5QkFBeUIsR0FBRyxDQUFDOyJ9
