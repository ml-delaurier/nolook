"use strict";
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
const electron = require("electron");
const DOM_IGNORE_TAGS = ["SCRIPT", "STYLE", "LINK", "META", "NOSCRIPT"];
const INLINE_ONLY_CONTAINERS = /* @__PURE__ */ new Set([
  "a",
  "abbr",
  "area",
  "audio",
  "b",
  "bdi",
  "bdo",
  "br",
  "button",
  "canvas",
  "cite",
  "code",
  "data",
  "datalist",
  "del",
  "dfn",
  "em",
  "embed",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "li",
  "map",
  "mark",
  "meter",
  "noscript",
  "object",
  "output",
  "p",
  "picture",
  "progress",
  "q",
  "ruby",
  "s",
  "samp",
  "script",
  "select",
  "slot",
  "small",
  "span",
  "strong",
  "sub",
  "sup",
  "svg",
  "template",
  "textarea",
  "time",
  "u",
  "var",
  "video",
  "wbr"
]);
var EditorAttributes = /* @__PURE__ */ ((EditorAttributes2) => {
  EditorAttributes2["ONLOOK_TOOLBAR"] = "onlook-toolbar";
  EditorAttributes2["ONLOOK_RECT_ID"] = "onlook-rect";
  EditorAttributes2["ONLOOK_STYLESHEET_ID"] = "onlook-stylesheet";
  EditorAttributes2["ONLOOK_STUB_ID"] = "onlook-drag-stub";
  EditorAttributes2["ONLOOK_MOVE_KEY_PREFIX"] = "olk-";
  EditorAttributes2["OVERLAY_CONTAINER_ID"] = "overlay-container";
  EditorAttributes2["CANVAS_CONTAINER_ID"] = "canvas-container";
  EditorAttributes2["DATA_ONLOOK_ID"] = "data-oid";
  EditorAttributes2["DATA_ONLOOK_INSTANCE_ID"] = "data-oiid";
  EditorAttributes2["DATA_ONLOOK_DOM_ID"] = "data-odid";
  EditorAttributes2["DATA_ONLOOK_COMPONENT_NAME"] = "data-ocname";
  EditorAttributes2["DATA_ONLOOK_IGNORE"] = "data-onlook-ignore";
  EditorAttributes2["DATA_ONLOOK_INSERTED"] = "data-onlook-inserted";
  EditorAttributes2["DATA_ONLOOK_DRAG_SAVED_STYLE"] = "data-onlook-drag-saved-style";
  EditorAttributes2["DATA_ONLOOK_DRAGGING"] = "data-onlook-dragging";
  EditorAttributes2["DATA_ONLOOK_DRAG_DIRECTION"] = "data-onlook-drag-direction";
  EditorAttributes2["DATA_ONLOOK_DRAG_START_POSITION"] = "data-onlook-drag-start-position";
  EditorAttributes2["DATA_ONLOOK_NEW_INDEX"] = "data-onlook-new-index";
  EditorAttributes2["DATA_ONLOOK_EDITING_TEXT"] = "data-onlook-editing-text";
  EditorAttributes2["DATA_ONLOOK_DYNAMIC_TYPE"] = "data-onlook-dynamic-type";
  EditorAttributes2["DATA_ONLOOK_CORE_ELEMENT_TYPE"] = "data-onlook-core-element-type";
  EditorAttributes2["ONLOOK_DEFAULT_STYLESHEET_ID"] = "onlook-default-stylesheet";
  return EditorAttributes2;
})(EditorAttributes || {});
var WebviewChannels = /* @__PURE__ */ ((WebviewChannels2) => {
  WebviewChannels2["WEBVIEW_ID"] = "webview-id";
  WebviewChannels2["UPDATE_STYLE"] = "update-style";
  WebviewChannels2["INSERT_ELEMENT"] = "insert-element";
  WebviewChannels2["REMOVE_ELEMENT"] = "remove-element";
  WebviewChannels2["MOVE_ELEMENT"] = "move-element";
  WebviewChannels2["EDIT_ELEMENT_TEXT"] = "edit-element-text";
  WebviewChannels2["CLEAN_AFTER_WRITE_TO_CODE"] = "clean-after-write";
  WebviewChannels2["GROUP_ELEMENTS"] = "group-elements";
  WebviewChannels2["UNGROUP_ELEMENTS"] = "ungroup-elements";
  WebviewChannels2["UPDATE_ELEMENT_INSTANCE_ID"] = "update-element-instance-id";
  WebviewChannels2["INSERT_IMAGE"] = "insert-image";
  WebviewChannels2["REMOVE_IMAGE"] = "remove-image";
  WebviewChannels2["ELEMENT_INSERTED"] = "element-inserted";
  WebviewChannels2["ELEMENT_REMOVED"] = "element-removed";
  WebviewChannels2["ELEMENT_MOVED"] = "element-moved";
  WebviewChannels2["ELEMENT_TEXT_EDITED"] = "element-text-edited";
  WebviewChannels2["ELEMENT_GROUPED"] = "element-grouped";
  WebviewChannels2["ELEMENT_UNGROUPED"] = "element-ungrouped";
  WebviewChannels2["STYLE_UPDATED"] = "style-updated";
  WebviewChannels2["WINDOW_RESIZED"] = "window-resized";
  WebviewChannels2["WINDOW_MUTATED"] = "window-mutated";
  WebviewChannels2["DOM_PROCESSED"] = "dom-processed";
  WebviewChannels2["GET_WEBVIEW_ID"] = "get-webview-id";
  return WebviewChannels2;
})(WebviewChannels || {});
var MainChannels = /* @__PURE__ */ ((MainChannels2) => {
  MainChannels2["RELOAD_APP"] = "reload-app";
  MainChannels2["OPEN_IN_EXPLORER"] = "open-in-explorer";
  MainChannels2["OPEN_EXTERNAL_WINDOW"] = "open-external-window";
  MainChannels2["QUIT_AND_INSTALL"] = "quit-and-update-app";
  MainChannels2["UPDATE_DOWNLOADED"] = "update-downloaded";
  MainChannels2["UPDATE_NOT_AVAILABLE"] = "update-not-available";
  MainChannels2["SAVE_IMAGE"] = "save-image";
  MainChannels2["GET_IMAGE"] = "get-image";
  MainChannels2["SEND_WINDOW_COMMAND"] = "send-window-command";
  MainChannels2["DELETE_FOLDER"] = "delete-folder";
  MainChannels2["IS_CHILD_TEXT_EDITABLE"] = "is-child-text-editable";
  MainChannels2["IS_PORT_AVAILABLE"] = "is-port-available";
  MainChannels2["CLEAN_UP_BEFORE_QUIT"] = "clean-up-before-quit";
  MainChannels2["GET_CODE_BLOCK"] = "get-code-block";
  MainChannels2["GET_FILE_CONTENT"] = "get-file-content";
  MainChannels2["GET_AND_WRITE_CODE_DIFFS"] = "get-and-write-code-diffs";
  MainChannels2["WRITE_CODE_DIFFS"] = "write-code-diffs";
  MainChannels2["VIEW_SOURCE_CODE"] = "view-source-code";
  MainChannels2["VIEW_SOURCE_FILE"] = "view-source-file";
  MainChannels2["VIEW_CODE_IN_ONLOOK"] = "view-code-in-onlook";
  MainChannels2["PICK_COMPONENTS_DIRECTORY"] = "pick-directory";
  MainChannels2["GET_COMPONENTS"] = "get-components";
  MainChannels2["CLEAN_CODE_KEYS"] = "clean-move-keys";
  MainChannels2["UPDATE_ANALYTICS_PREFERENCE"] = "update-analytics-preference";
  MainChannels2["SEND_ANALYTICS"] = "send-analytics";
  MainChannels2["SEND_ANALYTICS_ERROR"] = "send-analytics-error";
  MainChannels2["GET_TEMPLATE_NODE_AST"] = "get-template-node-ast";
  MainChannels2["GET_TEMPLATE_NODE_CHILD"] = "get-template-node-child";
  MainChannels2["GET_TEMPLATE_NODE_CLASS"] = "get-template-node-classes";
  MainChannels2["GET_TEMPLATE_NODE_PROPS"] = "get-template-node-props";
  MainChannels2["SIGN_IN"] = "sign-in";
  MainChannels2["SIGN_OUT"] = "sign-out";
  MainChannels2["USER_SIGNED_IN"] = "user-signed-in";
  MainChannels2["USER_SIGNED_OUT"] = "user-signed-out";
  MainChannels2["GET_USER_METADATA"] = "get-user-metadata";
  MainChannels2["UPDATE_USER_METADATA"] = "update-user-metadata";
  MainChannels2["IS_USER_SIGNED_IN"] = "is-user-signed-in";
  MainChannels2["GET_USER_SETTINGS"] = "get-user-settings";
  MainChannels2["GET_APP_STATE"] = "get-app-state";
  MainChannels2["GET_PROJECTS"] = "get-projects";
  MainChannels2["UPDATE_USER_SETTINGS"] = "update-user-settings";
  MainChannels2["REPLACE_APP_STATE"] = "replace-app-state";
  MainChannels2["UPDATE_PROJECTS"] = "update-projects";
  MainChannels2["GET_CREATE_PROJECT_PATH"] = "get-create-project-path";
  MainChannels2["CREATE_NEW_PROJECT"] = "create-new-project";
  MainChannels2["CREATE_NEW_PROJECT_CALLBACK"] = "create-new-project-callback";
  MainChannels2["SETUP_PROJECT"] = "setup-project";
  MainChannels2["SETUP_PROJECT_CALLBACK"] = "setup-project-callback";
  MainChannels2["INSTALL_PROJECT_DEPENDENCIES"] = "install-project-dependencies";
  MainChannels2["REINSTALL_PROJECT_DEPENDENCIES"] = "reinstall-project-dependencies";
  MainChannels2["CREATE_NEW_PROJECT_PROMPT"] = "create-new-project-prompt";
  MainChannels2["CREATE_NEW_BLANK_PROJECT"] = "create-new-blank-project";
  MainChannels2["CREATE_NEW_PROJECT_PROMPT_CALLBACK"] = "create-new-project-prompt-callback";
  MainChannels2["CANCEL_CREATE_NEW_PROJECT_PROMPT"] = "cancel-create-new-project-prompt";
  MainChannels2["SEND_CHAT_MESSAGES_STREAM"] = "send-chat-messages-stream";
  MainChannels2["SEND_STOP_STREAM_REQUEST"] = "send-stop-stream-request";
  MainChannels2["CHAT_STREAM_PARTIAL"] = "chat-stream-partial";
  MainChannels2["CHAT_STREAM_ERROR"] = "chat-stream-error";
  MainChannels2["GET_CONVERSATIONS_BY_PROJECT"] = "get-conversations-by-project";
  MainChannels2["SAVE_CONVERSATION"] = "save-conversation";
  MainChannels2["DELETE_CONVERSATION"] = "delete-conversation";
  MainChannels2["GENERATE_SUGGESTIONS"] = "generate-suggestions";
  MainChannels2["GET_SUGGESTIONS_BY_PROJECT"] = "get-suggestions-by-project";
  MainChannels2["SAVE_SUGGESTIONS"] = "save-suggestions";
  MainChannels2["GENERATE_CHAT_SUMMARY"] = "generate-chat-summary";
  MainChannels2["RUN_START"] = "run-start";
  MainChannels2["RUN_STOP"] = "run-stop";
  MainChannels2["RUN_RESTART"] = "run-restart";
  MainChannels2["GET_TEMPLATE_NODE"] = "get-template-node";
  MainChannels2["RUN_STATE_CHANGED"] = "run-state-changed";
  MainChannels2["GET_RUN_STATE"] = "get-run-state";
  MainChannels2["RUN_COMMAND"] = "run-command";
  MainChannels2["TERMINAL_CREATE"] = "terminal-create";
  MainChannels2["TERMINAL_ON_DATA"] = "terminal-on-data";
  MainChannels2["TERMINAL_INPUT"] = "terminal-input";
  MainChannels2["TERMINAL_EXECUTE_COMMAND"] = "terminal-execute-command";
  MainChannels2["TERMINAL_RESIZE"] = "terminal-resize";
  MainChannels2["TERMINAL_KILL"] = "terminal-kill";
  MainChannels2["TERMINAL_GET_HISTORY"] = "terminal-get-history";
  MainChannels2["PUBLISH_TO_DOMAIN"] = "publish-to-domain";
  MainChannels2["UNPUBLISH_DOMAIN"] = "unpublish-domain";
  MainChannels2["PUBLISH_STATE_CHANGED"] = "publish-state-changed";
  MainChannels2["GET_OWNED_DOMAINS"] = "get-owned-domains";
  MainChannels2["CREATE_DOMAIN_VERIFICATION"] = "create-domain-verification";
  MainChannels2["VERIFY_DOMAIN"] = "verify-domain";
  MainChannels2["CREATE_STRIPE_CHECKOUT"] = "create-stripe-checkout";
  MainChannels2["CHECK_SUBSCRIPTION"] = "check-subscription";
  MainChannels2["MANAGE_SUBSCRIPTION"] = "manage-subscription";
  MainChannels2["SCAN_PAGES"] = "scan-pages";
  MainChannels2["CREATE_PAGE"] = "create-page";
  MainChannels2["DELETE_PAGE"] = "delete-page";
  MainChannels2["RENAME_PAGE"] = "rename-page";
  MainChannels2["DUPLICATE_PAGE"] = "duplicate-page";
  MainChannels2["UPDATE_PAGE_METADATA"] = "update-page-metadata";
  MainChannels2["SCAN_IMAGES_IN_PROJECT"] = "scan-images-in-project";
  MainChannels2["SAVE_IMAGE_TO_PROJECT"] = "save-image-to-project";
  MainChannels2["DELETE_IMAGE_FROM_PROJECT"] = "delete-image-from-project";
  MainChannels2["RENAME_IMAGE_IN_PROJECT"] = "rename-image-in-project";
  MainChannels2["SCAN_TAILWIND_CONFIG"] = "scan-tailwind-config";
  MainChannels2["UPDATE_TAILWIND_CONFIG"] = "update-tailwind-config";
  MainChannels2["DELETE_TAILWIND_CONFIG"] = "delete-tailwind-config";
  MainChannels2["SCAN_PROJECT_METADATA"] = "scan-project-metadata";
  MainChannels2["SCAN_FONTS"] = "scan-fonts-config";
  MainChannels2["ADD_FONT"] = "add-font";
  MainChannels2["REMOVE_FONT"] = "remove-font";
  MainChannels2["SET_FONT"] = "set-font";
  MainChannels2["GET_DEFAULT_FONT"] = "get-default-font";
  MainChannels2["UPLOAD_FONTS"] = "upload-fonts";
  MainChannels2["WATCH_FONT_FILE"] = "watch-font-file";
  MainChannels2["FONTS_CHANGED"] = "fonts-changed";
  MainChannels2["SAVE_APPLY_RESULT"] = "save-apply-result";
  MainChannels2["SCAN_FILES"] = "scan-files";
  MainChannels2["GET_PROJECT_FILES"] = "get-project-files";
  MainChannels2["SHOW_EDITOR_TAB"] = "show-editor-tab";
  return MainChannels2;
})(MainChannels || {});
function debounce(func, wait) {
  let timeout = null;
  return (...args) => {
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(() => {
      func(...args);
      timeout = null;
    }, wait);
  };
}
var rs = Object.create;
var tr = Object.defineProperty;
var ns = Object.getOwnPropertyDescriptor;
var os = Object.getOwnPropertyNames;
var is$5 = Object.getPrototypeOf, as = Object.prototype.hasOwnProperty;
var Oe = (e, t) => () => (t || e((t = { exports: {} }).exports, t), t.exports), b = (e, t) => {
  for (var r in t) {
    tr(e, r, { get: t[r], enumerable: true });
  }
}, ss = (e, t, r, n) => {
  if (t && typeof t == "object" || typeof t == "function") {
    for (const o of os(t)) {
      !as.call(e, o) && o !== r && tr(e, o, {
        get: () => t[o],
        enumerable: !(n = ns(t, o)) || n.enumerable
      });
    }
  }
  return e;
};
var ls = (e, t, r) => (r = e != null ? rs(is$5(e)) : {}, ss(tr(r, "default", { value: e, enumerable: true }), e));
var Jo = Oe((ur) => {
  var Zo = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  ur.encode = (e) => {
    if (0 <= e && e < Zo.length) {
      return Zo[e];
    }
    throw new TypeError("Must be between 0 and 63: " + e);
  };
  ur.decode = (e) => {
    var t = 65, r = 90, n = 97, o = 122, i2 = 48, s = 57, u = 43, c = 47, a = 26, l = 52;
    return t <= e && e <= r ? e - t : n <= e && e <= o ? e - n + a : i2 <= e && e <= s ? e - i2 + l : e == u ? 62 : e == c ? 63 : -1;
  };
});
var oi = Oe((hr) => {
  var ei = Jo(), pr = 5, ti = 1 << pr, ri = ti - 1, ni = ti;
  function ks(e) {
    return e < 0 ? (-e << 1) + 1 : (e << 1) + 0;
  }
  function ws(e) {
    var t = (e & 1) === 1, r = e >> 1;
    return t ? -r : r;
  }
  hr.encode = (t) => {
    var r = "", n, o = ks(t);
    do {
      n = o & ri, o >>>= pr, o > 0 && (n |= ni), r += ei.encode(n);
    } while (o > 0);
    return r;
  };
  hr.decode = (t, r, n) => {
    var o = t.length, i2 = 0, s = 0, u, c;
    do {
      if (r >= o) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }
      if (c = ei.decode(t.charCodeAt(r++)), c === -1) {
        throw new Error("Invalid base64 digit: " + t.charAt(r - 1));
      }
      u = !!(c & ni), c &= ri, i2 = i2 + (c << s), s += pr;
    } while (u);
    n.value = ws(i2), n.rest = r;
  };
});
var Et = Oe((K) => {
  function vs(e, t, r) {
    if (t in e) {
      return e[t];
    }
    if (arguments.length === 3) {
      return r;
    }
    throw new Error('"' + t + '" is a required argument.');
  }
  K.getArg = vs;
  var ii = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/, Ss = /^data:.+\,.+$/;
  function nt(e) {
    var t = e.match(ii);
    return t ? { scheme: t[1], auth: t[2], host: t[3], port: t[4], path: t[5] } : null;
  }
  K.urlParse = nt;
  function qe(e) {
    var t = "";
    return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t;
  }
  K.urlGenerate = qe;
  var Cs = 32;
  function As(e) {
    var t = [];
    return (r) => {
      for (var n = 0; n < t.length; n++) {
        if (t[n].input === r) {
          var o = t[0];
          return t[0] = t[n], t[n] = o, t[0].result;
        }
      }
      var i2 = e(r);
      return t.unshift({ input: r, result: i2 }), t.length > Cs && t.pop(), i2;
    };
  }
  var mr = As((t) => {
    var r = t, n = nt(t);
    if (n) {
      if (!n.path) {
        return t;
      }
      r = n.path;
    }
    for (var o = K.isAbsolute(r), i2 = [], s = 0, u = 0; ; ) {
      if (s = u, u = r.indexOf("/", s), u === -1) {
        i2.push(r.slice(s));
        break;
      } else {
        for (i2.push(r.slice(s, u)); u < r.length && r[u] === "/"; ) {
          u++;
        }
      }
    }
    for (var c, a = 0, u = i2.length - 1; u >= 0; u--) {
      c = i2[u], c === "." ? i2.splice(u, 1) : c === ".." ? a++ : a > 0 && (c === "" ? (i2.splice(u + 1, a), a = 0) : (i2.splice(u, 2), a--));
    }
    return r = i2.join("/"), r === "" && (r = o ? "/" : "."), n ? (n.path = r, qe(n)) : r;
  });
  K.normalize = mr;
  function ai(e, t) {
    e === "" && (e = "."), t === "" && (t = ".");
    var r = nt(t), n = nt(e);
    if (n && (e = n.path || "/"), r && !r.scheme) {
      return n && (r.scheme = n.scheme), qe(r);
    }
    if (r || t.match(Ss)) {
      return t;
    }
    if (n && !n.host && !n.path) {
      return n.host = t, qe(n);
    }
    var o = t.charAt(0) === "/" ? t : mr(e.replace(/\/+$/, "") + "/" + t);
    return n ? (n.path = o, qe(n)) : o;
  }
  K.join = ai;
  K.isAbsolute = (e) => e.charAt(0) === "/" || ii.test(e);
  function Ts(e, t) {
    e === "" && (e = "."), e = e.replace(/\/$/, "");
    for (var r = 0; t.indexOf(e + "/") !== 0; ) {
      var n = e.lastIndexOf("/");
      if (n < 0 || (e = e.slice(0, n), e.match(/^([^\/]+:\/)?\/*$/))) {
        return t;
      }
      ++r;
    }
    return Array(r + 1).join("../") + t.substr(e.length + 1);
  }
  K.relative = Ts;
  var si = (() => {
    var e = /* @__PURE__ */ Object.create(null);
    return !("__proto__" in e);
  })();
  function li(e) {
    return e;
  }
  function Es(e) {
    return ci(e) ? "$" + e : e;
  }
  K.toSetString = si ? li : Es;
  function Ls(e) {
    return ci(e) ? e.slice(1) : e;
  }
  K.fromSetString = si ? li : Ls;
  function ci(e) {
    if (!e) {
      return false;
    }
    var t = e.length;
    if (t < 9 || e.charCodeAt(t - 1) !== 95 || e.charCodeAt(t - 2) !== 95 || e.charCodeAt(t - 3) !== 111 || e.charCodeAt(t - 4) !== 116 || e.charCodeAt(t - 5) !== 111 || e.charCodeAt(t - 6) !== 114 || e.charCodeAt(t - 7) !== 112 || e.charCodeAt(t - 8) !== 95 || e.charCodeAt(t - 9) !== 95) {
      return false;
    }
    for (var r = t - 10; r >= 0; r--) {
      if (e.charCodeAt(r) !== 36) {
        return false;
      }
    }
    return true;
  }
  function Ps(e, t, r) {
    var n = be(e.source, t.source);
    return n !== 0 || (n = e.originalLine - t.originalLine, n !== 0) || (n = e.originalColumn - t.originalColumn, n !== 0 || r) || (n = e.generatedColumn - t.generatedColumn, n !== 0) || (n = e.generatedLine - t.generatedLine, n !== 0) ? n : be(e.name, t.name);
  }
  K.compareByOriginalPositions = Ps;
  function Is(e, t, r) {
    var n;
    return n = e.originalLine - t.originalLine, n !== 0 || (n = e.originalColumn - t.originalColumn, n !== 0 || r) || (n = e.generatedColumn - t.generatedColumn, n !== 0) || (n = e.generatedLine - t.generatedLine, n !== 0) ? n : be(e.name, t.name);
  }
  K.compareByOriginalPositionsNoSource = Is;
  function Ds(e, t, r) {
    var n = e.generatedLine - t.generatedLine;
    return n !== 0 || (n = e.generatedColumn - t.generatedColumn, n !== 0 || r) || (n = be(e.source, t.source), n !== 0) || (n = e.originalLine - t.originalLine, n !== 0) || (n = e.originalColumn - t.originalColumn, n !== 0) ? n : be(e.name, t.name);
  }
  K.compareByGeneratedPositionsDeflated = Ds;
  function Os(e, t, r) {
    var n = e.generatedColumn - t.generatedColumn;
    return n !== 0 || r || (n = be(e.source, t.source), n !== 0) || (n = e.originalLine - t.originalLine, n !== 0) || (n = e.originalColumn - t.originalColumn, n !== 0) ? n : be(e.name, t.name);
  }
  K.compareByGeneratedPositionsDeflatedNoLine = Os;
  function be(e, t) {
    return e === t ? 0 : e === null ? 1 : t === null ? -1 : e > t ? 1 : -1;
  }
  function Ns(e, t) {
    var r = e.generatedLine - t.generatedLine;
    return r !== 0 || (r = e.generatedColumn - t.generatedColumn, r !== 0) || (r = be(e.source, t.source), r !== 0) || (r = e.originalLine - t.originalLine, r !== 0) || (r = e.originalColumn - t.originalColumn, r !== 0) ? r : be(e.name, t.name);
  }
  K.compareByGeneratedPositionsInflated = Ns;
  function zs(e) {
    return JSON.parse(e.replace(/^\)]}'[^\n]*\n/, ""));
  }
  K.parseSourceMapInput = zs;
  function Ms(e, t, r) {
    if (t = t || "", e && (e[e.length - 1] !== "/" && t[0] !== "/" && (e += "/"), t = e + t), r) {
      var n = nt(r);
      if (!n) {
        throw new Error("sourceMapURL could not be parsed");
      }
      if (n.path) {
        var o = n.path.lastIndexOf("/");
        o >= 0 && (n.path = n.path.substring(0, o + 1));
      }
      t = ai(qe(n), t);
    }
    return mr(t);
  }
  K.computeSourceURL = Ms;
});
var pi = Oe((ui) => {
  var fr = Et(), dr = Object.prototype.hasOwnProperty, Le = typeof Map < "u";
  function xe() {
    this._array = [], this._set = Le ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
  }
  xe.fromArray = (t, r) => {
    for (var n = new xe(), o = 0, i2 = t.length; o < i2; o++) {
      n.add(t[o], r);
    }
    return n;
  };
  xe.prototype.size = function() {
    return Le ? this._set.size : Object.getOwnPropertyNames(this._set).length;
  };
  xe.prototype.add = function(t, r) {
    var n = Le ? t : fr.toSetString(t), o = Le ? this.has(t) : dr.call(this._set, n), i2 = this._array.length;
    (!o || r) && this._array.push(t), o || (Le ? this._set.set(t, i2) : this._set[n] = i2);
  };
  xe.prototype.has = function(t) {
    if (Le) {
      return this._set.has(t);
    }
    var r = fr.toSetString(t);
    return dr.call(this._set, r);
  };
  xe.prototype.indexOf = function(t) {
    if (Le) {
      var r = this._set.get(t);
      if (r >= 0) {
        return r;
      }
    } else {
      var n = fr.toSetString(t);
      if (dr.call(this._set, n)) {
        return this._set[n];
      }
    }
    throw new Error('"' + t + '" is not in the set.');
  };
  xe.prototype.at = function(t) {
    if (t >= 0 && t < this._array.length) {
      return this._array[t];
    }
    throw new Error("No element indexed by " + t);
  };
  xe.prototype.toArray = function() {
    return this._array.slice();
  };
  ui.ArraySet = xe;
});
var fi = Oe((mi) => {
  var hi = Et();
  function Rs(e, t) {
    var r = e.generatedLine, n = t.generatedLine, o = e.generatedColumn, i2 = t.generatedColumn;
    return n > r || n == r && i2 >= o || hi.compareByGeneratedPositionsInflated(e, t) <= 0;
  }
  function Lt() {
    this._array = [], this._sorted = true, this._last = { generatedLine: -1, generatedColumn: 0 };
  }
  Lt.prototype.unsortedForEach = function(t, r) {
    this._array.forEach(t, r);
  };
  Lt.prototype.add = function(t) {
    Rs(this._last, t) ? (this._last = t, this._array.push(t)) : (this._sorted = false, this._array.push(t));
  };
  Lt.prototype.toArray = function() {
    return this._sorted || (this._array.sort(hi.compareByGeneratedPositionsInflated), this._sorted = true), this._array;
  };
  mi.MappingList = Lt;
});
var gi = Oe((di) => {
  var ot = oi(), j = Et(), Pt = pi().ArraySet, Fs = fi().MappingList;
  function oe(e) {
    e || (e = {}), this._file = j.getArg(e, "file", null), this._sourceRoot = j.getArg(e, "sourceRoot", null), this._skipValidation = j.getArg(e, "skipValidation", false), this._sources = new Pt(), this._names = new Pt(), this._mappings = new Fs(), this._sourcesContents = null;
  }
  oe.prototype._version = 3;
  oe.fromSourceMap = (t) => {
    var r = t.sourceRoot, n = new oe({ file: t.file, sourceRoot: r });
    return t.eachMapping((o) => {
      var i2 = {
        generated: {
          line: o.generatedLine,
          column: o.generatedColumn
        }
      };
      o.source != null && (i2.source = o.source, r != null && (i2.source = j.relative(r, i2.source)), i2.original = {
        line: o.originalLine,
        column: o.originalColumn
      }, o.name != null && (i2.name = o.name)), n.addMapping(i2);
    }), t.sources.forEach((o) => {
      var i2 = o;
      r !== null && (i2 = j.relative(r, o)), n._sources.has(i2) || n._sources.add(i2);
      var s = t.sourceContentFor(o);
      s != null && n.setSourceContent(o, s);
    }), n;
  };
  oe.prototype.addMapping = function(t) {
    var r = j.getArg(t, "generated"), n = j.getArg(t, "original", null), o = j.getArg(t, "source", null), i2 = j.getArg(t, "name", null);
    this._skipValidation || this._validateMapping(r, n, o, i2), o != null && (o = String(o), this._sources.has(o) || this._sources.add(o)), i2 != null && (i2 = String(i2), this._names.has(i2) || this._names.add(i2)), this._mappings.add({
      generatedLine: r.line,
      generatedColumn: r.column,
      originalLine: n != null && n.line,
      originalColumn: n != null && n.column,
      source: o,
      name: i2
    });
  };
  oe.prototype.setSourceContent = function(t, r) {
    var n = t;
    this._sourceRoot != null && (n = j.relative(this._sourceRoot, n)), r != null ? (this._sourcesContents || (this._sourcesContents = /* @__PURE__ */ Object.create(null)), this._sourcesContents[j.toSetString(n)] = r) : this._sourcesContents && (delete this._sourcesContents[j.toSetString(n)], Object.keys(this._sourcesContents).length === 0 && (this._sourcesContents = null));
  };
  oe.prototype.applySourceMap = function(t, r, n) {
    var o = r;
    if (r == null) {
      if (t.file == null) {
        throw new Error(
          `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
        );
      }
      o = t.file;
    }
    var i2 = this._sourceRoot;
    i2 != null && (o = j.relative(i2, o));
    var s = new Pt(), u = new Pt();
    this._mappings.unsortedForEach((c) => {
      if (c.source === o && c.originalLine != null) {
        var a = t.originalPositionFor({
          line: c.originalLine,
          column: c.originalColumn
        });
        a.source != null && (c.source = a.source, n != null && (c.source = j.join(n, c.source)), i2 != null && (c.source = j.relative(i2, c.source)), c.originalLine = a.line, c.originalColumn = a.column, a.name != null && (c.name = a.name));
      }
      var l = c.source;
      l != null && !s.has(l) && s.add(l);
      var p = c.name;
      p != null && !u.has(p) && u.add(p);
    }, this), this._sources = s, this._names = u, t.sources.forEach(function(c) {
      var a = t.sourceContentFor(c);
      a != null && (n != null && (c = j.join(n, c)), i2 != null && (c = j.relative(i2, c)), this.setSourceContent(c, a));
    }, this);
  };
  oe.prototype._validateMapping = (t, r, n, o) => {
    if (r && typeof r.line != "number" && typeof r.column != "number") {
      throw new Error(
        "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
      );
    }
    if (!(t && "line" in t && "column" in t && t.line > 0 && t.column >= 0 && !r && !n && !o)) {
      if (t && "line" in t && "column" in t && r && "line" in r && "column" in r && t.line > 0 && t.column >= 0 && r.line > 0 && r.column >= 0 && n) {
        return;
      }
      throw new Error(
        "Invalid mapping: " + JSON.stringify({
          generated: t,
          source: n,
          original: r,
          name: o
        })
      );
    }
  };
  oe.prototype._serializeMappings = function() {
    for (var t = 0, r = 1, n = 0, o = 0, i2 = 0, s = 0, u = "", c, a, l, p, m = this._mappings.toArray(), f = 0, P = m.length; f < P; f++) {
      if (a = m[f], c = "", a.generatedLine !== r) {
        for (t = 0; a.generatedLine !== r; ) {
          c += ";", r++;
        }
      } else if (f > 0) {
        if (!j.compareByGeneratedPositionsInflated(a, m[f - 1])) {
          continue;
        }
        c += ",";
      }
      c += ot.encode(a.generatedColumn - t), t = a.generatedColumn, a.source != null && (p = this._sources.indexOf(a.source), c += ot.encode(p - s), s = p, c += ot.encode(a.originalLine - 1 - o), o = a.originalLine - 1, c += ot.encode(a.originalColumn - n), n = a.originalColumn, a.name != null && (l = this._names.indexOf(a.name), c += ot.encode(l - i2), i2 = l)), u += c;
    }
    return u;
  };
  oe.prototype._generateSourcesContent = function(t, r) {
    return t.map(function(n) {
      if (!this._sourcesContents) {
        return null;
      }
      r != null && (n = j.relative(r, n));
      var o = j.toSetString(n);
      return Object.prototype.hasOwnProperty.call(this._sourcesContents, o) ? this._sourcesContents[o] : null;
    }, this);
  };
  oe.prototype.toJSON = function() {
    var t = {
      version: this._version,
      sources: this._sources.toArray(),
      names: this._names.toArray(),
      mappings: this._serializeMappings()
    };
    return this._file != null && (t.file = this._file), this._sourceRoot != null && (t.sourceRoot = this._sourceRoot), this._sourcesContents && (t.sourcesContent = this._generateSourcesContent(t.sources, t.sourceRoot)), t;
  };
  oe.prototype.toString = function() {
    return JSON.stringify(this.toJSON());
  };
  di.SourceMapGenerator = oe;
});
var $e = {};
b($e, {
  AtKeyword: () => I,
  BadString: () => Ae,
  BadUrl: () => Y,
  CDC: () => U,
  CDO: () => ue,
  Colon: () => O,
  Comma: () => G,
  Comment: () => E,
  Delim: () => g,
  Dimension: () => y,
  EOF: () => Xe,
  Function: () => x,
  Hash: () => v,
  Ident: () => h,
  LeftCurlyBracket: () => M,
  LeftParenthesis: () => T,
  LeftSquareBracket: () => q,
  Number: () => d$1,
  Percentage: () => A,
  RightCurlyBracket: () => H,
  RightParenthesis: () => w,
  RightSquareBracket: () => V,
  Semicolon: () => _,
  String: () => W,
  Url: () => F,
  WhiteSpace: () => k
});
var Xe = 0, h = 1, x = 2, I = 3, v = 4, W = 5, Ae = 6, F = 7, Y = 8, g = 9, d$1 = 10, A = 11, y = 12, k = 13, ue = 14, U = 15, O = 16, _ = 17, G = 18, q = 19, V = 20, T = 21, w = 22, M = 23, H = 24, E = 25;
function B(e) {
  return e >= 48 && e <= 57;
}
function ee(e) {
  return B(e) || e >= 65 && e <= 70 || e >= 97 && e <= 102;
}
function yt(e) {
  return e >= 65 && e <= 90;
}
function cs(e) {
  return e >= 97 && e <= 122;
}
function us(e) {
  return yt(e) || cs(e);
}
function ps(e) {
  return e >= 128;
}
function xt(e) {
  return us(e) || ps(e) || e === 95;
}
function Ne(e) {
  return xt(e) || B(e) || e === 45;
}
function hs(e) {
  return e >= 0 && e <= 8 || e === 11 || e >= 14 && e <= 31 || e === 127;
}
function Ze(e) {
  return e === 10 || e === 13 || e === 12;
}
function pe(e) {
  return Ze(e) || e === 32 || e === 9;
}
function $(e, t) {
  return !(e !== 92 || Ze(t) || t === 0);
}
function ze(e, t, r) {
  return e === 45 ? xt(t) || t === 45 || $(t, r) : xt(e) ? true : e === 92 ? $(e, t) : false;
}
function kt(e, t, r) {
  return e === 43 || e === 45 ? B(t) ? 2 : t === 46 && B(r) ? 3 : 0 : e === 46 ? B(t) ? 2 : 0 : B(e) ? 1 : 0;
}
function wt(e) {
  return e === 65279 || e === 65534 ? 1 : 0;
}
var rr = new Array(128), ms = 128, Je = 130, nr = 131, vt = 132, or = 133;
for (let e = 0; e < rr.length; e++) {
  rr[e] = pe(e) && Je || B(e) && nr || xt(e) && vt || hs(e) && or || e || ms;
}
function St(e) {
  return e < 128 ? rr[e] : vt;
}
function Me(e, t) {
  return t < e.length ? e.charCodeAt(t) : 0;
}
function Ct(e, t, r) {
  return r === 13 && Me(e, t + 1) === 10 ? 2 : 1;
}
function de(e, t, r) {
  let n = e.charCodeAt(t);
  return yt(n) && (n = n | 32), n === r;
}
function ge(e, t, r, n) {
  if (r - t !== n.length || t < 0 || r > e.length) {
    return false;
  }
  for (let o = t; o < r; o++) {
    let i2 = n.charCodeAt(o - t), s = e.charCodeAt(o);
    if (yt(s) && (s = s | 32), s !== i2) {
      return false;
    }
  }
  return true;
}
function qo(e, t) {
  for (; t >= 0 && pe(e.charCodeAt(t)); t--) {
  }
  return t + 1;
}
function et(e, t) {
  for (; t < e.length && pe(e.charCodeAt(t)); t++) {
  }
  return t;
}
function ir(e, t) {
  for (; t < e.length && B(e.charCodeAt(t)); t++) {
  }
  return t;
}
function se(e, t) {
  if (t += 2, ee(Me(e, t - 1))) {
    for (let n = Math.min(e.length, t + 5); t < n && ee(Me(e, t)); t++) {
    }
    const r = Me(e, t);
    pe(r) && (t += Ct(e, t, r));
  }
  return t;
}
function tt(e, t) {
  for (; t < e.length; t++) {
    const r = e.charCodeAt(t);
    if (!Ne(r)) {
      if ($(r, Me(e, t + 1))) {
        t = se(e, t) - 1;
        continue;
      }
      break;
    }
  }
  return t;
}
function Te(e, t) {
  let r = e.charCodeAt(t);
  if ((r === 43 || r === 45) && (r = e.charCodeAt(t += 1)), B(r) && (t = ir(e, t + 1), r = e.charCodeAt(t)), r === 46 && B(e.charCodeAt(t + 1)) && (t += 2, t = ir(e, t)), de(e, t, 101)) {
    let n = 0;
    r = e.charCodeAt(t + 1), (r === 45 || r === 43) && (n = 1, r = e.charCodeAt(t + 2)), B(r) && (t = ir(e, t + 1 + n + 1));
  }
  return t;
}
function At(e, t) {
  for (; t < e.length; t++) {
    const r = e.charCodeAt(t);
    if (r === 41) {
      t++;
      break;
    }
    $(r, Me(e, t + 1)) && (t = se(e, t));
  }
  return t;
}
function Re(e) {
  if (e.length === 1 && !ee(e.charCodeAt(0))) {
    return e[0];
  }
  let t = Number.parseInt(e, 16);
  return (t === 0 || t >= 55296 && t <= 57343 || t > 1114111) && (t = 65533), String.fromCodePoint(t);
}
var Fe = [
  "EOF-token",
  "ident-token",
  "function-token",
  "at-keyword-token",
  "hash-token",
  "string-token",
  "bad-string-token",
  "url-token",
  "bad-url-token",
  "delim-token",
  "number-token",
  "percentage-token",
  "dimension-token",
  "whitespace-token",
  "CDO-token",
  "CDC-token",
  "colon-token",
  "semicolon-token",
  "comma-token",
  "[-token",
  "]-token",
  "(-token",
  ")-token",
  "{-token",
  "}-token"
];
function Be(e = null, t) {
  return e === null || e.length < t ? new Uint32Array(Math.max(t + 1024, 16384)) : e;
}
var Uo = 10, fs = 12, jo = 13;
function Wo(e) {
  let t = e.source, r = t.length, n = t.length > 0 ? wt(t.charCodeAt(0)) : 0, o = Be(e.lines, r), i2 = Be(e.columns, r), s = e.startLine, u = e.startColumn;
  for (let c = n; c < r; c++) {
    const a = t.charCodeAt(c);
    o[c] = s, i2[c] = u++, (a === Uo || a === jo || a === fs) && (a === jo && c + 1 < r && t.charCodeAt(c + 1) === Uo && (c++, o[c] = s, i2[c] = u), s++, u = 1);
  }
  o[r] = s, i2[r] = u, e.lines = o, e.columns = i2, e.computed = true;
}
var Tt = class {
  constructor() {
    this.lines = null, this.columns = null, this.computed = false;
  }
  setSource(t, r = 0, n = 1, o = 1) {
    this.source = t, this.startOffset = r, this.startLine = n, this.startColumn = o, this.computed = false;
  }
  getLocation(t, r) {
    return this.computed || Wo(this), {
      source: r,
      offset: this.startOffset + t,
      line: this.lines[t],
      column: this.columns[t]
    };
  }
  getLocationRange(t, r, n) {
    return this.computed || Wo(this), {
      source: n,
      start: {
        offset: this.startOffset + t,
        line: this.lines[t],
        column: this.columns[t]
      },
      end: {
        offset: this.startOffset + r,
        line: this.lines[r],
        column: this.columns[r]
      }
    };
  }
};
var ne = 16777215, we = 24, ds = /* @__PURE__ */ new Map([
  [2, 22],
  [21, 22],
  [19, 20],
  [23, 24]
]), rt = class {
  constructor(t, r) {
    this.setSource(t, r);
  }
  reset() {
    this.eof = false, this.tokenIndex = -1, this.tokenType = 0, this.tokenStart = this.firstCharOffset, this.tokenEnd = this.firstCharOffset;
  }
  setSource(t = "", r = () => {
  }) {
    t = String(t || "");
    let n = t.length, o = Be(this.offsetAndType, t.length + 1), i2 = Be(this.balance, t.length + 1), s = 0, u = 0, c = 0, a = -1;
    for (this.offsetAndType = null, this.balance = null, r(t, (l, p, m) => {
      switch (l) {
        default:
          i2[s] = n;
          break;
        case u: {
          let f = c & ne;
          for (c = i2[f], u = c >> we, i2[s] = f, i2[f++] = s; f < s; f++) {
            i2[f] === n && (i2[f] = s);
          }
          break;
        }
        case 21:
        case 2:
        case 19:
        case 23:
          i2[s] = c, u = ds.get(l), c = u << we | s;
          break;
      }
      o[s++] = l << we | m, a === -1 && (a = p);
    }), o[s] = 0 << we | n, i2[s] = n, i2[n] = n; c !== 0; ) {
      const l = c & ne;
      c = i2[l], i2[l] = n;
    }
    this.source = t, this.firstCharOffset = a === -1 ? 0 : a, this.tokenCount = s, this.offsetAndType = o, this.balance = i2, this.reset(), this.next();
  }
  lookupType(t) {
    return t += this.tokenIndex, t < this.tokenCount ? this.offsetAndType[t] >> we : 0;
  }
  lookupOffset(t) {
    return t += this.tokenIndex, t < this.tokenCount ? this.offsetAndType[t - 1] & ne : this.source.length;
  }
  lookupValue(t, r) {
    return t += this.tokenIndex, t < this.tokenCount ? ge(this.source, this.offsetAndType[t - 1] & ne, this.offsetAndType[t] & ne, r) : false;
  }
  getTokenStart(t) {
    return t === this.tokenIndex ? this.tokenStart : t > 0 ? t < this.tokenCount ? this.offsetAndType[t - 1] & ne : this.offsetAndType[this.tokenCount] & ne : this.firstCharOffset;
  }
  substrToCursor(t) {
    return this.source.substring(t, this.tokenStart);
  }
  isBalanceEdge(t) {
    return this.balance[this.tokenIndex] < t;
  }
  isDelim(t, r) {
    return r ? this.lookupType(r) === 9 && this.source.charCodeAt(this.lookupOffset(r)) === t : this.tokenType === 9 && this.source.charCodeAt(this.tokenStart) === t;
  }
  skip(t) {
    let r = this.tokenIndex + t;
    r < this.tokenCount ? (this.tokenIndex = r, this.tokenStart = this.offsetAndType[r - 1] & ne, r = this.offsetAndType[r], this.tokenType = r >> we, this.tokenEnd = r & ne) : (this.tokenIndex = this.tokenCount, this.next());
  }
  next() {
    let t = this.tokenIndex + 1;
    t < this.tokenCount ? (this.tokenIndex = t, this.tokenStart = this.tokenEnd, t = this.offsetAndType[t], this.tokenType = t >> we, this.tokenEnd = t & ne) : (this.eof = true, this.tokenIndex = this.tokenCount, this.tokenType = 0, this.tokenStart = this.tokenEnd = this.source.length);
  }
  skipSC() {
    while (this.tokenType === 13 || this.tokenType === 25) {
      this.next();
    }
  }
  skipUntilBalanced(t, r) {
    let n = t, o, i2;
    e: for (; n < this.tokenCount; n++) {
      if (o = this.balance[n], o < t) {
        break;
      }
      switch (i2 = n > 0 ? this.offsetAndType[n - 1] & ne : this.firstCharOffset, r(this.source.charCodeAt(i2))) {
        case 1:
          break e;
        case 2:
          n++;
          break e;
        default:
          this.balance[o] === n && (n = o);
      }
    }
    this.skip(n - this.tokenIndex);
  }
  forEachToken(t) {
    for (let r = 0, n = this.firstCharOffset; r < this.tokenCount; r++) {
      const o = n, i2 = this.offsetAndType[r], s = i2 & ne, u = i2 >> we;
      n = s, t(u, o, s, r);
    }
  }
  dump() {
    const t = new Array(this.tokenCount);
    return this.forEachToken((r, n, o, i2) => {
      t[i2] = {
        idx: i2,
        type: Fe[r],
        chunk: this.source.substring(n, o),
        balance: this.balance[i2]
      };
    }), t;
  }
};
function ve(e, t) {
  function r(p) {
    return p < u ? e.charCodeAt(p) : 0;
  }
  function n() {
    if (a = Te(e, a), ze(r(a), r(a + 1), r(a + 2))) {
      l = 12, a = tt(e, a);
      return;
    }
    if (r(a) === 37) {
      l = 11, a++;
      return;
    }
    l = 10;
  }
  function o() {
    const p = a;
    if (a = tt(e, a), ge(e, p, a, "url") && r(a) === 40) {
      if (a = et(e, a + 1), r(a) === 34 || r(a) === 39) {
        l = 2, a = p + 4;
        return;
      }
      s();
      return;
    }
    if (r(a) === 40) {
      l = 2, a++;
      return;
    }
    l = 1;
  }
  function i2(p) {
    for (p || (p = r(a++)), l = 5; a < e.length; a++) {
      const m = e.charCodeAt(a);
      switch (St(m)) {
        case p:
          a++;
          return;
        case Je:
          if (Ze(m)) {
            a += Ct(e, a, m), l = 6;
            return;
          }
          break;
        case 92:
          if (a === e.length - 1) {
            break;
          }
          const f = r(a + 1);
          Ze(f) ? a += Ct(e, a + 1, f) : $(m, f) && (a = se(e, a) - 1);
          break;
      }
    }
  }
  function s() {
    for (l = 7, a = et(e, a); a < e.length; a++) {
      const p = e.charCodeAt(a);
      switch (St(p)) {
        case 41:
          a++;
          return;
        case Je:
          if (a = et(e, a), r(a) === 41 || a >= e.length) {
            a < e.length && a++;
            return;
          }
          a = At(e, a), l = 8;
          return;
        case 34:
        case 39:
        case 40:
        case or:
          a = At(e, a), l = 8;
          return;
        case 92:
          if ($(p, r(a + 1))) {
            a = se(e, a) - 1;
            break;
          }
          a = At(e, a), l = 8;
          return;
      }
    }
  }
  e = String(e || "");
  let u = e.length, c = wt(r(0)), a = c, l;
  while (a < u) {
    const p = e.charCodeAt(a);
    switch (St(p)) {
      case Je:
        l = 13, a = et(e, a + 1);
        break;
      case 34:
        i2();
        break;
      case 35:
        Ne(r(a + 1)) || $(r(a + 1), r(a + 2)) ? (l = 4, a = tt(e, a + 1)) : (l = 9, a++);
        break;
      case 39:
        i2();
        break;
      case 40:
        l = 21, a++;
        break;
      case 41:
        l = 22, a++;
        break;
      case 43:
        kt(p, r(a + 1), r(a + 2)) ? n() : (l = 9, a++);
        break;
      case 44:
        l = 18, a++;
        break;
      case 45:
        kt(p, r(a + 1), r(a + 2)) ? n() : r(a + 1) === 45 && r(a + 2) === 62 ? (l = 15, a = a + 3) : ze(p, r(a + 1), r(a + 2)) ? o() : (l = 9, a++);
        break;
      case 46:
        kt(p, r(a + 1), r(a + 2)) ? n() : (l = 9, a++);
        break;
      case 47:
        r(a + 1) === 42 ? (l = 25, a = e.indexOf("*/", a + 2), a = a === -1 ? e.length : a + 2) : (l = 9, a++);
        break;
      case 58:
        l = 16, a++;
        break;
      case 59:
        l = 17, a++;
        break;
      case 60:
        r(a + 1) === 33 && r(a + 2) === 45 && r(a + 3) === 45 ? (l = 14, a = a + 4) : (l = 9, a++);
        break;
      case 64:
        ze(r(a + 1), r(a + 2), r(a + 3)) ? (l = 3, a = tt(e, a + 1)) : (l = 9, a++);
        break;
      case 91:
        l = 19, a++;
        break;
      case 92:
        $(p, r(a + 1)) ? o() : (l = 9, a++);
        break;
      case 93:
        l = 20, a++;
        break;
      case 123:
        l = 23, a++;
        break;
      case 125:
        l = 24, a++;
        break;
      case nr:
        n();
        break;
      case vt:
        o();
        break;
      default:
        l = 9, a++;
    }
    t(l, c, c = a);
  }
}
var _e = null, D = class {
  static createItem(t) {
    return { prev: null, next: null, data: t };
  }
  constructor() {
    this.head = null, this.tail = null, this.cursor = null;
  }
  createItem(t) {
    return D.createItem(t);
  }
  allocateCursor(t, r) {
    let n;
    return _e !== null ? (n = _e, _e = _e.cursor, n.prev = t, n.next = r, n.cursor = this.cursor) : n = { prev: t, next: r, cursor: this.cursor }, this.cursor = n, n;
  }
  releaseCursor() {
    const { cursor: t } = this;
    this.cursor = t.cursor, t.prev = null, t.next = null, t.cursor = _e, _e = t;
  }
  updateCursors(t, r, n, o) {
    let { cursor: i2 } = this;
    while (i2 !== null) {
      i2.prev === t && (i2.prev = r), i2.next === n && (i2.next = o), i2 = i2.cursor;
    }
  }
  *[Symbol.iterator]() {
    for (let t = this.head; t !== null; t = t.next) {
      yield t.data;
    }
  }
  get size() {
    let t = 0;
    for (let r = this.head; r !== null; r = r.next) {
      t++;
    }
    return t;
  }
  get isEmpty() {
    return this.head === null;
  }
  get first() {
    return this.head && this.head.data;
  }
  get last() {
    return this.tail && this.tail.data;
  }
  fromArray(t) {
    let r = null;
    this.head = null;
    for (const n of t) {
      const o = D.createItem(n);
      r !== null ? r.next = o : this.head = o, o.prev = r, r = o;
    }
    return this.tail = r, this;
  }
  toArray() {
    return [...this];
  }
  toJSON() {
    return [...this];
  }
  forEach(t, r = this) {
    const n = this.allocateCursor(null, this.head);
    while (n.next !== null) {
      const o = n.next;
      n.next = o.next, t.call(r, o.data, o, this);
    }
    this.releaseCursor();
  }
  forEachRight(t, r = this) {
    const n = this.allocateCursor(this.tail, null);
    while (n.prev !== null) {
      const o = n.prev;
      n.prev = o.prev, t.call(r, o.data, o, this);
    }
    this.releaseCursor();
  }
  reduce(t, r, n = this) {
    let o = this.allocateCursor(null, this.head), i2 = r, s;
    while (o.next !== null) {
      s = o.next, o.next = s.next, i2 = t.call(n, i2, s.data, s, this);
    }
    return this.releaseCursor(), i2;
  }
  reduceRight(t, r, n = this) {
    let o = this.allocateCursor(this.tail, null), i2 = r, s;
    while (o.prev !== null) {
      s = o.prev, o.prev = s.prev, i2 = t.call(n, i2, s.data, s, this);
    }
    return this.releaseCursor(), i2;
  }
  some(t, r = this) {
    for (let n = this.head; n !== null; n = n.next) {
      if (t.call(r, n.data, n, this)) {
        return true;
      }
    }
    return false;
  }
  map(t, r = this) {
    const n = new D();
    for (let o = this.head; o !== null; o = o.next) {
      n.appendData(t.call(r, o.data, o, this));
    }
    return n;
  }
  filter(t, r = this) {
    const n = new D();
    for (let o = this.head; o !== null; o = o.next) {
      t.call(r, o.data, o, this) && n.appendData(o.data);
    }
    return n;
  }
  nextUntil(t, r, n = this) {
    if (t === null) {
      return;
    }
    const o = this.allocateCursor(null, t);
    while (o.next !== null) {
      const i2 = o.next;
      if (o.next = i2.next, r.call(n, i2.data, i2, this)) {
        break;
      }
    }
    this.releaseCursor();
  }
  prevUntil(t, r, n = this) {
    if (t === null) {
      return;
    }
    const o = this.allocateCursor(t, null);
    while (o.prev !== null) {
      const i2 = o.prev;
      if (o.prev = i2.prev, r.call(n, i2.data, i2, this)) {
        break;
      }
    }
    this.releaseCursor();
  }
  clear() {
    this.head = null, this.tail = null;
  }
  copy() {
    const t = new D();
    for (const r of this) {
      t.appendData(r);
    }
    return t;
  }
  prepend(t) {
    return this.updateCursors(null, t, this.head, t), this.head !== null ? (this.head.prev = t, t.next = this.head) : this.tail = t, this.head = t, this;
  }
  prependData(t) {
    return this.prepend(D.createItem(t));
  }
  append(t) {
    return this.insert(t);
  }
  appendData(t) {
    return this.insert(D.createItem(t));
  }
  insert(t, r = null) {
    if (r !== null) {
      if (this.updateCursors(r.prev, t, r, t), r.prev === null) {
        if (this.head !== r) {
          throw new Error("before doesn't belong to list");
        }
        this.head = t, r.prev = t, t.next = r, this.updateCursors(null, t);
      } else {
        r.prev.next = t, t.prev = r.prev, r.prev = t, t.next = r;
      }
    } else {
      this.updateCursors(this.tail, t, null, t), this.tail !== null ? (this.tail.next = t, t.prev = this.tail) : this.head = t, this.tail = t;
    }
    return this;
  }
  insertData(t, r) {
    return this.insert(D.createItem(t), r);
  }
  remove(t) {
    if (this.updateCursors(t, t.prev, t, t.next), t.prev !== null) {
      t.prev.next = t.next;
    } else {
      if (this.head !== t) {
        throw new Error("item doesn't belong to list");
      }
      this.head = t.next;
    }
    if (t.next !== null) {
      t.next.prev = t.prev;
    } else {
      if (this.tail !== t) {
        throw new Error("item doesn't belong to list");
      }
      this.tail = t.prev;
    }
    return t.prev = null, t.next = null, t;
  }
  push(t) {
    this.insert(D.createItem(t));
  }
  pop() {
    return this.tail !== null ? this.remove(this.tail) : null;
  }
  unshift(t) {
    this.prepend(D.createItem(t));
  }
  shift() {
    return this.head !== null ? this.remove(this.head) : null;
  }
  prependList(t) {
    return this.insertList(t, this.head);
  }
  appendList(t) {
    return this.insertList(t);
  }
  insertList(t, r) {
    return t.head === null ? this : (r != null ? (this.updateCursors(r.prev, t.tail, r, t.head), r.prev !== null ? (r.prev.next = t.head, t.head.prev = r.prev) : this.head = t.head, r.prev = t.tail, t.tail.next = r) : (this.updateCursors(this.tail, t.tail, null, t.head), this.tail !== null ? (this.tail.next = t.head, t.head.prev = this.tail) : this.head = t.head, this.tail = t.tail), t.head = null, t.tail = null, this);
  }
  replace(t, r) {
    "head" in r ? this.insertList(r, t) : this.insert(r, t), this.remove(t);
  }
};
function Ee(e, t) {
  const r = Object.create(SyntaxError.prototype), n = new Error();
  return Object.assign(r, {
    name: e,
    message: t,
    get stack() {
      return (n.stack || "").replace(
        /^(.+\n){1,3}/,
        `${e}: ${t}
`
      );
    }
  });
}
var ar = 100, Ho = 60, Yo = "    ";
function Go({ source: e, line: t, column: r }, n) {
  function o(l, p) {
    return i2.slice(l, p).map((m, f) => String(l + f + 1).padStart(c) + " |" + m).join(`
`);
  }
  let i2 = e.split(/\r\n?|\n|\f/), s = Math.max(1, t - n) - 1, u = Math.min(t + n, i2.length + 1), c = Math.max(4, String(u).length) + 1, a = 0;
  r += (Yo.length - 1) * (i2[t - 1].substr(0, r - 1).match(/\t/g) || []).length, r > ar && (a = r - Ho + 3, r = Ho - 2);
  for (let l = s; l <= u; l++) {
    l >= 0 && l < i2.length && (i2[l] = i2[l].replace(/\t/g, Yo), i2[l] = (a > 0 && i2[l].length > a ? "…" : "") + i2[l].substr(a, ar - 2) + (i2[l].length > a + ar - 1 ? "…" : ""));
  }
  return [o(s, t), new Array(r + c + 2).join("-") + "^", o(t, u)].filter(Boolean).join(`
`);
}
function sr(e, t, r, n, o) {
  return Object.assign(Ee("SyntaxError", e), {
    source: t,
    offset: r,
    line: n,
    column: o,
    sourceFragment(s) {
      return Go({ source: t, line: n, column: o }, isNaN(s) ? 0 : s);
    },
    get formattedMessage() {
      return `Parse error: ${e}
` + Go({ source: t, line: n, column: o }, 2);
    }
  });
}
function Vo(e) {
  let t = this.createList(), r = false, n = { recognizer: e };
  while (!this.eof) {
    switch (this.tokenType) {
      case 25:
        this.next();
        continue;
      case 13:
        r = true, this.next();
        continue;
    }
    const o = e.getNode.call(this, n);
    if (o === void 0) {
      break;
    }
    r && (e.onWhiteSpace && e.onWhiteSpace.call(this, o, t, n), r = false), t.push(o);
  }
  return r && e.onWhiteSpace && e.onWhiteSpace.call(this, null, t, n), t;
}
var Ko = () => {
}, gs = 33, bs = 35, lr = 59, Qo = 123, Xo = 0;
function xs(e) {
  return function() {
    return this[e]();
  };
}
function cr(e) {
  const t = /* @__PURE__ */ Object.create(null);
  for (const r in e) {
    const n = e[r], o = n.parse || n;
    o && (t[r] = o);
  }
  return t;
}
function ys(e) {
  const t = {
    context: /* @__PURE__ */ Object.create(null),
    scope: Object.assign(/* @__PURE__ */ Object.create(null), e.scope),
    atrule: cr(e.atrule),
    pseudo: cr(e.pseudo),
    node: cr(e.node)
  };
  for (const r in e.parseContext) {
    switch (typeof e.parseContext[r]) {
      case "function":
        t.context[r] = e.parseContext[r];
        break;
      case "string":
        t.context[r] = xs(e.parseContext[r]);
        break;
    }
  }
  return { config: t, ...t, ...t.node };
}
function $o(e) {
  let t = "", r = "<unknown>", n = false, o = Ko, i2 = false, s = new Tt(), u = Object.assign(new rt(), ys(e || {}), {
    parseAtrulePrelude: true,
    parseRulePrelude: true,
    parseValue: true,
    parseCustomProperty: false,
    readSequence: Vo,
    consumeUntilBalanceEnd: () => 0,
    consumeUntilLeftCurlyBracket(a) {
      return a === Qo ? 1 : 0;
    },
    consumeUntilLeftCurlyBracketOrSemicolon(a) {
      return a === Qo || a === lr ? 1 : 0;
    },
    consumeUntilExclamationMarkOrSemicolon(a) {
      return a === gs || a === lr ? 1 : 0;
    },
    consumeUntilSemicolonIncluded(a) {
      return a === lr ? 2 : 0;
    },
    createList() {
      return new D();
    },
    createSingleNodeList(a) {
      return new D().appendData(a);
    },
    getFirstListNode(a) {
      return a && a.first;
    },
    getLastListNode(a) {
      return a && a.last;
    },
    parseWithFallback(a, l) {
      const p = this.tokenIndex;
      try {
        return a.call(this);
      } catch (m) {
        if (i2) {
          throw m;
        }
        const f = l.call(this, p);
        return i2 = true, o(m, f), i2 = false, f;
      }
    },
    lookupNonWSType(a) {
      let l;
      do {
        if (l = this.lookupType(a++), l !== 13) {
          return l;
        }
      } while (l !== Xo);
      return Xo;
    },
    charCodeAt(a) {
      return a >= 0 && a < t.length ? t.charCodeAt(a) : 0;
    },
    substring(a, l) {
      return t.substring(a, l);
    },
    substrToCursor(a) {
      return this.source.substring(a, this.tokenStart);
    },
    cmpChar(a, l) {
      return de(t, a, l);
    },
    cmpStr(a, l, p) {
      return ge(t, a, l, p);
    },
    consume(a) {
      const l = this.tokenStart;
      return this.eat(a), this.substrToCursor(l);
    },
    consumeFunctionName() {
      const a = t.substring(this.tokenStart, this.tokenEnd - 1);
      return this.eat(2), a;
    },
    consumeNumber(a) {
      const l = t.substring(this.tokenStart, Te(t, this.tokenStart));
      return this.eat(a), l;
    },
    eat(a) {
      if (this.tokenType !== a) {
        let l = Fe[a].slice(0, -6).replace(/-/g, " ").replace(/^./, (f) => f.toUpperCase()), p = `${/[[\](){}]/.test(l) ? `"${l}"` : l} is expected`, m = this.tokenStart;
        switch (a) {
          case 1:
            this.tokenType === 2 || this.tokenType === 7 ? (m = this.tokenEnd - 1, p = "Identifier is expected but function found") : p = "Identifier is expected";
            break;
          case 4:
            this.isDelim(bs) && (this.next(), m++, p = "Name is expected");
            break;
          case 11:
            this.tokenType === 10 && (m = this.tokenEnd, p = "Percent sign is expected");
            break;
        }
        this.error(p, m);
      }
      this.next();
    },
    eatIdent(a) {
      (this.tokenType !== 1 || this.lookupValue(0, a) === false) && this.error(`Identifier "${a}" is expected`), this.next();
    },
    eatDelim(a) {
      this.isDelim(a) || this.error(`Delim "${String.fromCharCode(a)}" is expected`), this.next();
    },
    getLocation(a, l) {
      return n ? s.getLocationRange(a, l, r) : null;
    },
    getLocationFromList(a) {
      if (n) {
        const l = this.getFirstListNode(a), p = this.getLastListNode(a);
        return s.getLocationRange(
          l !== null ? l.loc.start.offset - s.startOffset : this.tokenStart,
          p !== null ? p.loc.end.offset - s.startOffset : this.tokenStart,
          r
        );
      }
      return null;
    },
    error(a, l) {
      const p = typeof l < "u" && l < t.length ? s.getLocation(l) : this.eof ? s.getLocation(qo(t, t.length - 1)) : s.getLocation(this.tokenStart);
      throw new sr(a || "Unexpected input", t, p.offset, p.line, p.column);
    }
  });
  return Object.assign(
    (a, l) => {
      t = a, l = l || {}, u.setSource(t, ve), s.setSource(t, l.offset, l.line, l.column), r = l.filename || "<unknown>", n = Boolean(l.positions), o = typeof l.onParseError == "function" ? l.onParseError : Ko, i2 = false, u.parseAtrulePrelude = "parseAtrulePrelude" in l ? Boolean(l.parseAtrulePrelude) : true, u.parseRulePrelude = "parseRulePrelude" in l ? Boolean(l.parseRulePrelude) : true, u.parseValue = "parseValue" in l ? Boolean(l.parseValue) : true, u.parseCustomProperty = "parseCustomProperty" in l ? Boolean(l.parseCustomProperty) : false;
      const { context: p = "default", onComment: m } = l;
      if (!(p in u.context)) {
        throw new Error("Unknown context `" + p + "`");
      }
      typeof m == "function" && u.forEachToken((P, te, X) => {
        if (P === 25) {
          const S = u.getLocation(te, X), R = ge(t, X - 2, X, "*/") ? t.slice(te + 2, X - 2) : t.slice(te + 2, X);
          m(R, S);
        }
      });
      const f = u.context[p].call(u, l);
      return u.eof || u.error(), f;
    },
    { SyntaxError: sr, config: u.config }
  );
}
var xi = ls(gi()), bi = /* @__PURE__ */ new Set(["Atrule", "Selector", "Declaration"]);
function yi(e) {
  let t = new xi.SourceMapGenerator(), r = { line: 1, column: 0 }, n = { line: 0, column: 0 }, o = { line: 1, column: 0 }, i2 = { generated: o }, s = 1, u = 0, c = false, a = e.node;
  e.node = function(m) {
    if (m.loc && m.loc.start && bi.has(m.type)) {
      const f = m.loc.start.line, P = m.loc.start.column - 1;
      (n.line !== f || n.column !== P) && (n.line = f, n.column = P, r.line = s, r.column = u, c && (c = false, (r.line !== o.line || r.column !== o.column) && t.addMapping(i2)), c = true, t.addMapping({
        source: m.loc.source,
        original: n,
        generated: r
      }));
    }
    a.call(this, m), c && bi.has(m.type) && (o.line = s, o.column = u);
  };
  const l = e.emit;
  e.emit = (m, f, P) => {
    for (let te = 0; te < m.length; te++) {
      m.charCodeAt(te) === 10 ? (s++, u = 0) : u++;
    }
    l(m, f, P);
  };
  const p = e.result;
  return e.result = () => (c && t.addMapping(i2), { css: p(), map: t }), e;
}
var It = {};
b(It, { safe: () => br, spec: () => Us });
var Bs = 43, _s = 45, gr = (e, t) => {
  if (e === 9 && (e = t), typeof e == "string") {
    const r = e.charCodeAt(0);
    return r > 127 ? 32768 : r << 8;
  }
  return e;
}, ki = [
  [1, 1],
  [1, 2],
  [1, 7],
  [1, 8],
  [1, "-"],
  [1, 10],
  [1, 11],
  [1, 12],
  [1, 15],
  [1, 21],
  [3, 1],
  [3, 2],
  [3, 7],
  [3, 8],
  [3, "-"],
  [3, 10],
  [3, 11],
  [3, 12],
  [3, 15],
  [4, 1],
  [4, 2],
  [4, 7],
  [4, 8],
  [4, "-"],
  [4, 10],
  [4, 11],
  [4, 12],
  [4, 15],
  [12, 1],
  [12, 2],
  [12, 7],
  [12, 8],
  [12, "-"],
  [12, 10],
  [12, 11],
  [12, 12],
  [12, 15],
  ["#", 1],
  ["#", 2],
  ["#", 7],
  ["#", 8],
  ["#", "-"],
  ["#", 10],
  ["#", 11],
  ["#", 12],
  ["#", 15],
  ["-", 1],
  ["-", 2],
  ["-", 7],
  ["-", 8],
  ["-", "-"],
  ["-", 10],
  ["-", 11],
  ["-", 12],
  ["-", 15],
  [10, 1],
  [10, 2],
  [10, 7],
  [10, 8],
  [10, 10],
  [10, 11],
  [10, 12],
  [10, "%"],
  [10, 15],
  ["@", 1],
  ["@", 2],
  ["@", 7],
  ["@", 8],
  ["@", "-"],
  ["@", 15],
  [".", 10],
  [".", 11],
  [".", 12],
  ["+", 10],
  ["+", 11],
  ["+", 12],
  ["/", "*"]
], qs = ki.concat([
  [1, 4],
  [12, 4],
  [4, 4],
  [3, 21],
  [3, 5],
  [3, 16],
  [11, 11],
  [11, 12],
  [11, 2],
  [11, "-"],
  [22, 1],
  [22, 2],
  [22, 11],
  [22, 12],
  [22, 4],
  [22, "-"]
]);
function wi(e) {
  const t = new Set(e.map(([r, n]) => gr(r) << 16 | gr(n)));
  return function(r, n, o) {
    const i2 = gr(n, o), s = o.charCodeAt(0);
    return (s === _s && n !== 1 && n !== 2 && n !== 15 || s === Bs ? t.has(r << 16 | s << 8) : t.has(r << 16 | i2)) && this.emit(" ", 13, true), i2;
  };
}
var Us = wi(ki), br = wi(qs);
var js = 92;
function Ws(e, t) {
  if (typeof t == "function") {
    let r = null;
    e.children.forEach((n) => {
      r !== null && t.call(this, r), this.node(n), r = n;
    });
    return;
  }
  e.children.forEach(this.node, this);
}
function Hs(e) {
  ve(e, (t, r, n) => {
    this.token(t, e.slice(r, n));
  });
}
function vi(e) {
  const t = /* @__PURE__ */ new Map();
  for (const r in e.node) {
    const n = e.node[r];
    typeof (n.generate || n) == "function" && t.set(r, n.generate || n);
  }
  return (r, n) => {
    let o = "", i2 = 0, s = {
      node(c) {
        if (t.has(c.type)) {
          t.get(c.type).call(u, c);
        } else {
          throw new Error("Unknown node type: " + c.type);
        }
      },
      tokenBefore: br,
      token(c, a) {
        i2 = this.tokenBefore(i2, c, a), this.emit(a, c, false), c === 9 && a.charCodeAt(0) === js && this.emit(
          `
`,
          13,
          true
        );
      },
      emit(c) {
        o += c;
      },
      result() {
        return o;
      }
    };
    n && (typeof n.decorator == "function" && (s = n.decorator(s)), n.sourceMap && (s = yi(s)), n.mode in It && (s.tokenBefore = It[n.mode]));
    const u = {
      node: (c) => s.node(c),
      children: Ws,
      token: (c, a) => s.token(c, a),
      tokenize: Hs
    };
    return s.node(r), s.result();
  };
}
function Si(e) {
  return {
    fromPlainObject(t) {
      return e(t, {
        enter(r) {
          r.children && !(r.children instanceof D) && (r.children = new D().fromArray(r.children));
        }
      }), t;
    },
    toPlainObject(t) {
      return e(t, {
        leave(r) {
          r.children && r.children instanceof D && (r.children = r.children.toArray());
        }
      }), t;
    }
  };
}
var { hasOwnProperty: xr } = Object.prototype, it = () => {
};
function Ci(e) {
  return typeof e == "function" ? e : it;
}
function Ai(e, t) {
  return function(r, n, o) {
    r.type === t && e.call(this, r, n, o);
  };
}
function Ys(e, t) {
  const r = t.structure, n = [];
  for (const o in r) {
    if (xr.call(r, o) === false) {
      continue;
    }
    let i2 = r[o], s = { name: o, type: false, nullable: false };
    Array.isArray(i2) || (i2 = [i2]);
    for (const u of i2) {
      u === null ? s.nullable = true : typeof u == "string" ? s.type = "node" : Array.isArray(u) && (s.type = "list");
    }
    s.type && n.push(s);
  }
  return n.length ? { context: t.walkContext, fields: n } : null;
}
function Gs(e) {
  const t = {};
  for (const r in e.node) {
    if (xr.call(e.node, r)) {
      const n = e.node[r];
      if (!n.structure) {
        throw new Error("Missed `structure` field in `" + r + "` node type definition");
      }
      t[r] = Ys(r, n);
    }
  }
  return t;
}
function Ti(e, t) {
  const r = e.fields.slice(), n = e.context, o = typeof n == "string";
  return t && r.reverse(), (i2, s, u, c) => {
    let a;
    o && (a = s[n], s[n] = i2);
    for (const l of r) {
      const p = i2[l.name];
      if (!l.nullable || p) {
        if (l.type === "list") {
          if (t ? p.reduceRight(c, false) : p.reduce(c, false)) {
            return true;
          }
        } else if (u(p)) {
          return true;
        }
      }
    }
    o && (s[n] = a);
  };
}
function Ei({ StyleSheet: e, Atrule: t, Rule: r, Block: n, DeclarationList: o }) {
  return {
    Atrule: { StyleSheet: e, Atrule: t, Rule: r, Block: n },
    Rule: { StyleSheet: e, Atrule: t, Rule: r, Block: n },
    Declaration: {
      StyleSheet: e,
      Atrule: t,
      Rule: r,
      Block: n,
      DeclarationList: o
    }
  };
}
function Li(e) {
  const t = Gs(e), r = {}, n = {}, o = Symbol("break-walk"), i2 = Symbol("skip-node");
  for (const a in t) {
    xr.call(t, a) && t[a] !== null && (r[a] = Ti(t[a], false), n[a] = Ti(t[a], true));
  }
  const s = Ei(r), u = Ei(n), c = (a, l) => {
    function p(S, R, ke) {
      const z = m.call(X, S, R, ke);
      return z === o ? true : z === i2 ? false : !!(P.hasOwnProperty(S.type) && P[S.type](S, X, p, te) || f.call(X, S, R, ke) === o);
    }
    let m = it, f = it, P = r, te = (S, R, ke, z) => S || p(R, ke, z), X = {
      break: o,
      skip: i2,
      root: a,
      stylesheet: null,
      atrule: null,
      atrulePrelude: null,
      rule: null,
      selector: null,
      block: null,
      declaration: null,
      function: null
    };
    if (typeof l == "function") {
      m = l;
    } else if (l && (m = Ci(l.enter), f = Ci(l.leave), l.reverse && (P = n), l.visit)) {
      if (s.hasOwnProperty(l.visit)) {
        P = l.reverse ? u[l.visit] : s[l.visit];
      } else if (!t.hasOwnProperty(l.visit)) {
        throw new Error(
          "Bad value `" + l.visit + "` for `visit` option (should be: " + Object.keys(t).sort().join(", ") + ")"
        );
      }
      m = Ai(m, l.visit), f = Ai(f, l.visit);
    }
    if (m === it && f === it) {
      throw new Error(
        "Neither `enter` nor `leave` walker handler is set or both aren't a function"
      );
    }
    p(a);
  };
  return c.break = o, c.skip = i2, c.find = (a, l) => {
    let p = null;
    return c(a, function(m, f, P) {
      if (l.call(this, m, f, P)) {
        return p = m, o;
      }
    }), p;
  }, c.findLast = (a, l) => {
    let p = null;
    return c(a, {
      reverse: true,
      enter(m, f, P) {
        if (l.call(this, m, f, P)) {
          return p = m, o;
        }
      }
    }), p;
  }, c.findAll = (a, l) => {
    const p = [];
    return c(a, function(m, f, P) {
      l.call(this, m, f, P) && p.push(m);
    }), p;
  }, c;
}
function Vs(e) {
  return e;
}
function Ks(e) {
  const { min: t, max: r, comma: n } = e;
  return t === 0 && r === 0 ? n ? "#?" : "*" : t === 0 && r === 1 ? "?" : t === 1 && r === 0 ? n ? "#" : "+" : t === 1 && r === 1 ? "" : (n ? "#" : "") + (t === r ? "{" + t + "}" : "{" + t + "," + (r !== 0 ? r : "") + "}");
}
function Qs(e) {
  switch (e.type) {
    case "Range":
      return " [" + (e.min === null ? "-∞" : e.min) + "," + (e.max === null ? "∞" : e.max) + "]";
    default:
      throw new Error("Unknown node type `" + e.type + "`");
  }
}
function Xs(e, t, r, n) {
  const o = e.combinator === " " || n ? e.combinator : " " + e.combinator + " ", i2 = e.terms.map((s) => yr(s, t, r, n)).join(o);
  return e.explicit || r ? (n || i2[0] === "," ? "[" : "[ ") + i2 + (n ? "]" : " ]") : i2;
}
function yr(e, t, r, n) {
  let o;
  switch (e.type) {
    case "Group":
      o = Xs(e, t, r, n) + (e.disallowEmpty ? "!" : "");
      break;
    case "Multiplier":
      return yr(e.term, t, r, n) + t(Ks(e), e);
    case "Type":
      o = "<" + e.name + (e.opts ? t(Qs(e.opts), e.opts) : "") + ">";
      break;
    case "Property":
      o = "<'" + e.name + "'>";
      break;
    case "Keyword":
      o = e.name;
      break;
    case "AtKeyword":
      o = "@" + e.name;
      break;
    case "Function":
      o = e.name + "(";
      break;
    case "String":
    case "Token":
      o = e.value;
      break;
    case "Comma":
      o = ",";
      break;
    default:
      throw new Error("Unknown node type `" + e.type + "`");
  }
  return t(o, e);
}
function Pe(e, t) {
  let r = Vs, n = false, o = false;
  return typeof t == "function" ? r = t : t && (n = Boolean(t.forceBraces), o = Boolean(t.compact), typeof t.decorate == "function" && (r = t.decorate)), yr(e, r, n, o);
}
var Pi = { offset: 0, line: 1, column: 1 };
function $s(e, t) {
  let r = e.tokens, n = e.longestMatch, o = n < r.length && r[n].node || null, i2 = o !== t ? o : null, s = 0, u = 0, c = 0, a = "", l, p;
  for (let m = 0; m < r.length; m++) {
    const f = r[m].value;
    m === n && (u = f.length, s = a.length), i2 !== null && r[m].node === i2 && (m <= n ? c++ : c = 0), a += f;
  }
  return n === r.length || c > 1 ? (l = Dt(i2 || t, "end") || at(Pi, a), p = at(l)) : (l = Dt(i2, "start") || at(Dt(t, "start") || Pi, a.slice(0, s)), p = Dt(i2, "end") || at(l, a.substr(s, u))), { css: a, mismatchOffset: s, mismatchLength: u, start: l, end: p };
}
function Dt(e, t) {
  const r = e && e.loc && e.loc[t];
  return r ? "line" in r ? at(r) : r : null;
}
function at({ offset: e, line: t, column: r }, n) {
  const o = { offset: e, line: t, column: r };
  if (n) {
    const i2 = n.split(/\n|\r\n?|\f/);
    o.offset += n.length, o.line += i2.length - 1, o.column = i2.length === 1 ? o.column + n.length : i2.pop().length + 1;
  }
  return o;
}
var Ue = (e, t) => {
  const r = Ee("SyntaxReferenceError", e + (t ? " `" + t + "`" : ""));
  return r.reference = t, r;
}, Ii = (e, t, r, n) => {
  const o = Ee("SyntaxMatchError", e), { css: i2, mismatchOffset: s, mismatchLength: u, start: c, end: a } = $s(n, r);
  return o.rawMessage = e, o.syntax = t ? Pe(t) : "<generic>", o.css = i2, o.mismatchOffset = s, o.mismatchLength = u, o.message = e + `
  syntax: ` + o.syntax + `
   value: ` + (i2 || "<empty string>") + `
  --------` + new Array(o.mismatchOffset + 1).join("-") + "^", Object.assign(o, c), o.loc = {
    source: r && r.loc && r.loc.source || "<unknown>",
    start: c,
    end: a
  }, o;
};
var Ot = /* @__PURE__ */ new Map(), je = /* @__PURE__ */ new Map(), Nt = 45, zt = Zs, kr = Js, Ym = wr;
function Mt(e, t) {
  return t = t || 0, e.length - t >= 2 && e.charCodeAt(t) === Nt && e.charCodeAt(t + 1) === Nt;
}
function wr(e, t) {
  if (t = t || 0, e.length - t >= 3 && e.charCodeAt(t) === Nt && e.charCodeAt(t + 1) !== Nt) {
    const r = e.indexOf("-", t + 2);
    if (r !== -1) {
      return e.substring(t, r + 1);
    }
  }
  return "";
}
function Zs(e) {
  if (Ot.has(e)) {
    return Ot.get(e);
  }
  let t = e.toLowerCase(), r = Ot.get(t);
  if (r === void 0) {
    const n = Mt(t, 0), o = n ? "" : wr(t, 0);
    r = Object.freeze({
      basename: t.substr(o.length),
      name: t,
      prefix: o,
      vendor: o,
      custom: n
    });
  }
  return Ot.set(e, r), r;
}
function Js(e) {
  if (je.has(e)) {
    return je.get(e);
  }
  let t = e, r = e[0];
  r === "/" ? r = e[1] === "/" ? "//" : "/" : r !== "_" && r !== "*" && r !== "$" && r !== "#" && r !== "+" && r !== "&" && (r = "");
  const n = Mt(t, r.length);
  if (!n && (t = t.toLowerCase(), je.has(t))) {
    const u = je.get(t);
    return je.set(e, u), u;
  }
  const o = n ? "" : wr(t, r.length), i2 = t.substr(0, r.length + o.length), s = Object.freeze({
    basename: t.substr(i2.length),
    name: t.substr(r.length),
    hack: r,
    vendor: o,
    prefix: i2,
    custom: n
  });
  return je.set(e, s), s;
}
var Rt = ["initial", "inherit", "unset", "revert", "revert-layer"];
var lt = 43, he = 45, vr = 110, We = true, tl = false;
function Cr(e, t) {
  return e !== null && e.type === 9 && e.value.charCodeAt(0) === t;
}
function st(e, t, r) {
  while (e !== null && (e.type === 13 || e.type === 25)) {
    e = r(++t);
  }
  return t;
}
function Se(e, t, r, n) {
  if (!e) {
    return 0;
  }
  const o = e.value.charCodeAt(t);
  if (o === lt || o === he) {
    if (r) {
      return 0;
    }
    t++;
  }
  for (; t < e.value.length; t++) {
    if (!B(e.value.charCodeAt(t))) {
      return 0;
    }
  }
  return n + 1;
}
function Sr(e, t, r) {
  let n = false, o = st(e, t, r);
  if (e = r(o), e === null) {
    return t;
  }
  if (e.type !== 10) {
    if (Cr(e, lt) || Cr(e, he)) {
      if (n = true, o = st(r(++o), o, r), e = r(o), e === null || e.type !== 10) {
        return 0;
      }
    } else {
      return t;
    }
  }
  if (!n) {
    const i2 = e.value.charCodeAt(0);
    if (i2 !== lt && i2 !== he) {
      return 0;
    }
  }
  return Se(e, n ? 0 : 1, n, o);
}
function Ar(e, t) {
  let r = 0;
  if (!e) {
    return 0;
  }
  if (e.type === 10) {
    return Se(e, 0, tl, r);
  }
  if (e.type === 1 && e.value.charCodeAt(0) === he) {
    if (!de(e.value, 1, vr)) {
      return 0;
    }
    switch (e.value.length) {
      case 2:
        return Sr(t(++r), r, t);
      case 3:
        return e.value.charCodeAt(2) !== he ? 0 : (r = st(t(++r), r, t), e = t(r), Se(e, 0, We, r));
      default:
        return e.value.charCodeAt(2) !== he ? 0 : Se(e, 3, We, r);
    }
  } else if (e.type === 1 || Cr(e, lt) && t(r + 1).type === 1) {
    if (e.type !== 1 && (e = t(++r)), e === null || !de(e.value, 0, vr)) {
      return 0;
    }
    switch (e.value.length) {
      case 1:
        return Sr(t(++r), r, t);
      case 2:
        return e.value.charCodeAt(1) !== he ? 0 : (r = st(t(++r), r, t), e = t(r), Se(e, 0, We, r));
      default:
        return e.value.charCodeAt(1) !== he ? 0 : Se(e, 2, We, r);
    }
  } else if (e.type === 12) {
    let n = e.value.charCodeAt(0), o = n === lt || n === he ? 1 : 0, i2 = o;
    for (; i2 < e.value.length && B(e.value.charCodeAt(i2)); i2++) {
    }
    return i2 === o || !de(e.value, i2, vr) ? 0 : i2 + 1 === e.value.length ? Sr(t(++r), r, t) : e.value.charCodeAt(i2 + 1) !== he ? 0 : i2 + 2 === e.value.length ? (r = st(t(++r), r, t), e = t(r), Se(e, 0, We, r)) : Se(e, i2 + 2, We, r);
  }
  return 0;
}
var rl = 43, Di = 45, Oi = 63, nl = 117;
function Tr(e, t) {
  return e !== null && e.type === 9 && e.value.charCodeAt(0) === t;
}
function ol(e, t) {
  return e.value.charCodeAt(0) === t;
}
function ct(e, t, r) {
  let n = 0;
  for (let o = t; o < e.value.length; o++) {
    const i2 = e.value.charCodeAt(o);
    if (i2 === Di && r && n !== 0) {
      return ct(e, t + n + 1, false), 6;
    }
    if (!ee(i2) || ++n > 6) {
      return 0;
    }
  }
  return n;
}
function Ft(e, t, r) {
  if (!e) {
    return 0;
  }
  while (Tr(r(t), Oi)) {
    if (++e > 6) {
      return 0;
    }
    t++;
  }
  return t;
}
function Er(e, t) {
  let r = 0;
  if (e === null || e.type !== 1 || !de(e.value, 0, nl) || (e = t(++r), e === null)) {
    return 0;
  }
  if (Tr(e, rl)) {
    return e = t(++r), e === null ? 0 : e.type === 1 ? Ft(ct(e, 0, true), ++r, t) : Tr(e, Oi) ? Ft(1, ++r, t) : 0;
  }
  if (e.type === 10) {
    const n = ct(e, 1, true);
    return n === 0 ? 0 : (e = t(++r), e === null ? r : e.type === 12 || e.type === 10 ? !ol(e, Di) || !ct(e, 1, false) ? 0 : r + 1 : Ft(n, r, t));
  }
  return e.type === 12 ? Ft(ct(e, 1, true), ++r, t) : 0;
}
var il = ["calc(", "-moz-calc(", "-webkit-calc("], Lr = /* @__PURE__ */ new Map([
  [2, 22],
  [21, 22],
  [19, 20],
  [23, 24]
]);
function le(e, t) {
  return t < e.length ? e.charCodeAt(t) : 0;
}
function Ni(e, t) {
  return ge(e, 0, e.length, t);
}
function zi(e, t) {
  for (let r = 0; r < t.length; r++) {
    if (Ni(e, t[r])) {
      return true;
    }
  }
  return false;
}
function Mi(e, t) {
  return t !== e.length - 2 ? false : le(e, t) === 92 && B(le(e, t + 1));
}
function Bt(e, t, r) {
  if (e && e.type === "Range") {
    const n = Number(r !== void 0 && r !== t.length ? t.substr(0, r) : t);
    if (isNaN(n) || e.min !== null && n < e.min && typeof e.min != "string" || e.max !== null && n > e.max && typeof e.max != "string") {
      return true;
    }
  }
  return false;
}
function al(e, t) {
  let r = 0, n = [], o = 0;
  e: do {
    switch (e.type) {
      case 24:
      case 22:
      case 20:
        if (e.type !== r) {
          break e;
        }
        if (r = n.pop(), n.length === 0) {
          o++;
          break e;
        }
        break;
      case 2:
      case 21:
      case 19:
      case 23:
        n.push(r), r = Lr.get(e.type);
        break;
    }
    o++;
  } while (e = t(o));
  return o;
}
function ie(e) {
  return (t, r, n) => t === null ? 0 : t.type === 2 && zi(t.value, il) ? al(t, r) : e(t, r, n);
}
function N(e) {
  return (t) => t === null || t.type !== e ? 0 : 1;
}
function sl(e) {
  if (e === null || e.type !== 1) {
    return 0;
  }
  const t = e.value.toLowerCase();
  return zi(t, Rt) || Ni(t, "default") ? 0 : 1;
}
function ll(e) {
  return e === null || e.type !== 1 || le(e.value, 0) !== 45 || le(e.value, 1) !== 45 ? 0 : 1;
}
function cl(e) {
  if (e === null || e.type !== 4) {
    return 0;
  }
  const t = e.value.length;
  if (t !== 4 && t !== 5 && t !== 7 && t !== 9) {
    return 0;
  }
  for (let r = 1; r < t; r++) {
    if (!ee(le(e.value, r))) {
      return 0;
    }
  }
  return 1;
}
function ul(e) {
  return e === null || e.type !== 4 || !ze(le(e.value, 1), le(e.value, 2), le(e.value, 3)) ? 0 : 1;
}
function pl(e, t) {
  if (!e) {
    return 0;
  }
  let r = 0, n = [], o = 0;
  e: do {
    switch (e.type) {
      case 6:
      case 8:
        break e;
      case 24:
      case 22:
      case 20:
        if (e.type !== r) {
          break e;
        }
        r = n.pop();
        break;
      case 17:
        if (r === 0) {
          break e;
        }
        break;
      case 9:
        if (r === 0 && e.value === "!") {
          break e;
        }
        break;
      case 2:
      case 21:
      case 19:
      case 23:
        n.push(r), r = Lr.get(e.type);
        break;
    }
    o++;
  } while (e = t(o));
  return o;
}
function hl(e, t) {
  if (!e) {
    return 0;
  }
  let r = 0, n = [], o = 0;
  e: do {
    switch (e.type) {
      case 6:
      case 8:
        break e;
      case 24:
      case 22:
      case 20:
        if (e.type !== r) {
          break e;
        }
        r = n.pop();
        break;
      case 2:
      case 21:
      case 19:
      case 23:
        n.push(r), r = Lr.get(e.type);
        break;
    }
    o++;
  } while (e = t(o));
  return o;
}
function ye(e) {
  return e && (e = new Set(e)), (t, r, n) => {
    if (t === null || t.type !== 12) {
      return 0;
    }
    const o = Te(t.value, 0);
    if (e !== null) {
      const i2 = t.value.indexOf("\\", o), s = i2 === -1 || !Mi(t.value, i2) ? t.value.substr(o) : t.value.substring(o, i2);
      if (e.has(s.toLowerCase()) === false) {
        return 0;
      }
    }
    return Bt(n, t.value, o) ? 0 : 1;
  };
}
function ml(e, t, r) {
  return e === null || e.type !== 11 || Bt(r, e.value, e.value.length - 1) ? 0 : 1;
}
function Ri(e) {
  return typeof e != "function" && (e = () => 0), (t, r, n) => t !== null && t.type === 10 && Number(t.value) === 0 ? 1 : e(t, r, n);
}
function fl(e, t, r) {
  if (e === null) {
    return 0;
  }
  const n = Te(e.value, 0);
  return !(n === e.value.length) && !Mi(e.value, n) || Bt(r, e.value, n) ? 0 : 1;
}
function dl(e, t, r) {
  if (e === null || e.type !== 10) {
    return 0;
  }
  let n = le(e.value, 0) === 43 || le(e.value, 0) === 45 ? 1 : 0;
  for (; n < e.value.length; n++) {
    if (!B(le(e.value, n))) {
      return 0;
    }
  }
  return Bt(r, e.value, n) ? 0 : 1;
}
var gl = {
  "ident-token": N(1),
  "function-token": N(2),
  "at-keyword-token": N(3),
  "hash-token": N(4),
  "string-token": N(5),
  "bad-string-token": N(6),
  "url-token": N(7),
  "bad-url-token": N(8),
  "delim-token": N(9),
  "number-token": N(10),
  "percentage-token": N(11),
  "dimension-token": N(12),
  "whitespace-token": N(13),
  "CDO-token": N(14),
  "CDC-token": N(15),
  "colon-token": N(16),
  "semicolon-token": N(17),
  "comma-token": N(18),
  "[-token": N(19),
  "]-token": N(20),
  "(-token": N(21),
  ")-token": N(22),
  "{-token": N(23),
  "}-token": N(24)
}, bl = {
  string: N(5),
  ident: N(1),
  percentage: ie(ml),
  zero: Ri(),
  number: ie(fl),
  integer: ie(dl),
  "custom-ident": sl,
  "custom-property-name": ll,
  "hex-color": cl,
  "id-selector": ul,
  "an-plus-b": Ar,
  urange: Er,
  "declaration-value": pl,
  "any-value": hl
};
function xl(e) {
  const {
    angle: t,
    decibel: r,
    frequency: n,
    flex: o,
    length: i2,
    resolution: s,
    semitones: u,
    time: c
  } = e || {};
  return {
    dimension: ie(ye(null)),
    angle: ie(ye(t)),
    decibel: ie(ye(r)),
    frequency: ie(ye(n)),
    flex: ie(ye(o)),
    length: ie(Ri(ye(i2))),
    resolution: ie(ye(s)),
    semitones: ie(ye(u)),
    time: ie(ye(c))
  };
}
function Fi(e) {
  return { ...gl, ...bl, ...xl(e) };
}
var _t = {};
b(_t, {
  angle: () => kl,
  decibel: () => Al,
  flex: () => Cl,
  frequency: () => vl,
  length: () => yl,
  resolution: () => Sl,
  semitones: () => Tl,
  time: () => wl
});
var yl = [
  "cm",
  "mm",
  "q",
  "in",
  "pt",
  "pc",
  "px",
  "em",
  "rem",
  "ex",
  "rex",
  "cap",
  "rcap",
  "ch",
  "rch",
  "ic",
  "ric",
  "lh",
  "rlh",
  "vw",
  "svw",
  "lvw",
  "dvw",
  "vh",
  "svh",
  "lvh",
  "dvh",
  "vi",
  "svi",
  "lvi",
  "dvi",
  "vb",
  "svb",
  "lvb",
  "dvb",
  "vmin",
  "svmin",
  "lvmin",
  "dvmin",
  "vmax",
  "svmax",
  "lvmax",
  "dvmax",
  "cqw",
  "cqh",
  "cqi",
  "cqb",
  "cqmin",
  "cqmax"
], kl = ["deg", "grad", "rad", "turn"], wl = ["s", "ms"], vl = ["hz", "khz"], Sl = ["dpi", "dpcm", "dppx", "x"], Cl = ["fr"], Al = ["db"], Tl = ["st"];
var $i = {};
b($i, {
  SyntaxError: () => qt,
  generate: () => Pe,
  parse: () => Ge,
  walk: () => Vt
});
function qt(e, t, r) {
  return Object.assign(Ee("SyntaxError", e), {
    input: t,
    offset: r,
    rawMessage: e,
    message: e + `
  ` + t + `
--` + new Array((r || t.length) + 1).join("-") + "^"
  });
}
var El = 9, Ll = 10, Pl = 12, Il = 13, Dl = 32, Ut = class {
  constructor(t) {
    this.str = t, this.pos = 0;
  }
  charCodeAt(t) {
    return t < this.str.length ? this.str.charCodeAt(t) : 0;
  }
  charCode() {
    return this.charCodeAt(this.pos);
  }
  nextCharCode() {
    return this.charCodeAt(this.pos + 1);
  }
  nextNonWsCode(t) {
    return this.charCodeAt(this.findWsEnd(t));
  }
  findWsEnd(t) {
    for (; t < this.str.length; t++) {
      const r = this.str.charCodeAt(t);
      if (r !== Il && r !== Ll && r !== Pl && r !== Dl && r !== El) {
        break;
      }
    }
    return t;
  }
  substringToPos(t) {
    return this.str.substring(this.pos, this.pos = t);
  }
  eat(t) {
    this.charCode() !== t && this.error("Expect `" + String.fromCharCode(t) + "`"), this.pos++;
  }
  peek() {
    return this.pos < this.str.length ? this.str.charAt(this.pos++) : "";
  }
  error(t) {
    throw new qt(t, this.str, this.pos);
  }
};
var Ol = 9, Nl = 10, zl = 12, Ml = 13, Rl = 32, Yi = 33, Dr = 35, Bi = 38, jt = 39, Gi = 40, Fl = 41, Vi = 42, Or = 43, Nr = 44, _i = 45, zr = 60, Ki = 62, Ir = 63, Bl = 64, Gt = 91, Mr = 93, Wt = 123, qi = 124, Ui = 125, ji = 8734, ut = new Uint8Array(128).map((e, t) => /[a-zA-Z0-9\-]/.test(String.fromCharCode(t)) ? 1 : 0), Wi = { " ": 1, "&&": 2, "||": 3, "|": 4 };
function Ht(e) {
  return e.substringToPos(e.findWsEnd(e.pos));
}
function He(e) {
  let t = e.pos;
  for (; t < e.str.length; t++) {
    const r = e.str.charCodeAt(t);
    if (r >= 128 || ut[r] === 0) {
      break;
    }
  }
  return e.pos === t && e.error("Expect a keyword"), e.substringToPos(t);
}
function Yt(e) {
  let t = e.pos;
  for (; t < e.str.length; t++) {
    const r = e.str.charCodeAt(t);
    if (r < 48 || r > 57) {
      break;
    }
  }
  return e.pos === t && e.error("Expect a number"), e.substringToPos(t);
}
function _l(e) {
  const t = e.str.indexOf("'", e.pos + 1);
  return t === -1 && (e.pos = e.str.length, e.error("Expect an apostrophe")), e.substringToPos(t + 1);
}
function Hi(e) {
  let t = null, r = null;
  return e.eat(Wt), t = Yt(e), e.charCode() === Nr ? (e.pos++, e.charCode() !== Ui && (r = Yt(e))) : r = t, e.eat(Ui), { min: Number(t), max: r ? Number(r) : 0 };
}
function ql(e) {
  let t = null, r = false;
  switch (e.charCode()) {
    case Vi:
      e.pos++, t = { min: 0, max: 0 };
      break;
    case Or:
      e.pos++, t = { min: 1, max: 0 };
      break;
    case Ir:
      e.pos++, t = { min: 0, max: 1 };
      break;
    case Dr:
      e.pos++, r = true, e.charCode() === Wt ? t = Hi(e) : e.charCode() === Ir ? (e.pos++, t = { min: 0, max: 0 }) : t = { min: 1, max: 0 };
      break;
    case Wt:
      t = Hi(e);
      break;
    default:
      return null;
  }
  return { type: "Multiplier", comma: r, min: t.min, max: t.max, term: null };
}
function Ye(e, t) {
  const r = ql(e);
  return r !== null ? (r.term = t, e.charCode() === Dr && e.charCodeAt(e.pos - 1) === Or ? Ye(e, r) : r) : t;
}
function Pr(e) {
  const t = e.peek();
  return t === "" ? null : { type: "Token", value: t };
}
function Ul(e) {
  let t;
  return e.eat(zr), e.eat(jt), t = He(e), e.eat(jt), e.eat(Ki), Ye(e, { type: "Property", name: t });
}
function jl(e) {
  let t = null, r = null, n = 1;
  return e.eat(Gt), e.charCode() === _i && (e.peek(), n = -1), n == -1 && e.charCode() === ji ? e.peek() : (t = n * Number(Yt(e)), ut[e.charCode()] !== 0 && (t += He(e))), Ht(e), e.eat(Nr), Ht(e), e.charCode() === ji ? e.peek() : (n = 1, e.charCode() === _i && (e.peek(), n = -1), r = n * Number(Yt(e)), ut[e.charCode()] !== 0 && (r += He(e))), e.eat(Mr), { type: "Range", min: t, max: r };
}
function Wl(e) {
  let t, r = null;
  return e.eat(zr), t = He(e), e.charCode() === Gi && e.nextCharCode() === Fl && (e.pos += 2, t += "()"), e.charCodeAt(e.findWsEnd(e.pos)) === Gt && (Ht(e), r = jl(e)), e.eat(Ki), Ye(e, { type: "Type", name: t, opts: r });
}
function Hl(e) {
  const t = He(e);
  return e.charCode() === Gi ? (e.pos++, { type: "Function", name: t }) : Ye(e, { type: "Keyword", name: t });
}
function Yl(e, t) {
  function r(o, i2) {
    return {
      type: "Group",
      terms: o,
      combinator: i2,
      disallowEmpty: false,
      explicit: false
    };
  }
  let n;
  for (t = Object.keys(t).sort((o, i2) => Wi[o] - Wi[i2]); t.length > 0; ) {
    n = t.shift();
    let o = 0, i2 = 0;
    for (; o < e.length; o++) {
      const s = e[o];
      s.type === "Combinator" && (s.value === n ? (i2 === -1 && (i2 = o - 1), e.splice(o, 1), o--) : (i2 !== -1 && o - i2 > 1 && (e.splice(i2, o - i2, r(e.slice(i2, o), n)), o = i2 + 1), i2 = -1));
    }
    i2 !== -1 && t.length && e.splice(i2, o - i2, r(e.slice(i2, o), n));
  }
  return n;
}
function Qi(e) {
  let t = [], r = {}, n, o = null, i2 = e.pos;
  while (n = Vl(e)) {
    n.type !== "Spaces" && (n.type === "Combinator" ? ((o === null || o.type === "Combinator") && (e.pos = i2, e.error("Unexpected combinator")), r[n.value] = true) : o !== null && o.type !== "Combinator" && (r[" "] = true, t.push({ type: "Combinator", value: " " })), t.push(n), o = n, i2 = e.pos);
  }
  return o !== null && o.type === "Combinator" && (e.pos -= i2, e.error("Unexpected combinator")), {
    type: "Group",
    terms: t,
    combinator: Yl(t, r) || " ",
    disallowEmpty: false,
    explicit: false
  };
}
function Gl(e) {
  let t;
  return e.eat(Gt), t = Qi(e), e.eat(Mr), t.explicit = true, e.charCode() === Yi && (e.pos++, t.disallowEmpty = true), t;
}
function Vl(e) {
  let t = e.charCode();
  if (t < 128 && ut[t] === 1) {
    return Hl(e);
  }
  switch (t) {
    case Mr:
      break;
    case Gt:
      return Ye(e, Gl(e));
    case zr:
      return e.nextCharCode() === jt ? Ul(e) : Wl(e);
    case qi:
      return {
        type: "Combinator",
        value: e.substringToPos(e.pos + (e.nextCharCode() === qi ? 2 : 1))
      };
    case Bi:
      return e.pos++, e.eat(Bi), { type: "Combinator", value: "&&" };
    case Nr:
      return e.pos++, { type: "Comma" };
    case jt:
      return Ye(e, { type: "String", value: _l(e) });
    case Rl:
    case Ol:
    case Nl:
    case Ml:
    case zl:
      return { type: "Spaces", value: Ht(e) };
    case Bl:
      return t = e.nextCharCode(), t < 128 && ut[t] === 1 ? (e.pos++, { type: "AtKeyword", name: He(e) }) : Pr(e);
    case Vi:
    case Or:
    case Ir:
    case Dr:
    case Yi:
      break;
    case Wt:
      if (t = e.nextCharCode(), t < 48 || t > 57) {
        return Pr(e);
      }
      break;
    default:
      return Pr(e);
  }
}
function Ge(e) {
  const t = new Ut(e), r = Qi(t);
  return t.pos !== e.length && t.error("Unexpected input"), r.terms.length === 1 && r.terms[0].type === "Group" ? r.terms[0] : r;
}
var pt = () => {
};
function Xi(e) {
  return typeof e == "function" ? e : pt;
}
function Vt(e, t, r) {
  function n(s) {
    switch (o.call(r, s), s.type) {
      case "Group":
        s.terms.forEach(n);
        break;
      case "Multiplier":
        n(s.term);
        break;
      case "Type":
      case "Property":
      case "Keyword":
      case "AtKeyword":
      case "Function":
      case "String":
      case "Token":
      case "Comma":
        break;
      default:
        throw new Error("Unknown type: " + s.type);
    }
    i2.call(r, s);
  }
  let o = pt, i2 = pt;
  if (typeof t == "function" ? o = t : t && (o = Xi(t.enter), i2 = Xi(t.leave)), o === pt && i2 === pt) {
    throw new Error(
      "Neither `enter` nor `leave` walker handler is set or both aren't a function"
    );
  }
  n(e);
}
var Kl = {
  decorator(e) {
    let t = [], r = null;
    return {
      ...e,
      node(n) {
        const o = r;
        r = n, e.node.call(this, n), r = o;
      },
      emit(n, o, i2) {
        t.push({ type: o, value: n, node: i2 ? null : r });
      },
      result() {
        return t;
      }
    };
  }
};
function Ql(e) {
  const t = [];
  return ve(e, (r, n, o) => t.push({ type: r, value: e.slice(n, o), node: null })), t;
}
function Zi(e, t) {
  return typeof e == "string" ? Ql(e) : t.generate(e, Kl);
}
var C = { type: "Match" }, L = { type: "Mismatch" }, Kt = { type: "DisallowEmpty" }, Xl = 40, $l = 41;
function Z(e, t, r) {
  return t === C && r === L || e === C && t === C && r === C ? e : (e.type === "If" && e.else === L && t === C && (t = e.then, e = e.match), { type: "If", match: e, then: t, else: r });
}
function ea(e) {
  return e.length > 2 && e.charCodeAt(e.length - 2) === Xl && e.charCodeAt(e.length - 1) === $l;
}
function Ji(e) {
  return e.type === "Keyword" || e.type === "AtKeyword" || e.type === "Function" || e.type === "Type" && ea(e.name);
}
function Rr(e, t, r) {
  switch (e) {
    case " ": {
      let n = C;
      for (let o = t.length - 1; o >= 0; o--) {
        const i2 = t[o];
        n = Z(i2, n, L);
      }
      return n;
    }
    case "|": {
      let n = L, o = null;
      for (let i2 = t.length - 1; i2 >= 0; i2--) {
        const s = t[i2];
        if (Ji(s) && (o === null && i2 > 0 && Ji(t[i2 - 1]) && (o = /* @__PURE__ */ Object.create(null), n = Z({ type: "Enum", map: o }, C, n)), o !== null)) {
          const u = (ea(s.name) ? s.name.slice(0, -1) : s.name).toLowerCase();
          if (!(u in o)) {
            o[u] = s;
            continue;
          }
        }
        o = null, n = Z(s, C, n);
      }
      return n;
    }
    case "&&": {
      if (t.length > 5) {
        return { type: "MatchOnce", terms: t, all: true };
      }
      let n = L;
      for (let o = t.length - 1; o >= 0; o--) {
        let i2 = t[o], s;
        t.length > 1 ? s = Rr(
          e,
          t.filter((u) => u !== i2),
          false
        ) : s = C, n = Z(i2, s, n);
      }
      return n;
    }
    case "||": {
      if (t.length > 5) {
        return { type: "MatchOnce", terms: t, all: false };
      }
      let n = r ? C : L;
      for (let o = t.length - 1; o >= 0; o--) {
        let i2 = t[o], s;
        t.length > 1 ? s = Rr(
          e,
          t.filter((u) => u !== i2),
          true
        ) : s = C, n = Z(i2, s, n);
      }
      return n;
    }
  }
}
function Zl(e) {
  let t = C, r = Fr(e.term);
  if (e.max === 0) {
    r = Z(r, Kt, L), t = Z(r, null, L), t.then = Z(C, C, t), e.comma && (t.then.else = Z({ type: "Comma", syntax: e }, t, L));
  } else {
    for (let n = e.min || 1; n <= e.max; n++) {
      e.comma && t !== C && (t = Z({ type: "Comma", syntax: e }, t, L)), t = Z(r, Z(C, C, t), L);
    }
  }
  if (e.min === 0) {
    t = Z(C, C, t);
  } else {
    for (let n = 0; n < e.min - 1; n++) {
      e.comma && t !== C && (t = Z({ type: "Comma", syntax: e }, t, L)), t = Z(r, t, L);
    }
  }
  return t;
}
function Fr(e) {
  if (typeof e == "function") {
    return { type: "Generic", fn: e };
  }
  switch (e.type) {
    case "Group": {
      let t = Rr(e.combinator, e.terms.map(Fr), false);
      return e.disallowEmpty && (t = Z(t, Kt, L)), t;
    }
    case "Multiplier":
      return Zl(e);
    case "Type":
    case "Property":
      return { type: e.type, name: e.name, syntax: e };
    case "Keyword":
      return { type: e.type, name: e.name.toLowerCase(), syntax: e };
    case "AtKeyword":
      return {
        type: e.type,
        name: "@" + e.name.toLowerCase(),
        syntax: e
      };
    case "Function":
      return {
        type: e.type,
        name: e.name.toLowerCase() + "(",
        syntax: e
      };
    case "String":
      return e.value.length === 3 ? { type: "Token", value: e.value.charAt(1), syntax: e } : {
        type: e.type,
        value: e.value.substr(1, e.value.length - 2).replace(/\\'/g, "'"),
        syntax: e
      };
    case "Token":
      return { type: e.type, value: e.value, syntax: e };
    case "Comma":
      return { type: e.type, syntax: e };
    default:
      throw new Error("Unknown node type:", e.type);
  }
}
function Qt(e, t) {
  return typeof e == "string" && (e = Ge(e)), { type: "MatchGraph", match: Fr(e), syntax: t || null, source: e };
}
var { hasOwnProperty: ta } = Object.prototype, Jl = 0, ec = 1, _r = 2, aa = 3, ra = "Match", tc = "Mismatch", rc = "Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)", na = 15e3;
function oc(e) {
  let t = null, r = null, n = e;
  while (n !== null) {
    r = n.prev, n.prev = t, t = n, n = r;
  }
  return t;
}
function Br(e, t) {
  if (e.length !== t.length) {
    return false;
  }
  for (let r = 0; r < e.length; r++) {
    let n = t.charCodeAt(r), o = e.charCodeAt(r);
    if (o >= 65 && o <= 90 && (o = o | 32), o !== n) {
      return false;
    }
  }
  return true;
}
function ic(e) {
  return e.type !== 9 ? false : e.value !== "?";
}
function oa(e) {
  return e === null ? true : e.type === 18 || e.type === 2 || e.type === 21 || e.type === 19 || e.type === 23 || ic(e);
}
function ia(e) {
  return e === null ? true : e.type === 22 || e.type === 20 || e.type === 24 || e.type === 9 && e.value === "/";
}
function ac(e, t, r) {
  function n() {
    do {
      R++, S = R < e.length ? e[R] : null;
    } while (S !== null && (S.type === 13 || S.type === 25));
  }
  function o(ae) {
    const fe = R + ae;
    return fe < e.length ? e[fe] : null;
  }
  function i2(ae, fe) {
    return {
      nextState: ae,
      matchStack: z,
      syntaxStack: p,
      thenStack: m,
      tokenIndex: R,
      prev: fe
    };
  }
  function s(ae) {
    m = { nextState: ae, matchStack: z, syntaxStack: p, prev: m };
  }
  function u(ae) {
    f = i2(ae, f);
  }
  function c() {
    z = { type: ec, syntax: t.syntax, token: S, prev: z }, n(), P = null, R > ke && (ke = R);
  }
  function a() {
    p = {
      syntax: t.syntax,
      opts: t.syntax.opts || p !== null && p.opts || null,
      prev: p
    }, z = { type: _r, syntax: t.syntax, token: z.token, prev: z };
  }
  function l() {
    z.type === _r ? z = z.prev : z = { type: aa, syntax: p.syntax, token: z.token, prev: z }, p = p.prev;
  }
  let p = null, m = null, f = null, P = null, te = 0, X = null, S = null, R = -1, ke = 0, z = { type: Jl, syntax: null, token: null, prev: null };
  for (n(); X === null && ++te < na; ) {
    switch (t.type) {
      case "Match":
        if (m === null) {
          if (S !== null && (R !== e.length - 1 || S.value !== "\\0" && S.value !== "\\9")) {
            t = L;
            break;
          }
          X = ra;
          break;
        }
        if (t = m.nextState, t === Kt) {
          if (m.matchStack === z) {
            t = L;
            break;
          } else {
            t = C;
          }
        }
        while (m.syntaxStack !== p) {
          l();
        }
        m = m.prev;
        break;
      case "Mismatch":
        if (P !== null && P !== false) {
          (f === null || R > f.tokenIndex) && (f = P, P = false);
        } else if (f === null) {
          X = tc;
          break;
        }
        t = f.nextState, m = f.thenStack, p = f.syntaxStack, z = f.matchStack, R = f.tokenIndex, S = R < e.length ? e[R] : null, f = f.prev;
        break;
      case "MatchGraph":
        t = t.match;
        break;
      case "If":
        t.else !== L && u(t.else), t.then !== C && s(t.then), t = t.match;
        break;
      case "MatchOnce":
        t = { type: "MatchOnceBuffer", syntax: t, index: 0, mask: 0 };
        break;
      case "MatchOnceBuffer": {
        const Q = t.syntax.terms;
        if (t.index === Q.length) {
          if (t.mask === 0 || t.syntax.all) {
            t = L;
            break;
          }
          t = C;
          break;
        }
        if (t.mask === (1 << Q.length) - 1) {
          t = C;
          break;
        }
        for (; t.index < Q.length; t.index++) {
          const J = 1 << t.index;
          if ((t.mask & J) === 0) {
            u(t), s({
              type: "AddMatchOnce",
              syntax: t.syntax,
              mask: t.mask | J
            }), t = Q[t.index++];
            break;
          }
        }
        break;
      }
      case "AddMatchOnce":
        t = {
          type: "MatchOnceBuffer",
          syntax: t.syntax,
          index: 0,
          mask: t.mask
        };
        break;
      case "Enum":
        if (S !== null) {
          let Q = S.value.toLowerCase();
          if (Q.indexOf("\\") !== -1 && (Q = Q.replace(/\\[09].*$/, "")), ta.call(t.map, Q)) {
            t = t.map[Q];
            break;
          }
        }
        t = L;
        break;
      case "Generic": {
        const Q = p !== null ? p.opts : null, J = R + Math.floor(t.fn(S, o, Q));
        if (!isNaN(J) && J > R) {
          while (R < J) {
            c();
          }
          t = C;
        } else {
          t = L;
        }
        break;
      }
      case "Type":
      case "Property": {
        const Q = t.type === "Type" ? "types" : "properties", J = ta.call(r, Q) ? r[Q][t.name] : null;
        if (!J || !J.match) {
          throw new Error(
            "Bad syntax reference: " + (t.type === "Type" ? "<" + t.name + ">" : "<'" + t.name + "'>")
          );
        }
        if (P !== false && S !== null && t.type === "Type" && (t.name === "custom-ident" && S.type === 1 || t.name === "length" && S.value === "0")) {
          P === null && (P = i2(t, f)), t = L;
          break;
        }
        a(), t = J.match;
        break;
      }
      case "Keyword": {
        const Q = t.name;
        if (S !== null) {
          let J = S.value;
          if (J.indexOf("\\") !== -1 && (J = J.replace(/\\[09].*$/, "")), Br(J, Q)) {
            c(), t = C;
            break;
          }
        }
        t = L;
        break;
      }
      case "AtKeyword":
      case "Function":
        if (S !== null && Br(S.value, t.name)) {
          c(), t = C;
          break;
        }
        t = L;
        break;
      case "Token":
        if (S !== null && S.value === t.value) {
          c(), t = C;
          break;
        }
        t = L;
        break;
      case "Comma":
        S !== null && S.type === 18 ? oa(z.token) ? t = L : (c(), t = ia(S) ? L : C) : t = oa(z.token) || ia(S) ? C : L;
        break;
      case "String":
        let ae = "", fe = R;
        for (; fe < e.length && ae.length < t.value.length; fe++) {
          ae += e[fe].value;
        }
        if (Br(ae, t.value)) {
          while (R < fe) {
            c();
          }
          t = C;
        } else {
          t = L;
        }
        break;
      default:
        throw new Error("Unknown node type: " + t.type);
    }
  }
  switch (X) {
    case null:
      console.warn("[csstree-match] BREAK after " + na + " iterations"), X = rc, z = null;
      break;
    case ra:
      while (p !== null) {
        l();
      }
      break;
    default:
      z = null;
  }
  return { tokens: e, reason: X, iterations: te, match: z, longestMatch: ke };
}
function qr(e, t, r) {
  const n = ac(e, t, r || {});
  if (n.match === null) {
    return n;
  }
  let o = n.match, i2 = n.match = { syntax: t.syntax || null, match: [] }, s = [i2];
  for (o = oc(o).prev; o !== null; ) {
    switch (o.type) {
      case _r:
        i2.match.push(i2 = { syntax: o.syntax, match: [] }), s.push(i2);
        break;
      case aa:
        s.pop(), i2 = s[s.length - 1];
        break;
      default:
        i2.match.push({
          syntax: o.syntax || null,
          token: o.token.value,
          node: o.token.node
        });
    }
    o = o.prev;
  }
  return n;
}
var jr = {};
b(jr, {
  getTrace: () => sa,
  isKeyword: () => cc,
  isProperty: () => lc,
  isType: () => sc
});
function sa(e) {
  function t(o) {
    return o === null ? false : o.type === "Type" || o.type === "Property" || o.type === "Keyword";
  }
  function r(o) {
    if (Array.isArray(o.match)) {
      for (let i2 = 0; i2 < o.match.length; i2++) {
        if (r(o.match[i2])) {
          return t(o.syntax) && n.unshift(o.syntax), true;
        }
      }
    } else if (o.node === e) {
      return n = t(o.syntax) ? [o.syntax] : [], true;
    }
    return false;
  }
  let n = null;
  return this.matched !== null && r(this.matched), n;
}
function sc(e, t) {
  return Ur(this, e, (r) => r.type === "Type" && r.name === t);
}
function lc(e, t) {
  return Ur(this, e, (r) => r.type === "Property" && r.name === t);
}
function cc(e) {
  return Ur(this, e, (t) => t.type === "Keyword");
}
function Ur(e, t, r) {
  const n = sa.call(e, t);
  return n === null ? false : n.some(r);
}
function la(e) {
  return "node" in e ? e.node : la(e.match[0]);
}
function ca(e) {
  return "node" in e ? e.node : ca(e.match[e.match.length - 1]);
}
function Wr(e, t, r, n, o) {
  function i2(u) {
    if (u.syntax !== null && u.syntax.type === n && u.syntax.name === o) {
      const c = la(u), a = ca(u);
      e.syntax.walk(t, (l, p, m) => {
        if (l === c) {
          const f = new D();
          do {
            if (f.appendData(p.data), p.data === a) {
              break;
            }
            p = p.next;
          } while (p !== null);
          s.push({ parent: m, nodes: f });
        }
      });
    }
    Array.isArray(u.match) && u.match.forEach(i2);
  }
  const s = [];
  return r.matched !== null && i2(r.matched), s;
}
var { hasOwnProperty: ht } = Object.prototype;
function Hr(e) {
  return typeof e == "number" && isFinite(e) && Math.floor(e) === e && e >= 0;
}
function ua(e) {
  return Boolean(e) && Hr(e.offset) && Hr(e.line) && Hr(e.column);
}
function uc(e, t) {
  return (n, o) => {
    if (!n || n.constructor !== Object) {
      return o(n, "Type of node should be an Object");
    }
    for (let i2 in n) {
      let s = true;
      if (ht.call(n, i2) !== false) {
        if (i2 === "type") {
          n.type !== e && o(n, "Wrong node type `" + n.type + "`, expected `" + e + "`");
        } else if (i2 === "loc") {
          if (n.loc === null) {
            continue;
          }
          if (n.loc && n.loc.constructor === Object) {
            if (typeof n.loc.source != "string") {
              i2 += ".source";
            } else if (!ua(n.loc.start)) {
              i2 += ".start";
            } else if (!ua(n.loc.end)) {
              i2 += ".end";
            } else {
              continue;
            }
          }
          s = false;
        } else if (t.hasOwnProperty(i2)) {
          s = false;
          for (let u = 0; !s && u < t[i2].length; u++) {
            const c = t[i2][u];
            switch (c) {
              case String:
                s = typeof n[i2] == "string";
                break;
              case Boolean:
                s = typeof n[i2] == "boolean";
                break;
              case null:
                s = n[i2] === null;
                break;
              default:
                typeof c == "string" ? s = n[i2] && n[i2].type === c : Array.isArray(c) && (s = n[i2] instanceof D);
            }
          }
        } else {
          o(n, "Unknown field `" + i2 + "` for " + e + " node type");
        }
        s || o(n, "Bad value for `" + e + "." + i2 + "`");
      }
    }
    for (const i2 in t) {
      ht.call(t, i2) && ht.call(n, i2) === false && o(n, "Field `" + e + "." + i2 + "` is missed");
    }
  };
}
function pc(e, t) {
  const r = t.structure, n = { type: String, loc: true }, o = { type: '"' + e + '"' };
  for (const i2 in r) {
    if (ht.call(r, i2) === false) {
      continue;
    }
    const s = [], u = n[i2] = Array.isArray(r[i2]) ? r[i2].slice() : [r[i2]];
    for (let c = 0; c < u.length; c++) {
      const a = u[c];
      if (a === String || a === Boolean) {
        s.push(a.name);
      } else if (a === null) {
        s.push("null");
      } else if (typeof a == "string") {
        s.push("<" + a + ">");
      } else if (Array.isArray(a)) {
        s.push("List");
      } else {
        throw new Error(
          "Wrong value `" + a + "` in `" + e + "." + i2 + "` structure definition"
        );
      }
    }
    o[i2] = s.join(" | ");
  }
  return { docs: o, check: uc(e, n) };
}
function pa(e) {
  const t = {};
  if (e.node) {
    for (const r in e.node) {
      if (ht.call(e.node, r)) {
        const n = e.node[r];
        if (n.structure) {
          t[r] = pc(r, n);
        } else {
          throw new Error("Missed `structure` field in `" + r + "` node type definition");
        }
      }
    }
  }
  return t;
}
var hc = Qt(Rt.join(" | "));
function Yr(e, t, r) {
  const n = {};
  for (const o in e) {
    e[o].syntax && (n[o] = r ? e[o].syntax : Pe(e[o].syntax, { compact: t }));
  }
  return n;
}
function mc(e, t, r) {
  const n = {};
  for (const [o, i2] of Object.entries(e)) {
    n[o] = {
      prelude: i2.prelude && (r ? i2.prelude.syntax : Pe(i2.prelude.syntax, { compact: t })),
      descriptors: i2.descriptors && Yr(i2.descriptors, t, r)
    };
  }
  return n;
}
function fc(e) {
  for (let t = 0; t < e.length; t++) {
    if (e[t].value.toLowerCase() === "var(") {
      return true;
    }
  }
  return false;
}
function ce(e, t, r) {
  return { matched: e, iterations: r, error: t, ...jr };
}
function Ve(e, t, r, n) {
  let o = Zi(r, e.syntax), i2;
  return fc(o) ? ce(null, new Error("Matching for a tree with var() is not supported")) : (n && (i2 = qr(o, e.cssWideKeywordsSyntax, e)), (!n || !i2.match) && (i2 = qr(o, t.match, e), !i2.match) ? ce(null, new Ii(i2.reason, t.syntax, r, i2), i2.iterations) : ce(i2.match, null, i2.iterations));
}
var Ke = class {
  constructor(t, r, n) {
    if (this.cssWideKeywordsSyntax = hc, this.syntax = r, this.generic = false, this.units = { ..._t }, this.atrules = /* @__PURE__ */ Object.create(null), this.properties = /* @__PURE__ */ Object.create(null), this.types = /* @__PURE__ */ Object.create(null), this.structure = n || pa(t), t) {
      if (t.units) {
        for (const o of Object.keys(_t)) {
          Array.isArray(t.units[o]) && (this.units[o] = t.units[o]);
        }
      }
      if (t.types) {
        for (const o in t.types) {
          this.addType_(o, t.types[o]);
        }
      }
      if (t.generic) {
        this.generic = true;
        for (const [o, i2] of Object.entries(Fi(this.units))) {
          this.addType_(o, i2);
        }
      }
      if (t.atrules) {
        for (const o in t.atrules) {
          this.addAtrule_(o, t.atrules[o]);
        }
      }
      if (t.properties) {
        for (const o in t.properties) {
          this.addProperty_(o, t.properties[o]);
        }
      }
    }
  }
  checkStructure(t) {
    function r(i2, s) {
      o.push({ node: i2, message: s });
    }
    const n = this.structure, o = [];
    return this.syntax.walk(t, (i2) => {
      n.hasOwnProperty(i2.type) ? n[i2.type].check(i2, r) : r(i2, "Unknown node type `" + i2.type + "`");
    }), o.length ? o : false;
  }
  createDescriptor(t, r, n, o = null) {
    const i2 = { type: r, name: n }, s = {
      type: r,
      name: n,
      parent: o,
      serializable: typeof t == "string" || t && typeof t.type == "string",
      syntax: null,
      match: null
    };
    return typeof t == "function" ? s.match = Qt(t, i2) : (typeof t == "string" ? Object.defineProperty(s, "syntax", {
      get() {
        return Object.defineProperty(s, "syntax", {
          value: Ge(t)
        }), s.syntax;
      }
    }) : s.syntax = t, Object.defineProperty(s, "match", {
      get() {
        return Object.defineProperty(s, "match", {
          value: Qt(s.syntax, i2)
        }), s.match;
      }
    })), s;
  }
  addAtrule_(t, r) {
    !r || (this.atrules[t] = {
      type: "Atrule",
      name: t,
      prelude: r.prelude ? this.createDescriptor(r.prelude, "AtrulePrelude", t) : null,
      descriptors: r.descriptors ? Object.keys(r.descriptors).reduce(
        (n, o) => (n[o] = this.createDescriptor(
          r.descriptors[o],
          "AtruleDescriptor",
          o,
          t
        ), n),
        /* @__PURE__ */ Object.create(null)
      ) : null
    });
  }
  addProperty_(t, r) {
    !r || (this.properties[t] = this.createDescriptor(r, "Property", t));
  }
  addType_(t, r) {
    !r || (this.types[t] = this.createDescriptor(r, "Type", t));
  }
  checkAtruleName(t) {
    if (!this.getAtrule(t)) {
      return new Ue("Unknown at-rule", "@" + t);
    }
  }
  checkAtrulePrelude(t, r) {
    const n = this.checkAtruleName(t);
    if (n) {
      return n;
    }
    const o = this.getAtrule(t);
    if (!o.prelude && r) {
      return new SyntaxError("At-rule `@" + t + "` should not contain a prelude");
    }
    if (o.prelude && !r && !Ve(this, o.prelude, "", false).matched) {
      return new SyntaxError("At-rule `@" + t + "` should contain a prelude");
    }
  }
  checkAtruleDescriptorName(t, r) {
    const n = this.checkAtruleName(t);
    if (n) {
      return n;
    }
    const o = this.getAtrule(t), i2 = zt(r);
    if (!o.descriptors) {
      return new SyntaxError("At-rule `@" + t + "` has no known descriptors");
    }
    if (!o.descriptors[i2.name] && !o.descriptors[i2.basename]) {
      return new Ue("Unknown at-rule descriptor", r);
    }
  }
  checkPropertyName(t) {
    if (!this.getProperty(t)) {
      return new Ue("Unknown property", t);
    }
  }
  matchAtrulePrelude(t, r) {
    const n = this.checkAtrulePrelude(t, r);
    if (n) {
      return ce(null, n);
    }
    const o = this.getAtrule(t);
    return o.prelude ? Ve(this, o.prelude, r || "", false) : ce(null, null);
  }
  matchAtruleDescriptor(t, r, n) {
    const o = this.checkAtruleDescriptorName(t, r);
    if (o) {
      return ce(null, o);
    }
    const i2 = this.getAtrule(t), s = zt(r);
    return Ve(this, i2.descriptors[s.name] || i2.descriptors[s.basename], n, false);
  }
  matchDeclaration(t) {
    return t.type !== "Declaration" ? ce(null, new Error("Not a Declaration node")) : this.matchProperty(t.property, t.value);
  }
  matchProperty(t, r) {
    if (kr(t).custom) {
      return ce(null, new Error("Lexer matching doesn't applicable for custom properties"));
    }
    const n = this.checkPropertyName(t);
    return n ? ce(null, n) : Ve(this, this.getProperty(t), r, true);
  }
  matchType(t, r) {
    const n = this.getType(t);
    return n ? Ve(this, n, r, false) : ce(null, new Ue("Unknown type", t));
  }
  match(t, r) {
    return typeof t != "string" && (!t || !t.type) ? ce(null, new Ue("Bad syntax")) : ((typeof t == "string" || !t.match) && (t = this.createDescriptor(t, "Type", "anonymous")), Ve(this, t, r, false));
  }
  findValueFragments(t, r, n, o) {
    return Wr(this, r, this.matchProperty(t, r), n, o);
  }
  findDeclarationValueFragments(t, r, n) {
    return Wr(this, t.value, this.matchDeclaration(t), r, n);
  }
  findAllFragments(t, r, n) {
    const o = [];
    return this.syntax.walk(t, {
      visit: "Declaration",
      enter: (i2) => {
        o.push.apply(o, this.findDeclarationValueFragments(i2, r, n));
      }
    }), o;
  }
  getAtrule(t, r = true) {
    const n = zt(t);
    return (n.vendor && r ? this.atrules[n.name] || this.atrules[n.basename] : this.atrules[n.name]) || null;
  }
  getAtrulePrelude(t, r = true) {
    const n = this.getAtrule(t, r);
    return n && n.prelude || null;
  }
  getAtruleDescriptor(t, r) {
    return this.atrules.hasOwnProperty(t) && this.atrules.declarators && this.atrules[t].declarators[r] || null;
  }
  getProperty(t, r = true) {
    const n = kr(t);
    return (n.vendor && r ? this.properties[n.name] || this.properties[n.basename] : this.properties[n.name]) || null;
  }
  getType(t) {
    return hasOwnProperty.call(this.types, t) ? this.types[t] : null;
  }
  validate() {
    function t(o, i2, s, u) {
      if (s.has(i2)) {
        return s.get(i2);
      }
      s.set(i2, false), u.syntax !== null && Vt(
        u.syntax,
        (c) => {
          if (c.type !== "Type" && c.type !== "Property") {
            return;
          }
          const a = c.type === "Type" ? o.types : o.properties, l = c.type === "Type" ? r : n;
          (!hasOwnProperty.call(a, c.name) || t(o, c.name, l, a[c.name])) && s.set(i2, true);
        },
        this
      );
    }
    let r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map();
    for (const o in this.types) {
      t(this, o, r, this.types[o]);
    }
    for (const o in this.properties) {
      t(this, o, n, this.properties[o]);
    }
    return r = [...r.keys()].filter((o) => r.get(o)), n = [...n.keys()].filter((o) => n.get(o)), r.length || n.length ? { types: r, properties: n } : null;
  }
  dump(t, r) {
    return {
      generic: this.generic,
      units: this.units,
      types: Yr(this.types, !r, t),
      properties: Yr(this.properties, !r, t),
      atrules: mc(this.atrules, !r, t)
    };
  }
  toString() {
    return JSON.stringify(this.dump());
  }
};
function Gr(e, t) {
  return typeof t == "string" && /^\s*\|/.test(t) ? typeof e == "string" ? e + t : t.replace(/^\s*\|\s*/, "") : t || null;
}
function ha(e, t) {
  const r = /* @__PURE__ */ Object.create(null);
  for (const [n, o] of Object.entries(e)) {
    if (o) {
      r[n] = {};
      for (const i2 of Object.keys(o)) {
        t.includes(i2) && (r[n][i2] = o[i2]);
      }
    }
  }
  return r;
}
function mt(e, t) {
  const r = { ...e };
  for (const [n, o] of Object.entries(t)) {
    switch (n) {
      case "generic":
        r[n] = Boolean(o);
        break;
      case "units":
        r[n] = { ...e[n] };
        for (const [i2, s] of Object.entries(o)) {
          r[n][i2] = Array.isArray(s) ? s : [];
        }
        break;
      case "atrules":
        r[n] = { ...e[n] };
        for (const [i2, s] of Object.entries(o)) {
          const u = r[n][i2] || {}, c = r[n][i2] = {
            prelude: u.prelude || null,
            descriptors: { ...u.descriptors }
          };
          if (s) {
            c.prelude = s.prelude ? Gr(c.prelude, s.prelude) : c.prelude || null;
            for (const [a, l] of Object.entries(s.descriptors || {})) {
              c.descriptors[a] = l ? Gr(c.descriptors[a], l) : null;
            }
            Object.keys(c.descriptors).length || (c.descriptors = null);
          }
        }
        break;
      case "types":
      case "properties":
        r[n] = { ...e[n] };
        for (const [i2, s] of Object.entries(o)) {
          r[n][i2] = Gr(r[n][i2], s);
        }
        break;
      case "scope":
        r[n] = { ...e[n] };
        for (const [i2, s] of Object.entries(o)) {
          r[n][i2] = { ...r[n][i2], ...s };
        }
        break;
      case "parseContext":
        r[n] = { ...e[n], ...o };
        break;
      case "atrule":
      case "pseudo":
        r[n] = { ...e[n], ...ha(o, ["parse"]) };
        break;
      case "node":
        r[n] = {
          ...e[n],
          ...ha(o, ["name", "structure", "parse", "generate", "walkContext"])
        };
        break;
    }
  }
  return r;
}
function ma(e) {
  const t = $o(e), r = Li(e), n = vi(e), { fromPlainObject: o, toPlainObject: i2 } = Si(r), s = {
    lexer: null,
    createLexer: (u) => new Ke(u, s, s.lexer.structure),
    tokenize: ve,
    parse: t,
    generate: n,
    walk: r,
    find: r.find,
    findLast: r.findLast,
    findAll: r.findAll,
    fromPlainObject: o,
    toPlainObject: i2,
    fork(u) {
      const c = mt({}, e);
      return ma(typeof u == "function" ? u(c, Object.assign) : mt(c, u));
    }
  };
  return s.lexer = new Ke(
    {
      generic: true,
      units: e.units,
      types: e.types,
      atrules: e.atrules,
      properties: e.properties,
      node: e.node
    },
    s
  ), s;
}
var Vr = (e) => ma(mt({}, e));
var fa = {
  generic: true,
  units: {
    angle: ["deg", "grad", "rad", "turn"],
    decibel: ["db"],
    flex: ["fr"],
    frequency: ["hz", "khz"],
    length: [
      "cm",
      "mm",
      "q",
      "in",
      "pt",
      "pc",
      "px",
      "em",
      "rem",
      "ex",
      "rex",
      "cap",
      "rcap",
      "ch",
      "rch",
      "ic",
      "ric",
      "lh",
      "rlh",
      "vw",
      "svw",
      "lvw",
      "dvw",
      "vh",
      "svh",
      "lvh",
      "dvh",
      "vi",
      "svi",
      "lvi",
      "dvi",
      "vb",
      "svb",
      "lvb",
      "dvb",
      "vmin",
      "svmin",
      "lvmin",
      "dvmin",
      "vmax",
      "svmax",
      "lvmax",
      "dvmax",
      "cqw",
      "cqh",
      "cqi",
      "cqb",
      "cqmin",
      "cqmax"
    ],
    resolution: ["dpi", "dpcm", "dppx", "x"],
    semitones: ["st"],
    time: ["s", "ms"]
  },
  types: {
    "abs()": "abs( <calc-sum> )",
    "absolute-size": "xx-small|x-small|small|medium|large|x-large|xx-large|xxx-large",
    "acos()": "acos( <calc-sum> )",
    "alpha-value": "<number>|<percentage>",
    "angle-percentage": "<angle>|<percentage>",
    "angular-color-hint": "<angle-percentage>",
    "angular-color-stop": "<color>&&<color-stop-angle>?",
    "angular-color-stop-list": "[<angular-color-stop> [, <angular-color-hint>]?]# , <angular-color-stop>",
    "animateable-feature": "scroll-position|contents|<custom-ident>",
    "asin()": "asin( <calc-sum> )",
    "atan()": "atan( <calc-sum> )",
    "atan2()": "atan2( <calc-sum> , <calc-sum> )",
    attachment: "scroll|fixed|local",
    "attr()": "attr( <attr-name> <type-or-unit>? [, <attr-fallback>]? )",
    "attr-matcher": "['~'|'|'|'^'|'$'|'*']? '='",
    "attr-modifier": "i|s",
    "attribute-selector": "'[' <wq-name> ']'|'[' <wq-name> <attr-matcher> [<string-token>|<ident-token>] <attr-modifier>? ']'",
    "auto-repeat": "repeat( [auto-fill|auto-fit] , [<line-names>? <fixed-size>]+ <line-names>? )",
    "auto-track-list": "[<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>? <auto-repeat> [<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>?",
    axis: "block|inline|vertical|horizontal",
    "baseline-position": "[first|last]? baseline",
    "basic-shape": "<inset()>|<circle()>|<ellipse()>|<polygon()>|<path()>",
    "bg-image": "none|<image>",
    "bg-layer": "<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
    "bg-position": "[[left|center|right|top|bottom|<length-percentage>]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]|[center|[left|right] <length-percentage>?]&&[center|[top|bottom] <length-percentage>?]]",
    "bg-size": "[<length-percentage>|auto]{1,2}|cover|contain",
    "blur()": "blur( <length> )",
    "blend-mode": "normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|hard-light|soft-light|difference|exclusion|hue|saturation|color|luminosity",
    box: "border-box|padding-box|content-box",
    "brightness()": "brightness( <number-percentage> )",
    "calc()": "calc( <calc-sum> )",
    "calc-sum": "<calc-product> [['+'|'-'] <calc-product>]*",
    "calc-product": "<calc-value> ['*' <calc-value>|'/' <number>]*",
    "calc-value": "<number>|<dimension>|<percentage>|<calc-constant>|( <calc-sum> )",
    "calc-constant": "e|pi|infinity|-infinity|NaN",
    "cf-final-image": "<image>|<color>",
    "cf-mixing-image": "<percentage>?&&<image>",
    "circle()": "circle( [<shape-radius>]? [at <position>]? )",
    "clamp()": "clamp( <calc-sum>#{3} )",
    "class-selector": "'.' <ident-token>",
    "clip-source": "<url>",
    color: "<rgb()>|<rgba()>|<hsl()>|<hsla()>|<hwb()>|<lab()>|<lch()>|<hex-color>|<named-color>|currentcolor|<deprecated-system-color>",
    "color-stop": "<color-stop-length>|<color-stop-angle>",
    "color-stop-angle": "<angle-percentage>{1,2}",
    "color-stop-length": "<length-percentage>{1,2}",
    "color-stop-list": "[<linear-color-stop> [, <linear-color-hint>]?]# , <linear-color-stop>",
    combinator: "'>'|'+'|'~'|['||']",
    "common-lig-values": "[common-ligatures|no-common-ligatures]",
    "compat-auto": "searchfield|textarea|push-button|slider-horizontal|checkbox|radio|square-button|menulist|listbox|meter|progress-bar|button",
    "composite-style": "clear|copy|source-over|source-in|source-out|source-atop|destination-over|destination-in|destination-out|destination-atop|xor",
    "compositing-operator": "add|subtract|intersect|exclude",
    "compound-selector": "[<type-selector>? <subclass-selector>* [<pseudo-element-selector> <pseudo-class-selector>*]*]!",
    "compound-selector-list": "<compound-selector>#",
    "complex-selector": "<compound-selector> [<combinator>? <compound-selector>]*",
    "complex-selector-list": "<complex-selector>#",
    "conic-gradient()": "conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )",
    "contextual-alt-values": "[contextual|no-contextual]",
    "content-distribution": "space-between|space-around|space-evenly|stretch",
    "content-list": "[<string>|contents|<image>|<counter>|<quote>|<target>|<leader()>|<attr()>]+",
    "content-position": "center|start|end|flex-start|flex-end",
    "content-replacement": "<image>",
    "contrast()": "contrast( [<number-percentage>] )",
    "cos()": "cos( <calc-sum> )",
    counter: "<counter()>|<counters()>",
    "counter()": "counter( <counter-name> , <counter-style>? )",
    "counter-name": "<custom-ident>",
    "counter-style": "<counter-style-name>|symbols( )",
    "counter-style-name": "<custom-ident>",
    "counters()": "counters( <counter-name> , <string> , <counter-style>? )",
    "cross-fade()": "cross-fade( <cf-mixing-image> , <cf-final-image>? )",
    "cubic-bezier-timing-function": "ease|ease-in|ease-out|ease-in-out|cubic-bezier( <number [0,1]> , <number> , <number [0,1]> , <number> )",
    "deprecated-system-color": "ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText",
    "discretionary-lig-values": "[discretionary-ligatures|no-discretionary-ligatures]",
    "display-box": "contents|none",
    "display-inside": "flow|flow-root|table|flex|grid|ruby",
    "display-internal": "table-row-group|table-header-group|table-footer-group|table-row|table-cell|table-column-group|table-column|table-caption|ruby-base|ruby-text|ruby-base-container|ruby-text-container",
    "display-legacy": "inline-block|inline-list-item|inline-table|inline-flex|inline-grid",
    "display-listitem": "<display-outside>?&&[flow|flow-root]?&&list-item",
    "display-outside": "block|inline|run-in",
    "drop-shadow()": "drop-shadow( <length>{2,3} <color>? )",
    "east-asian-variant-values": "[jis78|jis83|jis90|jis04|simplified|traditional]",
    "east-asian-width-values": "[full-width|proportional-width]",
    "element()": "element( <custom-ident> , [first|start|last|first-except]? )|element( <id-selector> )",
    "ellipse()": "ellipse( [<shape-radius>{2}]? [at <position>]? )",
    "ending-shape": "circle|ellipse",
    "env()": "env( <custom-ident> , <declaration-value>? )",
    "exp()": "exp( <calc-sum> )",
    "explicit-track-list": "[<line-names>? <track-size>]+ <line-names>?",
    "family-name": "<string>|<custom-ident>+",
    "feature-tag-value": "<string> [<integer>|on|off]?",
    "feature-type": "@stylistic|@historical-forms|@styleset|@character-variant|@swash|@ornaments|@annotation",
    "feature-value-block": "<feature-type> '{' <feature-value-declaration-list> '}'",
    "feature-value-block-list": "<feature-value-block>+",
    "feature-value-declaration": "<custom-ident> : <integer>+ ;",
    "feature-value-declaration-list": "<feature-value-declaration>",
    "feature-value-name": "<custom-ident>",
    "fill-rule": "nonzero|evenodd",
    "filter-function": "<blur()>|<brightness()>|<contrast()>|<drop-shadow()>|<grayscale()>|<hue-rotate()>|<invert()>|<opacity()>|<saturate()>|<sepia()>",
    "filter-function-list": "[<filter-function>|<url>]+",
    "final-bg-layer": "<'background-color'>||<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
    "fixed-breadth": "<length-percentage>",
    "fixed-repeat": "repeat( [<integer [1,∞]>] , [<line-names>? <fixed-size>]+ <line-names>? )",
    "fixed-size": "<fixed-breadth>|minmax( <fixed-breadth> , <track-breadth> )|minmax( <inflexible-breadth> , <fixed-breadth> )",
    "font-stretch-absolute": "normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded|<percentage>",
    "font-variant-css21": "[normal|small-caps]",
    "font-weight-absolute": "normal|bold|<number [1,1000]>",
    "frequency-percentage": "<frequency>|<percentage>",
    "general-enclosed": "[<function-token> <any-value> )]|( <ident> <any-value> )",
    "generic-family": "serif|sans-serif|cursive|fantasy|monospace|-apple-system",
    "generic-name": "serif|sans-serif|cursive|fantasy|monospace",
    "geometry-box": "<shape-box>|fill-box|stroke-box|view-box",
    gradient: "<linear-gradient()>|<repeating-linear-gradient()>|<radial-gradient()>|<repeating-radial-gradient()>|<conic-gradient()>|<repeating-conic-gradient()>|<-legacy-gradient>",
    "grayscale()": "grayscale( <number-percentage> )",
    "grid-line": "auto|<custom-ident>|[<integer>&&<custom-ident>?]|[span&&[<integer>||<custom-ident>]]",
    "historical-lig-values": "[historical-ligatures|no-historical-ligatures]",
    "hsl()": "hsl( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsl( <hue> , <percentage> , <percentage> , <alpha-value>? )",
    "hsla()": "hsla( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsla( <hue> , <percentage> , <percentage> , <alpha-value>? )",
    hue: "<number>|<angle>",
    "hue-rotate()": "hue-rotate( <angle> )",
    "hwb()": "hwb( [<hue>|none] [<percentage>|none] [<percentage>|none] [/ [<alpha-value>|none]]? )",
    "hypot()": "hypot( <calc-sum># )",
    image: "<url>|<image()>|<image-set()>|<element()>|<paint()>|<cross-fade()>|<gradient>",
    "image()": "image( <image-tags>? [<image-src>? , <color>?]! )",
    "image-set()": "image-set( <image-set-option># )",
    "image-set-option": "[<image>|<string>] [<resolution>||type( <string> )]",
    "image-src": "<url>|<string>",
    "image-tags": "ltr|rtl",
    "inflexible-breadth": "<length-percentage>|min-content|max-content|auto",
    "inset()": "inset( <length-percentage>{1,4} [round <'border-radius'>]? )",
    "invert()": "invert( <number-percentage> )",
    "keyframes-name": "<custom-ident>|<string>",
    "keyframe-block": "<keyframe-selector># { <declaration-list> }",
    "keyframe-block-list": "<keyframe-block>+",
    "keyframe-selector": "from|to|<percentage>",
    "lab()": "lab( [<percentage>|<number>|none] [<percentage>|<number>|none] [<percentage>|<number>|none] [/ [<alpha-value>|none]]? )",
    "layer()": "layer( <layer-name> )",
    "layer-name": "<ident> ['.' <ident>]*",
    "lch()": "lch( [<percentage>|<number>|none] [<percentage>|<number>|none] [<hue>|none] [/ [<alpha-value>|none]]? )",
    "leader()": "leader( <leader-type> )",
    "leader-type": "dotted|solid|space|<string>",
    "length-percentage": "<length>|<percentage>",
    "line-names": "'[' <custom-ident>* ']'",
    "line-name-list": "[<line-names>|<name-repeat>]+",
    "line-style": "none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset",
    "line-width": "<length>|thin|medium|thick",
    "linear-color-hint": "<length-percentage>",
    "linear-color-stop": "<color> <color-stop-length>?",
    "linear-gradient()": "linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",
    "log()": "log( <calc-sum> , <calc-sum>? )",
    "mask-layer": "<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||<geometry-box>||[<geometry-box>|no-clip]||<compositing-operator>||<masking-mode>",
    "mask-position": "[<length-percentage>|left|center|right] [<length-percentage>|top|center|bottom]?",
    "mask-reference": "none|<image>|<mask-source>",
    "mask-source": "<url>",
    "masking-mode": "alpha|luminance|match-source",
    "matrix()": "matrix( <number>#{6} )",
    "matrix3d()": "matrix3d( <number>#{16} )",
    "max()": "max( <calc-sum># )",
    "media-and": "<media-in-parens> [and <media-in-parens>]+",
    "media-condition": "<media-not>|<media-and>|<media-or>|<media-in-parens>",
    "media-condition-without-or": "<media-not>|<media-and>|<media-in-parens>",
    "media-feature": "( [<mf-plain>|<mf-boolean>|<mf-range>] )",
    "media-in-parens": "( <media-condition> )|<media-feature>|<general-enclosed>",
    "media-not": "not <media-in-parens>",
    "media-or": "<media-in-parens> [or <media-in-parens>]+",
    "media-query": "<media-condition>|[not|only]? <media-type> [and <media-condition-without-or>]?",
    "media-query-list": "<media-query>#",
    "media-type": "<ident>",
    "mf-boolean": "<mf-name>",
    "mf-name": "<ident>",
    "mf-plain": "<mf-name> : <mf-value>",
    "mf-range": "<mf-name> ['<'|'>']? '='? <mf-value>|<mf-value> ['<'|'>']? '='? <mf-name>|<mf-value> '<' '='? <mf-name> '<' '='? <mf-value>|<mf-value> '>' '='? <mf-name> '>' '='? <mf-value>",
    "mf-value": "<number>|<dimension>|<ident>|<ratio>",
    "min()": "min( <calc-sum># )",
    "minmax()": "minmax( [<length-percentage>|min-content|max-content|auto] , [<length-percentage>|<flex>|min-content|max-content|auto] )",
    "mod()": "mod( <calc-sum> , <calc-sum> )",
    "name-repeat": "repeat( [<integer [1,∞]>|auto-fill] , <line-names>+ )",
    "named-color": "transparent|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|<-non-standard-color>",
    "namespace-prefix": "<ident>",
    "ns-prefix": "[<ident-token>|'*']? '|'",
    "number-percentage": "<number>|<percentage>",
    "numeric-figure-values": "[lining-nums|oldstyle-nums]",
    "numeric-fraction-values": "[diagonal-fractions|stacked-fractions]",
    "numeric-spacing-values": "[proportional-nums|tabular-nums]",
    nth: "<an-plus-b>|even|odd",
    "opacity()": "opacity( [<number-percentage>] )",
    "overflow-position": "unsafe|safe",
    "outline-radius": "<length>|<percentage>",
    "page-body": "<declaration>? [; <page-body>]?|<page-margin-box> <page-body>",
    "page-margin-box": "<page-margin-box-type> '{' <declaration-list> '}'",
    "page-margin-box-type": "@top-left-corner|@top-left|@top-center|@top-right|@top-right-corner|@bottom-left-corner|@bottom-left|@bottom-center|@bottom-right|@bottom-right-corner|@left-top|@left-middle|@left-bottom|@right-top|@right-middle|@right-bottom",
    "page-selector-list": "[<page-selector>#]?",
    "page-selector": "<pseudo-page>+|<ident> <pseudo-page>*",
    "page-size": "A5|A4|A3|B5|B4|JIS-B5|JIS-B4|letter|legal|ledger",
    "path()": "path( [<fill-rule> ,]? <string> )",
    "paint()": "paint( <ident> , <declaration-value>? )",
    "perspective()": "perspective( [<length [0,∞]>|none] )",
    "polygon()": "polygon( <fill-rule>? , [<length-percentage> <length-percentage>]# )",
    position: "[[left|center|right]||[top|center|bottom]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]?|[[left|right] <length-percentage>]&&[[top|bottom] <length-percentage>]]",
    "pow()": "pow( <calc-sum> , <calc-sum> )",
    "pseudo-class-selector": "':' <ident-token>|':' <function-token> <any-value> ')'",
    "pseudo-element-selector": "':' <pseudo-class-selector>",
    "pseudo-page": ": [left|right|first|blank]",
    quote: "open-quote|close-quote|no-open-quote|no-close-quote",
    "radial-gradient()": "radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",
    ratio: "<number [0,∞]> [/ <number [0,∞]>]?",
    "relative-selector": "<combinator>? <complex-selector>",
    "relative-selector-list": "<relative-selector>#",
    "relative-size": "larger|smaller",
    "rem()": "rem( <calc-sum> , <calc-sum> )",
    "repeat-style": "repeat-x|repeat-y|[repeat|space|round|no-repeat]{1,2}",
    "repeating-conic-gradient()": "repeating-conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )",
    "repeating-linear-gradient()": "repeating-linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",
    "repeating-radial-gradient()": "repeating-radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",
    "reversed-counter-name": "reversed( <counter-name> )",
    "rgb()": "rgb( <percentage>{3} [/ <alpha-value>]? )|rgb( <number>{3} [/ <alpha-value>]? )|rgb( <percentage>#{3} , <alpha-value>? )|rgb( <number>#{3} , <alpha-value>? )",
    "rgba()": "rgba( <percentage>{3} [/ <alpha-value>]? )|rgba( <number>{3} [/ <alpha-value>]? )|rgba( <percentage>#{3} , <alpha-value>? )|rgba( <number>#{3} , <alpha-value>? )",
    "rotate()": "rotate( [<angle>|<zero>] )",
    "rotate3d()": "rotate3d( <number> , <number> , <number> , [<angle>|<zero>] )",
    "rotateX()": "rotateX( [<angle>|<zero>] )",
    "rotateY()": "rotateY( [<angle>|<zero>] )",
    "rotateZ()": "rotateZ( [<angle>|<zero>] )",
    "round()": "round( <rounding-strategy>? , <calc-sum> , <calc-sum> )",
    "rounding-strategy": "nearest|up|down|to-zero",
    "saturate()": "saturate( <number-percentage> )",
    "scale()": "scale( [<number>|<percentage>]#{1,2} )",
    "scale3d()": "scale3d( [<number>|<percentage>]#{3} )",
    "scaleX()": "scaleX( [<number>|<percentage>] )",
    "scaleY()": "scaleY( [<number>|<percentage>] )",
    "scaleZ()": "scaleZ( [<number>|<percentage>] )",
    scroller: "root|nearest",
    "self-position": "center|start|end|self-start|self-end|flex-start|flex-end",
    "shape-radius": "<length-percentage>|closest-side|farthest-side",
    "sign()": "sign( <calc-sum> )",
    "skew()": "skew( [<angle>|<zero>] , [<angle>|<zero>]? )",
    "skewX()": "skewX( [<angle>|<zero>] )",
    "skewY()": "skewY( [<angle>|<zero>] )",
    "sepia()": "sepia( <number-percentage> )",
    shadow: "inset?&&<length>{2,4}&&<color>?",
    "shadow-t": "[<length>{2,3}&&<color>?]",
    shape: "rect( <top> , <right> , <bottom> , <left> )|rect( <top> <right> <bottom> <left> )",
    "shape-box": "<box>|margin-box",
    "side-or-corner": "[left|right]||[top|bottom]",
    "sin()": "sin( <calc-sum> )",
    "single-animation": "<time>||<easing-function>||<time>||<single-animation-iteration-count>||<single-animation-direction>||<single-animation-fill-mode>||<single-animation-play-state>||[none|<keyframes-name>]",
    "single-animation-direction": "normal|reverse|alternate|alternate-reverse",
    "single-animation-fill-mode": "none|forwards|backwards|both",
    "single-animation-iteration-count": "infinite|<number>",
    "single-animation-play-state": "running|paused",
    "single-animation-timeline": "auto|none|<timeline-name>|scroll( <axis>? <scroller>? )",
    "single-transition": "[none|<single-transition-property>]||<time>||<easing-function>||<time>",
    "single-transition-property": "all|<custom-ident>",
    size: "closest-side|farthest-side|closest-corner|farthest-corner|<length>|<length-percentage>{2}",
    "sqrt()": "sqrt( <calc-sum> )",
    "step-position": "jump-start|jump-end|jump-none|jump-both|start|end",
    "step-timing-function": "step-start|step-end|steps( <integer> [, <step-position>]? )",
    "subclass-selector": "<id-selector>|<class-selector>|<attribute-selector>|<pseudo-class-selector>",
    "supports-condition": "not <supports-in-parens>|<supports-in-parens> [and <supports-in-parens>]*|<supports-in-parens> [or <supports-in-parens>]*",
    "supports-in-parens": "( <supports-condition> )|<supports-feature>|<general-enclosed>",
    "supports-feature": "<supports-decl>|<supports-selector-fn>",
    "supports-decl": "( <declaration> )",
    "supports-selector-fn": "selector( <complex-selector> )",
    symbol: "<string>|<image>|<custom-ident>",
    "tan()": "tan( <calc-sum> )",
    target: "<target-counter()>|<target-counters()>|<target-text()>",
    "target-counter()": "target-counter( [<string>|<url>] , <custom-ident> , <counter-style>? )",
    "target-counters()": "target-counters( [<string>|<url>] , <custom-ident> , <string> , <counter-style>? )",
    "target-text()": "target-text( [<string>|<url>] , [content|before|after|first-letter]? )",
    "time-percentage": "<time>|<percentage>",
    "timeline-name": "<custom-ident>|<string>",
    "easing-function": "linear|<cubic-bezier-timing-function>|<step-timing-function>",
    "track-breadth": "<length-percentage>|<flex>|min-content|max-content|auto",
    "track-list": "[<line-names>? [<track-size>|<track-repeat>]]+ <line-names>?",
    "track-repeat": "repeat( [<integer [1,∞]>] , [<line-names>? <track-size>]+ <line-names>? )",
    "track-size": "<track-breadth>|minmax( <inflexible-breadth> , <track-breadth> )|fit-content( <length-percentage> )",
    "transform-function": "<matrix()>|<translate()>|<translateX()>|<translateY()>|<scale()>|<scaleX()>|<scaleY()>|<rotate()>|<skew()>|<skewX()>|<skewY()>|<matrix3d()>|<translate3d()>|<translateZ()>|<scale3d()>|<scaleZ()>|<rotate3d()>|<rotateX()>|<rotateY()>|<rotateZ()>|<perspective()>",
    "transform-list": "<transform-function>+",
    "translate()": "translate( <length-percentage> , <length-percentage>? )",
    "translate3d()": "translate3d( <length-percentage> , <length-percentage> , <length> )",
    "translateX()": "translateX( <length-percentage> )",
    "translateY()": "translateY( <length-percentage> )",
    "translateZ()": "translateZ( <length> )",
    "type-or-unit": "string|color|url|integer|number|length|angle|time|frequency|cap|ch|em|ex|ic|lh|rlh|rem|vb|vi|vw|vh|vmin|vmax|mm|Q|cm|in|pt|pc|px|deg|grad|rad|turn|ms|s|Hz|kHz|%",
    "type-selector": "<wq-name>|<ns-prefix>? '*'",
    "var()": "var( <custom-property-name> , <declaration-value>? )",
    "viewport-length": "auto|<length-percentage>",
    "visual-box": "content-box|padding-box|border-box",
    "wq-name": "<ns-prefix>? <ident-token>",
    "-legacy-gradient": "<-webkit-gradient()>|<-legacy-linear-gradient>|<-legacy-repeating-linear-gradient>|<-legacy-radial-gradient>|<-legacy-repeating-radial-gradient>",
    "-legacy-linear-gradient": "-moz-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-linear-gradient( <-legacy-linear-gradient-arguments> )",
    "-legacy-repeating-linear-gradient": "-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )",
    "-legacy-linear-gradient-arguments": "[<angle>|<side-or-corner>]? , <color-stop-list>",
    "-legacy-radial-gradient": "-moz-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-radial-gradient( <-legacy-radial-gradient-arguments> )",
    "-legacy-repeating-radial-gradient": "-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )",
    "-legacy-radial-gradient-arguments": "[<position> ,]? [[[<-legacy-radial-gradient-shape>||<-legacy-radial-gradient-size>]|[<length>|<percentage>]{2}] ,]? <color-stop-list>",
    "-legacy-radial-gradient-size": "closest-side|closest-corner|farthest-side|farthest-corner|contain|cover",
    "-legacy-radial-gradient-shape": "circle|ellipse",
    "-non-standard-font": "-apple-system-body|-apple-system-headline|-apple-system-subheadline|-apple-system-caption1|-apple-system-caption2|-apple-system-footnote|-apple-system-short-body|-apple-system-short-headline|-apple-system-short-subheadline|-apple-system-short-caption1|-apple-system-short-footnote|-apple-system-tall-body",
    "-non-standard-color": "-moz-ButtonDefault|-moz-ButtonHoverFace|-moz-ButtonHoverText|-moz-CellHighlight|-moz-CellHighlightText|-moz-Combobox|-moz-ComboboxText|-moz-Dialog|-moz-DialogText|-moz-dragtargetzone|-moz-EvenTreeRow|-moz-Field|-moz-FieldText|-moz-html-CellHighlight|-moz-html-CellHighlightText|-moz-mac-accentdarkestshadow|-moz-mac-accentdarkshadow|-moz-mac-accentface|-moz-mac-accentlightesthighlight|-moz-mac-accentlightshadow|-moz-mac-accentregularhighlight|-moz-mac-accentregularshadow|-moz-mac-chrome-active|-moz-mac-chrome-inactive|-moz-mac-focusring|-moz-mac-menuselect|-moz-mac-menushadow|-moz-mac-menutextselect|-moz-MenuHover|-moz-MenuHoverText|-moz-MenuBarText|-moz-MenuBarHoverText|-moz-nativehyperlinktext|-moz-OddTreeRow|-moz-win-communicationstext|-moz-win-mediatext|-moz-activehyperlinktext|-moz-default-background-color|-moz-default-color|-moz-hyperlinktext|-moz-visitedhyperlinktext|-webkit-activelink|-webkit-focus-ring-color|-webkit-link|-webkit-text",
    "-non-standard-image-rendering": "optimize-contrast|-moz-crisp-edges|-o-crisp-edges|-webkit-optimize-contrast",
    "-non-standard-overflow": "-moz-scrollbars-none|-moz-scrollbars-horizontal|-moz-scrollbars-vertical|-moz-hidden-unscrollable",
    "-non-standard-width": "fill-available|min-intrinsic|intrinsic|-moz-available|-moz-fit-content|-moz-min-content|-moz-max-content|-webkit-min-content|-webkit-max-content",
    "-webkit-gradient()": "-webkit-gradient( <-webkit-gradient-type> , <-webkit-gradient-point> [, <-webkit-gradient-point>|, <-webkit-gradient-radius> , <-webkit-gradient-point>] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )",
    "-webkit-gradient-color-stop": "from( <color> )|color-stop( [<number-zero-one>|<percentage>] , <color> )|to( <color> )",
    "-webkit-gradient-point": "[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]",
    "-webkit-gradient-radius": "<length>|<percentage>",
    "-webkit-gradient-type": "linear|radial",
    "-webkit-mask-box-repeat": "repeat|stretch|round",
    "-webkit-mask-clip-style": "border|border-box|padding|padding-box|content|content-box|text",
    "-ms-filter-function-list": "<-ms-filter-function>+",
    "-ms-filter-function": "<-ms-filter-function-progid>|<-ms-filter-function-legacy>",
    "-ms-filter-function-progid": "'progid:' [<ident-token> '.']* [<ident-token>|<function-token> <any-value>? )]",
    "-ms-filter-function-legacy": "<ident-token>|<function-token> <any-value>? )",
    "-ms-filter": "<string>",
    age: "child|young|old",
    "attr-name": "<wq-name>",
    "attr-fallback": "<any-value>",
    "bg-clip": "<box>|border|text",
    bottom: "<length>|auto",
    "container-name": "<custom-ident>",
    "container-condition": "not <query-in-parens>|<query-in-parens> [[and <query-in-parens>]*|[or <query-in-parens>]*]",
    "generic-voice": "[<age>? <gender> <integer>?]",
    gender: "male|female|neutral",
    left: "<length>|auto",
    "mask-image": "<mask-reference>#",
    paint: "none|<color>|<url> [none|<color>]?|context-fill|context-stroke",
    right: "<length>|auto",
    "scroll-timeline-axis": "block|inline|vertical|horizontal",
    "scroll-timeline-name": "none|<custom-ident>",
    "single-animation-composition": "replace|add|accumulate",
    "svg-length": "<percentage>|<length>|<number>",
    "svg-writing-mode": "lr-tb|rl-tb|tb-rl|lr|rl|tb",
    top: "<length>|auto",
    x: "<number>",
    y: "<number>",
    declaration: "<ident-token> : <declaration-value>? ['!' important]?",
    "declaration-list": "[<declaration>? ';']* <declaration>?",
    url: "url( <string> <url-modifier>* )|<url-token>",
    "url-modifier": "<ident>|<function-token> <any-value> )",
    "number-zero-one": "<number [0,1]>",
    "number-one-or-greater": "<number [1,∞]>",
    "query-in-parens": "( <container-condition> )|( <size-feature> )|style( <style-query> )|<general-enclosed>",
    "size-feature": "<mf-plain>|<mf-boolean>|<mf-range>",
    "style-feature": "<declaration>",
    "style-query": "<style-condition>|<style-feature>",
    "style-condition": "not <style-in-parens>|<style-in-parens> [[and <style-in-parens>]*|[or <style-in-parens>]*]",
    "style-in-parens": "( <style-condition> )|( <style-feature> )|<general-enclosed>",
    "-non-standard-display": "-ms-inline-flexbox|-ms-grid|-ms-inline-grid|-webkit-flex|-webkit-inline-flex|-webkit-box|-webkit-inline-box|-moz-inline-stack|-moz-box|-moz-inline-box"
  },
  properties: {
    "--*": "<declaration-value>",
    "-ms-accelerator": "false|true",
    "-ms-block-progression": "tb|rl|bt|lr",
    "-ms-content-zoom-chaining": "none|chained",
    "-ms-content-zooming": "none|zoom",
    "-ms-content-zoom-limit": "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
    "-ms-content-zoom-limit-max": "<percentage>",
    "-ms-content-zoom-limit-min": "<percentage>",
    "-ms-content-zoom-snap": "<'-ms-content-zoom-snap-type'>||<'-ms-content-zoom-snap-points'>",
    "-ms-content-zoom-snap-points": "snapInterval( <percentage> , <percentage> )|snapList( <percentage># )",
    "-ms-content-zoom-snap-type": "none|proximity|mandatory",
    "-ms-filter": "<string>",
    "-ms-flow-from": "[none|<custom-ident>]#",
    "-ms-flow-into": "[none|<custom-ident>]#",
    "-ms-grid-columns": "none|<track-list>|<auto-track-list>",
    "-ms-grid-rows": "none|<track-list>|<auto-track-list>",
    "-ms-high-contrast-adjust": "auto|none",
    "-ms-hyphenate-limit-chars": "auto|<integer>{1,3}",
    "-ms-hyphenate-limit-lines": "no-limit|<integer>",
    "-ms-hyphenate-limit-zone": "<percentage>|<length>",
    "-ms-ime-align": "auto|after",
    "-ms-overflow-style": "auto|none|scrollbar|-ms-autohiding-scrollbar",
    "-ms-scrollbar-3dlight-color": "<color>",
    "-ms-scrollbar-arrow-color": "<color>",
    "-ms-scrollbar-base-color": "<color>",
    "-ms-scrollbar-darkshadow-color": "<color>",
    "-ms-scrollbar-face-color": "<color>",
    "-ms-scrollbar-highlight-color": "<color>",
    "-ms-scrollbar-shadow-color": "<color>",
    "-ms-scrollbar-track-color": "<color>",
    "-ms-scroll-chaining": "chained|none",
    "-ms-scroll-limit": "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
    "-ms-scroll-limit-x-max": "auto|<length>",
    "-ms-scroll-limit-x-min": "<length>",
    "-ms-scroll-limit-y-max": "auto|<length>",
    "-ms-scroll-limit-y-min": "<length>",
    "-ms-scroll-rails": "none|railed",
    "-ms-scroll-snap-points-x": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",
    "-ms-scroll-snap-points-y": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",
    "-ms-scroll-snap-type": "none|proximity|mandatory",
    "-ms-scroll-snap-x": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
    "-ms-scroll-snap-y": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
    "-ms-scroll-translation": "none|vertical-to-horizontal",
    "-ms-text-autospace": "none|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space",
    "-ms-touch-select": "grippers|none",
    "-ms-user-select": "none|element|text",
    "-ms-wrap-flow": "auto|both|start|end|maximum|clear",
    "-ms-wrap-margin": "<length>",
    "-ms-wrap-through": "wrap|none",
    "-moz-appearance": "none|button|button-arrow-down|button-arrow-next|button-arrow-previous|button-arrow-up|button-bevel|button-focus|caret|checkbox|checkbox-container|checkbox-label|checkmenuitem|dualbutton|groupbox|listbox|listitem|menuarrow|menubar|menucheckbox|menuimage|menuitem|menuitemtext|menulist|menulist-button|menulist-text|menulist-textfield|menupopup|menuradio|menuseparator|meterbar|meterchunk|progressbar|progressbar-vertical|progresschunk|progresschunk-vertical|radio|radio-container|radio-label|radiomenuitem|range|range-thumb|resizer|resizerpanel|scale-horizontal|scalethumbend|scalethumb-horizontal|scalethumbstart|scalethumbtick|scalethumb-vertical|scale-vertical|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|separator|sheet|spinner|spinner-downbutton|spinner-textfield|spinner-upbutton|splitter|statusbar|statusbarpanel|tab|tabpanel|tabpanels|tab-scroll-arrow-back|tab-scroll-arrow-forward|textfield|textfield-multiline|toolbar|toolbarbutton|toolbarbutton-dropdown|toolbargripper|toolbox|tooltip|treeheader|treeheadercell|treeheadersortarrow|treeitem|treeline|treetwisty|treetwistyopen|treeview|-moz-mac-unified-toolbar|-moz-win-borderless-glass|-moz-win-browsertabbar-toolbox|-moz-win-communicationstext|-moz-win-communications-toolbox|-moz-win-exclude-glass|-moz-win-glass|-moz-win-mediatext|-moz-win-media-toolbox|-moz-window-button-box|-moz-window-button-box-maximized|-moz-window-button-close|-moz-window-button-maximize|-moz-window-button-minimize|-moz-window-button-restore|-moz-window-frame-bottom|-moz-window-frame-left|-moz-window-frame-right|-moz-window-titlebar|-moz-window-titlebar-maximized",
    "-moz-binding": "<url>|none",
    "-moz-border-bottom-colors": "<color>+|none",
    "-moz-border-left-colors": "<color>+|none",
    "-moz-border-right-colors": "<color>+|none",
    "-moz-border-top-colors": "<color>+|none",
    "-moz-context-properties": "none|[fill|fill-opacity|stroke|stroke-opacity]#",
    "-moz-float-edge": "border-box|content-box|margin-box|padding-box",
    "-moz-force-broken-image-icon": "0|1",
    "-moz-image-region": "<shape>|auto",
    "-moz-orient": "inline|block|horizontal|vertical",
    "-moz-outline-radius": "<outline-radius>{1,4} [/ <outline-radius>{1,4}]?",
    "-moz-outline-radius-bottomleft": "<outline-radius>",
    "-moz-outline-radius-bottomright": "<outline-radius>",
    "-moz-outline-radius-topleft": "<outline-radius>",
    "-moz-outline-radius-topright": "<outline-radius>",
    "-moz-stack-sizing": "ignore|stretch-to-fit",
    "-moz-text-blink": "none|blink",
    "-moz-user-focus": "ignore|normal|select-after|select-before|select-menu|select-same|select-all|none",
    "-moz-user-input": "auto|none|enabled|disabled",
    "-moz-user-modify": "read-only|read-write|write-only",
    "-moz-window-dragging": "drag|no-drag",
    "-moz-window-shadow": "default|menu|tooltip|sheet|none",
    "-webkit-appearance": "none|button|button-bevel|caps-lock-indicator|caret|checkbox|default-button|inner-spin-button|listbox|listitem|media-controls-background|media-controls-fullscreen-background|media-current-time-display|media-enter-fullscreen-button|media-exit-fullscreen-button|media-fullscreen-button|media-mute-button|media-overlay-play-button|media-play-button|media-seek-back-button|media-seek-forward-button|media-slider|media-sliderthumb|media-time-remaining-display|media-toggle-closed-captions-button|media-volume-slider|media-volume-slider-container|media-volume-sliderthumb|menulist|menulist-button|menulist-text|menulist-textfield|meter|progress-bar|progress-bar-value|push-button|radio|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbargripper-horizontal|scrollbargripper-vertical|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|searchfield-cancel-button|searchfield-decoration|searchfield-results-button|searchfield-results-decoration|slider-horizontal|slider-vertical|sliderthumb-horizontal|sliderthumb-vertical|square-button|textarea|textfield|-apple-pay-button",
    "-webkit-border-before": "<'border-width'>||<'border-style'>||<color>",
    "-webkit-border-before-color": "<color>",
    "-webkit-border-before-style": "<'border-style'>",
    "-webkit-border-before-width": "<'border-width'>",
    "-webkit-box-reflect": "[above|below|right|left]? <length>? <image>?",
    "-webkit-line-clamp": "none|<integer>",
    "-webkit-mask": "[<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||[<box>|border|padding|content|text]||[<box>|border|padding|content]]#",
    "-webkit-mask-attachment": "<attachment>#",
    "-webkit-mask-clip": "[<box>|border|padding|content|text]#",
    "-webkit-mask-composite": "<composite-style>#",
    "-webkit-mask-image": "<mask-reference>#",
    "-webkit-mask-origin": "[<box>|border|padding|content]#",
    "-webkit-mask-position": "<position>#",
    "-webkit-mask-position-x": "[<length-percentage>|left|center|right]#",
    "-webkit-mask-position-y": "[<length-percentage>|top|center|bottom]#",
    "-webkit-mask-repeat": "<repeat-style>#",
    "-webkit-mask-repeat-x": "repeat|no-repeat|space|round",
    "-webkit-mask-repeat-y": "repeat|no-repeat|space|round",
    "-webkit-mask-size": "<bg-size>#",
    "-webkit-overflow-scrolling": "auto|touch",
    "-webkit-tap-highlight-color": "<color>",
    "-webkit-text-fill-color": "<color>",
    "-webkit-text-stroke": "<length>||<color>",
    "-webkit-text-stroke-color": "<color>",
    "-webkit-text-stroke-width": "<length>",
    "-webkit-touch-callout": "default|none",
    "-webkit-user-modify": "read-only|read-write|read-write-plaintext-only",
    "accent-color": "auto|<color>",
    "align-content": "normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>",
    "align-items": "normal|stretch|<baseline-position>|[<overflow-position>? <self-position>]",
    "align-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? <self-position>",
    "align-tracks": "[normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>]#",
    all: "initial|inherit|unset|revert|revert-layer",
    animation: "<single-animation>#",
    "animation-composition": "<single-animation-composition>#",
    "animation-delay": "<time>#",
    "animation-direction": "<single-animation-direction>#",
    "animation-duration": "<time>#",
    "animation-fill-mode": "<single-animation-fill-mode>#",
    "animation-iteration-count": "<single-animation-iteration-count>#",
    "animation-name": "[none|<keyframes-name>]#",
    "animation-play-state": "<single-animation-play-state>#",
    "animation-timing-function": "<easing-function>#",
    "animation-timeline": "<single-animation-timeline>#",
    appearance: "none|auto|textfield|menulist-button|<compat-auto>",
    "aspect-ratio": "auto|<ratio>",
    azimuth: "<angle>|[[left-side|far-left|left|center-left|center|center-right|right|far-right|right-side]||behind]|leftwards|rightwards",
    "backdrop-filter": "none|<filter-function-list>",
    "backface-visibility": "visible|hidden",
    background: "[<bg-layer> ,]* <final-bg-layer>",
    "background-attachment": "<attachment>#",
    "background-blend-mode": "<blend-mode>#",
    "background-clip": "<bg-clip>#",
    "background-color": "<color>",
    "background-image": "<bg-image>#",
    "background-origin": "<box>#",
    "background-position": "<bg-position>#",
    "background-position-x": "[center|[[left|right|x-start|x-end]? <length-percentage>?]!]#",
    "background-position-y": "[center|[[top|bottom|y-start|y-end]? <length-percentage>?]!]#",
    "background-repeat": "<repeat-style>#",
    "background-size": "<bg-size>#",
    "block-overflow": "clip|ellipsis|<string>",
    "block-size": "<'width'>",
    border: "<line-width>||<line-style>||<color>",
    "border-block": "<'border-top-width'>||<'border-top-style'>||<color>",
    "border-block-color": "<'border-top-color'>{1,2}",
    "border-block-style": "<'border-top-style'>",
    "border-block-width": "<'border-top-width'>",
    "border-block-end": "<'border-top-width'>||<'border-top-style'>||<color>",
    "border-block-end-color": "<'border-top-color'>",
    "border-block-end-style": "<'border-top-style'>",
    "border-block-end-width": "<'border-top-width'>",
    "border-block-start": "<'border-top-width'>||<'border-top-style'>||<color>",
    "border-block-start-color": "<'border-top-color'>",
    "border-block-start-style": "<'border-top-style'>",
    "border-block-start-width": "<'border-top-width'>",
    "border-bottom": "<line-width>||<line-style>||<color>",
    "border-bottom-color": "<'border-top-color'>",
    "border-bottom-left-radius": "<length-percentage>{1,2}",
    "border-bottom-right-radius": "<length-percentage>{1,2}",
    "border-bottom-style": "<line-style>",
    "border-bottom-width": "<line-width>",
    "border-collapse": "collapse|separate",
    "border-color": "<color>{1,4}",
    "border-end-end-radius": "<length-percentage>{1,2}",
    "border-end-start-radius": "<length-percentage>{1,2}",
    "border-image": "<'border-image-source'>||<'border-image-slice'> [/ <'border-image-width'>|/ <'border-image-width'>? / <'border-image-outset'>]?||<'border-image-repeat'>",
    "border-image-outset": "[<length>|<number>]{1,4}",
    "border-image-repeat": "[stretch|repeat|round|space]{1,2}",
    "border-image-slice": "<number-percentage>{1,4}&&fill?",
    "border-image-source": "none|<image>",
    "border-image-width": "[<length-percentage>|<number>|auto]{1,4}",
    "border-inline": "<'border-top-width'>||<'border-top-style'>||<color>",
    "border-inline-end": "<'border-top-width'>||<'border-top-style'>||<color>",
    "border-inline-color": "<'border-top-color'>{1,2}",
    "border-inline-style": "<'border-top-style'>",
    "border-inline-width": "<'border-top-width'>",
    "border-inline-end-color": "<'border-top-color'>",
    "border-inline-end-style": "<'border-top-style'>",
    "border-inline-end-width": "<'border-top-width'>",
    "border-inline-start": "<'border-top-width'>||<'border-top-style'>||<color>",
    "border-inline-start-color": "<'border-top-color'>",
    "border-inline-start-style": "<'border-top-style'>",
    "border-inline-start-width": "<'border-top-width'>",
    "border-left": "<line-width>||<line-style>||<color>",
    "border-left-color": "<color>",
    "border-left-style": "<line-style>",
    "border-left-width": "<line-width>",
    "border-radius": "<length-percentage>{1,4} [/ <length-percentage>{1,4}]?",
    "border-right": "<line-width>||<line-style>||<color>",
    "border-right-color": "<color>",
    "border-right-style": "<line-style>",
    "border-right-width": "<line-width>",
    "border-spacing": "<length> <length>?",
    "border-start-end-radius": "<length-percentage>{1,2}",
    "border-start-start-radius": "<length-percentage>{1,2}",
    "border-style": "<line-style>{1,4}",
    "border-top": "<line-width>||<line-style>||<color>",
    "border-top-color": "<color>",
    "border-top-left-radius": "<length-percentage>{1,2}",
    "border-top-right-radius": "<length-percentage>{1,2}",
    "border-top-style": "<line-style>",
    "border-top-width": "<line-width>",
    "border-width": "<line-width>{1,4}",
    bottom: "<length>|<percentage>|auto",
    "box-align": "start|center|end|baseline|stretch",
    "box-decoration-break": "slice|clone",
    "box-direction": "normal|reverse|inherit",
    "box-flex": "<number>",
    "box-flex-group": "<integer>",
    "box-lines": "single|multiple",
    "box-ordinal-group": "<integer>",
    "box-orient": "horizontal|vertical|inline-axis|block-axis|inherit",
    "box-pack": "start|center|end|justify",
    "box-shadow": "none|<shadow>#",
    "box-sizing": "content-box|border-box",
    "break-after": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",
    "break-before": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",
    "break-inside": "auto|avoid|avoid-page|avoid-column|avoid-region",
    "caption-side": "top|bottom|block-start|block-end|inline-start|inline-end",
    caret: "<'caret-color'>||<'caret-shape'>",
    "caret-color": "auto|<color>",
    "caret-shape": "auto|bar|block|underscore",
    clear: "none|left|right|both|inline-start|inline-end",
    clip: "<shape>|auto",
    "clip-path": "<clip-source>|[<basic-shape>||<geometry-box>]|none",
    color: "<color>",
    "print-color-adjust": "economy|exact",
    "color-scheme": "normal|[light|dark|<custom-ident>]+&&only?",
    "column-count": "<integer>|auto",
    "column-fill": "auto|balance|balance-all",
    "column-gap": "normal|<length-percentage>",
    "column-rule": "<'column-rule-width'>||<'column-rule-style'>||<'column-rule-color'>",
    "column-rule-color": "<color>",
    "column-rule-style": "<'border-style'>",
    "column-rule-width": "<'border-width'>",
    "column-span": "none|all",
    "column-width": "<length>|auto",
    columns: "<'column-width'>||<'column-count'>",
    contain: "none|strict|content|[[size||inline-size]||layout||style||paint]",
    "contain-intrinsic-size": "[none|<length>|auto <length>]{1,2}",
    "contain-intrinsic-block-size": "none|<length>|auto <length>",
    "contain-intrinsic-height": "none|<length>|auto <length>",
    "contain-intrinsic-inline-size": "none|<length>|auto <length>",
    "contain-intrinsic-width": "none|<length>|auto <length>",
    content: "normal|none|[<content-replacement>|<content-list>] [/ [<string>|<counter>]+]?",
    "content-visibility": "visible|auto|hidden",
    "counter-increment": "[<counter-name> <integer>?]+|none",
    "counter-reset": "[<counter-name> <integer>?|<reversed-counter-name> <integer>?]+|none",
    "counter-set": "[<counter-name> <integer>?]+|none",
    cursor: "[[<url> [<x> <y>]? ,]* [auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out|grab|grabbing|hand|-webkit-grab|-webkit-grabbing|-webkit-zoom-in|-webkit-zoom-out|-moz-grab|-moz-grabbing|-moz-zoom-in|-moz-zoom-out]]",
    direction: "ltr|rtl",
    display: "[<display-outside>||<display-inside>]|<display-listitem>|<display-internal>|<display-box>|<display-legacy>|<-non-standard-display>",
    "empty-cells": "show|hide",
    filter: "none|<filter-function-list>|<-ms-filter-function-list>",
    flex: "none|[<'flex-grow'> <'flex-shrink'>?||<'flex-basis'>]",
    "flex-basis": "content|<'width'>",
    "flex-direction": "row|row-reverse|column|column-reverse",
    "flex-flow": "<'flex-direction'>||<'flex-wrap'>",
    "flex-grow": "<number>",
    "flex-shrink": "<number>",
    "flex-wrap": "nowrap|wrap|wrap-reverse",
    float: "left|right|none|inline-start|inline-end",
    font: "[[<'font-style'>||<font-variant-css21>||<'font-weight'>||<'font-stretch'>]? <'font-size'> [/ <'line-height'>]? <'font-family'>]|caption|icon|menu|message-box|small-caption|status-bar",
    "font-family": "[<family-name>|<generic-family>]#",
    "font-feature-settings": "normal|<feature-tag-value>#",
    "font-kerning": "auto|normal|none",
    "font-language-override": "normal|<string>",
    "font-optical-sizing": "auto|none",
    "font-variation-settings": "normal|[<string> <number>]#",
    "font-size": "<absolute-size>|<relative-size>|<length-percentage>",
    "font-size-adjust": "none|[ex-height|cap-height|ch-width|ic-width|ic-height]? [from-font|<number>]",
    "font-smooth": "auto|never|always|<absolute-size>|<length>",
    "font-stretch": "<font-stretch-absolute>",
    "font-style": "normal|italic|oblique <angle>?",
    "font-synthesis": "none|[weight||style||small-caps]",
    "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",
    "font-variant-alternates": "normal|[stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )]",
    "font-variant-caps": "normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps",
    "font-variant-east-asian": "normal|[<east-asian-variant-values>||<east-asian-width-values>||ruby]",
    "font-variant-ligatures": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>]",
    "font-variant-numeric": "normal|[<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero]",
    "font-variant-position": "normal|sub|super",
    "font-weight": "<font-weight-absolute>|bolder|lighter",
    "forced-color-adjust": "auto|none",
    gap: "<'row-gap'> <'column-gap'>?",
    grid: "<'grid-template'>|<'grid-template-rows'> / [auto-flow&&dense?] <'grid-auto-columns'>?|[auto-flow&&dense?] <'grid-auto-rows'>? / <'grid-template-columns'>",
    "grid-area": "<grid-line> [/ <grid-line>]{0,3}",
    "grid-auto-columns": "<track-size>+",
    "grid-auto-flow": "[row|column]||dense",
    "grid-auto-rows": "<track-size>+",
    "grid-column": "<grid-line> [/ <grid-line>]?",
    "grid-column-end": "<grid-line>",
    "grid-column-gap": "<length-percentage>",
    "grid-column-start": "<grid-line>",
    "grid-gap": "<'grid-row-gap'> <'grid-column-gap'>?",
    "grid-row": "<grid-line> [/ <grid-line>]?",
    "grid-row-end": "<grid-line>",
    "grid-row-gap": "<length-percentage>",
    "grid-row-start": "<grid-line>",
    "grid-template": "none|[<'grid-template-rows'> / <'grid-template-columns'>]|[<line-names>? <string> <track-size>? <line-names>?]+ [/ <explicit-track-list>]?",
    "grid-template-areas": "none|<string>+",
    "grid-template-columns": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",
    "grid-template-rows": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",
    "hanging-punctuation": "none|[first||[force-end|allow-end]||last]",
    height: "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
    "hyphenate-character": "auto|<string>",
    hyphens: "none|manual|auto",
    "image-orientation": "from-image|<angle>|[<angle>? flip]",
    "image-rendering": "auto|crisp-edges|pixelated|optimizeSpeed|optimizeQuality|<-non-standard-image-rendering>",
    "image-resolution": "[from-image||<resolution>]&&snap?",
    "ime-mode": "auto|normal|active|inactive|disabled",
    "initial-letter": "normal|[<number> <integer>?]",
    "initial-letter-align": "[auto|alphabetic|hanging|ideographic]",
    "inline-size": "<'width'>",
    "input-security": "auto|none",
    inset: "<'top'>{1,4}",
    "inset-block": "<'top'>{1,2}",
    "inset-block-end": "<'top'>",
    "inset-block-start": "<'top'>",
    "inset-inline": "<'top'>{1,2}",
    "inset-inline-end": "<'top'>",
    "inset-inline-start": "<'top'>",
    isolation: "auto|isolate",
    "justify-content": "normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]",
    "justify-items": "normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]|legacy|legacy&&[left|right|center]",
    "justify-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]",
    "justify-tracks": "[normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]]#",
    left: "<length>|<percentage>|auto",
    "letter-spacing": "normal|<length-percentage>",
    "line-break": "auto|loose|normal|strict|anywhere",
    "line-clamp": "none|<integer>",
    "line-height": "normal|<number>|<length>|<percentage>",
    "line-height-step": "<length>",
    "list-style": "<'list-style-type'>||<'list-style-position'>||<'list-style-image'>",
    "list-style-image": "<image>|none",
    "list-style-position": "inside|outside",
    "list-style-type": "<counter-style>|<string>|none",
    margin: "[<length>|<percentage>|auto]{1,4}",
    "margin-block": "<'margin-left'>{1,2}",
    "margin-block-end": "<'margin-left'>",
    "margin-block-start": "<'margin-left'>",
    "margin-bottom": "<length>|<percentage>|auto",
    "margin-inline": "<'margin-left'>{1,2}",
    "margin-inline-end": "<'margin-left'>",
    "margin-inline-start": "<'margin-left'>",
    "margin-left": "<length>|<percentage>|auto",
    "margin-right": "<length>|<percentage>|auto",
    "margin-top": "<length>|<percentage>|auto",
    "margin-trim": "none|in-flow|all",
    mask: "<mask-layer>#",
    "mask-border": "<'mask-border-source'>||<'mask-border-slice'> [/ <'mask-border-width'>? [/ <'mask-border-outset'>]?]?||<'mask-border-repeat'>||<'mask-border-mode'>",
    "mask-border-mode": "luminance|alpha",
    "mask-border-outset": "[<length>|<number>]{1,4}",
    "mask-border-repeat": "[stretch|repeat|round|space]{1,2}",
    "mask-border-slice": "<number-percentage>{1,4} fill?",
    "mask-border-source": "none|<image>",
    "mask-border-width": "[<length-percentage>|<number>|auto]{1,4}",
    "mask-clip": "[<geometry-box>|no-clip]#",
    "mask-composite": "<compositing-operator>#",
    "mask-image": "<mask-reference>#",
    "mask-mode": "<masking-mode>#",
    "mask-origin": "<geometry-box>#",
    "mask-position": "<position>#",
    "mask-repeat": "<repeat-style>#",
    "mask-size": "<bg-size>#",
    "mask-type": "luminance|alpha",
    "masonry-auto-flow": "[pack|next]||[definite-first|ordered]",
    "math-depth": "auto-add|add( <integer> )|<integer>",
    "math-shift": "normal|compact",
    "math-style": "normal|compact",
    "max-block-size": "<'max-width'>",
    "max-height": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
    "max-inline-size": "<'max-width'>",
    "max-lines": "none|<integer>",
    "max-width": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>",
    "min-block-size": "<'min-width'>",
    "min-height": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
    "min-inline-size": "<'min-width'>",
    "min-width": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>",
    "mix-blend-mode": "<blend-mode>|plus-lighter",
    "object-fit": "fill|contain|cover|none|scale-down",
    "object-position": "<position>",
    offset: "[<'offset-position'>? [<'offset-path'> [<'offset-distance'>||<'offset-rotate'>]?]?]! [/ <'offset-anchor'>]?",
    "offset-anchor": "auto|<position>",
    "offset-distance": "<length-percentage>",
    "offset-path": "none|ray( [<angle>&&<size>&&contain?] )|<path()>|<url>|[<basic-shape>||<geometry-box>]",
    "offset-position": "auto|<position>",
    "offset-rotate": "[auto|reverse]||<angle>",
    opacity: "<alpha-value>",
    order: "<integer>",
    orphans: "<integer>",
    outline: "[<'outline-color'>||<'outline-style'>||<'outline-width'>]",
    "outline-color": "<color>|invert",
    "outline-offset": "<length>",
    "outline-style": "auto|<'border-style'>",
    "outline-width": "<line-width>",
    overflow: "[visible|hidden|clip|scroll|auto]{1,2}|<-non-standard-overflow>",
    "overflow-anchor": "auto|none",
    "overflow-block": "visible|hidden|clip|scroll|auto",
    "overflow-clip-box": "padding-box|content-box",
    "overflow-clip-margin": "<visual-box>||<length [0,∞]>",
    "overflow-inline": "visible|hidden|clip|scroll|auto",
    "overflow-wrap": "normal|break-word|anywhere",
    "overflow-x": "visible|hidden|clip|scroll|auto",
    "overflow-y": "visible|hidden|clip|scroll|auto",
    "overscroll-behavior": "[contain|none|auto]{1,2}",
    "overscroll-behavior-block": "contain|none|auto",
    "overscroll-behavior-inline": "contain|none|auto",
    "overscroll-behavior-x": "contain|none|auto",
    "overscroll-behavior-y": "contain|none|auto",
    padding: "[<length>|<percentage>]{1,4}",
    "padding-block": "<'padding-left'>{1,2}",
    "padding-block-end": "<'padding-left'>",
    "padding-block-start": "<'padding-left'>",
    "padding-bottom": "<length>|<percentage>",
    "padding-inline": "<'padding-left'>{1,2}",
    "padding-inline-end": "<'padding-left'>",
    "padding-inline-start": "<'padding-left'>",
    "padding-left": "<length>|<percentage>",
    "padding-right": "<length>|<percentage>",
    "padding-top": "<length>|<percentage>",
    "page-break-after": "auto|always|avoid|left|right|recto|verso",
    "page-break-before": "auto|always|avoid|left|right|recto|verso",
    "page-break-inside": "auto|avoid",
    "paint-order": "normal|[fill||stroke||markers]",
    perspective: "none|<length>",
    "perspective-origin": "<position>",
    "place-content": "<'align-content'> <'justify-content'>?",
    "place-items": "<'align-items'> <'justify-items'>?",
    "place-self": "<'align-self'> <'justify-self'>?",
    "pointer-events": "auto|none|visiblePainted|visibleFill|visibleStroke|visible|painted|fill|stroke|all|inherit",
    position: "static|relative|absolute|sticky|fixed|-webkit-sticky",
    quotes: "none|auto|[<string> <string>]+",
    resize: "none|both|horizontal|vertical|block|inline",
    right: "<length>|<percentage>|auto",
    rotate: "none|<angle>|[x|y|z|<number>{3}]&&<angle>",
    "row-gap": "normal|<length-percentage>",
    "ruby-align": "start|center|space-between|space-around",
    "ruby-merge": "separate|collapse|auto",
    "ruby-position": "[alternate||[over|under]]|inter-character",
    scale: "none|<number>{1,3}",
    "scrollbar-color": "auto|<color>{2}",
    "scrollbar-gutter": "auto|stable&&both-edges?",
    "scrollbar-width": "auto|thin|none",
    "scroll-behavior": "auto|smooth",
    "scroll-margin": "<length>{1,4}",
    "scroll-margin-block": "<length>{1,2}",
    "scroll-margin-block-start": "<length>",
    "scroll-margin-block-end": "<length>",
    "scroll-margin-bottom": "<length>",
    "scroll-margin-inline": "<length>{1,2}",
    "scroll-margin-inline-start": "<length>",
    "scroll-margin-inline-end": "<length>",
    "scroll-margin-left": "<length>",
    "scroll-margin-right": "<length>",
    "scroll-margin-top": "<length>",
    "scroll-padding": "[auto|<length-percentage>]{1,4}",
    "scroll-padding-block": "[auto|<length-percentage>]{1,2}",
    "scroll-padding-block-start": "auto|<length-percentage>",
    "scroll-padding-block-end": "auto|<length-percentage>",
    "scroll-padding-bottom": "auto|<length-percentage>",
    "scroll-padding-inline": "[auto|<length-percentage>]{1,2}",
    "scroll-padding-inline-start": "auto|<length-percentage>",
    "scroll-padding-inline-end": "auto|<length-percentage>",
    "scroll-padding-left": "auto|<length-percentage>",
    "scroll-padding-right": "auto|<length-percentage>",
    "scroll-padding-top": "auto|<length-percentage>",
    "scroll-snap-align": "[none|start|end|center]{1,2}",
    "scroll-snap-coordinate": "none|<position>#",
    "scroll-snap-destination": "<position>",
    "scroll-snap-points-x": "none|repeat( <length-percentage> )",
    "scroll-snap-points-y": "none|repeat( <length-percentage> )",
    "scroll-snap-stop": "normal|always",
    "scroll-snap-type": "none|[x|y|block|inline|both] [mandatory|proximity]?",
    "scroll-snap-type-x": "none|mandatory|proximity",
    "scroll-snap-type-y": "none|mandatory|proximity",
    "scroll-timeline": "<scroll-timeline-name>||<scroll-timeline-axis>",
    "scroll-timeline-axis": "block|inline|vertical|horizontal",
    "scroll-timeline-name": "none|<custom-ident>",
    "shape-image-threshold": "<alpha-value>",
    "shape-margin": "<length-percentage>",
    "shape-outside": "none|[<shape-box>||<basic-shape>]|<image>",
    "tab-size": "<integer>|<length>",
    "table-layout": "auto|fixed",
    "text-align": "start|end|left|right|center|justify|match-parent",
    "text-align-last": "auto|start|end|left|right|center|justify",
    "text-combine-upright": "none|all|[digits <integer>?]",
    "text-decoration": "<'text-decoration-line'>||<'text-decoration-style'>||<'text-decoration-color'>||<'text-decoration-thickness'>",
    "text-decoration-color": "<color>",
    "text-decoration-line": "none|[underline||overline||line-through||blink]|spelling-error|grammar-error",
    "text-decoration-skip": "none|[objects||[spaces|[leading-spaces||trailing-spaces]]||edges||box-decoration]",
    "text-decoration-skip-ink": "auto|all|none",
    "text-decoration-style": "solid|double|dotted|dashed|wavy",
    "text-decoration-thickness": "auto|from-font|<length>|<percentage>",
    "text-emphasis": "<'text-emphasis-style'>||<'text-emphasis-color'>",
    "text-emphasis-color": "<color>",
    "text-emphasis-position": "[over|under]&&[right|left]",
    "text-emphasis-style": "none|[[filled|open]||[dot|circle|double-circle|triangle|sesame]]|<string>",
    "text-indent": "<length-percentage>&&hanging?&&each-line?",
    "text-justify": "auto|inter-character|inter-word|none",
    "text-orientation": "mixed|upright|sideways",
    "text-overflow": "[clip|ellipsis|<string>]{1,2}",
    "text-rendering": "auto|optimizeSpeed|optimizeLegibility|geometricPrecision",
    "text-shadow": "none|<shadow-t>#",
    "text-size-adjust": "none|auto|<percentage>",
    "text-transform": "none|capitalize|uppercase|lowercase|full-width|full-size-kana",
    "text-underline-offset": "auto|<length>|<percentage>",
    "text-underline-position": "auto|from-font|[under||[left|right]]",
    top: "<length>|<percentage>|auto",
    "touch-action": "auto|none|[[pan-x|pan-left|pan-right]||[pan-y|pan-up|pan-down]||pinch-zoom]|manipulation",
    transform: "none|<transform-list>",
    "transform-box": "content-box|border-box|fill-box|stroke-box|view-box",
    "transform-origin": "[<length-percentage>|left|center|right|top|bottom]|[[<length-percentage>|left|center|right]&&[<length-percentage>|top|center|bottom]] <length>?",
    "transform-style": "flat|preserve-3d",
    transition: "<single-transition>#",
    "transition-delay": "<time>#",
    "transition-duration": "<time>#",
    "transition-property": "none|<single-transition-property>#",
    "transition-timing-function": "<easing-function>#",
    translate: "none|<length-percentage> [<length-percentage> <length>?]?",
    "unicode-bidi": "normal|embed|isolate|bidi-override|isolate-override|plaintext|-moz-isolate|-moz-isolate-override|-moz-plaintext|-webkit-isolate|-webkit-isolate-override|-webkit-plaintext",
    "user-select": "auto|text|none|contain|all",
    "vertical-align": "baseline|sub|super|text-top|text-bottom|middle|top|bottom|<percentage>|<length>",
    visibility: "visible|hidden|collapse",
    "white-space": "normal|pre|nowrap|pre-wrap|pre-line|break-spaces",
    widows: "<integer>",
    width: "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|fill|stretch|intrinsic|-moz-max-content|-webkit-max-content|-moz-fit-content|-webkit-fit-content",
    "will-change": "auto|<animateable-feature>#",
    "word-break": "normal|break-all|keep-all|break-word",
    "word-spacing": "normal|<length>",
    "word-wrap": "normal|break-word",
    "writing-mode": "horizontal-tb|vertical-rl|vertical-lr|sideways-rl|sideways-lr|<svg-writing-mode>",
    "z-index": "auto|<integer>",
    zoom: "normal|reset|<number>|<percentage>",
    "-moz-background-clip": "padding|border",
    "-moz-border-radius-bottomleft": "<'border-bottom-left-radius'>",
    "-moz-border-radius-bottomright": "<'border-bottom-right-radius'>",
    "-moz-border-radius-topleft": "<'border-top-left-radius'>",
    "-moz-border-radius-topright": "<'border-bottom-right-radius'>",
    "-moz-control-character-visibility": "visible|hidden",
    "-moz-osx-font-smoothing": "auto|grayscale",
    "-moz-user-select": "none|text|all|-moz-none",
    "-ms-flex-align": "start|end|center|baseline|stretch",
    "-ms-flex-item-align": "auto|start|end|center|baseline|stretch",
    "-ms-flex-line-pack": "start|end|center|justify|distribute|stretch",
    "-ms-flex-negative": "<'flex-shrink'>",
    "-ms-flex-pack": "start|end|center|justify|distribute",
    "-ms-flex-order": "<integer>",
    "-ms-flex-positive": "<'flex-grow'>",
    "-ms-flex-preferred-size": "<'flex-basis'>",
    "-ms-interpolation-mode": "nearest-neighbor|bicubic",
    "-ms-grid-column-align": "start|end|center|stretch",
    "-ms-grid-row-align": "start|end|center|stretch",
    "-ms-hyphenate-limit-last": "none|always|column|page|spread",
    "-webkit-background-clip": "[<box>|border|padding|content|text]#",
    "-webkit-column-break-after": "always|auto|avoid",
    "-webkit-column-break-before": "always|auto|avoid",
    "-webkit-column-break-inside": "always|auto|avoid",
    "-webkit-font-smoothing": "auto|none|antialiased|subpixel-antialiased",
    "-webkit-mask-box-image": "[<url>|<gradient>|none] [<length-percentage>{4} <-webkit-mask-box-repeat>{2}]?",
    "-webkit-print-color-adjust": "economy|exact",
    "-webkit-text-security": "none|circle|disc|square",
    "-webkit-user-drag": "none|element|auto",
    "-webkit-user-select": "auto|none|text|all",
    "alignment-baseline": "auto|baseline|before-edge|text-before-edge|middle|central|after-edge|text-after-edge|ideographic|alphabetic|hanging|mathematical",
    "baseline-shift": "baseline|sub|super|<svg-length>",
    behavior: "<url>+",
    "clip-rule": "nonzero|evenodd",
    container: "<'container-name'> [/ <'container-type'>]?",
    "container-name": "none|<custom-ident>+",
    "container-type": "normal||[size|inline-size]",
    cue: "<'cue-before'> <'cue-after'>?",
    "cue-after": "<url> <decibel>?|none",
    "cue-before": "<url> <decibel>?|none",
    "dominant-baseline": "auto|use-script|no-change|reset-size|ideographic|alphabetic|hanging|mathematical|central|middle|text-after-edge|text-before-edge",
    fill: "<paint>",
    "fill-opacity": "<number-zero-one>",
    "fill-rule": "nonzero|evenodd",
    "glyph-orientation-horizontal": "<angle>",
    "glyph-orientation-vertical": "<angle>",
    kerning: "auto|<svg-length>",
    marker: "none|<url>",
    "marker-end": "none|<url>",
    "marker-mid": "none|<url>",
    "marker-start": "none|<url>",
    pause: "<'pause-before'> <'pause-after'>?",
    "pause-after": "<time>|none|x-weak|weak|medium|strong|x-strong",
    "pause-before": "<time>|none|x-weak|weak|medium|strong|x-strong",
    rest: "<'rest-before'> <'rest-after'>?",
    "rest-after": "<time>|none|x-weak|weak|medium|strong|x-strong",
    "rest-before": "<time>|none|x-weak|weak|medium|strong|x-strong",
    "shape-rendering": "auto|optimizeSpeed|crispEdges|geometricPrecision",
    src: "[<url> [format( <string># )]?|local( <family-name> )]#",
    speak: "auto|none|normal",
    "speak-as": "normal|spell-out||digits||[literal-punctuation|no-punctuation]",
    stroke: "<paint>",
    "stroke-dasharray": "none|[<svg-length>+]#",
    "stroke-dashoffset": "<svg-length>",
    "stroke-linecap": "butt|round|square",
    "stroke-linejoin": "miter|round|bevel",
    "stroke-miterlimit": "<number-one-or-greater>",
    "stroke-opacity": "<number-zero-one>",
    "stroke-width": "<svg-length>",
    "text-anchor": "start|middle|end",
    "unicode-range": "<urange>#",
    "voice-balance": "<number>|left|center|right|leftwards|rightwards",
    "voice-duration": "auto|<time>",
    "voice-family": "[[<family-name>|<generic-voice>] ,]* [<family-name>|<generic-voice>]|preserve",
    "voice-pitch": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",
    "voice-range": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",
    "voice-rate": "[normal|x-slow|slow|medium|fast|x-fast]||<percentage>",
    "voice-stress": "normal|strong|moderate|none|reduced",
    "voice-volume": "silent|[[x-soft|soft|medium|loud|x-loud]||<decibel>]"
  },
  atrules: {
    charset: { prelude: "<string>", descriptors: null },
    "counter-style": {
      prelude: "<counter-style-name>",
      descriptors: {
        "additive-symbols": "[<integer>&&<symbol>]#",
        fallback: "<counter-style-name>",
        negative: "<symbol> <symbol>?",
        pad: "<integer>&&<symbol>",
        prefix: "<symbol>",
        range: "[[<integer>|infinite]{2}]#|auto",
        "speak-as": "auto|bullets|numbers|words|spell-out|<counter-style-name>",
        suffix: "<symbol>",
        symbols: "<symbol>+",
        system: "cyclic|numeric|alphabetic|symbolic|additive|[fixed <integer>?]|[extends <counter-style-name>]"
      }
    },
    document: {
      prelude: "[<url>|url-prefix( <string> )|domain( <string> )|media-document( <string> )|regexp( <string> )]#",
      descriptors: null
    },
    "font-face": {
      prelude: null,
      descriptors: {
        "ascent-override": "normal|<percentage>",
        "descent-override": "normal|<percentage>",
        "font-display": "[auto|block|swap|fallback|optional]",
        "font-family": "<family-name>",
        "font-feature-settings": "normal|<feature-tag-value>#",
        "font-variation-settings": "normal|[<string> <number>]#",
        "font-stretch": "<font-stretch-absolute>{1,2}",
        "font-style": "normal|italic|oblique <angle>{0,2}",
        "font-weight": "<font-weight-absolute>{1,2}",
        "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",
        "line-gap-override": "normal|<percentage>",
        "size-adjust": "<percentage>",
        src: "[<url> [format( <string># )]?|local( <family-name> )]#",
        "unicode-range": "<urange>#"
      }
    },
    "font-feature-values": { prelude: "<family-name>#", descriptors: null },
    import: {
      prelude: "[<string>|<url>] [layer|layer( <layer-name> )]? [supports( [<supports-condition>|<declaration>] )]? <media-query-list>?",
      descriptors: null
    },
    keyframes: { prelude: "<keyframes-name>", descriptors: null },
    layer: { prelude: "[<layer-name>#|<layer-name>?]", descriptors: null },
    media: { prelude: "<media-query-list>", descriptors: null },
    namespace: {
      prelude: "<namespace-prefix>? [<string>|<url>]",
      descriptors: null
    },
    page: {
      prelude: "<page-selector-list>",
      descriptors: {
        bleed: "auto|<length>",
        marks: "none|[crop||cross]",
        size: "<length>{1,2}|auto|[<page-size>||[portrait|landscape]]"
      }
    },
    property: {
      prelude: "<custom-property-name>",
      descriptors: {
        syntax: "<string>",
        inherits: "true|false",
        "initial-value": "<string>"
      }
    },
    "scroll-timeline": { prelude: "<timeline-name>", descriptors: null },
    supports: { prelude: "<supports-condition>", descriptors: null },
    viewport: {
      prelude: null,
      descriptors: {
        height: "<viewport-length>{1,2}",
        "max-height": "<viewport-length>",
        "max-width": "<viewport-length>",
        "max-zoom": "auto|<number>|<percentage>",
        "min-height": "<viewport-length>",
        "min-width": "<viewport-length>",
        "min-zoom": "auto|<number>|<percentage>",
        orientation: "auto|portrait|landscape",
        "user-zoom": "zoom|fixed",
        "viewport-fit": "auto|contain|cover",
        width: "<viewport-length>{1,2}",
        zoom: "auto|<number>|<percentage>"
      }
    },
    container: {
      prelude: "[<container-name>]? <container-condition>",
      descriptors: null
    },
    nest: { prelude: "<complex-selector-list>", descriptors: null }
  }
};
var gt = {};
b(gt, {
  AnPlusB: () => Xr,
  Atrule: () => Zr,
  AtrulePrelude: () => en,
  AttributeSelector: () => nn,
  Block: () => an,
  Brackets: () => ln,
  CDC: () => un,
  CDO: () => hn,
  ClassSelector: () => fn,
  Combinator: () => gn,
  Comment: () => xn,
  Declaration: () => kn,
  DeclarationList: () => Sn,
  Dimension: () => An,
  Function: () => En,
  Hash: () => Pn,
  IdSelector: () => Nn,
  Identifier: () => Dn,
  MediaFeature: () => Mn,
  MediaQuery: () => Fn,
  MediaQueryList: () => _n,
  NestingSelector: () => Un,
  Nth: () => Wn,
  Number: () => Yn,
  Operator: () => Vn,
  Parentheses: () => Qn,
  Percentage: () => $n,
  PseudoClassSelector: () => Jn,
  PseudoElementSelector: () => to,
  Ratio: () => no,
  Raw: () => io,
  Rule: () => so,
  Selector: () => co,
  SelectorList: () => po,
  String: () => bo,
  StyleSheet: () => yo,
  TypeSelector: () => vo,
  UnicodeRange: () => Ao,
  Url: () => Do,
  Value: () => No,
  WhiteSpace: () => Mo
});
var Xr = {};
b(Xr, {
  generate: () => xc,
  name: () => gc,
  parse: () => Qr,
  structure: () => bc
});
var me = 43, re = 45, Xt = 110, Ie = true, dc = false;
function $t(e, t) {
  let r = this.tokenStart + e, n = this.charCodeAt(r);
  for ((n === me || n === re) && (t && this.error("Number sign is not allowed"), r++); r < this.tokenEnd; r++) {
    B(this.charCodeAt(r)) || this.error("Integer is expected", r);
  }
}
function Qe(e) {
  return $t.call(this, 0, e);
}
function Ce(e, t) {
  if (!this.cmpChar(this.tokenStart + e, t)) {
    let r = "";
    switch (t) {
      case Xt:
        r = "N is expected";
        break;
      case re:
        r = "HyphenMinus is expected";
        break;
    }
    this.error(r, this.tokenStart + e);
  }
}
function Kr() {
  let e = 0, t = 0, r = this.tokenType;
  while (r === 13 || r === 25) {
    r = this.lookupType(++e);
  }
  if (r !== 10) {
    if (this.isDelim(me, e) || this.isDelim(re, e)) {
      t = this.isDelim(me, e) ? me : re;
      do {
        r = this.lookupType(++e);
      } while (r === 13 || r === 25);
      r !== 10 && (this.skip(e), Qe.call(this, Ie));
    } else {
      return null;
    }
  }
  return e > 0 && this.skip(e), t === 0 && (r = this.charCodeAt(this.tokenStart), r !== me && r !== re && this.error("Number sign is expected")), Qe.call(this, t !== 0), t === re ? "-" + this.consume(10) : this.consume(10);
}
var gc = "AnPlusB", bc = { a: [String, null], b: [String, null] };
function Qr() {
  let e = this.tokenStart, t = null, r = null;
  if (this.tokenType === 10) {
    Qe.call(this, dc), r = this.consume(10);
  } else if (this.tokenType === 1 && this.cmpChar(this.tokenStart, re)) {
    switch (t = "-1", Ce.call(this, 1, Xt), this.tokenEnd - this.tokenStart) {
      case 2:
        this.next(), r = Kr.call(this);
        break;
      case 3:
        Ce.call(this, 2, re), this.next(), this.skipSC(), Qe.call(this, Ie), r = "-" + this.consume(10);
        break;
      default:
        Ce.call(this, 2, re), $t.call(this, 3, Ie), this.next(), r = this.substrToCursor(e + 2);
    }
  } else if (this.tokenType === 1 || this.isDelim(me) && this.lookupType(1) === 1) {
    let n = 0;
    switch (t = "1", this.isDelim(me) && (n = 1, this.next()), Ce.call(this, 0, Xt), this.tokenEnd - this.tokenStart) {
      case 1:
        this.next(), r = Kr.call(this);
        break;
      case 2:
        Ce.call(this, 1, re), this.next(), this.skipSC(), Qe.call(this, Ie), r = "-" + this.consume(10);
        break;
      default:
        Ce.call(this, 1, re), $t.call(this, 2, Ie), this.next(), r = this.substrToCursor(e + n + 1);
    }
  } else if (this.tokenType === 12) {
    let n = this.charCodeAt(this.tokenStart), o = n === me || n === re, i2 = this.tokenStart + o;
    for (; i2 < this.tokenEnd && B(this.charCodeAt(i2)); i2++) {
    }
    i2 === this.tokenStart + o && this.error("Integer is expected", this.tokenStart + o), Ce.call(this, i2 - this.tokenStart, Xt), t = this.substring(e, i2), i2 + 1 === this.tokenEnd ? (this.next(), r = Kr.call(this)) : (Ce.call(this, i2 - this.tokenStart + 1, re), i2 + 2 === this.tokenEnd ? (this.next(), this.skipSC(), Qe.call(this, Ie), r = "-" + this.consume(10)) : ($t.call(this, i2 - this.tokenStart + 2, Ie), this.next(), r = this.substrToCursor(i2 + 1)));
  } else {
    this.error();
  }
  return t !== null && t.charCodeAt(0) === me && (t = t.substr(1)), r !== null && r.charCodeAt(0) === me && (r = r.substr(1)), {
    type: "AnPlusB",
    loc: this.getLocation(e, this.tokenStart),
    a: t,
    b: r
  };
}
function xc(e) {
  if (e.a) {
    const t = e.a === "+1" && "n" || e.a === "1" && "n" || e.a === "-1" && "-n" || e.a + "n";
    if (e.b) {
      const r = e.b[0] === "-" || e.b[0] === "+" ? e.b : "+" + e.b;
      this.tokenize(t + r);
    } else {
      this.tokenize(t);
    }
  } else {
    this.tokenize(e.b);
  }
}
var Zr = {};
b(Zr, {
  generate: () => Sc,
  name: () => kc,
  parse: () => $r,
  structure: () => vc,
  walkContext: () => wc
});
function da(e) {
  return this.Raw(e, this.consumeUntilLeftCurlyBracketOrSemicolon, true);
}
function yc() {
  for (let e = 1, t; t = this.lookupType(e); e++) {
    if (t === 24) {
      return true;
    }
    if (t === 23 || t === 3) {
      return false;
    }
  }
  return false;
}
var kc = "Atrule", wc = "atrule", vc = {
  name: String,
  prelude: ["AtrulePrelude", "Raw", null],
  block: ["Block", null]
};
function $r(e = false) {
  let t = this.tokenStart, r, n, o = null, i2 = null;
  switch (this.eat(3), r = this.substrToCursor(t + 1), n = r.toLowerCase(), this.skipSC(), this.eof === false && this.tokenType !== 23 && this.tokenType !== 17 && (this.parseAtrulePrelude ? o = this.parseWithFallback(this.AtrulePrelude.bind(this, r, e), da) : o = da.call(this, this.tokenIndex), this.skipSC()), this.tokenType) {
    case 17:
      this.next();
      break;
    case 23:
      hasOwnProperty.call(this.atrule, n) && typeof this.atrule[n].block == "function" ? i2 = this.atrule[n].block.call(this, e) : i2 = this.Block(yc.call(this));
      break;
  }
  return {
    type: "Atrule",
    loc: this.getLocation(t, this.tokenStart),
    name: r,
    prelude: o,
    block: i2
  };
}
function Sc(e) {
  this.token(3, "@" + e.name), e.prelude !== null && this.node(e.prelude), e.block ? this.node(e.block) : this.token(17, ";");
}
var en = {};
b(en, {
  generate: () => Ec,
  name: () => Cc,
  parse: () => Jr,
  structure: () => Tc,
  walkContext: () => Ac
});
var Cc = "AtrulePrelude", Ac = "atrulePrelude", Tc = { children: [[]] };
function Jr(e) {
  let t = null;
  return e !== null && (e = e.toLowerCase()), this.skipSC(), hasOwnProperty.call(this.atrule, e) && typeof this.atrule[e].prelude == "function" ? t = this.atrule[e].prelude.call(this) : t = this.readSequence(this.scope.AtrulePrelude), this.skipSC(), this.eof !== true && this.tokenType !== 23 && this.tokenType !== 17 && this.error("Semicolon or block is expected"), { type: "AtrulePrelude", loc: this.getLocationFromList(t), children: t };
}
function Ec(e) {
  this.children(e);
}
var nn = {};
b(nn, {
  generate: () => Mc,
  name: () => Nc,
  parse: () => rn,
  structure: () => zc
});
var Lc = 36, ga = 42, Zt = 61, Pc = 94, tn = 124, Ic = 126;
function Dc() {
  this.eof && this.error("Unexpected end of input");
  let e = this.tokenStart, t = false;
  return this.isDelim(ga) ? (t = true, this.next()) : this.isDelim(tn) || this.eat(1), this.isDelim(tn) ? this.charCodeAt(this.tokenStart + 1) !== Zt ? (this.next(), this.eat(1)) : t && this.error("Identifier is expected", this.tokenEnd) : t && this.error("Vertical line is expected"), {
    type: "Identifier",
    loc: this.getLocation(e, this.tokenStart),
    name: this.substrToCursor(e)
  };
}
function Oc() {
  const e = this.tokenStart, t = this.charCodeAt(e);
  return t !== Zt && t !== Ic && t !== Pc && t !== Lc && t !== ga && t !== tn && this.error("Attribute selector (=, ~=, ^=, $=, *=, |=) is expected"), this.next(), t !== Zt && (this.isDelim(Zt) || this.error("Equal sign is expected"), this.next()), this.substrToCursor(e);
}
var Nc = "AttributeSelector", zc = {
  name: "Identifier",
  matcher: [String, null],
  value: ["String", "Identifier", null],
  flags: [String, null]
};
function rn() {
  let e = this.tokenStart, t, r = null, n = null, o = null;
  return this.eat(19), this.skipSC(), t = Dc.call(this), this.skipSC(), this.tokenType !== 20 && (this.tokenType !== 1 && (r = Oc.call(this), this.skipSC(), n = this.tokenType === 5 ? this.String() : this.Identifier(), this.skipSC()), this.tokenType === 1 && (o = this.consume(1), this.skipSC())), this.eat(20), {
    type: "AttributeSelector",
    loc: this.getLocation(e, this.tokenStart),
    name: t,
    matcher: r,
    value: n,
    flags: o
  };
}
function Mc(e) {
  this.token(9, "["), this.node(e.name), e.matcher !== null && (this.tokenize(e.matcher), this.node(e.value)), e.flags !== null && this.token(1, e.flags), this.token(9, "]");
}
var an = {};
b(an, {
  generate: () => Uc,
  name: () => Bc,
  parse: () => on,
  structure: () => qc,
  walkContext: () => _c
});
var Rc = 38;
function ya(e) {
  return this.Raw(e, null, true);
}
function ba() {
  return this.parseWithFallback(this.Rule, ya);
}
function xa(e) {
  return this.Raw(e, this.consumeUntilSemicolonIncluded, true);
}
function Fc() {
  if (this.tokenType === 17) {
    return xa.call(this, this.tokenIndex);
  }
  const e = this.parseWithFallback(this.Declaration, xa);
  return this.tokenType === 17 && this.next(), e;
}
var Bc = "Block", _c = "block", qc = { children: [["Atrule", "Rule", "Declaration"]] };
function on(e) {
  const t = e ? Fc : ba, r = this.tokenStart, n = this.createList();
  this.eat(23);
  e: while (!this.eof) {
    switch (this.tokenType) {
      case 24:
        break e;
      case 13:
      case 25:
        this.next();
        break;
      case 3:
        n.push(this.parseWithFallback(this.Atrule.bind(this, e), ya));
        break;
      default:
        e && this.isDelim(Rc) ? n.push(ba.call(this)) : n.push(t.call(this));
    }
  }
  return this.eof || this.eat(24), {
    type: "Block",
    loc: this.getLocation(r, this.tokenStart),
    children: n
  };
}
function Uc(e) {
  this.token(23, "{"), this.children(e, (t) => {
    t.type === "Declaration" && this.token(17, ";");
  }), this.token(24, "}");
}
var ln = {};
b(ln, {
  generate: () => Hc,
  name: () => jc,
  parse: () => sn,
  structure: () => Wc
});
var jc = "Brackets", Wc = { children: [[]] };
function sn(e, t) {
  let r = this.tokenStart, n = null;
  return this.eat(19), n = e.call(this, t), this.eof || this.eat(20), {
    type: "Brackets",
    loc: this.getLocation(r, this.tokenStart),
    children: n
  };
}
function Hc(e) {
  this.token(9, "["), this.children(e), this.token(9, "]");
}
var un = {};
b(un, {
  generate: () => Vc,
  name: () => Yc,
  parse: () => cn,
  structure: () => Gc
});
var Yc = "CDC", Gc = [];
function cn() {
  const e = this.tokenStart;
  return this.eat(15), { type: "CDC", loc: this.getLocation(e, this.tokenStart) };
}
function Vc() {
  this.token(15, "-->");
}
var hn = {};
b(hn, {
  generate: () => Xc,
  name: () => Kc,
  parse: () => pn,
  structure: () => Qc
});
var Kc = "CDO", Qc = [];
function pn() {
  const e = this.tokenStart;
  return this.eat(14), { type: "CDO", loc: this.getLocation(e, this.tokenStart) };
}
function Xc() {
  this.token(14, "<!--");
}
var fn = {};
b(fn, {
  generate: () => eu,
  name: () => Zc,
  parse: () => mn,
  structure: () => Jc
});
var $c = 46, Zc = "ClassSelector", Jc = { name: String };
function mn() {
  return this.eatDelim($c), {
    type: "ClassSelector",
    loc: this.getLocation(this.tokenStart - 1, this.tokenEnd),
    name: this.consume(1)
  };
}
function eu(e) {
  this.token(9, "."), this.token(1, e.name);
}
var gn = {};
b(gn, {
  generate: () => au,
  name: () => ou,
  parse: () => dn,
  structure: () => iu
});
var tu = 43, ka = 47, ru = 62, nu = 126, ou = "Combinator", iu = { name: String };
function dn() {
  let e = this.tokenStart, t;
  switch (this.tokenType) {
    case 13:
      t = " ";
      break;
    case 9:
      switch (this.charCodeAt(this.tokenStart)) {
        case ru:
        case tu:
        case nu:
          this.next();
          break;
        case ka:
          this.next(), this.eatIdent("deep"), this.eatDelim(ka);
          break;
        default:
          this.error("Combinator is expected");
      }
      t = this.substrToCursor(e);
      break;
  }
  return {
    type: "Combinator",
    loc: this.getLocation(e, this.tokenStart),
    name: t
  };
}
function au(e) {
  this.tokenize(e.name);
}
var xn = {};
b(xn, {
  generate: () => pu,
  name: () => cu,
  parse: () => bn,
  structure: () => uu
});
var su = 42, lu = 47, cu = "Comment", uu = { value: String };
function bn() {
  let e = this.tokenStart, t = this.tokenEnd;
  return this.eat(25), t - e + 2 >= 2 && this.charCodeAt(t - 2) === su && this.charCodeAt(t - 1) === lu && (t -= 2), {
    type: "Comment",
    loc: this.getLocation(e, this.tokenStart),
    value: this.substring(e + 2, t)
  };
}
function pu(e) {
  this.token(25, "/*" + e.value + "*/");
}
var kn = {};
b(kn, {
  generate: () => Su,
  name: () => ku,
  parse: () => yn,
  structure: () => vu,
  walkContext: () => wu
});
var va = 33, hu = 35, mu = 36, fu = 38, du = 42, gu = 43, wa = 47;
function bu(e) {
  return this.Raw(e, this.consumeUntilExclamationMarkOrSemicolon, true);
}
function xu(e) {
  return this.Raw(e, this.consumeUntilExclamationMarkOrSemicolon, false);
}
function yu() {
  const e = this.tokenIndex, t = this.Value();
  return t.type !== "Raw" && this.eof === false && this.tokenType !== 17 && this.isDelim(va) === false && this.isBalanceEdge(e) === false && this.error(), t;
}
var ku = "Declaration", wu = "declaration", vu = {
  important: [Boolean, String],
  property: String,
  value: ["Value", "Raw"]
};
function yn() {
  let e = this.tokenStart, t = this.tokenIndex, r = Cu.call(this), n = Mt(r), o = n ? this.parseCustomProperty : this.parseValue, i2 = n ? xu : bu, s = false, u;
  this.skipSC(), this.eat(16);
  const c = this.tokenIndex;
  if (n || this.skipSC(), o ? u = this.parseWithFallback(yu, i2) : u = i2.call(this, this.tokenIndex), n && u.type === "Value" && u.children.isEmpty) {
    for (let a = c - this.tokenIndex; a <= 0; a++) {
      if (this.lookupType(a) === 13) {
        u.children.appendData({
          type: "WhiteSpace",
          loc: null,
          value: " "
        });
        break;
      }
    }
  }
  return this.isDelim(va) && (s = Au.call(this), this.skipSC()), this.eof === false && this.tokenType !== 17 && this.isBalanceEdge(t) === false && this.error(), {
    type: "Declaration",
    loc: this.getLocation(e, this.tokenStart),
    important: s,
    property: r,
    value: u
  };
}
function Su(e) {
  this.token(1, e.property), this.token(16, ":"), this.node(e.value), e.important && (this.token(9, "!"), this.token(1, e.important === true ? "important" : e.important));
}
function Cu() {
  const e = this.tokenStart;
  if (this.tokenType === 9) {
    switch (this.charCodeAt(this.tokenStart)) {
      case du:
      case mu:
      case gu:
      case hu:
      case fu:
        this.next();
        break;
      case wa:
        this.next(), this.isDelim(wa) && this.next();
        break;
    }
  }
  return this.tokenType === 4 ? this.eat(4) : this.eat(1), this.substrToCursor(e);
}
function Au() {
  this.eat(9), this.skipSC();
  const e = this.consume(1);
  return e === "important" ? true : e;
}
var Sn = {};
b(Sn, {
  generate: () => Pu,
  name: () => Eu,
  parse: () => vn,
  structure: () => Lu
});
var Tu = 38;
function wn(e) {
  return this.Raw(e, this.consumeUntilSemicolonIncluded, true);
}
var Eu = "DeclarationList", Lu = { children: [["Declaration", "Atrule", "Rule"]] };
function vn() {
  const e = this.createList();
  while (!this.eof) {
    switch (this.tokenType) {
      case 13:
      case 25:
      case 17:
        this.next();
        break;
      case 3:
        e.push(this.parseWithFallback(this.Atrule.bind(this, true), wn));
        break;
      default:
        this.isDelim(Tu) ? e.push(this.parseWithFallback(this.Rule, wn)) : e.push(this.parseWithFallback(this.Declaration, wn));
    }
  }
  return {
    type: "DeclarationList",
    loc: this.getLocationFromList(e),
    children: e
  };
}
function Pu(e) {
  this.children(e, (t) => {
    t.type === "Declaration" && this.token(17, ";");
  });
}
var An = {};
b(An, {
  generate: () => Ou,
  name: () => Iu,
  parse: () => Cn,
  structure: () => Du
});
var Iu = "Dimension", Du = { value: String, unit: String };
function Cn() {
  const e = this.tokenStart, t = this.consumeNumber(12);
  return {
    type: "Dimension",
    loc: this.getLocation(e, this.tokenStart),
    value: t,
    unit: this.substring(e + t.length, this.tokenStart)
  };
}
function Ou(e) {
  this.token(12, e.value + e.unit);
}
var En = {};
b(En, {
  generate: () => Ru,
  name: () => Nu,
  parse: () => Tn,
  structure: () => Mu,
  walkContext: () => zu
});
var Nu = "Function", zu = "function", Mu = { name: String, children: [[]] };
function Tn(e, t) {
  let r = this.tokenStart, n = this.consumeFunctionName(), o = n.toLowerCase(), i2;
  return i2 = t.hasOwnProperty(o) ? t[o].call(this, t) : e.call(this, t), this.eof || this.eat(22), {
    type: "Function",
    loc: this.getLocation(r, this.tokenStart),
    name: n,
    children: i2
  };
}
function Ru(e) {
  this.token(2, e.name + "("), this.children(e), this.token(22, ")");
}
var Pn = {};
b(Pn, {
  generate: () => qu,
  name: () => Bu,
  parse: () => Ln,
  structure: () => _u,
  xxx: () => Fu
});
var Fu = "XXX", Bu = "Hash", _u = { value: String };
function Ln() {
  const e = this.tokenStart;
  return this.eat(4), {
    type: "Hash",
    loc: this.getLocation(e, this.tokenStart),
    value: this.substrToCursor(e + 1)
  };
}
function qu(e) {
  this.token(4, "#" + e.value);
}
var Dn = {};
b(Dn, {
  generate: () => Wu,
  name: () => Uu,
  parse: () => In,
  structure: () => ju
});
var Uu = "Identifier", ju = { name: String };
function In() {
  return {
    type: "Identifier",
    loc: this.getLocation(this.tokenStart, this.tokenEnd),
    name: this.consume(1)
  };
}
function Wu(e) {
  this.token(1, e.name);
}
var Nn = {};
b(Nn, {
  generate: () => Gu,
  name: () => Hu,
  parse: () => On,
  structure: () => Yu
});
var Hu = "IdSelector", Yu = { name: String };
function On() {
  const e = this.tokenStart;
  return this.eat(4), {
    type: "IdSelector",
    loc: this.getLocation(e, this.tokenStart),
    name: this.substrToCursor(e + 1)
  };
}
function Gu(e) {
  this.token(9, "#" + e.name);
}
var Mn = {};
b(Mn, {
  generate: () => Qu,
  name: () => Vu,
  parse: () => zn,
  structure: () => Ku
});
var Vu = "MediaFeature", Ku = {
  name: String,
  value: ["Identifier", "Number", "Dimension", "Ratio", null]
};
function zn() {
  let e = this.tokenStart, t, r = null;
  if (this.eat(21), this.skipSC(), t = this.consume(1), this.skipSC(), this.tokenType !== 22) {
    switch (this.eat(16), this.skipSC(), this.tokenType) {
      case 10:
        this.lookupNonWSType(1) === 9 ? r = this.Ratio() : r = this.Number();
        break;
      case 12:
        r = this.Dimension();
        break;
      case 1:
        r = this.Identifier();
        break;
      default:
        this.error("Number, dimension, ratio or identifier is expected");
    }
    this.skipSC();
  }
  return this.eat(22), {
    type: "MediaFeature",
    loc: this.getLocation(e, this.tokenStart),
    name: t,
    value: r
  };
}
function Qu(e) {
  this.token(21, "("), this.token(1, e.name), e.value !== null && (this.token(16, ":"), this.node(e.value)), this.token(22, ")");
}
var Fn = {};
b(Fn, {
  generate: () => Zu,
  name: () => Xu,
  parse: () => Rn,
  structure: () => $u
});
var Xu = "MediaQuery", $u = { children: [["Identifier", "MediaFeature", "WhiteSpace"]] };
function Rn() {
  let e = this.createList(), t = null;
  this.skipSC();
  e: while (!this.eof) {
    switch (this.tokenType) {
      case 25:
      case 13:
        this.next();
        continue;
      case 1:
        t = this.Identifier();
        break;
      case 21:
        t = this.MediaFeature();
        break;
      default:
        break e;
    }
    e.push(t);
  }
  return t === null && this.error("Identifier or parenthesis is expected"), { type: "MediaQuery", loc: this.getLocationFromList(e), children: e };
}
function Zu(e) {
  this.children(e);
}
var _n = {};
b(_n, {
  generate: () => tp,
  name: () => Ju,
  parse: () => Bn,
  structure: () => ep
});
var Ju = "MediaQueryList", ep = { children: [["MediaQuery"]] };
function Bn() {
  const e = this.createList();
  for (this.skipSC(); !this.eof && (e.push(this.MediaQuery()), this.tokenType === 18); ) {
    this.next();
  }
  return {
    type: "MediaQueryList",
    loc: this.getLocationFromList(e),
    children: e
  };
}
function tp(e) {
  this.children(e, () => this.token(18, ","));
}
var Un = {};
b(Un, {
  generate: () => ip,
  name: () => np,
  parse: () => qn,
  structure: () => op
});
var rp = 38, np = "NestingSelector", op = {};
function qn() {
  const e = this.tokenStart;
  return this.eatDelim(rp), { type: "NestingSelector", loc: this.getLocation(e, this.tokenStart) };
}
function ip() {
  this.token(9, "&");
}
var Wn = {};
b(Wn, {
  generate: () => lp,
  name: () => ap,
  parse: () => jn,
  structure: () => sp
});
var ap = "Nth", sp = { nth: ["AnPlusB", "Identifier"], selector: ["SelectorList", null] };
function jn() {
  this.skipSC();
  let e = this.tokenStart, t = e, r = null, n;
  return this.lookupValue(0, "odd") || this.lookupValue(0, "even") ? n = this.Identifier() : n = this.AnPlusB(), t = this.tokenStart, this.skipSC(), this.lookupValue(0, "of") && (this.next(), r = this.SelectorList(), t = this.tokenStart), { type: "Nth", loc: this.getLocation(e, t), nth: n, selector: r };
}
function lp(e) {
  this.node(e.nth), e.selector !== null && (this.token(1, "of"), this.node(e.selector));
}
var Yn = {};
b(Yn, {
  generate: () => pp,
  name: () => cp,
  parse: () => Hn,
  structure: () => up
});
var cp = "Number", up = { value: String };
function Hn() {
  return {
    type: "Number",
    loc: this.getLocation(this.tokenStart, this.tokenEnd),
    value: this.consume(10)
  };
}
function pp(e) {
  this.token(10, e.value);
}
var Vn = {};
b(Vn, {
  generate: () => fp,
  name: () => hp,
  parse: () => Gn,
  structure: () => mp
});
var hp = "Operator", mp = { value: String };
function Gn() {
  const e = this.tokenStart;
  return this.next(), {
    type: "Operator",
    loc: this.getLocation(e, this.tokenStart),
    value: this.substrToCursor(e)
  };
}
function fp(e) {
  this.tokenize(e.value);
}
var Qn = {};
b(Qn, {
  generate: () => bp,
  name: () => dp,
  parse: () => Kn,
  structure: () => gp
});
var dp = "Parentheses", gp = { children: [[]] };
function Kn(e, t) {
  let r = this.tokenStart, n = null;
  return this.eat(21), n = e.call(this, t), this.eof || this.eat(22), {
    type: "Parentheses",
    loc: this.getLocation(r, this.tokenStart),
    children: n
  };
}
function bp(e) {
  this.token(21, "("), this.children(e), this.token(22, ")");
}
var $n = {};
b($n, {
  generate: () => kp,
  name: () => xp,
  parse: () => Xn,
  structure: () => yp
});
var xp = "Percentage", yp = { value: String };
function Xn() {
  return {
    type: "Percentage",
    loc: this.getLocation(this.tokenStart, this.tokenEnd),
    value: this.consumeNumber(11)
  };
}
function kp(e) {
  this.token(11, e.value + "%");
}
var Jn = {};
b(Jn, {
  generate: () => Cp,
  name: () => wp,
  parse: () => Zn,
  structure: () => Sp,
  walkContext: () => vp
});
var wp = "PseudoClassSelector", vp = "function", Sp = { name: String, children: [["Raw"], null] };
function Zn() {
  let e = this.tokenStart, t = null, r, n;
  return this.eat(16), this.tokenType === 2 ? (r = this.consumeFunctionName(), n = r.toLowerCase(), hasOwnProperty.call(this.pseudo, n) ? (this.skipSC(), t = this.pseudo[n].call(this), this.skipSC()) : (t = this.createList(), t.push(this.Raw(this.tokenIndex, null, false))), this.eat(22)) : r = this.consume(1), {
    type: "PseudoClassSelector",
    loc: this.getLocation(e, this.tokenStart),
    name: r,
    children: t
  };
}
function Cp(e) {
  this.token(16, ":"), e.children === null ? this.token(1, e.name) : (this.token(2, e.name + "("), this.children(e), this.token(22, ")"));
}
var to = {};
b(to, {
  generate: () => Lp,
  name: () => Ap,
  parse: () => eo,
  structure: () => Ep,
  walkContext: () => Tp
});
var Ap = "PseudoElementSelector", Tp = "function", Ep = { name: String, children: [["Raw"], null] };
function eo() {
  let e = this.tokenStart, t = null, r, n;
  return this.eat(16), this.eat(16), this.tokenType === 2 ? (r = this.consumeFunctionName(), n = r.toLowerCase(), hasOwnProperty.call(this.pseudo, n) ? (this.skipSC(), t = this.pseudo[n].call(this), this.skipSC()) : (t = this.createList(), t.push(this.Raw(this.tokenIndex, null, false))), this.eat(22)) : r = this.consume(1), {
    type: "PseudoElementSelector",
    loc: this.getLocation(e, this.tokenStart),
    name: r,
    children: t
  };
}
function Lp(e) {
  this.token(16, ":"), this.token(16, ":"), e.children === null ? this.token(1, e.name) : (this.token(2, e.name + "("), this.children(e), this.token(22, ")"));
}
var no = {};
b(no, {
  generate: () => Np,
  name: () => Dp,
  parse: () => ro,
  structure: () => Op
});
var Pp = 47, Ip = 46;
function Sa() {
  this.skipSC();
  const e = this.consume(10);
  for (let t = 0; t < e.length; t++) {
    const r = e.charCodeAt(t);
    !B(r) && r !== Ip && this.error("Unsigned number is expected", this.tokenStart - e.length + t);
  }
  return Number(e) === 0 && this.error("Zero number is not allowed", this.tokenStart - e.length), e;
}
var Dp = "Ratio", Op = { left: String, right: String };
function ro() {
  let e = this.tokenStart, t = Sa.call(this), r;
  return this.skipSC(), this.eatDelim(Pp), r = Sa.call(this), {
    type: "Ratio",
    loc: this.getLocation(e, this.tokenStart),
    left: t,
    right: r
  };
}
function Np(e) {
  this.token(10, e.left), this.token(9, "/"), this.token(10, e.right);
}
var io = {};
b(io, {
  generate: () => Fp,
  name: () => Mp,
  parse: () => oo,
  structure: () => Rp
});
function zp() {
  return this.tokenIndex > 0 && this.lookupType(-1) === 13 ? this.tokenIndex > 1 ? this.getTokenStart(this.tokenIndex - 1) : this.firstCharOffset : this.tokenStart;
}
var Mp = "Raw", Rp = { value: String };
function oo(e, t, r) {
  let n = this.getTokenStart(e), o;
  return this.skipUntilBalanced(e, t || this.consumeUntilBalanceEnd), r && this.tokenStart > n ? o = zp.call(this) : o = this.tokenStart, {
    type: "Raw",
    loc: this.getLocation(n, o),
    value: this.substring(n, o)
  };
}
function Fp(e) {
  this.tokenize(e.value);
}
var so = {};
b(so, {
  generate: () => jp,
  name: () => _p,
  parse: () => ao,
  structure: () => Up,
  walkContext: () => qp
});
function Ca(e) {
  return this.Raw(e, this.consumeUntilLeftCurlyBracket, true);
}
function Bp() {
  const e = this.SelectorList();
  return e.type !== "Raw" && this.eof === false && this.tokenType !== 23 && this.error(), e;
}
var _p = "Rule", qp = "rule", Up = { prelude: ["SelectorList", "Raw"], block: ["Block"] };
function ao() {
  let e = this.tokenIndex, t = this.tokenStart, r, n;
  return this.parseRulePrelude ? r = this.parseWithFallback(Bp, Ca) : r = Ca.call(this, e), n = this.Block(true), {
    type: "Rule",
    loc: this.getLocation(t, this.tokenStart),
    prelude: r,
    block: n
  };
}
function jp(e) {
  this.node(e.prelude), this.node(e.block);
}
var co = {};
b(co, {
  generate: () => Yp,
  name: () => Wp,
  parse: () => lo,
  structure: () => Hp
});
var Wp = "Selector", Hp = {
  children: [
    [
      "TypeSelector",
      "IdSelector",
      "ClassSelector",
      "AttributeSelector",
      "PseudoClassSelector",
      "PseudoElementSelector",
      "Combinator",
      "WhiteSpace"
    ]
  ]
};
function lo() {
  const e = this.readSequence(this.scope.Selector);
  return this.getFirstListNode(e) === null && this.error("Selector is expected"), { type: "Selector", loc: this.getLocationFromList(e), children: e };
}
function Yp(e) {
  this.children(e);
}
var po = {};
b(po, {
  generate: () => Qp,
  name: () => Gp,
  parse: () => uo,
  structure: () => Kp,
  walkContext: () => Vp
});
var Gp = "SelectorList", Vp = "selector", Kp = { children: [["Selector", "Raw"]] };
function uo() {
  const e = this.createList();
  while (!this.eof) {
    if (e.push(this.Selector()), this.tokenType === 18) {
      this.next();
      continue;
    }
    break;
  }
  return {
    type: "SelectorList",
    loc: this.getLocationFromList(e),
    children: e
  };
}
function Qp(e) {
  this.children(e, () => this.token(18, ","));
}
var bo = {};
b(bo, {
  generate: () => Zp,
  name: () => Xp,
  parse: () => go,
  structure: () => $p
});
var fo = {};
b(fo, { decode: () => ft, encode: () => mo });
var ho = 92, Aa = 34, Ta = 39;
function ft(e) {
  let t = e.length, r = e.charCodeAt(0), n = r === Aa || r === Ta ? 1 : 0, o = n === 1 && t > 1 && e.charCodeAt(t - 1) === r ? t - 2 : t - 1, i2 = "";
  for (let s = n; s <= o; s++) {
    let u = e.charCodeAt(s);
    if (u === ho) {
      if (s === o) {
        s !== t - 1 && (i2 = e.substr(s + 1));
        break;
      }
      if (u = e.charCodeAt(++s), $(ho, u)) {
        const c = s - 1, a = se(e, c);
        s = a - 1, i2 += Re(e.substring(c + 1, a));
      } else {
        u === 13 && e.charCodeAt(s + 1) === 10 && s++;
      }
    } else {
      i2 += e[s];
    }
  }
  return i2;
}
function mo(e, t) {
  let r = t ? "'" : '"', n = t ? Ta : Aa, o = "", i2 = false;
  for (let s = 0; s < e.length; s++) {
    const u = e.charCodeAt(s);
    if (u === 0) {
      o += "�";
      continue;
    }
    if (u <= 31 || u === 127) {
      o += "\\" + u.toString(16), i2 = true;
      continue;
    }
    u === n || u === ho ? (o += "\\" + e.charAt(s), i2 = false) : (i2 && (ee(u) || pe(u)) && (o += " "), o += e.charAt(s), i2 = false);
  }
  return r + o + r;
}
var Xp = "String", $p = { value: String };
function go() {
  return {
    type: "String",
    loc: this.getLocation(this.tokenStart, this.tokenEnd),
    value: ft(this.consume(5))
  };
}
function Zp(e) {
  this.token(5, mo(e.value));
}
var yo = {};
b(yo, {
  generate: () => nh,
  name: () => eh,
  parse: () => xo,
  structure: () => rh,
  walkContext: () => th
});
var Jp = 33;
function Ea(e) {
  return this.Raw(e, null, false);
}
var eh = "StyleSheet", th = "stylesheet", rh = { children: [["Comment", "CDO", "CDC", "Atrule", "Rule", "Raw"]] };
function xo() {
  let e = this.tokenStart, t = this.createList(), r;
  while (!this.eof) {
    switch (this.tokenType) {
      case 13:
        this.next();
        continue;
      case 25:
        if (this.charCodeAt(this.tokenStart + 2) !== Jp) {
          this.next();
          continue;
        }
        r = this.Comment();
        break;
      case 14:
        r = this.CDO();
        break;
      case 15:
        r = this.CDC();
        break;
      case 3:
        r = this.parseWithFallback(this.Atrule, Ea);
        break;
      default:
        r = this.parseWithFallback(this.Rule, Ea);
    }
    t.push(r);
  }
  return {
    type: "StyleSheet",
    loc: this.getLocation(e, this.tokenStart),
    children: t
  };
}
function nh(e) {
  this.children(e);
}
var vo = {};
b(vo, {
  generate: () => sh,
  name: () => ih,
  parse: () => wo,
  structure: () => ah
});
var oh = 42, La = 124;
function ko() {
  this.tokenType !== 1 && this.isDelim(oh) === false && this.error("Identifier or asterisk is expected"), this.next();
}
var ih = "TypeSelector", ah = { name: String };
function wo() {
  const e = this.tokenStart;
  return this.isDelim(La) ? (this.next(), ko.call(this)) : (ko.call(this), this.isDelim(La) && (this.next(), ko.call(this))), {
    type: "TypeSelector",
    loc: this.getLocation(e, this.tokenStart),
    name: this.substrToCursor(e)
  };
}
function sh(e) {
  this.tokenize(e.name);
}
var Ao = {};
b(Ao, {
  generate: () => hh,
  name: () => uh,
  parse: () => Co,
  structure: () => ph
});
var Pa = 43, Ia = 45, So = 63;
function dt(e, t) {
  let r = 0;
  for (let n = this.tokenStart + e; n < this.tokenEnd; n++) {
    const o = this.charCodeAt(n);
    if (o === Ia && t && r !== 0) {
      return dt.call(this, e + r + 1, false), -1;
    }
    ee(o) || this.error(
      t && r !== 0 ? "Hyphen minus" + (r < 6 ? " or hex digit" : "") + " is expected" : r < 6 ? "Hex digit is expected" : "Unexpected input",
      n
    ), ++r > 6 && this.error("Too many hex digits", n);
  }
  return this.next(), r;
}
function Jt(e) {
  let t = 0;
  while (this.isDelim(So)) {
    ++t > e && this.error("Too many question marks"), this.next();
  }
}
function lh(e) {
  this.charCodeAt(this.tokenStart) !== e && this.error((e === Pa ? "Plus sign" : "Hyphen minus") + " is expected");
}
function ch() {
  let e = 0;
  switch (this.tokenType) {
    case 10:
      if (e = dt.call(this, 1, true), this.isDelim(So)) {
        Jt.call(this, 6 - e);
        break;
      }
      if (this.tokenType === 12 || this.tokenType === 10) {
        lh.call(this, Ia), dt.call(this, 1, false);
        break;
      }
      break;
    case 12:
      e = dt.call(this, 1, true), e > 0 && Jt.call(this, 6 - e);
      break;
    default:
      if (this.eatDelim(Pa), this.tokenType === 1) {
        e = dt.call(this, 0, true), e > 0 && Jt.call(this, 6 - e);
        break;
      }
      if (this.isDelim(So)) {
        this.next(), Jt.call(this, 5);
        break;
      }
      this.error("Hex digit or question mark is expected");
  }
}
var uh = "UnicodeRange", ph = { value: String };
function Co() {
  const e = this.tokenStart;
  return this.eatIdent("u"), ch.call(this), {
    type: "UnicodeRange",
    loc: this.getLocation(e, this.tokenStart),
    value: this.substrToCursor(e)
  };
}
function hh(e) {
  this.tokenize(e.value);
}
var Do = {};
b(Do, {
  generate: () => yh,
  name: () => bh,
  parse: () => Io,
  structure: () => xh
});
var Po = {};
b(Po, { decode: () => Eo, encode: () => Lo });
var mh = 32, To = 92, fh = 34, dh = 39, gh = 40, Da = 41;
function Eo(e) {
  let t = e.length, r = 4, n = e.charCodeAt(t - 1) === Da ? t - 2 : t - 1, o = "";
  while (r < n && pe(e.charCodeAt(r))) {
    r++;
  }
  while (r < n && pe(e.charCodeAt(n))) {
    n--;
  }
  for (let i2 = r; i2 <= n; i2++) {
    let s = e.charCodeAt(i2);
    if (s === To) {
      if (i2 === n) {
        i2 !== t - 1 && (o = e.substr(i2 + 1));
        break;
      }
      if (s = e.charCodeAt(++i2), $(To, s)) {
        const u = i2 - 1, c = se(e, u);
        i2 = c - 1, o += Re(e.substring(u + 1, c));
      } else {
        s === 13 && e.charCodeAt(i2 + 1) === 10 && i2++;
      }
    } else {
      o += e[i2];
    }
  }
  return o;
}
function Lo(e) {
  let t = "", r = false;
  for (let n = 0; n < e.length; n++) {
    const o = e.charCodeAt(n);
    if (o === 0) {
      t += "�";
      continue;
    }
    if (o <= 31 || o === 127) {
      t += "\\" + o.toString(16), r = true;
      continue;
    }
    o === mh || o === To || o === fh || o === dh || o === gh || o === Da ? (t += "\\" + e.charAt(n), r = false) : (r && ee(o) && (t += " "), t += e.charAt(n), r = false);
  }
  return "url(" + t + ")";
}
var bh = "Url", xh = { value: String };
function Io() {
  let e = this.tokenStart, t;
  switch (this.tokenType) {
    case 7:
      t = Eo(this.consume(7));
      break;
    case 2:
      this.cmpStr(this.tokenStart, this.tokenEnd, "url(") || this.error("Function name must be `url`"), this.eat(2), this.skipSC(), t = ft(this.consume(5)), this.skipSC(), this.eof || this.eat(22);
      break;
    default:
      this.error("Url or Function is expected");
  }
  return { type: "Url", loc: this.getLocation(e, this.tokenStart), value: t };
}
function yh(e) {
  this.token(7, Lo(e.value));
}
var No = {};
b(No, {
  generate: () => vh,
  name: () => kh,
  parse: () => Oo,
  structure: () => wh
});
var kh = "Value", wh = { children: [[]] };
function Oo() {
  const e = this.tokenStart, t = this.readSequence(this.scope.Value);
  return {
    type: "Value",
    loc: this.getLocation(e, this.tokenStart),
    children: t
  };
}
function vh(e) {
  this.children(e);
}
var Mo = {};
b(Mo, {
  generate: () => Th,
  name: () => Ch,
  parse: () => zo,
  structure: () => Ah
});
var Sh = Object.freeze({ type: "WhiteSpace", loc: null, value: " " }), Ch = "WhiteSpace", Ah = { value: String };
function zo() {
  return this.eat(13), Sh;
}
function Th(e) {
  this.token(13, e.value);
}
var Oa = { generic: true, ...fa, node: gt };
var Ro = {};
b(Ro, { AtrulePrelude: () => za, Selector: () => Ra, Value: () => qa });
var Eh = 35, Lh = 42, Na = 43, Ph = 45, Ih = 47, Dh = 117;
function bt(e) {
  switch (this.tokenType) {
    case 4:
      return this.Hash();
    case 18:
      return this.Operator();
    case 21:
      return this.Parentheses(this.readSequence, e.recognizer);
    case 19:
      return this.Brackets(this.readSequence, e.recognizer);
    case 5:
      return this.String();
    case 12:
      return this.Dimension();
    case 11:
      return this.Percentage();
    case 10:
      return this.Number();
    case 2:
      return this.cmpStr(this.tokenStart, this.tokenEnd, "url(") ? this.Url() : this.Function(this.readSequence, e.recognizer);
    case 7:
      return this.Url();
    case 1:
      return this.cmpChar(this.tokenStart, Dh) && this.cmpChar(this.tokenStart + 1, Na) ? this.UnicodeRange() : this.Identifier();
    case 9: {
      const t = this.charCodeAt(this.tokenStart);
      if (t === Ih || t === Lh || t === Na || t === Ph) {
        return this.Operator();
      }
      t === Eh && this.error("Hex or identifier is expected", this.tokenStart + 1);
      break;
    }
  }
}
var za = { getNode: bt };
var Oh = 35, Nh = 38, zh = 42, Mh = 43, Rh = 47, Ma = 46, Fh = 62, Bh = 124, _h = 126;
function qh(e, t) {
  t.last !== null && t.last.type !== "Combinator" && e !== null && e.type !== "Combinator" && t.push({ type: "Combinator", loc: null, name: " " });
}
function Uh() {
  switch (this.tokenType) {
    case 19:
      return this.AttributeSelector();
    case 4:
      return this.IdSelector();
    case 16:
      return this.lookupType(1) === 16 ? this.PseudoElementSelector() : this.PseudoClassSelector();
    case 1:
      return this.TypeSelector();
    case 10:
    case 11:
      return this.Percentage();
    case 12:
      this.charCodeAt(this.tokenStart) === Ma && this.error("Identifier is expected", this.tokenStart + 1);
      break;
    case 9: {
      switch (this.charCodeAt(this.tokenStart)) {
        case Mh:
        case Fh:
        case _h:
        case Rh:
          return this.Combinator();
        case Ma:
          return this.ClassSelector();
        case zh:
        case Bh:
          return this.TypeSelector();
        case Oh:
          return this.IdSelector();
        case Nh:
          return this.NestingSelector();
      }
      break;
    }
  }
}
var Ra = { onWhiteSpace: qh, getNode: Uh };
function Fa() {
  return this.createSingleNodeList(this.Raw(this.tokenIndex, null, false));
}
function Ba() {
  const e = this.createList();
  if (this.skipSC(), e.push(this.Identifier()), this.skipSC(), this.tokenType === 18) {
    e.push(this.Operator());
    const t = this.tokenIndex, r = this.parseCustomProperty ? this.Value(null) : this.Raw(this.tokenIndex, this.consumeUntilExclamationMarkOrSemicolon, false);
    if (r.type === "Value" && r.children.isEmpty) {
      for (let n = t - this.tokenIndex; n <= 0; n++) {
        if (this.lookupType(n) === 13) {
          r.children.appendData({
            type: "WhiteSpace",
            loc: null,
            value: " "
          });
          break;
        }
      }
    }
    e.push(r);
  }
  return e;
}
function _a(e) {
  return e !== null && e.type === "Operator" && (e.value[e.value.length - 1] === "-" || e.value[e.value.length - 1] === "+");
}
var qa = {
  getNode: bt,
  onWhiteSpace(e, t) {
    _a(e) && (e.value = " " + e.value), _a(t.last) && (t.last.value += " ");
  },
  expression: Fa,
  var: Ba
};
var Ua = {
  parse: {
    prelude: null,
    block() {
      return this.Block(true);
    }
  }
};
var ja = {
  parse: {
    prelude() {
      const e = this.createList();
      switch (this.skipSC(), this.tokenType) {
        case 5:
          e.push(this.String());
          break;
        case 7:
        case 2:
          e.push(this.Url());
          break;
        default:
          this.error("String or url() is expected");
      }
      return (this.lookupNonWSType(0) === 1 || this.lookupNonWSType(0) === 21) && e.push(this.MediaQueryList()), e;
    },
    block: null
  }
};
var Wa = {
  parse: {
    prelude() {
      return this.createSingleNodeList(this.MediaQueryList());
    },
    block(e = false) {
      return this.Block(e);
    }
  }
};
var Ha = {
  parse: {
    prelude() {
      return this.createSingleNodeList(this.SelectorList());
    },
    block() {
      return this.Block(true);
    }
  }
};
var Ya = {
  parse: {
    prelude() {
      return this.createSingleNodeList(this.SelectorList());
    },
    block() {
      return this.Block(true);
    }
  }
};
function jh() {
  return this.createSingleNodeList(this.Raw(this.tokenIndex, null, false));
}
function Wh() {
  return this.skipSC(), this.tokenType === 1 && this.lookupNonWSType(1) === 16 ? this.createSingleNodeList(this.Declaration()) : Ga.call(this);
}
function Ga() {
  let e = this.createList(), t;
  this.skipSC();
  e: while (!this.eof) {
    switch (this.tokenType) {
      case 25:
      case 13:
        this.next();
        continue;
      case 2:
        t = this.Function(jh, this.scope.AtrulePrelude);
        break;
      case 1:
        t = this.Identifier();
        break;
      case 21:
        t = this.Parentheses(Wh, this.scope.AtrulePrelude);
        break;
      default:
        break e;
    }
    e.push(t);
  }
  return e;
}
var Va = {
  parse: {
    prelude() {
      const e = Ga.call(this);
      return this.getFirstListNode(e) === null && this.error("Condition is expected"), e;
    },
    block(e = false) {
      return this.Block(e);
    }
  }
};
var Ka = {
  "font-face": Ua,
  import: ja,
  media: Wa,
  nest: Ha,
  page: Ya,
  supports: Va
};
var De = {
  parse() {
    return this.createSingleNodeList(this.SelectorList());
  }
}, Fo = {
  parse() {
    return this.createSingleNodeList(this.Selector());
  }
}, Qa = {
  parse() {
    return this.createSingleNodeList(this.Identifier());
  }
}, er = {
  parse() {
    return this.createSingleNodeList(this.Nth());
  }
}, Xa = {
  dir: Qa,
  has: De,
  lang: Qa,
  matches: De,
  is: De,
  "-moz-any": De,
  "-webkit-any": De,
  where: De,
  not: De,
  "nth-child": er,
  "nth-last-child": er,
  "nth-last-of-type": er,
  "nth-of-type": er,
  slotted: Fo,
  host: Fo,
  "host-context": Fo
};
var Bo = {};
b(Bo, {
  AnPlusB: () => Qr,
  Atrule: () => $r,
  AtrulePrelude: () => Jr,
  AttributeSelector: () => rn,
  Block: () => on,
  Brackets: () => sn,
  CDC: () => cn,
  CDO: () => pn,
  ClassSelector: () => mn,
  Combinator: () => dn,
  Comment: () => bn,
  Declaration: () => yn,
  DeclarationList: () => vn,
  Dimension: () => Cn,
  Function: () => Tn,
  Hash: () => Ln,
  IdSelector: () => On,
  Identifier: () => In,
  MediaFeature: () => zn,
  MediaQuery: () => Rn,
  MediaQueryList: () => Bn,
  NestingSelector: () => qn,
  Nth: () => jn,
  Number: () => Hn,
  Operator: () => Gn,
  Parentheses: () => Kn,
  Percentage: () => Xn,
  PseudoClassSelector: () => Zn,
  PseudoElementSelector: () => eo,
  Ratio: () => ro,
  Raw: () => oo,
  Rule: () => ao,
  Selector: () => lo,
  SelectorList: () => uo,
  String: () => go,
  StyleSheet: () => xo,
  TypeSelector: () => wo,
  UnicodeRange: () => Co,
  Url: () => Io,
  Value: () => Oo,
  WhiteSpace: () => zo
});
var $a = {
  parseContext: {
    default: "StyleSheet",
    stylesheet: "StyleSheet",
    atrule: "Atrule",
    atrulePrelude(e) {
      return this.AtrulePrelude(e.atrule ? String(e.atrule) : null);
    },
    mediaQueryList: "MediaQueryList",
    mediaQuery: "MediaQuery",
    rule: "Rule",
    selectorList: "SelectorList",
    selector: "Selector",
    block() {
      return this.Block(true);
    },
    declarationList: "DeclarationList",
    declaration: "Declaration",
    value: "Value"
  },
  scope: Ro,
  atrule: Ka,
  pseudo: Xa,
  node: Bo
};
var Za = { node: gt };
var Ja = Vr({ ...Oa, ...$a, ...Za });
var lb = "2.3.0";
function _o(e) {
  const t = {};
  for (const r in e) {
    let n = e[r];
    n && (Array.isArray(n) || n instanceof D ? n = n.map(_o) : n.constructor === Object && (n = _o(n))), t[r] = n;
  }
  return t;
}
var ts = {};
b(ts, { decode: () => Hh, encode: () => Yh });
var es = 92;
function Hh(e) {
  let t = e.length - 1, r = "";
  for (let n = 0; n < e.length; n++) {
    let o = e.charCodeAt(n);
    if (o === es) {
      if (n === t) {
        break;
      }
      if (o = e.charCodeAt(++n), $(es, o)) {
        const i2 = n - 1, s = se(e, i2);
        n = s - 1, r += Re(e.substring(i2 + 1, s));
      } else {
        o === 13 && e.charCodeAt(n + 1) === 10 && n++;
      }
    } else {
      r += e[n];
    }
  }
  return r;
}
function Yh(e) {
  let t = "";
  if (e.length === 1 && e.charCodeAt(0) === 45) {
    return "\\-";
  }
  for (let r = 0; r < e.length; r++) {
    const n = e.charCodeAt(r);
    if (n === 0) {
      t += "�";
      continue;
    }
    if (n <= 31 || n === 127 || n >= 48 && n <= 57 && (r === 0 || r === 1 && e.charCodeAt(0) === 45)) {
      t += "\\" + n.toString(16) + " ";
      continue;
    }
    Ne(n) ? t += e.charAt(r) : t += "\\" + e.charAt(r);
  }
  return t;
}
var {
  tokenize: fb,
  parse: db,
  generate: gb,
  lexer: bb,
  createLexer: xb,
  walk: yb,
  find: kb,
  findLast: wb,
  findAll: vb,
  toPlainObject: Sb,
  fromPlainObject: Cb,
  fork: Ab
} = Ja;
const csstree = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  Lexer: Ke,
  List: D,
  TokenStream: rt,
  clone: _o,
  createLexer: xb,
  createSyntax: Vr,
  definitionSyntax: $i,
  find: kb,
  findAll: vb,
  findLast: wb,
  fork: Ab,
  fromPlainObject: Cb,
  generate: gb,
  ident: ts,
  isCustomProperty: Mt,
  keyword: zt,
  lexer: bb,
  parse: db,
  property: kr,
  string: fo,
  toPlainObject: Sb,
  tokenNames: Fe,
  tokenTypes: $e,
  tokenize: fb,
  url: Po,
  vendorPrefix: Ym,
  version: lb,
  walk: yb
}, Symbol.toStringTag, { value: "Module" }));
var buf, bufIdx = 0, hexBytes = [], i;
for (i = 0; i < 256; i++) {
  hexBytes[i] = (i + 256).toString(16).substr(1);
}
uuid$1.BUFFER_SIZE = 4096;
uuid$1.bin = uuidBin;
uuid$1.clearBuffer = () => {
  buf = null;
  bufIdx = 0;
};
uuid$1.test = (uuid2) => {
  if (typeof uuid2 === "string") {
    return /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(uuid2);
  }
  return false;
};
var crypt0;
if (typeof crypto !== "undefined") {
  crypt0 = crypto;
} else if (typeof window !== "undefined" && typeof window.msCrypto !== "undefined") {
  crypt0 = window.msCrypto;
}
if (typeof module !== "undefined" && typeof require === "function") {
  crypt0 = crypt0 || require("crypto");
  module.exports = uuid$1;
} else if (typeof window !== "undefined") {
  window.uuid = uuid$1;
}
uuid$1.randomBytes = (() => {
  if (crypt0) {
    if (crypt0.randomBytes) {
      return crypt0.randomBytes;
    }
    if (crypt0.getRandomValues) {
      if (typeof Uint8Array.prototype.slice !== "function") {
        return (n) => {
          var bytes = new Uint8Array(n);
          crypt0.getRandomValues(bytes);
          return Array.from(bytes);
        };
      }
      return (n) => {
        var bytes = new Uint8Array(n);
        crypt0.getRandomValues(bytes);
        return bytes;
      };
    }
  }
  return (n) => {
    var i2, r = [];
    for (i2 = 0; i2 < n; i2++) {
      r.push(Math.floor(Math.random() * 256));
    }
    return r;
  };
})();
function randomBytesBuffered(n) {
  if (!buf || bufIdx + n > uuid$1.BUFFER_SIZE) {
    bufIdx = 0;
    buf = uuid$1.randomBytes(uuid$1.BUFFER_SIZE);
  }
  return buf.slice(bufIdx, bufIdx += n);
}
function uuidBin() {
  var b2 = randomBytesBuffered(16);
  b2[6] = b2[6] & 15 | 64;
  b2[8] = b2[8] & 63 | 128;
  return b2;
}
function uuid$1() {
  var b2 = uuidBin();
  return hexBytes[b2[0]] + hexBytes[b2[1]] + hexBytes[b2[2]] + hexBytes[b2[3]] + "-" + hexBytes[b2[4]] + hexBytes[b2[5]] + "-" + hexBytes[b2[6]] + hexBytes[b2[7]] + "-" + hexBytes[b2[8]] + hexBytes[b2[9]] + "-" + hexBytes[b2[10]] + hexBytes[b2[11]] + hexBytes[b2[12]] + hexBytes[b2[13]] + hexBytes[b2[14]] + hexBytes[b2[15]];
}
const uuid = uuid$1;
const cssTree = csstree;
function getOrAssignDomId(node) {
  let domId = node.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID);
  if (!domId) {
    domId = `odid-${uuid()}`;
    node.setAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID, domId);
  }
  return domId;
}
function setWebviewId(webviewId) {
  window._onlookWebviewId = webviewId;
}
function getWebviewId() {
  const webviewId = window._onlookWebviewId;
  if (!webviewId) {
    console.warn("Webview id not found");
    electron.ipcRenderer.sendToHost(WebviewChannels.GET_WEBVIEW_ID);
    return "";
  }
  return webviewId;
}
function elementFromDomId(domId) {
  return document.querySelector(`[${EditorAttributes.DATA_ONLOOK_DOM_ID}="${domId}"]`);
}
function selectorFromDomId(domId, escape = false) {
  const selector = `[${EditorAttributes.DATA_ONLOOK_DOM_ID}="${domId}"]`;
  if (!escape) {
    return selector;
  }
  return escapeSelector(selector);
}
function escapeSelector(selector) {
  return CSS.escape(selector);
}
function isValidHtmlElement(element) {
  return element && element instanceof Node && element.nodeType === Node.ELEMENT_NODE && !DOM_IGNORE_TAGS.includes(element.tagName) && !element.hasAttribute(EditorAttributes.DATA_ONLOOK_IGNORE) && element.style.display !== "none";
}
function assertNever(n) {
  throw new Error(`Expected \`never\`, found: ${JSON.stringify(n)}`);
}
function getOid(node) {
  return node.getAttribute(EditorAttributes.DATA_ONLOOK_ID);
}
function getInstanceId(node) {
  return node.getAttribute(EditorAttributes.DATA_ONLOOK_INSTANCE_ID);
}
const processDebounced = debounce((root) => {
  const webviewId = getWebviewId();
  if (!webviewId) {
    console.warn("Webview id not found, skipping dom processing");
    return false;
  }
  const layerMap = buildLayerTree(root);
  if (!layerMap) {
    console.warn("Error building layer tree, root element is null");
    return false;
  }
  const rootDomId = root.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID);
  if (!rootDomId) {
    console.warn("Root dom id not found");
    return false;
  }
  const rootNode = layerMap.get(rootDomId);
  if (!rootNode) {
    console.warn("Root node not found");
    return false;
  }
  electron.ipcRenderer.sendToHost(WebviewChannels.DOM_PROCESSED, {
    layerMap: Object.fromEntries(layerMap),
    rootNode
  });
  return true;
}, 500);
function processDom(root = document.body) {
  if (!getWebviewId()) {
    console.warn("Webview id not found, skipping dom processing");
    return false;
  }
  processDebounced(root);
  return true;
}
function buildLayerTree(root) {
  if (!isValidHtmlElement(root)) {
    return null;
  }
  const layerMap = /* @__PURE__ */ new Map();
  const treeWalker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => isValidHtmlElement(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP
  });
  const rootLayerNode = processNode(root);
  rootLayerNode.children = [];
  layerMap.set(rootLayerNode.domId, rootLayerNode);
  let currentNode = treeWalker.nextNode();
  while (currentNode) {
    const layerNode = processNode(currentNode);
    layerNode.children = [];
    const parentElement = currentNode.parentElement;
    if (parentElement) {
      const parentDomId = parentElement.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID);
      if (parentDomId) {
        layerNode.parent = parentDomId;
        const parentNode = layerMap.get(parentDomId);
        if (parentNode && parentNode.children) {
          parentNode.children.push(layerNode.domId);
        }
      }
    }
    layerMap.set(layerNode.domId, layerNode);
    currentNode = treeWalker.nextNode();
  }
  return layerMap;
}
function processNode(node) {
  const domId = getOrAssignDomId(node);
  const oid = getOid(node);
  const instanceId = getInstanceId(node);
  const textContent = Array.from(node.childNodes).map((node2) => node2.nodeType === Node.TEXT_NODE ? node2.textContent : "").join(" ").trim().slice(0, 500);
  const style = window.getComputedStyle(node);
  const component = node.getAttribute(EditorAttributes.DATA_ONLOOK_COMPONENT_NAME);
  const layerNode = {
    domId,
    oid: oid || null,
    instanceId: instanceId || null,
    textContent: textContent || "",
    tagName: node.tagName.toLowerCase(),
    isVisible: style.visibility !== "hidden",
    component: component || null,
    webviewId: getWebviewId(),
    children: null,
    parent: null
  };
  return layerNode;
}
const jsonClone = (obj) => JSON.parse(JSON.stringify(obj));
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var colorNamer = { exports: {} };
var chroma$1 = { exports: {} };
var chroma = chroma$1.exports;
var hasRequiredChroma;
function requireChroma() {
  if (hasRequiredChroma) return chroma$1.exports;
  hasRequiredChroma = 1;
  (function(module2, exports2) {
    /**
     * @license
     *
     * chroma.js - JavaScript library for color conversions
     * 
     * Copyright (c) 2011-2017, Gregor Aisch
     * All rights reserved.
     * 
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are met:
     * 
     * 1. Redistributions of source code must retain the above copyright notice, this
     *    list of conditions and the following disclaimer.
     * 
     * 2. Redistributions in binary form must reproduce the above copyright notice,
     *    this list of conditions and the following disclaimer in the documentation
     *    and/or other materials provided with the distribution.
     * 
     * 3. The name Gregor Aisch may not be used to endorse or promote products
     *    derived from this software without specific prior written permission.
     * 
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
     * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
     * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
     * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     */
    (function() {
      var Color, DEG2RAD, LAB_CONSTANTS, PI, PITHIRD, RAD2DEG, TWOPI, _average_lrgb, _guess_formats, _guess_formats_sorted, _input, _interpolators, abs, atan2, bezier, blend, blend_f, brewer, burn, chroma2, clip_rgb, cmyk2rgb, cos, css2rgb, darken, dodge, each, floor, hcg2rgb, hex2rgb, hsi2rgb, hsl2css, hsl2rgb, hsv2rgb, interpolate, interpolate_hsx, interpolate_lab, interpolate_lrgb, interpolate_num, interpolate_rgb, lab2lch, lab2rgb, lab_xyz, lch2lab, lch2rgb, lighten, limit, log, luminance_x, m, max, multiply, normal, num2rgb, overlay, pow, rgb2cmyk, rgb2css, rgb2hcg, rgb2hex, rgb2hsi, rgb2hsl, rgb2hsv, rgb2lab, rgb2lch, rgb2luminance, rgb2num, rgb2temperature, rgb2xyz, rgb_xyz, rnd, root, round, screen, sin, sqrt, temperature2rgb, type, unpack, w3cx11, xyz_lab, xyz_rgb, slice = [].slice;
      type = function() {
        var classToType, len, name, o, ref;
        classToType = {};
        ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
        for (o = 0, len = ref.length; o < len; o++) {
          name = ref[o];
          classToType["[object " + name + "]"] = name.toLowerCase();
        }
        return function(obj) {
          var strType;
          strType = Object.prototype.toString.call(obj);
          return classToType[strType] || "object";
        };
      }();
      limit = function(x2, min, max2) {
        if (min == null) {
          min = 0;
        }
        if (max2 == null) {
          max2 = 1;
        }
        if (x2 < min) {
          x2 = min;
        }
        if (x2 > max2) {
          x2 = max2;
        }
        return x2;
      };
      unpack = function(args) {
        if (args.length >= 3) {
          return Array.prototype.slice.call(args);
        } else {
          return args[0];
        }
      };
      clip_rgb = function(rgb) {
        var i2, o;
        rgb._clipped = false;
        rgb._unclipped = rgb.slice(0);
        for (i2 = o = 0; o < 3; i2 = ++o) {
          if (i2 < 3) {
            if (rgb[i2] < 0 || rgb[i2] > 255) {
              rgb._clipped = true;
            }
            if (rgb[i2] < 0) {
              rgb[i2] = 0;
            }
            if (rgb[i2] > 255) {
              rgb[i2] = 255;
            }
          } else if (i2 === 3) {
            if (rgb[i2] < 0) {
              rgb[i2] = 0;
            }
            if (rgb[i2] > 1) {
              rgb[i2] = 1;
            }
          }
        }
        if (!rgb._clipped) {
          delete rgb._unclipped;
        }
        return rgb;
      };
      PI = Math.PI, round = Math.round, cos = Math.cos, floor = Math.floor, pow = Math.pow, log = Math.log, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, max = Math.max, abs = Math.abs;
      TWOPI = PI * 2;
      PITHIRD = PI / 3;
      DEG2RAD = PI / 180;
      RAD2DEG = 180 / PI;
      chroma2 = function() {
        if (arguments[0] instanceof Color) {
          return arguments[0];
        }
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, arguments, function() {
        });
      };
      chroma2["default"] = chroma2;
      _interpolators = [];
      if (module2 !== null && module2.exports != null) {
        module2.exports = chroma2;
      }
      {
        root = exports2 !== null ? exports2 : this;
        root.chroma = chroma2;
      }
      chroma2.version = "1.4.1";
      _input = {};
      _guess_formats = [];
      _guess_formats_sorted = false;
      Color = function() {
        function Color2() {
          var arg, args, chk, len, len1, me2, mode, o, w2;
          me2 = this;
          args = [];
          for (o = 0, len = arguments.length; o < len; o++) {
            arg = arguments[o];
            if (arg != null) {
              args.push(arg);
            }
          }
          if (args.length > 1) {
            mode = args[args.length - 1];
          }
          if (_input[mode] != null) {
            me2._rgb = clip_rgb(_input[mode](unpack(args.slice(0, -1))));
          } else {
            if (!_guess_formats_sorted) {
              _guess_formats = _guess_formats.sort(function(a, b2) {
                return b2.p - a.p;
              });
              _guess_formats_sorted = true;
            }
            for (w2 = 0, len1 = _guess_formats.length; w2 < len1; w2++) {
              chk = _guess_formats[w2];
              mode = chk.test.apply(chk, args);
              if (mode) {
                break;
              }
            }
            if (mode) {
              me2._rgb = clip_rgb(_input[mode].apply(_input, args));
            }
          }
          if (me2._rgb == null) {
            console.warn("unknown format: " + args);
          }
          if (me2._rgb == null) {
            me2._rgb = [0, 0, 0];
          }
          if (me2._rgb.length === 3) {
            me2._rgb.push(1);
          }
        }
        Color2.prototype.toString = function() {
          return this.hex();
        };
        return Color2;
      }();
      chroma2._input = _input;
      /**
      	ColorBrewer colors for chroma.js
      
      	Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The 
      	Pennsylvania State University.
      
      	Licensed under the Apache License, Version 2.0 (the "License"); 
      	you may not use this file except in compliance with the License.
      	You may obtain a copy of the License at	
      	http://www.apache.org/licenses/LICENSE-2.0
      
      	Unless required by applicable law or agreed to in writing, software distributed
      	under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
      	CONDITIONS OF ANY KIND, either express or implied. See the License for the
      	specific language governing permissions and limitations under the License.
      
          @preserve
       */
      chroma2.brewer = brewer = {
        OrRd: ["#fff7ec", "#fee8c8", "#fdd49e", "#fdbb84", "#fc8d59", "#ef6548", "#d7301f", "#b30000", "#7f0000"],
        PuBu: ["#fff7fb", "#ece7f2", "#d0d1e6", "#a6bddb", "#74a9cf", "#3690c0", "#0570b0", "#045a8d", "#023858"],
        BuPu: ["#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6", "#8c6bb1", "#88419d", "#810f7c", "#4d004b"],
        Oranges: ["#fff5eb", "#fee6ce", "#fdd0a2", "#fdae6b", "#fd8d3c", "#f16913", "#d94801", "#a63603", "#7f2704"],
        BuGn: ["#f7fcfd", "#e5f5f9", "#ccece6", "#99d8c9", "#66c2a4", "#41ae76", "#238b45", "#006d2c", "#00441b"],
        YlOrBr: ["#ffffe5", "#fff7bc", "#fee391", "#fec44f", "#fe9929", "#ec7014", "#cc4c02", "#993404", "#662506"],
        YlGn: ["#ffffe5", "#f7fcb9", "#d9f0a3", "#addd8e", "#78c679", "#41ab5d", "#238443", "#006837", "#004529"],
        Reds: ["#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a", "#ef3b2c", "#cb181d", "#a50f15", "#67000d"],
        RdPu: ["#fff7f3", "#fde0dd", "#fcc5c0", "#fa9fb5", "#f768a1", "#dd3497", "#ae017e", "#7a0177", "#49006a"],
        Greens: ["#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#41ab5d", "#238b45", "#006d2c", "#00441b"],
        YlGnBu: ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"],
        Purples: ["#fcfbfd", "#efedf5", "#dadaeb", "#bcbddc", "#9e9ac8", "#807dba", "#6a51a3", "#54278f", "#3f007d"],
        GnBu: ["#f7fcf0", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081"],
        Greys: ["#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525", "#000000"],
        YlOrRd: ["#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#bd0026", "#800026"],
        PuRd: ["#f7f4f9", "#e7e1ef", "#d4b9da", "#c994c7", "#df65b0", "#e7298a", "#ce1256", "#980043", "#67001f"],
        Blues: ["#f7fbff", "#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6", "#2171b5", "#08519c", "#08306b"],
        PuBuGn: ["#fff7fb", "#ece2f0", "#d0d1e6", "#a6bddb", "#67a9cf", "#3690c0", "#02818a", "#016c59", "#014636"],
        Viridis: ["#440154", "#482777", "#3f4a8a", "#31678e", "#26838f", "#1f9d8a", "#6cce5a", "#b6de2b", "#fee825"],
        Spectral: ["#9e0142", "#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#e6f598", "#abdda4", "#66c2a5", "#3288bd", "#5e4fa2"],
        RdYlGn: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"],
        RdBu: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061"],
        PiYG: ["#8e0152", "#c51b7d", "#de77ae", "#f1b6da", "#fde0ef", "#f7f7f7", "#e6f5d0", "#b8e186", "#7fbc41", "#4d9221", "#276419"],
        PRGn: ["#40004b", "#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#f7f7f7", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837", "#00441b"],
        RdYlBu: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee090", "#ffffbf", "#e0f3f8", "#abd9e9", "#74add1", "#4575b4", "#313695"],
        BrBG: ["#543005", "#8c510a", "#bf812d", "#dfc27d", "#f6e8c3", "#f5f5f5", "#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"],
        RdGy: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#ffffff", "#e0e0e0", "#bababa", "#878787", "#4d4d4d", "#1a1a1a"],
        PuOr: ["#7f3b08", "#b35806", "#e08214", "#fdb863", "#fee0b6", "#f7f7f7", "#d8daeb", "#b2abd2", "#8073ac", "#542788", "#2d004b"],
        Set2: ["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3"],
        Accent: ["#7fc97f", "#beaed4", "#fdc086", "#ffff99", "#386cb0", "#f0027f", "#bf5b17", "#666666"],
        Set1: ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628", "#f781bf", "#999999"],
        Set3: ["#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462", "#b3de69", "#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f"],
        Dark2: ["#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", "#a6761d", "#666666"],
        Paired: ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"],
        Pastel2: ["#b3e2cd", "#fdcdac", "#cbd5e8", "#f4cae4", "#e6f5c9", "#fff2ae", "#f1e2cc", "#cccccc"],
        Pastel1: ["#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6", "#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2"]
      };
      (function() {
        var key, results;
        results = [];
        for (key in brewer) {
          results.push(brewer[key.toLowerCase()] = brewer[key]);
        }
        return results;
      })();
      w3cx11 = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflower: "#6495ed",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        laserlemon: "#ffff54",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrod: "#fafad2",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        maroon2: "#7f0000",
        maroon3: "#b03060",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        purple2: "#7f007f",
        purple3: "#a020f0",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32"
      };
      chroma2.colors = w3cx11;
      lab2rgb = function() {
        var a, args, b2, g2, l, r, x2, y2, z;
        args = unpack(arguments);
        l = args[0], a = args[1], b2 = args[2];
        y2 = (l + 16) / 116;
        x2 = isNaN(a) ? y2 : y2 + a / 500;
        z = isNaN(b2) ? y2 : y2 - b2 / 200;
        y2 = LAB_CONSTANTS.Yn * lab_xyz(y2);
        x2 = LAB_CONSTANTS.Xn * lab_xyz(x2);
        z = LAB_CONSTANTS.Zn * lab_xyz(z);
        r = xyz_rgb(3.2404542 * x2 - 1.5371385 * y2 - 0.4985314 * z);
        g2 = xyz_rgb(-0.969266 * x2 + 1.8760108 * y2 + 0.041556 * z);
        b2 = xyz_rgb(0.0556434 * x2 - 0.2040259 * y2 + 1.0572252 * z);
        return [r, g2, b2, args.length > 3 ? args[3] : 1];
      };
      xyz_rgb = function(r) {
        return 255 * (r <= 304e-5 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
      };
      lab_xyz = function(t) {
        if (t > LAB_CONSTANTS.t1) {
          return t * t * t;
        } else {
          return LAB_CONSTANTS.t2 * (t - LAB_CONSTANTS.t0);
        }
      };
      LAB_CONSTANTS = {
        Kn: 18,
        Xn: 0.95047,
        Yn: 1,
        Zn: 1.08883,
        t0: 0.137931034,
        t1: 0.206896552,
        t2: 0.12841855,
        t3: 8856452e-9
      };
      rgb2lab = function() {
        var b2, g2, r, ref, ref1, x2, y2, z;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        ref1 = rgb2xyz(r, g2, b2), x2 = ref1[0], y2 = ref1[1], z = ref1[2];
        return [116 * y2 - 16, 500 * (x2 - y2), 200 * (y2 - z)];
      };
      rgb_xyz = function(r) {
        if ((r /= 255) <= 0.04045) {
          return r / 12.92;
        } else {
          return pow((r + 0.055) / 1.055, 2.4);
        }
      };
      xyz_lab = function(t) {
        if (t > LAB_CONSTANTS.t3) {
          return pow(t, 1 / 3);
        } else {
          return t / LAB_CONSTANTS.t2 + LAB_CONSTANTS.t0;
        }
      };
      rgb2xyz = function() {
        var b2, g2, r, ref, x2, y2, z;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        r = rgb_xyz(r);
        g2 = rgb_xyz(g2);
        b2 = rgb_xyz(b2);
        x2 = xyz_lab((0.4124564 * r + 0.3575761 * g2 + 0.1804375 * b2) / LAB_CONSTANTS.Xn);
        y2 = xyz_lab((0.2126729 * r + 0.7151522 * g2 + 0.072175 * b2) / LAB_CONSTANTS.Yn);
        z = xyz_lab((0.0193339 * r + 0.119192 * g2 + 0.9503041 * b2) / LAB_CONSTANTS.Zn);
        return [x2, y2, z];
      };
      chroma2.lab = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["lab"]), function() {
        });
      };
      _input.lab = lab2rgb;
      Color.prototype.lab = function() {
        return rgb2lab(this._rgb);
      };
      bezier = function(colors) {
        var I2, I0, I1, c, lab0, lab1, lab2, lab3, ref, ref1, ref2;
        colors = function() {
          var len, o, results;
          results = [];
          for (o = 0, len = colors.length; o < len; o++) {
            c = colors[o];
            results.push(chroma2(c));
          }
          return results;
        }();
        if (colors.length === 2) {
          ref = function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors.length; o < len; o++) {
              c = colors[o];
              results.push(c.lab());
            }
            return results;
          }(), lab0 = ref[0], lab1 = ref[1];
          I2 = function(t) {
            var i2, lab;
            lab = function() {
              var o, results;
              results = [];
              for (i2 = o = 0; o <= 2; i2 = ++o) {
                results.push(lab0[i2] + t * (lab1[i2] - lab0[i2]));
              }
              return results;
            }();
            return chroma2.lab.apply(chroma2, lab);
          };
        } else if (colors.length === 3) {
          ref1 = function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors.length; o < len; o++) {
              c = colors[o];
              results.push(c.lab());
            }
            return results;
          }(), lab0 = ref1[0], lab1 = ref1[1], lab2 = ref1[2];
          I2 = function(t) {
            var i2, lab;
            lab = function() {
              var o, results;
              results = [];
              for (i2 = o = 0; o <= 2; i2 = ++o) {
                results.push((1 - t) * (1 - t) * lab0[i2] + 2 * (1 - t) * t * lab1[i2] + t * t * lab2[i2]);
              }
              return results;
            }();
            return chroma2.lab.apply(chroma2, lab);
          };
        } else if (colors.length === 4) {
          ref2 = function() {
            var len, o, results;
            results = [];
            for (o = 0, len = colors.length; o < len; o++) {
              c = colors[o];
              results.push(c.lab());
            }
            return results;
          }(), lab0 = ref2[0], lab1 = ref2[1], lab2 = ref2[2], lab3 = ref2[3];
          I2 = function(t) {
            var i2, lab;
            lab = function() {
              var o, results;
              results = [];
              for (i2 = o = 0; o <= 2; i2 = ++o) {
                results.push((1 - t) * (1 - t) * (1 - t) * lab0[i2] + 3 * (1 - t) * (1 - t) * t * lab1[i2] + 3 * (1 - t) * t * t * lab2[i2] + t * t * t * lab3[i2]);
              }
              return results;
            }();
            return chroma2.lab.apply(chroma2, lab);
          };
        } else if (colors.length === 5) {
          I0 = bezier(colors.slice(0, 3));
          I1 = bezier(colors.slice(2, 5));
          I2 = function(t) {
            if (t < 0.5) {
              return I0(t * 2);
            } else {
              return I1((t - 0.5) * 2);
            }
          };
        }
        return I2;
      };
      chroma2.bezier = function(colors) {
        var f;
        f = bezier(colors);
        f.scale = function() {
          return chroma2.scale(f);
        };
        return f;
      };
      chroma2.cubehelix = function(start, rotations, hue, gamma, lightness) {
        var dh2, dl2, f;
        if (start == null) {
          start = 300;
        }
        if (rotations == null) {
          rotations = -1.5;
        }
        if (hue == null) {
          hue = 1;
        }
        if (gamma == null) {
          gamma = 1;
        }
        if (lightness == null) {
          lightness = [0, 1];
        }
        dh2 = 0;
        if (type(lightness) === "array") {
          dl2 = lightness[1] - lightness[0];
        } else {
          dl2 = 0;
          lightness = [lightness, lightness];
        }
        f = function(fract) {
          var a, amp, b2, cos_a, g2, h2, l, r, sin_a;
          a = TWOPI * ((start + 120) / 360 + rotations * fract);
          l = pow(lightness[0] + dl2 * fract, gamma);
          h2 = dh2 !== 0 ? hue[0] + fract * dh2 : hue;
          amp = h2 * l * (1 - l) / 2;
          cos_a = cos(a);
          sin_a = sin(a);
          r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
          g2 = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
          b2 = l + amp * (1.97294 * cos_a);
          return chroma2(clip_rgb([r * 255, g2 * 255, b2 * 255, 1]));
        };
        f.start = function(s) {
          if (s == null) {
            return start;
          }
          start = s;
          return f;
        };
        f.rotations = function(r) {
          if (r == null) {
            return rotations;
          }
          rotations = r;
          return f;
        };
        f.gamma = function(g2) {
          if (g2 == null) {
            return gamma;
          }
          gamma = g2;
          return f;
        };
        f.hue = function(h2) {
          if (h2 == null) {
            return hue;
          }
          hue = h2;
          if (type(hue) === "array") {
            dh2 = hue[1] - hue[0];
            if (dh2 === 0) {
              hue = hue[1];
            }
          } else {
            dh2 = 0;
          }
          return f;
        };
        f.lightness = function(h2) {
          if (h2 == null) {
            return lightness;
          }
          if (type(h2) === "array") {
            lightness = h2;
            dl2 = h2[1] - h2[0];
          } else {
            lightness = [h2, h2];
            dl2 = 0;
          }
          return f;
        };
        f.scale = function() {
          return chroma2.scale(f);
        };
        f.hue(hue);
        return f;
      };
      chroma2.random = function() {
        var code, digits, o;
        digits = "0123456789abcdef";
        code = "#";
        for (o = 0; o < 6; ++o) {
          code += digits.charAt(floor(Math.random() * 16));
        }
        return new Color(code);
      };
      _interpolators = [];
      interpolate = function(col1, col2, f, m2) {
        var interpol, len, o, res;
        if (f == null) {
          f = 0.5;
        }
        if (m2 == null) {
          m2 = "rgb";
        }
        if (type(col1) !== "object") {
          col1 = chroma2(col1);
        }
        if (type(col2) !== "object") {
          col2 = chroma2(col2);
        }
        for (o = 0, len = _interpolators.length; o < len; o++) {
          interpol = _interpolators[o];
          if (m2 === interpol[0]) {
            res = interpol[1](col1, col2, f, m2);
            break;
          }
        }
        if (res == null) {
          throw "color mode " + m2 + " is not supported";
        }
        return res.alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
      };
      chroma2.interpolate = interpolate;
      Color.prototype.interpolate = function(col2, f, m2) {
        return interpolate(this, col2, f, m2);
      };
      chroma2.mix = interpolate;
      Color.prototype.mix = Color.prototype.interpolate;
      _input.rgb = function() {
        var k2, ref, results, v2;
        ref = unpack(arguments);
        results = [];
        for (k2 in ref) {
          v2 = ref[k2];
          results.push(v2);
        }
        return results;
      };
      chroma2.rgb = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["rgb"]), function() {
        });
      };
      Color.prototype.rgb = function(round2) {
        if (round2 == null) {
          round2 = true;
        }
        if (round2) {
          return this._rgb.map(Math.round).slice(0, 3);
        } else {
          return this._rgb.slice(0, 3);
        }
      };
      Color.prototype.rgba = function(round2) {
        if (round2 == null) {
          round2 = true;
        }
        if (!round2) {
          return this._rgb.slice(0);
        }
        return [Math.round(this._rgb[0]), Math.round(this._rgb[1]), Math.round(this._rgb[2]), this._rgb[3]];
      };
      _guess_formats.push({
        p: 3,
        test: function(n) {
          var a;
          a = unpack(arguments);
          if (type(a) === "array" && a.length === 3) {
            return "rgb";
          }
          if (a.length === 4 && type(a[3]) === "number" && a[3] >= 0 && a[3] <= 1) {
            return "rgb";
          }
        }
      });
      _input.lrgb = _input.rgb;
      interpolate_lrgb = function(col1, col2, f, m2) {
        var xyz0, xyz1;
        xyz0 = col1._rgb;
        xyz1 = col2._rgb;
        return new Color(sqrt(pow(xyz0[0], 2) * (1 - f) + pow(xyz1[0], 2) * f), sqrt(pow(xyz0[1], 2) * (1 - f) + pow(xyz1[1], 2) * f), sqrt(pow(xyz0[2], 2) * (1 - f) + pow(xyz1[2], 2) * f), m2);
      };
      _average_lrgb = function(colors) {
        var col, f, len, o, rgb, xyz;
        f = 1 / colors.length;
        xyz = [0, 0, 0, 0];
        for (o = 0, len = colors.length; o < len; o++) {
          col = colors[o];
          rgb = col._rgb;
          xyz[0] += pow(rgb[0], 2) * f;
          xyz[1] += pow(rgb[1], 2) * f;
          xyz[2] += pow(rgb[2], 2) * f;
          xyz[3] += rgb[3] * f;
        }
        xyz[0] = sqrt(xyz[0]);
        xyz[1] = sqrt(xyz[1]);
        xyz[2] = sqrt(xyz[2]);
        if (xyz[3] > 1) {
          xyz[3] = 1;
        }
        return new Color(clip_rgb(xyz));
      };
      _interpolators.push(["lrgb", interpolate_lrgb]);
      chroma2.average = function(colors, mode) {
        var A2, alpha, c, cnt, dx, dy, first, i2, l, len, o, xyz, xyz2;
        if (mode == null) {
          mode = "rgb";
        }
        l = colors.length;
        colors = colors.map(function(c2) {
          return chroma2(c2);
        });
        first = colors.splice(0, 1)[0];
        if (mode === "lrgb") {
          return _average_lrgb(colors);
        }
        xyz = first.get(mode);
        cnt = [];
        dx = 0;
        dy = 0;
        for (i2 in xyz) {
          xyz[i2] = xyz[i2] || 0;
          cnt.push(isNaN(xyz[i2]) ? 0 : 1);
          if (mode.charAt(i2) === "h" && !isNaN(xyz[i2])) {
            A2 = xyz[i2] / 180 * PI;
            dx += cos(A2);
            dy += sin(A2);
          }
        }
        alpha = first.alpha();
        for (o = 0, len = colors.length; o < len; o++) {
          c = colors[o];
          xyz2 = c.get(mode);
          alpha += c.alpha();
          for (i2 in xyz) {
            if (!isNaN(xyz2[i2])) {
              cnt[i2] += 1;
              if (mode.charAt(i2) === "h") {
                A2 = xyz2[i2] / 180 * PI;
                dx += cos(A2);
                dy += sin(A2);
              } else {
                xyz[i2] += xyz2[i2];
              }
            }
          }
        }
        for (i2 in xyz) {
          if (mode.charAt(i2) === "h") {
            A2 = atan2(dy / cnt[i2], dx / cnt[i2]) / PI * 180;
            while (A2 < 0) {
              A2 += 360;
            }
            while (A2 >= 360) {
              A2 -= 360;
            }
            xyz[i2] = A2;
          } else {
            xyz[i2] = xyz[i2] / cnt[i2];
          }
        }
        return chroma2(xyz, mode).alpha(alpha / l);
      };
      hex2rgb = function(hex) {
        var a, b2, g2, r, rgb, u;
        if (hex.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {
          if (hex.length === 4 || hex.length === 7) {
            hex = hex.substr(1);
          }
          if (hex.length === 3) {
            hex = hex.split("");
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
          }
          u = parseInt(hex, 16);
          r = u >> 16;
          g2 = u >> 8 & 255;
          b2 = u & 255;
          return [r, g2, b2, 1];
        }
        if (hex.match(/^#?([A-Fa-f0-9]{8})$/)) {
          if (hex.length === 9) {
            hex = hex.substr(1);
          }
          u = parseInt(hex, 16);
          r = u >> 24 & 255;
          g2 = u >> 16 & 255;
          b2 = u >> 8 & 255;
          a = round((u & 255) / 255 * 100) / 100;
          return [r, g2, b2, a];
        }
        if (_input.css != null && (rgb = _input.css(hex))) {
          return rgb;
        }
        throw "unknown color: " + hex;
      };
      rgb2hex = function(channels, mode) {
        var a, b2, g2, hxa, r, str, u;
        if (mode == null) {
          mode = "auto";
        }
        r = channels[0], g2 = channels[1], b2 = channels[2], a = channels[3];
        if (mode === "auto") {
          mode = a < 1 ? "rgba" : "rgb";
        }
        r = Math.round(r);
        g2 = Math.round(g2);
        b2 = Math.round(b2);
        u = r << 16 | g2 << 8 | b2;
        str = "000000" + u.toString(16);
        str = str.substr(str.length - 6);
        hxa = "0" + round(a * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        return "#" + function() {
          switch (mode.toLowerCase()) {
            case "rgba":
              return str + hxa;
            case "argb":
              return hxa + str;
            default:
              return str;
          }
        }();
      };
      _input.hex = function(h2) {
        return hex2rgb(h2);
      };
      chroma2.hex = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["hex"]), function() {
        });
      };
      Color.prototype.hex = function(mode) {
        if (mode == null) {
          mode = "auto";
        }
        return rgb2hex(this._rgb, mode);
      };
      _guess_formats.push({
        p: 4,
        test: function(n) {
          if (arguments.length === 1 && type(n) === "string") {
            return "hex";
          }
        }
      });
      hsl2rgb = function() {
        var args, b2, c, g2, h2, i2, l, o, r, ref, s, t1, t2, t3;
        args = unpack(arguments);
        h2 = args[0], s = args[1], l = args[2];
        if (s === 0) {
          r = g2 = b2 = l * 255;
        } else {
          t3 = [0, 0, 0];
          c = [0, 0, 0];
          t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
          t1 = 2 * l - t2;
          h2 /= 360;
          t3[0] = h2 + 1 / 3;
          t3[1] = h2;
          t3[2] = h2 - 1 / 3;
          for (i2 = o = 0; o <= 2; i2 = ++o) {
            if (t3[i2] < 0) {
              t3[i2] += 1;
            }
            if (t3[i2] > 1) {
              t3[i2] -= 1;
            }
            if (6 * t3[i2] < 1) {
              c[i2] = t1 + (t2 - t1) * 6 * t3[i2];
            } else if (2 * t3[i2] < 1) {
              c[i2] = t2;
            } else if (3 * t3[i2] < 2) {
              c[i2] = t1 + (t2 - t1) * (2 / 3 - t3[i2]) * 6;
            } else {
              c[i2] = t1;
            }
          }
          ref = [round(c[0] * 255), round(c[1] * 255), round(c[2] * 255)], r = ref[0], g2 = ref[1], b2 = ref[2];
        }
        if (args.length > 3) {
          return [r, g2, b2, args[3]];
        } else {
          return [r, g2, b2];
        }
      };
      rgb2hsl = function(r, g2, b2) {
        var h2, l, min, ref, s;
        if (r !== void 0 && r.length >= 3) {
          ref = r, r = ref[0], g2 = ref[1], b2 = ref[2];
        }
        r /= 255;
        g2 /= 255;
        b2 /= 255;
        min = Math.min(r, g2, b2);
        max = Math.max(r, g2, b2);
        l = (max + min) / 2;
        if (max === min) {
          s = 0;
          h2 = Number.NaN;
        } else {
          s = l < 0.5 ? (max - min) / (max + min) : (max - min) / (2 - max - min);
        }
        if (r === max) {
          h2 = (g2 - b2) / (max - min);
        } else if (g2 === max) {
          h2 = 2 + (b2 - r) / (max - min);
        } else if (b2 === max) {
          h2 = 4 + (r - g2) / (max - min);
        }
        h2 *= 60;
        if (h2 < 0) {
          h2 += 360;
        }
        return [h2, s, l];
      };
      chroma2.hsl = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["hsl"]), function() {
        });
      };
      _input.hsl = hsl2rgb;
      Color.prototype.hsl = function() {
        return rgb2hsl(this._rgb);
      };
      hsv2rgb = function() {
        var args, b2, f, g2, h2, i2, p, q2, r, ref, ref1, ref2, ref3, ref4, ref5, s, t, v2;
        args = unpack(arguments);
        h2 = args[0], s = args[1], v2 = args[2];
        v2 *= 255;
        if (s === 0) {
          r = g2 = b2 = v2;
        } else {
          if (h2 === 360) {
            h2 = 0;
          }
          if (h2 > 360) {
            h2 -= 360;
          }
          if (h2 < 0) {
            h2 += 360;
          }
          h2 /= 60;
          i2 = floor(h2);
          f = h2 - i2;
          p = v2 * (1 - s);
          q2 = v2 * (1 - s * f);
          t = v2 * (1 - s * (1 - f));
          switch (i2) {
            case 0:
              ref = [v2, t, p], r = ref[0], g2 = ref[1], b2 = ref[2];
              break;
            case 1:
              ref1 = [q2, v2, p], r = ref1[0], g2 = ref1[1], b2 = ref1[2];
              break;
            case 2:
              ref2 = [p, v2, t], r = ref2[0], g2 = ref2[1], b2 = ref2[2];
              break;
            case 3:
              ref3 = [p, q2, v2], r = ref3[0], g2 = ref3[1], b2 = ref3[2];
              break;
            case 4:
              ref4 = [t, p, v2], r = ref4[0], g2 = ref4[1], b2 = ref4[2];
              break;
            case 5:
              ref5 = [v2, p, q2], r = ref5[0], g2 = ref5[1], b2 = ref5[2];
          }
        }
        return [r, g2, b2, args.length > 3 ? args[3] : 1];
      };
      rgb2hsv = function() {
        var b2, delta, g2, h2, min, r, ref, s, v2;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        min = Math.min(r, g2, b2);
        max = Math.max(r, g2, b2);
        delta = max - min;
        v2 = max / 255;
        if (max === 0) {
          h2 = Number.NaN;
          s = 0;
        } else {
          s = delta / max;
          if (r === max) {
            h2 = (g2 - b2) / delta;
          }
          if (g2 === max) {
            h2 = 2 + (b2 - r) / delta;
          }
          if (b2 === max) {
            h2 = 4 + (r - g2) / delta;
          }
          h2 *= 60;
          if (h2 < 0) {
            h2 += 360;
          }
        }
        return [h2, s, v2];
      };
      chroma2.hsv = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["hsv"]), function() {
        });
      };
      _input.hsv = hsv2rgb;
      Color.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
      };
      num2rgb = function(num) {
        var b2, g2, r;
        if (type(num) === "number" && num >= 0 && num <= 16777215) {
          r = num >> 16;
          g2 = num >> 8 & 255;
          b2 = num & 255;
          return [r, g2, b2, 1];
        }
        console.warn("unknown num color: " + num);
        return [0, 0, 0, 1];
      };
      rgb2num = function() {
        var b2, g2, r, ref;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        return (r << 16) + (g2 << 8) + b2;
      };
      chroma2.num = function(num) {
        return new Color(num, "num");
      };
      Color.prototype.num = function(mode) {
        if (mode == null) {
          mode = "rgb";
        }
        return rgb2num(this._rgb, mode);
      };
      _input.num = num2rgb;
      _guess_formats.push({
        p: 1,
        test: function(n) {
          if (arguments.length === 1 && type(n) === "number" && n >= 0 && n <= 16777215) {
            return "num";
          }
        }
      });
      hcg2rgb = function() {
        var _c2, _g, args, b2, c, f, g2, h2, i2, p, q2, r, ref, ref1, ref2, ref3, ref4, ref5, t, v2;
        args = unpack(arguments);
        h2 = args[0], c = args[1], _g = args[2];
        c = c / 100;
        g2 = g2 / 100 * 255;
        _c2 = c * 255;
        if (c === 0) {
          r = g2 = b2 = _g;
        } else {
          if (h2 === 360) {
            h2 = 0;
          }
          if (h2 > 360) {
            h2 -= 360;
          }
          if (h2 < 0) {
            h2 += 360;
          }
          h2 /= 60;
          i2 = floor(h2);
          f = h2 - i2;
          p = _g * (1 - c);
          q2 = p + _c2 * (1 - f);
          t = p + _c2 * f;
          v2 = p + _c2;
          switch (i2) {
            case 0:
              ref = [v2, t, p], r = ref[0], g2 = ref[1], b2 = ref[2];
              break;
            case 1:
              ref1 = [q2, v2, p], r = ref1[0], g2 = ref1[1], b2 = ref1[2];
              break;
            case 2:
              ref2 = [p, v2, t], r = ref2[0], g2 = ref2[1], b2 = ref2[2];
              break;
            case 3:
              ref3 = [p, q2, v2], r = ref3[0], g2 = ref3[1], b2 = ref3[2];
              break;
            case 4:
              ref4 = [t, p, v2], r = ref4[0], g2 = ref4[1], b2 = ref4[2];
              break;
            case 5:
              ref5 = [v2, p, q2], r = ref5[0], g2 = ref5[1], b2 = ref5[2];
          }
        }
        return [r, g2, b2, args.length > 3 ? args[3] : 1];
      };
      rgb2hcg = function() {
        var _g, b2, c, delta, g2, h2, min, r, ref;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        min = Math.min(r, g2, b2);
        max = Math.max(r, g2, b2);
        delta = max - min;
        c = delta * 100 / 255;
        _g = min / (255 - delta) * 100;
        if (delta === 0) {
          h2 = Number.NaN;
        } else {
          if (r === max) {
            h2 = (g2 - b2) / delta;
          }
          if (g2 === max) {
            h2 = 2 + (b2 - r) / delta;
          }
          if (b2 === max) {
            h2 = 4 + (r - g2) / delta;
          }
          h2 *= 60;
          if (h2 < 0) {
            h2 += 360;
          }
        }
        return [h2, c, _g];
      };
      chroma2.hcg = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["hcg"]), function() {
        });
      };
      _input.hcg = hcg2rgb;
      Color.prototype.hcg = function() {
        return rgb2hcg(this._rgb);
      };
      css2rgb = function(css) {
        var aa2, ab, hsl, i2, m2, o, rgb, w2;
        css = css.toLowerCase();
        if (chroma2.colors != null && chroma2.colors[css]) {
          return hex2rgb(chroma2.colors[css]);
        }
        if (m2 = css.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)) {
          rgb = m2.slice(1, 4);
          for (i2 = o = 0; o <= 2; i2 = ++o) {
            rgb[i2] = +rgb[i2];
          }
          rgb[3] = 1;
        } else if (m2 = css.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/)) {
          rgb = m2.slice(1, 5);
          for (i2 = w2 = 0; w2 <= 3; i2 = ++w2) {
            rgb[i2] = +rgb[i2];
          }
        } else if (m2 = css.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
          rgb = m2.slice(1, 4);
          for (i2 = aa2 = 0; aa2 <= 2; i2 = ++aa2) {
            rgb[i2] = round(rgb[i2] * 2.55);
          }
          rgb[3] = 1;
        } else if (m2 = css.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
          rgb = m2.slice(1, 5);
          for (i2 = ab = 0; ab <= 2; i2 = ++ab) {
            rgb[i2] = round(rgb[i2] * 2.55);
          }
          rgb[3] = +rgb[3];
        } else if (m2 = css.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)) {
          hsl = m2.slice(1, 4);
          hsl[1] *= 0.01;
          hsl[2] *= 0.01;
          rgb = hsl2rgb(hsl);
          rgb[3] = 1;
        } else if (m2 = css.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)) {
          hsl = m2.slice(1, 4);
          hsl[1] *= 0.01;
          hsl[2] *= 0.01;
          rgb = hsl2rgb(hsl);
          rgb[3] = +m2[4];
        }
        return rgb;
      };
      rgb2css = function(rgba) {
        var mode;
        mode = rgba[3] < 1 ? "rgba" : "rgb";
        if (mode === "rgb") {
          return mode + "(" + rgba.slice(0, 3).map(round).join(",") + ")";
        } else if (mode === "rgba") {
          return mode + "(" + rgba.slice(0, 3).map(round).join(",") + "," + rgba[3] + ")";
        } else ;
      };
      rnd = function(a) {
        return round(a * 100) / 100;
      };
      hsl2css = function(hsl, alpha) {
        var mode;
        mode = alpha < 1 ? "hsla" : "hsl";
        hsl[0] = rnd(hsl[0] || 0);
        hsl[1] = rnd(hsl[1] * 100) + "%";
        hsl[2] = rnd(hsl[2] * 100) + "%";
        if (mode === "hsla") {
          hsl[3] = alpha;
        }
        return mode + "(" + hsl.join(",") + ")";
      };
      _input.css = function(h2) {
        return css2rgb(h2);
      };
      chroma2.css = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["css"]), function() {
        });
      };
      Color.prototype.css = function(mode) {
        if (mode == null) {
          mode = "rgb";
        }
        if (mode.slice(0, 3) === "rgb") {
          return rgb2css(this._rgb);
        } else if (mode.slice(0, 3) === "hsl") {
          return hsl2css(this.hsl(), this.alpha());
        }
      };
      _input.named = function(name) {
        return hex2rgb(w3cx11[name]);
      };
      _guess_formats.push({
        p: 5,
        test: function(n) {
          if (arguments.length === 1 && w3cx11[n] != null) {
            return "named";
          }
        }
      });
      Color.prototype.name = function(n) {
        var h2, k2;
        if (arguments.length) {
          if (w3cx11[n]) {
            this._rgb = hex2rgb(w3cx11[n]);
          }
          this._rgb[3] = 1;
        }
        h2 = this.hex("rgb");
        for (k2 in w3cx11) {
          if (h2 === w3cx11[k2]) {
            return k2;
          }
        }
        return h2;
      };
      lch2lab = function() {
        var c, h2, l, ref;
        ref = unpack(arguments), l = ref[0], c = ref[1], h2 = ref[2];
        h2 = h2 * DEG2RAD;
        return [l, cos(h2) * c, sin(h2) * c];
      };
      lch2rgb = function() {
        var L2, a, args, b2, c, g2, h2, l, r, ref, ref1;
        args = unpack(arguments);
        l = args[0], c = args[1], h2 = args[2];
        ref = lch2lab(l, c, h2), L2 = ref[0], a = ref[1], b2 = ref[2];
        ref1 = lab2rgb(L2, a, b2), r = ref1[0], g2 = ref1[1], b2 = ref1[2];
        return [r, g2, b2, args.length > 3 ? args[3] : 1];
      };
      lab2lch = function() {
        var a, b2, c, h2, l, ref;
        ref = unpack(arguments), l = ref[0], a = ref[1], b2 = ref[2];
        c = sqrt(a * a + b2 * b2);
        h2 = (atan2(b2, a) * RAD2DEG + 360) % 360;
        if (round(c * 1e4) === 0) {
          h2 = Number.NaN;
        }
        return [l, c, h2];
      };
      rgb2lch = function() {
        var a, b2, g2, l, r, ref, ref1;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        ref1 = rgb2lab(r, g2, b2), l = ref1[0], a = ref1[1], b2 = ref1[2];
        return lab2lch(l, a, b2);
      };
      chroma2.lch = function() {
        var args;
        args = unpack(arguments);
        return new Color(args, "lch");
      };
      chroma2.hcl = function() {
        var args;
        args = unpack(arguments);
        return new Color(args, "hcl");
      };
      _input.lch = lch2rgb;
      _input.hcl = function() {
        var c, h2, l, ref;
        ref = unpack(arguments), h2 = ref[0], c = ref[1], l = ref[2];
        return lch2rgb([l, c, h2]);
      };
      Color.prototype.lch = function() {
        return rgb2lch(this._rgb);
      };
      Color.prototype.hcl = function() {
        return rgb2lch(this._rgb).reverse();
      };
      rgb2cmyk = function(mode) {
        var b2, c, f, g2, k2, m2, r, ref, y2;
        if (mode == null) {
          mode = "rgb";
        }
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        r = r / 255;
        g2 = g2 / 255;
        b2 = b2 / 255;
        k2 = 1 - Math.max(r, Math.max(g2, b2));
        f = k2 < 1 ? 1 / (1 - k2) : 0;
        c = (1 - r - k2) * f;
        m2 = (1 - g2 - k2) * f;
        y2 = (1 - b2 - k2) * f;
        return [c, m2, y2, k2];
      };
      cmyk2rgb = function() {
        var alpha, args, b2, c, g2, k2, m2, r, y2;
        args = unpack(arguments);
        c = args[0], m2 = args[1], y2 = args[2], k2 = args[3];
        alpha = args.length > 4 ? args[4] : 1;
        if (k2 === 1) {
          return [0, 0, 0, alpha];
        }
        r = c >= 1 ? 0 : 255 * (1 - c) * (1 - k2);
        g2 = m2 >= 1 ? 0 : 255 * (1 - m2) * (1 - k2);
        b2 = y2 >= 1 ? 0 : 255 * (1 - y2) * (1 - k2);
        return [r, g2, b2, alpha];
      };
      _input.cmyk = function() {
        return cmyk2rgb(unpack(arguments));
      };
      chroma2.cmyk = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["cmyk"]), function() {
        });
      };
      Color.prototype.cmyk = function() {
        return rgb2cmyk(this._rgb);
      };
      _input.gl = function() {
        var i2, k2, o, rgb, v2;
        rgb = (function() {
          var ref, results;
          ref = unpack(arguments);
          results = [];
          for (k2 in ref) {
            v2 = ref[k2];
            results.push(v2);
          }
          return results;
        }).apply(this, arguments);
        for (i2 = o = 0; o <= 2; i2 = ++o) {
          rgb[i2] *= 255;
        }
        return rgb;
      };
      chroma2.gl = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["gl"]), function() {
        });
      };
      Color.prototype.gl = function() {
        var rgb;
        rgb = this._rgb;
        return [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255, rgb[3]];
      };
      rgb2luminance = function(r, g2, b2) {
        var ref;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        r = luminance_x(r);
        g2 = luminance_x(g2);
        b2 = luminance_x(b2);
        return 0.2126 * r + 0.7152 * g2 + 0.0722 * b2;
      };
      luminance_x = function(x2) {
        x2 /= 255;
        if (x2 <= 0.03928) {
          return x2 / 12.92;
        } else {
          return pow((x2 + 0.055) / 1.055, 2.4);
        }
      };
      interpolate_rgb = function(col1, col2, f, m2) {
        var xyz0, xyz1;
        xyz0 = col1._rgb;
        xyz1 = col2._rgb;
        return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m2);
      };
      _interpolators.push(["rgb", interpolate_rgb]);
      Color.prototype.luminance = function(lum, mode) {
        var cur_lum, eps, max_iter, rgba, test;
        if (mode == null) {
          mode = "rgb";
        }
        if (!arguments.length) {
          return rgb2luminance(this._rgb);
        }
        rgba = this._rgb;
        if (lum === 0) {
          rgba = [0, 0, 0, this._rgb[3]];
        } else if (lum === 1) {
          rgba = [255, 255, 255, this[3]];
        } else {
          cur_lum = rgb2luminance(this._rgb);
          eps = 1e-7;
          max_iter = 20;
          test = function(l, h2) {
            var lm, m2;
            m2 = l.interpolate(h2, 0.5, mode);
            lm = m2.luminance();
            if (Math.abs(lum - lm) < eps || !max_iter--) {
              return m2;
            }
            if (lm > lum) {
              return test(l, m2);
            }
            return test(m2, h2);
          };
          if (cur_lum > lum) {
            rgba = test(chroma2("black"), this).rgba();
          } else {
            rgba = test(this, chroma2("white")).rgba();
          }
        }
        return chroma2(rgba).alpha(this.alpha());
      };
      temperature2rgb = function(kelvin) {
        var b2, g2, r, temp;
        temp = kelvin / 100;
        if (temp < 66) {
          r = 255;
          g2 = -155.25485562709179 - 0.44596950469579133 * (g2 = temp - 2) + 104.49216199393888 * log(g2);
          b2 = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b2 = temp - 10) + 115.67994401066147 * log(b2);
        } else {
          r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
          g2 = 325.4494125711974 + 0.07943456536662342 * (g2 = temp - 50) - 28.0852963507957 * log(g2);
          b2 = 255;
        }
        return [r, g2, b2];
      };
      rgb2temperature = function() {
        var b2, eps, maxTemp, minTemp, r, ref, rgb, temp;
        ref = unpack(arguments), r = ref[0], ref[1], b2 = ref[2];
        minTemp = 1e3;
        maxTemp = 4e4;
        eps = 0.4;
        while (maxTemp - minTemp > eps) {
          temp = (maxTemp + minTemp) * 0.5;
          rgb = temperature2rgb(temp);
          if (rgb[2] / rgb[0] >= b2 / r) {
            maxTemp = temp;
          } else {
            minTemp = temp;
          }
        }
        return round(temp);
      };
      chroma2.temperature = chroma2.kelvin = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["temperature"]), function() {
        });
      };
      _input.temperature = _input.kelvin = _input.K = temperature2rgb;
      Color.prototype.temperature = function() {
        return rgb2temperature(this._rgb);
      };
      Color.prototype.kelvin = Color.prototype.temperature;
      chroma2.contrast = function(a, b2) {
        var l1, l2, ref, ref1;
        if ((ref = type(a)) === "string" || ref === "number") {
          a = new Color(a);
        }
        if ((ref1 = type(b2)) === "string" || ref1 === "number") {
          b2 = new Color(b2);
        }
        l1 = a.luminance();
        l2 = b2.luminance();
        if (l1 > l2) {
          return (l1 + 0.05) / (l2 + 0.05);
        } else {
          return (l2 + 0.05) / (l1 + 0.05);
        }
      };
      chroma2.distance = function(a, b2, mode) {
        var d2, i2, l1, l2, ref, ref1, sum_sq;
        if (mode == null) {
          mode = "lab";
        }
        if ((ref = type(a)) === "string" || ref === "number") {
          a = new Color(a);
        }
        if ((ref1 = type(b2)) === "string" || ref1 === "number") {
          b2 = new Color(b2);
        }
        l1 = a.get(mode);
        l2 = b2.get(mode);
        sum_sq = 0;
        for (i2 in l1) {
          d2 = (l1[i2] || 0) - (l2[i2] || 0);
          sum_sq += d2 * d2;
        }
        return Math.sqrt(sum_sq);
      };
      chroma2.deltaE = function(a, b2, L2, C2) {
        var L1, L22, a1, a2, b1, b22, c1, c2, c4, dH2, delA, delB, delC, delL, f, h1, ref, ref1, ref2, ref3, sc2, sh2, sl2, t, v1, v2, v3;
        if (L2 == null) {
          L2 = 1;
        }
        if (C2 == null) {
          C2 = 1;
        }
        if ((ref = type(a)) === "string" || ref === "number") {
          a = new Color(a);
        }
        if ((ref1 = type(b2)) === "string" || ref1 === "number") {
          b2 = new Color(b2);
        }
        ref2 = a.lab(), L1 = ref2[0], a1 = ref2[1], b1 = ref2[2];
        ref3 = b2.lab(), L22 = ref3[0], a2 = ref3[1], b22 = ref3[2];
        c1 = sqrt(a1 * a1 + b1 * b1);
        c2 = sqrt(a2 * a2 + b22 * b22);
        sl2 = L1 < 16 ? 0.511 : 0.040975 * L1 / (1 + 0.01765 * L1);
        sc2 = 0.0638 * c1 / (1 + 0.0131 * c1) + 0.638;
        h1 = c1 < 1e-6 ? 0 : atan2(b1, a1) * 180 / PI;
        while (h1 < 0) {
          h1 += 360;
        }
        while (h1 >= 360) {
          h1 -= 360;
        }
        t = h1 >= 164 && h1 <= 345 ? 0.56 + abs(0.2 * cos(PI * (h1 + 168) / 180)) : 0.36 + abs(0.4 * cos(PI * (h1 + 35) / 180));
        c4 = c1 * c1 * c1 * c1;
        f = sqrt(c4 / (c4 + 1900));
        sh2 = sc2 * (f * t + 1 - f);
        delL = L1 - L22;
        delC = c1 - c2;
        delA = a1 - a2;
        delB = b1 - b22;
        dH2 = delA * delA + delB * delB - delC * delC;
        v1 = delL / (L2 * sl2);
        v2 = delC / (C2 * sc2);
        v3 = sh2;
        return sqrt(v1 * v1 + v2 * v2 + dH2 / (v3 * v3));
      };
      Color.prototype.get = function(modechan) {
        var channel, i2, me2, mode, ref, src;
        me2 = this;
        ref = modechan.split("."), mode = ref[0], channel = ref[1];
        src = me2[mode]();
        if (channel) {
          i2 = mode.indexOf(channel);
          if (i2 > -1) {
            return src[i2];
          } else {
            return console.warn("unknown channel " + channel + " in mode " + mode);
          }
        } else {
          return src;
        }
      };
      Color.prototype.set = function(modechan, value) {
        var channel, i2, me2, mode, ref, src;
        me2 = this;
        ref = modechan.split("."), mode = ref[0], channel = ref[1];
        if (channel) {
          src = me2[mode]();
          i2 = mode.indexOf(channel);
          if (i2 > -1) {
            if (type(value) === "string") {
              switch (value.charAt(0)) {
                case "+":
                  src[i2] += +value;
                  break;
                case "-":
                  src[i2] += +value;
                  break;
                case "*":
                  src[i2] *= +value.substr(1);
                  break;
                case "/":
                  src[i2] /= +value.substr(1);
                  break;
                default:
                  src[i2] = +value;
              }
            } else {
              src[i2] = value;
            }
          } else {
            console.warn("unknown channel " + channel + " in mode " + mode);
          }
        } else {
          src = value;
        }
        return chroma2(src, mode).alpha(me2.alpha());
      };
      Color.prototype.clipped = function() {
        return this._rgb._clipped || false;
      };
      Color.prototype.alpha = function(a) {
        if (arguments.length) {
          return chroma2.rgb([this._rgb[0], this._rgb[1], this._rgb[2], a]);
        }
        return this._rgb[3];
      };
      Color.prototype.darken = function(amount) {
        var lab, me2;
        if (amount == null) {
          amount = 1;
        }
        me2 = this;
        lab = me2.lab();
        lab[0] -= LAB_CONSTANTS.Kn * amount;
        return chroma2.lab(lab).alpha(me2.alpha());
      };
      Color.prototype.brighten = function(amount) {
        if (amount == null) {
          amount = 1;
        }
        return this.darken(-amount);
      };
      Color.prototype.darker = Color.prototype.darken;
      Color.prototype.brighter = Color.prototype.brighten;
      Color.prototype.saturate = function(amount) {
        var lch, me2;
        if (amount == null) {
          amount = 1;
        }
        me2 = this;
        lch = me2.lch();
        lch[1] += amount * LAB_CONSTANTS.Kn;
        if (lch[1] < 0) {
          lch[1] = 0;
        }
        return chroma2.lch(lch).alpha(me2.alpha());
      };
      Color.prototype.desaturate = function(amount) {
        if (amount == null) {
          amount = 1;
        }
        return this.saturate(-amount);
      };
      Color.prototype.premultiply = function() {
        var a, rgb;
        rgb = this.rgb();
        a = this.alpha();
        return chroma2(rgb[0] * a, rgb[1] * a, rgb[2] * a, a);
      };
      blend = function(bottom, top, mode) {
        if (!blend[mode]) {
          throw "unknown blend mode " + mode;
        }
        return blend[mode](bottom, top);
      };
      blend_f = function(f) {
        return function(bottom, top) {
          var c0, c1;
          c0 = chroma2(top).rgb();
          c1 = chroma2(bottom).rgb();
          return chroma2(f(c0, c1), "rgb");
        };
      };
      each = function(f) {
        return function(c0, c1) {
          var i2, o, out;
          out = [];
          for (i2 = o = 0; o <= 3; i2 = ++o) {
            out[i2] = f(c0[i2], c1[i2]);
          }
          return out;
        };
      };
      normal = function(a, b2) {
        return a;
      };
      multiply = function(a, b2) {
        return a * b2 / 255;
      };
      darken = function(a, b2) {
        if (a > b2) {
          return b2;
        } else {
          return a;
        }
      };
      lighten = function(a, b2) {
        if (a > b2) {
          return a;
        } else {
          return b2;
        }
      };
      screen = function(a, b2) {
        return 255 * (1 - (1 - a / 255) * (1 - b2 / 255));
      };
      overlay = function(a, b2) {
        if (b2 < 128) {
          return 2 * a * b2 / 255;
        } else {
          return 255 * (1 - 2 * (1 - a / 255) * (1 - b2 / 255));
        }
      };
      burn = function(a, b2) {
        return 255 * (1 - (1 - b2 / 255) / (a / 255));
      };
      dodge = function(a, b2) {
        if (a === 255) {
          return 255;
        }
        a = 255 * (b2 / 255) / (1 - a / 255);
        if (a > 255) {
          return 255;
        } else {
          return a;
        }
      };
      blend.normal = blend_f(each(normal));
      blend.multiply = blend_f(each(multiply));
      blend.screen = blend_f(each(screen));
      blend.overlay = blend_f(each(overlay));
      blend.darken = blend_f(each(darken));
      blend.lighten = blend_f(each(lighten));
      blend.dodge = blend_f(each(dodge));
      blend.burn = blend_f(each(burn));
      chroma2.blend = blend;
      chroma2.analyze = function(data) {
        var len, o, r, val;
        r = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        for (o = 0, len = data.length; o < len; o++) {
          val = data[o];
          if (val != null && !isNaN(val)) {
            r.values.push(val);
            r.sum += val;
            if (val < r.min) {
              r.min = val;
            }
            if (val > r.max) {
              r.max = val;
            }
            r.count += 1;
          }
        }
        r.domain = [r.min, r.max];
        r.limits = function(mode, num) {
          return chroma2.limits(r, mode, num);
        };
        return r;
      };
      chroma2.scale = function(colors, positions) {
        var _classes, _colorCache, _colors, _correctLightness, _domain, _gamma, _max, _min, _mode, _nacol, _out, _padding, _pos, _spread, _useCache, f, getClass, getColor, resetCache, setColors, tmap;
        _mode = "rgb";
        _nacol = chroma2("#ccc");
        _spread = 0;
        _domain = [0, 1];
        _pos = [];
        _padding = [0, 0];
        _classes = false;
        _colors = [];
        _out = false;
        _min = 0;
        _max = 1;
        _correctLightness = false;
        _colorCache = {};
        _useCache = true;
        _gamma = 1;
        setColors = function(colors2) {
          var c, col, o, ref, ref1, w2;
          if (colors2 == null) {
            colors2 = ["#fff", "#000"];
          }
          if (colors2 != null && type(colors2) === "string" && chroma2.brewer != null) {
            colors2 = chroma2.brewer[colors2] || chroma2.brewer[colors2.toLowerCase()] || colors2;
          }
          if (type(colors2) === "array") {
            if (colors2.length === 1) {
              colors2 = [colors2[0], colors2[0]];
            }
            colors2 = colors2.slice(0);
            for (c = o = 0, ref = colors2.length - 1; 0 <= ref ? o <= ref : o >= ref; c = 0 <= ref ? ++o : --o) {
              col = colors2[c];
              if (type(col) === "string") {
                colors2[c] = chroma2(col);
              }
            }
            _pos.length = 0;
            for (c = w2 = 0, ref1 = colors2.length - 1; 0 <= ref1 ? w2 <= ref1 : w2 >= ref1; c = 0 <= ref1 ? ++w2 : --w2) {
              _pos.push(c / (colors2.length - 1));
            }
          }
          resetCache();
          return _colors = colors2;
        };
        getClass = function(value) {
          var i2, n;
          if (_classes != null) {
            n = _classes.length - 1;
            i2 = 0;
            while (i2 < n && value >= _classes[i2]) {
              i2++;
            }
            return i2 - 1;
          }
          return 0;
        };
        tmap = function(t) {
          return t;
        };
        getColor = function(val, bypassMap) {
          var c, col, i2, k2, o, p, ref, t;
          if (bypassMap == null) {
            bypassMap = false;
          }
          if (isNaN(val) || val === null) {
            return _nacol;
          }
          if (!bypassMap) {
            if (_classes && _classes.length > 2) {
              c = getClass(val);
              t = c / (_classes.length - 2);
            } else if (_max !== _min) {
              t = (val - _min) / (_max - _min);
            } else {
              t = 1;
            }
          } else {
            t = val;
          }
          if (!bypassMap) {
            t = tmap(t);
          }
          if (_gamma !== 1) {
            t = pow(t, _gamma);
          }
          t = _padding[0] + t * (1 - _padding[0] - _padding[1]);
          t = Math.min(1, Math.max(0, t));
          k2 = Math.floor(t * 1e4);
          if (_useCache && _colorCache[k2]) {
            col = _colorCache[k2];
          } else {
            if (type(_colors) === "array") {
              for (i2 = o = 0, ref = _pos.length - 1; 0 <= ref ? o <= ref : o >= ref; i2 = 0 <= ref ? ++o : --o) {
                p = _pos[i2];
                if (t <= p) {
                  col = _colors[i2];
                  break;
                }
                if (t >= p && i2 === _pos.length - 1) {
                  col = _colors[i2];
                  break;
                }
                if (t > p && t < _pos[i2 + 1]) {
                  t = (t - p) / (_pos[i2 + 1] - p);
                  col = chroma2.interpolate(_colors[i2], _colors[i2 + 1], t, _mode);
                  break;
                }
              }
            } else if (type(_colors) === "function") {
              col = _colors(t);
            }
            if (_useCache) {
              _colorCache[k2] = col;
            }
          }
          return col;
        };
        resetCache = function() {
          return _colorCache = {};
        };
        setColors(colors);
        f = function(v2) {
          var c;
          c = chroma2(getColor(v2));
          if (_out && c[_out]) {
            return c[_out]();
          } else {
            return c;
          }
        };
        f.classes = function(classes) {
          var d2;
          if (classes != null) {
            if (type(classes) === "array") {
              _classes = classes;
              _domain = [classes[0], classes[classes.length - 1]];
            } else {
              d2 = chroma2.analyze(_domain);
              if (classes === 0) {
                _classes = [d2.min, d2.max];
              } else {
                _classes = chroma2.limits(d2, "e", classes);
              }
            }
            return f;
          }
          return _classes;
        };
        f.domain = function(domain) {
          var c, d2, k2, len, o, ref, w2;
          if (!arguments.length) {
            return _domain;
          }
          _min = domain[0];
          _max = domain[domain.length - 1];
          _pos = [];
          k2 = _colors.length;
          if (domain.length === k2 && _min !== _max) {
            for (o = 0, len = domain.length; o < len; o++) {
              d2 = domain[o];
              _pos.push((d2 - _min) / (_max - _min));
            }
          } else {
            for (c = w2 = 0, ref = k2 - 1; 0 <= ref ? w2 <= ref : w2 >= ref; c = 0 <= ref ? ++w2 : --w2) {
              _pos.push(c / (k2 - 1));
            }
          }
          _domain = [_min, _max];
          return f;
        };
        f.mode = function(_m) {
          if (!arguments.length) {
            return _mode;
          }
          _mode = _m;
          resetCache();
          return f;
        };
        f.range = function(colors2, _pos2) {
          setColors(colors2, _pos2);
          return f;
        };
        f.out = function(_o2) {
          _out = _o2;
          return f;
        };
        f.spread = function(val) {
          if (!arguments.length) {
            return _spread;
          }
          _spread = val;
          return f;
        };
        f.correctLightness = function(v2) {
          if (v2 == null) {
            v2 = true;
          }
          _correctLightness = v2;
          resetCache();
          if (_correctLightness) {
            tmap = function(t) {
              var L0, L1, L_actual, L_diff, L_ideal, max_iter, pol, t0, t1;
              L0 = getColor(0, true).lab()[0];
              L1 = getColor(1, true).lab()[0];
              pol = L0 > L1;
              L_actual = getColor(t, true).lab()[0];
              L_ideal = L0 + (L1 - L0) * t;
              L_diff = L_actual - L_ideal;
              t0 = 0;
              t1 = 1;
              max_iter = 20;
              while (Math.abs(L_diff) > 0.01 && max_iter-- > 0) {
                (function() {
                  if (pol) {
                    L_diff *= -1;
                  }
                  if (L_diff < 0) {
                    t0 = t;
                    t += (t1 - t) * 0.5;
                  } else {
                    t1 = t;
                    t += (t0 - t) * 0.5;
                  }
                  L_actual = getColor(t, true).lab()[0];
                  return L_diff = L_actual - L_ideal;
                })();
              }
              return t;
            };
          } else {
            tmap = function(t) {
              return t;
            };
          }
          return f;
        };
        f.padding = function(p) {
          if (p != null) {
            if (type(p) === "number") {
              p = [p, p];
            }
            _padding = p;
            return f;
          } else {
            return _padding;
          }
        };
        f.colors = function(numColors, out) {
          var dd, dm, i2, ref, result, results, samples, w2;
          if (arguments.length < 2) {
            out = "hex";
          }
          result = [];
          if (arguments.length === 0) {
            result = _colors.slice(0);
          } else if (numColors === 1) {
            result = [f(0.5)];
          } else if (numColors > 1) {
            dm = _domain[0];
            dd = _domain[1] - dm;
            result = (function() {
              results = [];
              for (var o = 0; 0 <= numColors ? o < numColors : o > numColors; 0 <= numColors ? o++ : o--) {
                results.push(o);
              }
              return results;
            }).apply(this).map(function(i3) {
              return f(dm + i3 / (numColors - 1) * dd);
            });
          } else {
            colors = [];
            samples = [];
            if (_classes && _classes.length > 2) {
              for (i2 = w2 = 1, ref = _classes.length; 1 <= ref ? w2 < ref : w2 > ref; i2 = 1 <= ref ? ++w2 : --w2) {
                samples.push((_classes[i2 - 1] + _classes[i2]) * 0.5);
              }
            } else {
              samples = _domain;
            }
            result = samples.map(function(v2) {
              return f(v2);
            });
          }
          if (chroma2[out]) {
            result = result.map(function(c) {
              return c[out]();
            });
          }
          return result;
        };
        f.cache = function(c) {
          if (c != null) {
            _useCache = c;
            return f;
          } else {
            return _useCache;
          }
        };
        f.gamma = function(g2) {
          if (g2 != null) {
            _gamma = g2;
            return f;
          } else {
            return _gamma;
          }
        };
        f.nodata = function(d2) {
          if (d2 != null) {
            _nacol = chroma2(d2);
            return f;
          } else {
            return _nacol;
          }
        };
        return f;
      };
      if (chroma2.scales == null) {
        chroma2.scales = {};
      }
      chroma2.scales.cool = function() {
        return chroma2.scale([chroma2.hsl(180, 1, 0.9), chroma2.hsl(250, 0.7, 0.4)]);
      };
      chroma2.scales.hot = function() {
        return chroma2.scale(["#000", "#f00", "#ff0", "#fff"], [0, 0.25, 0.75, 1]).mode("rgb");
      };
      chroma2.analyze = function(data, key, filter) {
        var add, k2, len, o, r, val, visit;
        r = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        if (filter == null) {
          filter = function() {
            return true;
          };
        }
        add = function(val2) {
          if (val2 != null && !isNaN(val2)) {
            r.values.push(val2);
            r.sum += val2;
            if (val2 < r.min) {
              r.min = val2;
            }
            if (val2 > r.max) {
              r.max = val2;
            }
            r.count += 1;
          }
        };
        visit = function(val2, k3) {
          if (filter(val2, k3)) {
            if (key != null && type(key) === "function") {
              return add(key(val2));
            } else if (key != null && type(key) === "string" || type(key) === "number") {
              return add(val2[key]);
            } else {
              return add(val2);
            }
          }
        };
        if (type(data) === "array") {
          for (o = 0, len = data.length; o < len; o++) {
            val = data[o];
            visit(val);
          }
        } else {
          for (k2 in data) {
            val = data[k2];
            visit(val, k2);
          }
        }
        r.domain = [r.min, r.max];
        r.limits = function(mode, num) {
          return chroma2.limits(r, mode, num);
        };
        return r;
      };
      chroma2.limits = function(data, mode, num) {
        var aa2, ab, ac2, ad, ae, af, ag, ah2, ai, aj, ak, al2, am, assignments, best, centroids, cluster, clusterSizes, dist, i2, j, kClusters, limits, max_log, min, min_log, mindist, n, nb_iters, newCentroids, o, p, pb, pr, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, repeat, tmpKMeansBreaks, v2, value, values, w2;
        if (mode == null) {
          mode = "equal";
        }
        if (num == null) {
          num = 7;
        }
        if (type(data) === "array") {
          data = chroma2.analyze(data);
        }
        min = data.min;
        max = data.max;
        data.sum;
        values = data.values.sort(function(a, b2) {
          return a - b2;
        });
        if (num === 1) {
          return [min, max];
        }
        limits = [];
        if (mode.substr(0, 1) === "c") {
          limits.push(min);
          limits.push(max);
        }
        if (mode.substr(0, 1) === "e") {
          limits.push(min);
          for (i2 = o = 1, ref = num - 1; 1 <= ref ? o <= ref : o >= ref; i2 = 1 <= ref ? ++o : --o) {
            limits.push(min + i2 / num * (max - min));
          }
          limits.push(max);
        } else if (mode.substr(0, 1) === "l") {
          if (min <= 0) {
            throw "Logarithmic scales are only possible for values > 0";
          }
          min_log = Math.LOG10E * log(min);
          max_log = Math.LOG10E * log(max);
          limits.push(min);
          for (i2 = w2 = 1, ref1 = num - 1; 1 <= ref1 ? w2 <= ref1 : w2 >= ref1; i2 = 1 <= ref1 ? ++w2 : --w2) {
            limits.push(pow(10, min_log + i2 / num * (max_log - min_log)));
          }
          limits.push(max);
        } else if (mode.substr(0, 1) === "q") {
          limits.push(min);
          for (i2 = aa2 = 1, ref2 = num - 1; 1 <= ref2 ? aa2 <= ref2 : aa2 >= ref2; i2 = 1 <= ref2 ? ++aa2 : --aa2) {
            p = (values.length - 1) * i2 / num;
            pb = floor(p);
            if (pb === p) {
              limits.push(values[pb]);
            } else {
              pr = p - pb;
              limits.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
            }
          }
          limits.push(max);
        } else if (mode.substr(0, 1) === "k") {
          n = values.length;
          assignments = new Array(n);
          clusterSizes = new Array(num);
          repeat = true;
          nb_iters = 0;
          centroids = null;
          centroids = [];
          centroids.push(min);
          for (i2 = ab = 1, ref3 = num - 1; 1 <= ref3 ? ab <= ref3 : ab >= ref3; i2 = 1 <= ref3 ? ++ab : --ab) {
            centroids.push(min + i2 / num * (max - min));
          }
          centroids.push(max);
          while (repeat) {
            for (j = ac2 = 0, ref4 = num - 1; 0 <= ref4 ? ac2 <= ref4 : ac2 >= ref4; j = 0 <= ref4 ? ++ac2 : --ac2) {
              clusterSizes[j] = 0;
            }
            for (i2 = ad = 0, ref5 = n - 1; 0 <= ref5 ? ad <= ref5 : ad >= ref5; i2 = 0 <= ref5 ? ++ad : --ad) {
              value = values[i2];
              mindist = Number.MAX_VALUE;
              for (j = ae = 0, ref6 = num - 1; 0 <= ref6 ? ae <= ref6 : ae >= ref6; j = 0 <= ref6 ? ++ae : --ae) {
                dist = abs(centroids[j] - value);
                if (dist < mindist) {
                  mindist = dist;
                  best = j;
                }
              }
              clusterSizes[best]++;
              assignments[i2] = best;
            }
            newCentroids = new Array(num);
            for (j = af = 0, ref7 = num - 1; 0 <= ref7 ? af <= ref7 : af >= ref7; j = 0 <= ref7 ? ++af : --af) {
              newCentroids[j] = null;
            }
            for (i2 = ag = 0, ref8 = n - 1; 0 <= ref8 ? ag <= ref8 : ag >= ref8; i2 = 0 <= ref8 ? ++ag : --ag) {
              cluster = assignments[i2];
              if (newCentroids[cluster] === null) {
                newCentroids[cluster] = values[i2];
              } else {
                newCentroids[cluster] += values[i2];
              }
            }
            for (j = ah2 = 0, ref9 = num - 1; 0 <= ref9 ? ah2 <= ref9 : ah2 >= ref9; j = 0 <= ref9 ? ++ah2 : --ah2) {
              newCentroids[j] *= 1 / clusterSizes[j];
            }
            repeat = false;
            for (j = ai = 0, ref10 = num - 1; 0 <= ref10 ? ai <= ref10 : ai >= ref10; j = 0 <= ref10 ? ++ai : --ai) {
              if (newCentroids[j] !== centroids[i2]) {
                repeat = true;
                break;
              }
            }
            centroids = newCentroids;
            nb_iters++;
            if (nb_iters > 200) {
              repeat = false;
            }
          }
          kClusters = {};
          for (j = aj = 0, ref11 = num - 1; 0 <= ref11 ? aj <= ref11 : aj >= ref11; j = 0 <= ref11 ? ++aj : --aj) {
            kClusters[j] = [];
          }
          for (i2 = ak = 0, ref12 = n - 1; 0 <= ref12 ? ak <= ref12 : ak >= ref12; i2 = 0 <= ref12 ? ++ak : --ak) {
            cluster = assignments[i2];
            kClusters[cluster].push(values[i2]);
          }
          tmpKMeansBreaks = [];
          for (j = al2 = 0, ref13 = num - 1; 0 <= ref13 ? al2 <= ref13 : al2 >= ref13; j = 0 <= ref13 ? ++al2 : --al2) {
            tmpKMeansBreaks.push(kClusters[j][0]);
            tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
          }
          tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a, b2) {
            return a - b2;
          });
          limits.push(tmpKMeansBreaks[0]);
          for (i2 = am = 1, ref14 = tmpKMeansBreaks.length - 1; am <= ref14; i2 = am += 2) {
            v2 = tmpKMeansBreaks[i2];
            if (!isNaN(v2) && limits.indexOf(v2) === -1) {
              limits.push(v2);
            }
          }
        }
        return limits;
      };
      hsi2rgb = function(h2, s, i2) {
        var args, b2, g2, r;
        args = unpack(arguments);
        h2 = args[0], s = args[1], i2 = args[2];
        if (isNaN(h2)) {
          h2 = 0;
        }
        h2 /= 360;
        if (h2 < 1 / 3) {
          b2 = (1 - s) / 3;
          r = (1 + s * cos(TWOPI * h2) / cos(PITHIRD - TWOPI * h2)) / 3;
          g2 = 1 - (b2 + r);
        } else if (h2 < 2 / 3) {
          h2 -= 1 / 3;
          r = (1 - s) / 3;
          g2 = (1 + s * cos(TWOPI * h2) / cos(PITHIRD - TWOPI * h2)) / 3;
          b2 = 1 - (r + g2);
        } else {
          h2 -= 2 / 3;
          g2 = (1 - s) / 3;
          b2 = (1 + s * cos(TWOPI * h2) / cos(PITHIRD - TWOPI * h2)) / 3;
          r = 1 - (g2 + b2);
        }
        r = limit(i2 * r * 3);
        g2 = limit(i2 * g2 * 3);
        b2 = limit(i2 * b2 * 3);
        return [r * 255, g2 * 255, b2 * 255, args.length > 3 ? args[3] : 1];
      };
      rgb2hsi = function() {
        var b2, g2, h2, i2, min, r, ref, s;
        ref = unpack(arguments), r = ref[0], g2 = ref[1], b2 = ref[2];
        TWOPI = Math.PI * 2;
        r /= 255;
        g2 /= 255;
        b2 /= 255;
        min = Math.min(r, g2, b2);
        i2 = (r + g2 + b2) / 3;
        s = 1 - min / i2;
        if (s === 0) {
          h2 = 0;
        } else {
          h2 = (r - g2 + (r - b2)) / 2;
          h2 /= Math.sqrt((r - g2) * (r - g2) + (r - b2) * (g2 - b2));
          h2 = Math.acos(h2);
          if (b2 > g2) {
            h2 = TWOPI - h2;
          }
          h2 /= TWOPI;
        }
        return [h2 * 360, s, i2];
      };
      chroma2.hsi = function() {
        return function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor(), result = func.apply(child, args);
          return Object(result) === result ? result : child;
        }(Color, slice.call(arguments).concat(["hsi"]), function() {
        });
      };
      _input.hsi = hsi2rgb;
      Color.prototype.hsi = function() {
        return rgb2hsi(this._rgb);
      };
      interpolate_hsx = function(col1, col2, f, m2) {
        var dh2, hue, hue0, hue1, lbv, lbv0, lbv1, sat, sat0, sat1, xyz0, xyz1;
        if (m2 === "hsl") {
          xyz0 = col1.hsl();
          xyz1 = col2.hsl();
        } else if (m2 === "hsv") {
          xyz0 = col1.hsv();
          xyz1 = col2.hsv();
        } else if (m2 === "hcg") {
          xyz0 = col1.hcg();
          xyz1 = col2.hcg();
        } else if (m2 === "hsi") {
          xyz0 = col1.hsi();
          xyz1 = col2.hsi();
        } else if (m2 === "lch" || m2 === "hcl") {
          m2 = "hcl";
          xyz0 = col1.hcl();
          xyz1 = col2.hcl();
        }
        if (m2.substr(0, 1) === "h") {
          hue0 = xyz0[0], sat0 = xyz0[1], lbv0 = xyz0[2];
          hue1 = xyz1[0], sat1 = xyz1[1], lbv1 = xyz1[2];
        }
        if (!isNaN(hue0) && !isNaN(hue1)) {
          if (hue1 > hue0 && hue1 - hue0 > 180) {
            dh2 = hue1 - (hue0 + 360);
          } else if (hue1 < hue0 && hue0 - hue1 > 180) {
            dh2 = hue1 + 360 - hue0;
          } else {
            dh2 = hue1 - hue0;
          }
          hue = hue0 + f * dh2;
        } else if (!isNaN(hue0)) {
          hue = hue0;
          if ((lbv1 === 1 || lbv1 === 0) && m2 !== "hsv") {
            sat = sat0;
          }
        } else if (!isNaN(hue1)) {
          hue = hue1;
          if ((lbv0 === 1 || lbv0 === 0) && m2 !== "hsv") {
            sat = sat1;
          }
        } else {
          hue = Number.NaN;
        }
        if (sat == null) {
          sat = sat0 + f * (sat1 - sat0);
        }
        lbv = lbv0 + f * (lbv1 - lbv0);
        return chroma2[m2](hue, sat, lbv);
      };
      _interpolators = _interpolators.concat(function() {
        var len, o, ref, results;
        ref = ["hsv", "hsl", "hsi", "hcl", "lch", "hcg"];
        results = [];
        for (o = 0, len = ref.length; o < len; o++) {
          m = ref[o];
          results.push([m, interpolate_hsx]);
        }
        return results;
      }());
      interpolate_num = function(col1, col2, f, m2) {
        var n1, n2;
        n1 = col1.num();
        n2 = col2.num();
        return chroma2.num(n1 + (n2 - n1) * f, "num");
      };
      _interpolators.push(["num", interpolate_num]);
      interpolate_lab = function(col1, col2, f, m2) {
        var xyz0, xyz1;
        xyz0 = col1.lab();
        xyz1 = col2.lab();
        return new Color(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), m2);
      };
      _interpolators.push(["lab", interpolate_lab]);
    }).call(chroma);
  })(chroma$1, chroma$1.exports);
  return chroma$1.exports;
}
var isImplemented$8;
var hasRequiredIsImplemented$8;
function requireIsImplemented$8() {
  if (hasRequiredIsImplemented$8) return isImplemented$8;
  hasRequiredIsImplemented$8 = 1;
  isImplemented$8 = function() {
    var weakMap, obj;
    if (typeof WeakMap !== "function") return false;
    try {
      weakMap = new WeakMap([[obj = {}, "one"], [{}, "two"], [{}, "three"]]);
    } catch (e) {
      return false;
    }
    if (String(weakMap) !== "[object WeakMap]") return false;
    if (typeof weakMap.set !== "function") return false;
    if (weakMap.set({}, 1) !== weakMap) return false;
    if (typeof weakMap.delete !== "function") return false;
    if (typeof weakMap.has !== "function") return false;
    if (weakMap.get(obj) !== "one") return false;
    return true;
  };
  return isImplemented$8;
}
var noop;
var hasRequiredNoop;
function requireNoop() {
  if (hasRequiredNoop) return noop;
  hasRequiredNoop = 1;
  noop = function() {
  };
  return noop;
}
var isValue;
var hasRequiredIsValue;
function requireIsValue() {
  if (hasRequiredIsValue) return isValue;
  hasRequiredIsValue = 1;
  var _undefined = requireNoop()();
  isValue = function(val) {
    return val !== _undefined && val !== null;
  };
  return isValue;
}
var isImplemented$7;
var hasRequiredIsImplemented$7;
function requireIsImplemented$7() {
  if (hasRequiredIsImplemented$7) return isImplemented$7;
  hasRequiredIsImplemented$7 = 1;
  var create = Object.create, getPrototypeOf = Object.getPrototypeOf, plainObject = {};
  isImplemented$7 = function() {
    var setPrototypeOf2 = Object.setPrototypeOf, customCreate = arguments[0] || create;
    if (typeof setPrototypeOf2 !== "function") return false;
    return getPrototypeOf(setPrototypeOf2(customCreate(null), plainObject)) === plainObject;
  };
  return isImplemented$7;
}
var isObject;
var hasRequiredIsObject;
function requireIsObject() {
  if (hasRequiredIsObject) return isObject;
  hasRequiredIsObject = 1;
  var isValue2 = requireIsValue();
  var map2 = { function: true, object: true };
  isObject = function(value) {
    return isValue2(value) && map2[typeof value] || false;
  };
  return isObject;
}
var validValue;
var hasRequiredValidValue;
function requireValidValue() {
  if (hasRequiredValidValue) return validValue;
  hasRequiredValidValue = 1;
  var isValue2 = requireIsValue();
  validValue = function(value) {
    if (!isValue2(value)) throw new TypeError("Cannot use null or undefined");
    return value;
  };
  return validValue;
}
var create_1;
var hasRequiredCreate;
function requireCreate() {
  if (hasRequiredCreate) return create_1;
  hasRequiredCreate = 1;
  var create = Object.create, shim2;
  if (!requireIsImplemented$7()()) {
    shim2 = requireShim$5();
  }
  create_1 = function() {
    var nullObject, polyProps, desc;
    if (!shim2) return create;
    if (shim2.level !== 1) return create;
    nullObject = {};
    polyProps = {};
    desc = { configurable: false, enumerable: false, writable: true, value: void 0 };
    Object.getOwnPropertyNames(Object.prototype).forEach(function(name) {
      if (name === "__proto__") {
        polyProps[name] = {
          configurable: true,
          enumerable: false,
          writable: true,
          value: void 0
        };
        return;
      }
      polyProps[name] = desc;
    });
    Object.defineProperties(nullObject, polyProps);
    Object.defineProperty(shim2, "nullPolyfill", {
      configurable: false,
      enumerable: false,
      writable: false,
      value: nullObject
    });
    return function(prototype, props) {
      return create(prototype === null ? nullObject : prototype, props);
    };
  }();
  return create_1;
}
var shim$5;
var hasRequiredShim$5;
function requireShim$5() {
  if (hasRequiredShim$5) return shim$5;
  hasRequiredShim$5 = 1;
  var isObject2 = requireIsObject(), value = requireValidValue(), objIsPrototypeOf = Object.prototype.isPrototypeOf, defineProperty = Object.defineProperty, nullDesc = { configurable: true, enumerable: false, writable: true, value: void 0 }, validate;
  validate = function(obj, prototype) {
    value(obj);
    if (prototype === null || isObject2(prototype)) return obj;
    throw new TypeError("Prototype must be null or an object");
  };
  shim$5 = function(status) {
    var fn2, set;
    if (!status) return null;
    if (status.level === 2) {
      if (status.set) {
        set = status.set;
        fn2 = function(obj, prototype) {
          set.call(validate(obj, prototype), prototype);
          return obj;
        };
      } else {
        fn2 = function(obj, prototype) {
          validate(obj, prototype).__proto__ = prototype;
          return obj;
        };
      }
    } else {
      fn2 = function self2(obj, prototype) {
        var isNullBase;
        validate(obj, prototype);
        isNullBase = objIsPrototypeOf.call(self2.nullPolyfill, obj);
        if (isNullBase) delete self2.nullPolyfill.__proto__;
        if (prototype === null) prototype = self2.nullPolyfill;
        obj.__proto__ = prototype;
        if (isNullBase) defineProperty(self2.nullPolyfill, "__proto__", nullDesc);
        return obj;
      };
    }
    return Object.defineProperty(fn2, "level", {
      configurable: false,
      enumerable: false,
      writable: false,
      value: status.level
    });
  }(
    function() {
      var tmpObj1 = /* @__PURE__ */ Object.create(null), tmpObj2 = {}, set, desc = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");
      if (desc) {
        try {
          set = desc.set;
          set.call(tmpObj1, tmpObj2);
        } catch (ignore) {
        }
        if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { set, level: 2 };
      }
      tmpObj1.__proto__ = tmpObj2;
      if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 2 };
      tmpObj1 = {};
      tmpObj1.__proto__ = tmpObj2;
      if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 1 };
      return false;
    }()
  );
  requireCreate();
  return shim$5;
}
var setPrototypeOf;
var hasRequiredSetPrototypeOf;
function requireSetPrototypeOf() {
  if (hasRequiredSetPrototypeOf) return setPrototypeOf;
  hasRequiredSetPrototypeOf = 1;
  setPrototypeOf = requireIsImplemented$7()() ? Object.setPrototypeOf : requireShim$5();
  return setPrototypeOf;
}
var validObject;
var hasRequiredValidObject;
function requireValidObject() {
  if (hasRequiredValidObject) return validObject;
  hasRequiredValidObject = 1;
  var isObject2 = requireIsObject();
  validObject = function(value) {
    if (!isObject2(value)) throw new TypeError(value + " is not an Object");
    return value;
  };
  return validObject;
}
var randomUniq;
var hasRequiredRandomUniq;
function requireRandomUniq() {
  if (hasRequiredRandomUniq) return randomUniq;
  hasRequiredRandomUniq = 1;
  var generated = /* @__PURE__ */ Object.create(null), random = Math.random;
  randomUniq = function() {
    var str;
    do {
      str = random().toString(36).slice(2);
    } while (generated[str]);
    return str;
  };
  return randomUniq;
}
var d = { exports: {} };
var is$4;
var hasRequiredIs$4;
function requireIs$4() {
  if (hasRequiredIs$4) return is$4;
  hasRequiredIs$4 = 1;
  var _undefined = void 0;
  is$4 = function(value) {
    return value !== _undefined && value !== null;
  };
  return is$4;
}
var is$3;
var hasRequiredIs$3;
function requireIs$3() {
  if (hasRequiredIs$3) return is$3;
  hasRequiredIs$3 = 1;
  var isValue2 = requireIs$4();
  var possibleTypes = {
    "object": true,
    "function": true,
    "undefined": true
    /* document.all */
  };
  is$3 = function(value) {
    if (!isValue2(value)) return false;
    return hasOwnProperty.call(possibleTypes, typeof value);
  };
  return is$3;
}
var is$2;
var hasRequiredIs$2;
function requireIs$2() {
  if (hasRequiredIs$2) return is$2;
  hasRequiredIs$2 = 1;
  var isObject2 = requireIs$3();
  is$2 = function(value) {
    if (!isObject2(value)) return false;
    try {
      if (!value.constructor) return false;
      return value.constructor.prototype === value;
    } catch (error) {
      return false;
    }
  };
  return is$2;
}
var is$1;
var hasRequiredIs$1;
function requireIs$1() {
  if (hasRequiredIs$1) return is$1;
  hasRequiredIs$1 = 1;
  var isPrototype = requireIs$2();
  is$1 = function(value) {
    if (typeof value !== "function") return false;
    if (!hasOwnProperty.call(value, "length")) return false;
    try {
      if (typeof value.length !== "number") return false;
      if (typeof value.call !== "function") return false;
      if (typeof value.apply !== "function") return false;
    } catch (error) {
      return false;
    }
    return !isPrototype(value);
  };
  return is$1;
}
var is;
var hasRequiredIs;
function requireIs() {
  if (hasRequiredIs) return is;
  hasRequiredIs = 1;
  var isFunction2 = requireIs$1();
  var classRe = /^\s*class[\s{/}]/, functionToString = Function.prototype.toString;
  is = function(value) {
    if (!isFunction2(value)) return false;
    if (classRe.test(functionToString.call(value))) return false;
    return true;
  };
  return is;
}
var isImplemented$6;
var hasRequiredIsImplemented$6;
function requireIsImplemented$6() {
  if (hasRequiredIsImplemented$6) return isImplemented$6;
  hasRequiredIsImplemented$6 = 1;
  isImplemented$6 = function() {
    var assign2 = Object.assign, obj;
    if (typeof assign2 !== "function") return false;
    obj = { foo: "raz" };
    assign2(obj, { bar: "dwa" }, { trzy: "trzy" });
    return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
  };
  return isImplemented$6;
}
var isImplemented$5;
var hasRequiredIsImplemented$5;
function requireIsImplemented$5() {
  if (hasRequiredIsImplemented$5) return isImplemented$5;
  hasRequiredIsImplemented$5 = 1;
  isImplemented$5 = function() {
    try {
      Object.keys("primitive");
      return true;
    } catch (e) {
      return false;
    }
  };
  return isImplemented$5;
}
var shim$4;
var hasRequiredShim$4;
function requireShim$4() {
  if (hasRequiredShim$4) return shim$4;
  hasRequiredShim$4 = 1;
  var isValue2 = requireIsValue();
  var keys2 = Object.keys;
  shim$4 = function(object) {
    return keys2(isValue2(object) ? Object(object) : object);
  };
  return shim$4;
}
var keys;
var hasRequiredKeys;
function requireKeys() {
  if (hasRequiredKeys) return keys;
  hasRequiredKeys = 1;
  keys = requireIsImplemented$5()() ? Object.keys : requireShim$4();
  return keys;
}
var shim$3;
var hasRequiredShim$3;
function requireShim$3() {
  if (hasRequiredShim$3) return shim$3;
  hasRequiredShim$3 = 1;
  var keys2 = requireKeys(), value = requireValidValue(), max = Math.max;
  shim$3 = function(dest, src) {
    var error, i2, length = max(arguments.length, 2), assign2;
    dest = Object(value(dest));
    assign2 = function(key) {
      try {
        dest[key] = src[key];
      } catch (e) {
        if (!error) error = e;
      }
    };
    for (i2 = 1; i2 < length; ++i2) {
      src = arguments[i2];
      keys2(src).forEach(assign2);
    }
    if (error !== void 0) throw error;
    return dest;
  };
  return shim$3;
}
var assign;
var hasRequiredAssign;
function requireAssign() {
  if (hasRequiredAssign) return assign;
  hasRequiredAssign = 1;
  assign = requireIsImplemented$6()() ? Object.assign : requireShim$3();
  return assign;
}
var normalizeOptions;
var hasRequiredNormalizeOptions;
function requireNormalizeOptions() {
  if (hasRequiredNormalizeOptions) return normalizeOptions;
  hasRequiredNormalizeOptions = 1;
  var isValue2 = requireIsValue();
  var forEach2 = Array.prototype.forEach, create = Object.create;
  var process = function(src, obj) {
    var key;
    for (key in src) obj[key] = src[key];
  };
  normalizeOptions = function(opts1) {
    var result = create(null);
    forEach2.call(arguments, function(options) {
      if (!isValue2(options)) return;
      process(Object(options), result);
    });
    return result;
  };
  return normalizeOptions;
}
var isImplemented$4;
var hasRequiredIsImplemented$4;
function requireIsImplemented$4() {
  if (hasRequiredIsImplemented$4) return isImplemented$4;
  hasRequiredIsImplemented$4 = 1;
  var str = "razdwatrzy";
  isImplemented$4 = function() {
    if (typeof str.contains !== "function") return false;
    return str.contains("dwa") === true && str.contains("foo") === false;
  };
  return isImplemented$4;
}
var shim$2;
var hasRequiredShim$2;
function requireShim$2() {
  if (hasRequiredShim$2) return shim$2;
  hasRequiredShim$2 = 1;
  var indexOf = String.prototype.indexOf;
  shim$2 = function(searchString) {
    return indexOf.call(this, searchString, arguments[1]) > -1;
  };
  return shim$2;
}
var contains;
var hasRequiredContains;
function requireContains() {
  if (hasRequiredContains) return contains;
  hasRequiredContains = 1;
  contains = requireIsImplemented$4()() ? String.prototype.contains : requireShim$2();
  return contains;
}
var hasRequiredD;
function requireD() {
  if (hasRequiredD) return d.exports;
  hasRequiredD = 1;
  var isValue2 = requireIs$4(), isPlainFunction = requireIs(), assign2 = requireAssign(), normalizeOpts = requireNormalizeOptions(), contains2 = requireContains();
  var d$12 = d.exports = function(dscr, value) {
    var c, e, w2, options, desc;
    if (arguments.length < 2 || typeof dscr !== "string") {
      options = value;
      value = dscr;
      dscr = null;
    } else {
      options = arguments[2];
    }
    if (isValue2(dscr)) {
      c = contains2.call(dscr, "c");
      e = contains2.call(dscr, "e");
      w2 = contains2.call(dscr, "w");
    } else {
      c = w2 = true;
      e = false;
    }
    desc = { value, configurable: c, enumerable: e, writable: w2 };
    return !options ? desc : assign2(normalizeOpts(options), desc);
  };
  d$12.gs = function(dscr, get2, set) {
    var c, e, options, desc;
    if (typeof dscr !== "string") {
      options = set;
      set = get2;
      get2 = dscr;
      dscr = null;
    } else {
      options = arguments[3];
    }
    if (!isValue2(get2)) {
      get2 = void 0;
    } else if (!isPlainFunction(get2)) {
      options = get2;
      get2 = set = void 0;
    } else if (!isValue2(set)) {
      set = void 0;
    } else if (!isPlainFunction(set)) {
      options = set;
      set = void 0;
    }
    if (isValue2(dscr)) {
      c = contains2.call(dscr, "c");
      e = contains2.call(dscr, "e");
    } else {
      c = true;
      e = false;
    }
    desc = { get: get2, set, configurable: c, enumerable: e };
    return !options ? desc : assign2(normalizeOpts(options), desc);
  };
  return d.exports;
}
var isArguments;
var hasRequiredIsArguments;
function requireIsArguments() {
  if (hasRequiredIsArguments) return isArguments;
  hasRequiredIsArguments = 1;
  var objToString = Object.prototype.toString, id = objToString.call(/* @__PURE__ */ function() {
    return arguments;
  }());
  isArguments = function(value) {
    return objToString.call(value) === id;
  };
  return isArguments;
}
var isString;
var hasRequiredIsString;
function requireIsString() {
  if (hasRequiredIsString) return isString;
  hasRequiredIsString = 1;
  var objToString = Object.prototype.toString, id = objToString.call("");
  isString = function(value) {
    return typeof value === "string" || value && typeof value === "object" && (value instanceof String || objToString.call(value) === id) || false;
  };
  return isString;
}
var array = { exports: {} };
var isImplemented$3;
var hasRequiredIsImplemented$3;
function requireIsImplemented$3() {
  if (hasRequiredIsImplemented$3) return isImplemented$3;
  hasRequiredIsImplemented$3 = 1;
  isImplemented$3 = function() {
    if (typeof globalThis !== "object") return false;
    if (!globalThis) return false;
    return globalThis.Array === Array;
  };
  return isImplemented$3;
}
var implementation;
var hasRequiredImplementation;
function requireImplementation() {
  if (hasRequiredImplementation) return implementation;
  hasRequiredImplementation = 1;
  var naiveFallback = function() {
    if (typeof self === "object" && self) return self;
    if (typeof window === "object" && window) return window;
    throw new Error("Unable to resolve global `this`");
  };
  implementation = function() {
    if (this) return this;
    try {
      Object.defineProperty(Object.prototype, "__global__", {
        get: function() {
          return this;
        },
        configurable: true
      });
    } catch (error) {
      return naiveFallback();
    }
    try {
      if (!__global__) return naiveFallback();
      return __global__;
    } finally {
      delete Object.prototype.__global__;
    }
  }();
  return implementation;
}
var globalThis_1;
var hasRequiredGlobalThis;
function requireGlobalThis() {
  if (hasRequiredGlobalThis) return globalThis_1;
  hasRequiredGlobalThis = 1;
  globalThis_1 = requireIsImplemented$3()() ? globalThis : requireImplementation();
  return globalThis_1;
}
var isImplemented$2;
var hasRequiredIsImplemented$2;
function requireIsImplemented$2() {
  if (hasRequiredIsImplemented$2) return isImplemented$2;
  hasRequiredIsImplemented$2 = 1;
  var global2 = requireGlobalThis(), validTypes = { object: true, symbol: true };
  isImplemented$2 = function() {
    var Symbol2 = global2.Symbol;
    var symbol;
    if (typeof Symbol2 !== "function") return false;
    symbol = Symbol2("test symbol");
    try {
      String(symbol);
    } catch (e) {
      return false;
    }
    if (!validTypes[typeof Symbol2.iterator]) return false;
    if (!validTypes[typeof Symbol2.toPrimitive]) return false;
    if (!validTypes[typeof Symbol2.toStringTag]) return false;
    return true;
  };
  return isImplemented$2;
}
var isSymbol;
var hasRequiredIsSymbol;
function requireIsSymbol() {
  if (hasRequiredIsSymbol) return isSymbol;
  hasRequiredIsSymbol = 1;
  isSymbol = function(value) {
    if (!value) return false;
    if (typeof value === "symbol") return true;
    if (!value.constructor) return false;
    if (value.constructor.name !== "Symbol") return false;
    return value[value.constructor.toStringTag] === "Symbol";
  };
  return isSymbol;
}
var validateSymbol;
var hasRequiredValidateSymbol;
function requireValidateSymbol() {
  if (hasRequiredValidateSymbol) return validateSymbol;
  hasRequiredValidateSymbol = 1;
  var isSymbol2 = requireIsSymbol();
  validateSymbol = function(value) {
    if (!isSymbol2(value)) throw new TypeError(value + " is not a symbol");
    return value;
  };
  return validateSymbol;
}
var generateName;
var hasRequiredGenerateName;
function requireGenerateName() {
  if (hasRequiredGenerateName) return generateName;
  hasRequiredGenerateName = 1;
  var d2 = requireD();
  var create = Object.create, defineProperty = Object.defineProperty, objPrototype = Object.prototype;
  var created = create(null);
  generateName = function(desc) {
    var postfix = 0, name, ie11BugWorkaround;
    while (created[desc + (postfix || "")]) ++postfix;
    desc += postfix || "";
    created[desc] = true;
    name = "@@" + desc;
    defineProperty(
      objPrototype,
      name,
      d2.gs(null, function(value) {
        if (ie11BugWorkaround) return;
        ie11BugWorkaround = true;
        defineProperty(this, name, d2(value));
        ie11BugWorkaround = false;
      })
    );
    return name;
  };
  return generateName;
}
var standardSymbols;
var hasRequiredStandardSymbols;
function requireStandardSymbols() {
  if (hasRequiredStandardSymbols) return standardSymbols;
  hasRequiredStandardSymbols = 1;
  var d2 = requireD(), NativeSymbol = requireGlobalThis().Symbol;
  standardSymbols = function(SymbolPolyfill) {
    return Object.defineProperties(SymbolPolyfill, {
      // To ensure proper interoperability with other native functions (e.g. Array.from)
      // fallback to eventual native implementation of given symbol
      hasInstance: d2(
        "",
        NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")
      ),
      isConcatSpreadable: d2(
        "",
        NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")
      ),
      iterator: d2("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
      match: d2("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
      replace: d2("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
      search: d2("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
      species: d2("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
      split: d2("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
      toPrimitive: d2(
        "",
        NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")
      ),
      toStringTag: d2(
        "",
        NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")
      ),
      unscopables: d2(
        "",
        NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables")
      )
    });
  };
  return standardSymbols;
}
var symbolRegistry;
var hasRequiredSymbolRegistry;
function requireSymbolRegistry() {
  if (hasRequiredSymbolRegistry) return symbolRegistry;
  hasRequiredSymbolRegistry = 1;
  var d2 = requireD(), validateSymbol2 = requireValidateSymbol();
  var registry = /* @__PURE__ */ Object.create(null);
  symbolRegistry = function(SymbolPolyfill) {
    return Object.defineProperties(SymbolPolyfill, {
      for: d2(function(key) {
        if (registry[key]) return registry[key];
        return registry[key] = SymbolPolyfill(String(key));
      }),
      keyFor: d2(function(symbol) {
        var key;
        validateSymbol2(symbol);
        for (key in registry) {
          if (registry[key] === symbol) return key;
        }
        return void 0;
      })
    });
  };
  return symbolRegistry;
}
var polyfill$1;
var hasRequiredPolyfill$1;
function requirePolyfill$1() {
  if (hasRequiredPolyfill$1) return polyfill$1;
  hasRequiredPolyfill$1 = 1;
  var d2 = requireD(), validateSymbol2 = requireValidateSymbol(), NativeSymbol = requireGlobalThis().Symbol, generateName2 = requireGenerateName(), setupStandardSymbols = requireStandardSymbols(), setupSymbolRegistry = requireSymbolRegistry();
  var create = Object.create, defineProperties = Object.defineProperties, defineProperty = Object.defineProperty;
  var SymbolPolyfill, HiddenSymbol, isNativeSafe;
  if (typeof NativeSymbol === "function") {
    try {
      String(NativeSymbol());
      isNativeSafe = true;
    } catch (ignore) {
    }
  } else {
    NativeSymbol = null;
  }
  HiddenSymbol = function Symbol2(description) {
    if (this instanceof HiddenSymbol) throw new TypeError("Symbol is not a constructor");
    return SymbolPolyfill(description);
  };
  polyfill$1 = SymbolPolyfill = function Symbol2(description) {
    var symbol;
    if (this instanceof Symbol2) throw new TypeError("Symbol is not a constructor");
    if (isNativeSafe) return NativeSymbol(description);
    symbol = create(HiddenSymbol.prototype);
    description = description === void 0 ? "" : String(description);
    return defineProperties(symbol, {
      __description__: d2("", description),
      __name__: d2("", generateName2(description))
    });
  };
  setupStandardSymbols(SymbolPolyfill);
  setupSymbolRegistry(SymbolPolyfill);
  defineProperties(HiddenSymbol.prototype, {
    constructor: d2(SymbolPolyfill),
    toString: d2("", function() {
      return this.__name__;
    })
  });
  defineProperties(SymbolPolyfill.prototype, {
    toString: d2(function() {
      return "Symbol (" + validateSymbol2(this).__description__ + ")";
    }),
    valueOf: d2(function() {
      return validateSymbol2(this);
    })
  });
  defineProperty(
    SymbolPolyfill.prototype,
    SymbolPolyfill.toPrimitive,
    d2("", function() {
      var symbol = validateSymbol2(this);
      if (typeof symbol === "symbol") return symbol;
      return symbol.toString();
    })
  );
  defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d2("c", "Symbol"));
  defineProperty(
    HiddenSymbol.prototype,
    SymbolPolyfill.toStringTag,
    d2("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])
  );
  defineProperty(
    HiddenSymbol.prototype,
    SymbolPolyfill.toPrimitive,
    d2("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive])
  );
  return polyfill$1;
}
var es6Symbol;
var hasRequiredEs6Symbol;
function requireEs6Symbol() {
  if (hasRequiredEs6Symbol) return es6Symbol;
  hasRequiredEs6Symbol = 1;
  es6Symbol = requireIsImplemented$2()() ? requireGlobalThis().Symbol : requirePolyfill$1();
  return es6Symbol;
}
var clear;
var hasRequiredClear;
function requireClear() {
  if (hasRequiredClear) return clear;
  hasRequiredClear = 1;
  var value = requireValidValue();
  clear = function() {
    value(this).length = 0;
    return this;
  };
  return clear;
}
var validCallable;
var hasRequiredValidCallable;
function requireValidCallable() {
  if (hasRequiredValidCallable) return validCallable;
  hasRequiredValidCallable = 1;
  validCallable = function(fn2) {
    if (typeof fn2 !== "function") throw new TypeError(fn2 + " is not a function");
    return fn2;
  };
  return validCallable;
}
var coerce;
var hasRequiredCoerce;
function requireCoerce() {
  if (hasRequiredCoerce) return coerce;
  hasRequiredCoerce = 1;
  var isValue2 = requireIs$4(), isObject2 = requireIs$3();
  var objectToString = Object.prototype.toString;
  coerce = function(value) {
    if (!isValue2(value)) return null;
    if (isObject2(value)) {
      var valueToString = value.toString;
      if (typeof valueToString !== "function") return null;
      if (valueToString === objectToString) return null;
    }
    try {
      return "" + value;
    } catch (error) {
      return null;
    }
  };
  return coerce;
}
var safeToString;
var hasRequiredSafeToString;
function requireSafeToString() {
  if (hasRequiredSafeToString) return safeToString;
  hasRequiredSafeToString = 1;
  safeToString = function(value) {
    try {
      return value.toString();
    } catch (error) {
      try {
        return String(value);
      } catch (error2) {
        return null;
      }
    }
  };
  return safeToString;
}
var toShortString;
var hasRequiredToShortString;
function requireToShortString() {
  if (hasRequiredToShortString) return toShortString;
  hasRequiredToShortString = 1;
  var safeToString2 = requireSafeToString();
  var reNewLine = /[\n\r\u2028\u2029]/g;
  toShortString = function(value) {
    var string2 = safeToString2(value);
    if (string2 === null) return "<Non-coercible to string value>";
    if (string2.length > 100) string2 = string2.slice(0, 99) + "…";
    string2 = string2.replace(reNewLine, function(char) {
      switch (char) {
        case "\n":
          return "\\n";
        case "\r":
          return "\\r";
        case "\u2028":
          return "\\u2028";
        case "\u2029":
          return "\\u2029";
        /* istanbul ignore next */
        default:
          throw new Error("Unexpected character");
      }
    });
    return string2;
  };
  return toShortString;
}
var resolveErrorMessage;
var hasRequiredResolveErrorMessage;
function requireResolveErrorMessage() {
  if (hasRequiredResolveErrorMessage) return resolveErrorMessage;
  hasRequiredResolveErrorMessage = 1;
  var stringCoerce = requireCoerce(), toShortString2 = requireToShortString();
  resolveErrorMessage = function(errorMessage, value, inputOptions) {
    if (inputOptions && inputOptions.errorMessage) {
      errorMessage = stringCoerce(inputOptions.errorMessage);
    }
    var valueInsertIndex = errorMessage.indexOf("%v");
    var valueToken = valueInsertIndex > -1 ? toShortString2(value) : null;
    if (inputOptions && inputOptions.name) {
      var nameInsertIndex = errorMessage.indexOf("%n");
      if (nameInsertIndex > -1) {
        if (valueInsertIndex > -1) {
          var firstToken, secondToken, firstInsertIndex, secondInsertIndex;
          if (nameInsertIndex > valueInsertIndex) {
            firstToken = valueToken;
            firstInsertIndex = valueInsertIndex;
            secondToken = inputOptions.name;
            secondInsertIndex = nameInsertIndex;
          } else {
            firstToken = inputOptions.name;
            firstInsertIndex = nameInsertIndex;
            secondToken = valueToken;
            secondInsertIndex = valueInsertIndex;
          }
          return errorMessage.slice(0, firstInsertIndex) + firstToken + errorMessage.slice(firstInsertIndex + 2, secondInsertIndex) + secondToken + errorMessage.slice(secondInsertIndex + 2);
        }
        return errorMessage.slice(0, nameInsertIndex) + inputOptions.name + errorMessage.slice(nameInsertIndex + 2);
      }
    }
    if (valueInsertIndex > -1) {
      return errorMessage.slice(0, valueInsertIndex) + valueToken + errorMessage.slice(valueInsertIndex + 2);
    }
    return errorMessage;
  };
  return resolveErrorMessage;
}
var resolveException;
var hasRequiredResolveException;
function requireResolveException() {
  if (hasRequiredResolveException) return resolveException;
  hasRequiredResolveException = 1;
  var isValue2 = requireIs$4(), resolveErrorMessage2 = requireResolveErrorMessage();
  resolveException = function(value, defaultMessage, inputOptions) {
    if (inputOptions && !isValue2(value)) {
      if ("default" in inputOptions) return inputOptions["default"];
      if (inputOptions.isOptional) return null;
    }
    var ErrorConstructor = inputOptions && inputOptions.Error || TypeError;
    var error = new ErrorConstructor(resolveErrorMessage2(defaultMessage, value, inputOptions));
    if (inputOptions && inputOptions.errorCode) error.code = inputOptions.errorCode;
    throw error;
  };
  return resolveException;
}
var ensure$1;
var hasRequiredEnsure$1;
function requireEnsure$1() {
  if (hasRequiredEnsure$1) return ensure$1;
  hasRequiredEnsure$1 = 1;
  var resolveException2 = requireResolveException(), is2 = requireIs$4();
  ensure$1 = function(value) {
    if (is2(value)) return value;
    var options = arguments[1];
    var errorMessage = options && options.name ? "Expected a value for %n, received %v" : "Cannot use %v";
    return resolveException2(value, errorMessage, options);
  };
  return ensure$1;
}
var ensure;
var hasRequiredEnsure;
function requireEnsure() {
  if (hasRequiredEnsure) return ensure;
  hasRequiredEnsure = 1;
  var resolveException2 = requireResolveException(), is2 = requireIs();
  ensure = function(value) {
    if (is2(value)) return value;
    var options = arguments[1];
    var errorMessage = options && options.name ? "Expected a plain function for %n, received %v" : "%v is not a plain function";
    return resolveException2(value, errorMessage, options);
  };
  return ensure;
}
var isImplemented$1;
var hasRequiredIsImplemented$1;
function requireIsImplemented$1() {
  if (hasRequiredIsImplemented$1) return isImplemented$1;
  hasRequiredIsImplemented$1 = 1;
  isImplemented$1 = function() {
    var from2 = Array.from, arr, result;
    if (typeof from2 !== "function") return false;
    arr = ["raz", "dwa"];
    result = from2(arr);
    return Boolean(result && result !== arr && result[1] === "dwa");
  };
  return isImplemented$1;
}
var isFunction;
var hasRequiredIsFunction;
function requireIsFunction() {
  if (hasRequiredIsFunction) return isFunction;
  hasRequiredIsFunction = 1;
  var objToString = Object.prototype.toString, isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);
  isFunction = function(value) {
    return typeof value === "function" && isFunctionStringTag(objToString.call(value));
  };
  return isFunction;
}
var isImplemented;
var hasRequiredIsImplemented;
function requireIsImplemented() {
  if (hasRequiredIsImplemented) return isImplemented;
  hasRequiredIsImplemented = 1;
  isImplemented = function() {
    var sign2 = Math.sign;
    if (typeof sign2 !== "function") return false;
    return sign2(10) === 1 && sign2(-20) === -1;
  };
  return isImplemented;
}
var shim$1;
var hasRequiredShim$1;
function requireShim$1() {
  if (hasRequiredShim$1) return shim$1;
  hasRequiredShim$1 = 1;
  shim$1 = function(value) {
    value = Number(value);
    if (isNaN(value) || value === 0) return value;
    return value > 0 ? 1 : -1;
  };
  return shim$1;
}
var sign;
var hasRequiredSign;
function requireSign() {
  if (hasRequiredSign) return sign;
  hasRequiredSign = 1;
  sign = requireIsImplemented()() ? Math.sign : requireShim$1();
  return sign;
}
var toInteger;
var hasRequiredToInteger;
function requireToInteger() {
  if (hasRequiredToInteger) return toInteger;
  hasRequiredToInteger = 1;
  var sign2 = requireSign(), abs = Math.abs, floor = Math.floor;
  toInteger = function(value) {
    if (isNaN(value)) return 0;
    value = Number(value);
    if (value === 0 || !isFinite(value)) return value;
    return sign2(value) * floor(abs(value));
  };
  return toInteger;
}
var toPosInteger;
var hasRequiredToPosInteger;
function requireToPosInteger() {
  if (hasRequiredToPosInteger) return toPosInteger;
  hasRequiredToPosInteger = 1;
  var toInteger2 = requireToInteger(), max = Math.max;
  toPosInteger = function(value) {
    return max(0, toInteger2(value));
  };
  return toPosInteger;
}
var shim;
var hasRequiredShim;
function requireShim() {
  if (hasRequiredShim) return shim;
  hasRequiredShim = 1;
  var iteratorSymbol = requireEs6Symbol().iterator, isArguments2 = requireIsArguments(), isFunction2 = requireIsFunction(), toPosInt = requireToPosInteger(), callable = requireValidCallable(), validValue2 = requireValidValue(), isValue2 = requireIsValue(), isString2 = requireIsString(), isArray = Array.isArray, call = Function.prototype.call, desc = { configurable: true, enumerable: true, writable: true, value: null }, defineProperty = Object.defineProperty;
  shim = function(arrayLike) {
    var mapFn = arguments[1], thisArg = arguments[2], Context, i2, j, arr, length, code, iterator, result, getIterator, value;
    arrayLike = Object(validValue2(arrayLike));
    if (isValue2(mapFn)) callable(mapFn);
    if (!this || this === Array || !isFunction2(this)) {
      if (!mapFn) {
        if (isArguments2(arrayLike)) {
          length = arrayLike.length;
          if (length !== 1) return Array.apply(null, arrayLike);
          arr = new Array(1);
          arr[0] = arrayLike[0];
          return arr;
        }
        if (isArray(arrayLike)) {
          arr = new Array(length = arrayLike.length);
          for (i2 = 0; i2 < length; ++i2) arr[i2] = arrayLike[i2];
          return arr;
        }
      }
      arr = [];
    } else {
      Context = this;
    }
    if (!isArray(arrayLike)) {
      if ((getIterator = arrayLike[iteratorSymbol]) !== void 0) {
        iterator = callable(getIterator).call(arrayLike);
        if (Context) arr = new Context();
        result = iterator.next();
        i2 = 0;
        while (!result.done) {
          value = mapFn ? call.call(mapFn, thisArg, result.value, i2) : result.value;
          if (Context) {
            desc.value = value;
            defineProperty(arr, i2, desc);
          } else {
            arr[i2] = value;
          }
          result = iterator.next();
          ++i2;
        }
        length = i2;
      } else if (isString2(arrayLike)) {
        length = arrayLike.length;
        if (Context) arr = new Context();
        for (i2 = 0, j = 0; i2 < length; ++i2) {
          value = arrayLike[i2];
          if (i2 + 1 < length) {
            code = value.charCodeAt(0);
            if (code >= 55296 && code <= 56319) value += arrayLike[++i2];
          }
          value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
          if (Context) {
            desc.value = value;
            defineProperty(arr, j, desc);
          } else {
            arr[j] = value;
          }
          ++j;
        }
        length = j;
      }
    }
    if (length === void 0) {
      length = toPosInt(arrayLike.length);
      if (Context) arr = new Context(length);
      for (i2 = 0; i2 < length; ++i2) {
        value = mapFn ? call.call(mapFn, thisArg, arrayLike[i2], i2) : arrayLike[i2];
        if (Context) {
          desc.value = value;
          defineProperty(arr, i2, desc);
        } else {
          arr[i2] = value;
        }
      }
    }
    if (Context) {
      desc.value = null;
      arr.length = length;
    }
    return arr;
  };
  return shim;
}
var from;
var hasRequiredFrom;
function requireFrom() {
  if (hasRequiredFrom) return from;
  hasRequiredFrom = 1;
  from = requireIsImplemented$1()() ? Array.from : requireShim();
  return from;
}
var copy;
var hasRequiredCopy;
function requireCopy() {
  if (hasRequiredCopy) return copy;
  hasRequiredCopy = 1;
  var aFrom = requireFrom(), assign2 = requireAssign(), value = requireValidValue();
  copy = function(obj) {
    var copy2 = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);
    if (copy2 !== obj && !propertyNames) return copy2;
    var result = {};
    if (propertyNames) {
      aFrom(propertyNames, function(propertyName) {
        if (options.ensure || propertyName in obj) result[propertyName] = obj[propertyName];
      });
    } else {
      assign2(result, obj);
    }
    return result;
  };
  return copy;
}
var _iterate;
var hasRequired_iterate;
function require_iterate() {
  if (hasRequired_iterate) return _iterate;
  hasRequired_iterate = 1;
  var callable = requireValidCallable(), value = requireValidValue(), bind = Function.prototype.bind, call = Function.prototype.call, keys2 = Object.keys, objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;
  _iterate = function(method, defVal) {
    return function(obj, cb) {
      var list, thisArg = arguments[2], compareFn = arguments[3];
      obj = Object(value(obj));
      callable(cb);
      list = keys2(obj);
      if (compareFn) {
        list.sort(typeof compareFn === "function" ? bind.call(compareFn, obj) : void 0);
      }
      if (typeof method !== "function") method = list[method];
      return call.call(method, list, function(key, index) {
        if (!objPropertyIsEnumerable.call(obj, key)) return defVal;
        return call.call(cb, thisArg, obj[key], key, obj, index);
      });
    };
  };
  return _iterate;
}
var forEach;
var hasRequiredForEach;
function requireForEach() {
  if (hasRequiredForEach) return forEach;
  hasRequiredForEach = 1;
  forEach = require_iterate()("forEach");
  return forEach;
}
var map;
var hasRequiredMap;
function requireMap() {
  if (hasRequiredMap) return map;
  hasRequiredMap = 1;
  var callable = requireValidCallable(), forEach2 = requireForEach(), call = Function.prototype.call;
  map = function(obj, cb) {
    var result = {}, thisArg = arguments[2];
    callable(cb);
    forEach2(obj, function(value, key, targetObj, index) {
      result[key] = call.call(cb, thisArg, value, key, targetObj, index);
    });
    return result;
  };
  return map;
}
var autoBind;
var hasRequiredAutoBind;
function requireAutoBind() {
  if (hasRequiredAutoBind) return autoBind;
  hasRequiredAutoBind = 1;
  var isValue2 = requireIs$4(), ensureValue = requireEnsure$1(), ensurePlainFunction = requireEnsure(), copy2 = requireCopy(), normalizeOptions2 = requireNormalizeOptions(), map2 = requireMap();
  var bind = Function.prototype.bind, defineProperty = Object.defineProperty, hasOwnProperty2 = Object.prototype.hasOwnProperty, define;
  define = function(name, desc, options) {
    var value = ensureValue(desc) && ensurePlainFunction(desc.value), dgs;
    dgs = copy2(desc);
    delete dgs.writable;
    delete dgs.value;
    dgs.get = function() {
      if (!options.overwriteDefinition && hasOwnProperty2.call(this, name)) return value;
      desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);
      defineProperty(this, name, desc);
      return this[name];
    };
    return dgs;
  };
  autoBind = function(props) {
    var options = normalizeOptions2(arguments[1]);
    if (isValue2(options.resolveContext)) ensurePlainFunction(options.resolveContext);
    return map2(props, function(desc, name) {
      return define(name, desc, options);
    });
  };
  return autoBind;
}
var es6Iterator;
var hasRequiredEs6Iterator;
function requireEs6Iterator() {
  if (hasRequiredEs6Iterator) return es6Iterator;
  hasRequiredEs6Iterator = 1;
  var clear2 = requireClear(), assign2 = requireAssign(), callable = requireValidCallable(), value = requireValidValue(), d2 = requireD(), autoBind2 = requireAutoBind(), Symbol2 = requireEs6Symbol();
  var defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, Iterator;
  es6Iterator = Iterator = function(list, context) {
    if (!(this instanceof Iterator)) throw new TypeError("Constructor requires 'new'");
    defineProperties(this, {
      __list__: d2("w", value(list)),
      __context__: d2("w", context),
      __nextIndex__: d2("w", 0)
    });
    if (!context) return;
    callable(context.on);
    context.on("_add", this._onAdd);
    context.on("_delete", this._onDelete);
    context.on("_clear", this._onClear);
  };
  delete Iterator.prototype.constructor;
  defineProperties(
    Iterator.prototype,
    assign2(
      {
        _next: d2(function() {
          var i2;
          if (!this.__list__) return void 0;
          if (this.__redo__) {
            i2 = this.__redo__.shift();
            if (i2 !== void 0) return i2;
          }
          if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
          this._unBind();
          return void 0;
        }),
        next: d2(function() {
          return this._createResult(this._next());
        }),
        _createResult: d2(function(i2) {
          if (i2 === void 0) return { done: true, value: void 0 };
          return { done: false, value: this._resolve(i2) };
        }),
        _resolve: d2(function(i2) {
          return this.__list__[i2];
        }),
        _unBind: d2(function() {
          this.__list__ = null;
          delete this.__redo__;
          if (!this.__context__) return;
          this.__context__.off("_add", this._onAdd);
          this.__context__.off("_delete", this._onDelete);
          this.__context__.off("_clear", this._onClear);
          this.__context__ = null;
        }),
        toString: d2(function() {
          return "[object " + (this[Symbol2.toStringTag] || "Object") + "]";
        })
      },
      autoBind2({
        _onAdd: d2(function(index) {
          if (index >= this.__nextIndex__) return;
          ++this.__nextIndex__;
          if (!this.__redo__) {
            defineProperty(this, "__redo__", d2("c", [index]));
            return;
          }
          this.__redo__.forEach(function(redo, i2) {
            if (redo >= index) this.__redo__[i2] = ++redo;
          }, this);
          this.__redo__.push(index);
        }),
        _onDelete: d2(function(index) {
          var i2;
          if (index >= this.__nextIndex__) return;
          --this.__nextIndex__;
          if (!this.__redo__) return;
          i2 = this.__redo__.indexOf(index);
          if (i2 !== -1) this.__redo__.splice(i2, 1);
          this.__redo__.forEach(function(redo, j) {
            if (redo > index) this.__redo__[j] = --redo;
          }, this);
        }),
        _onClear: d2(function() {
          if (this.__redo__) clear2.call(this.__redo__);
          this.__nextIndex__ = 0;
        })
      })
    )
  );
  defineProperty(
    Iterator.prototype,
    Symbol2.iterator,
    d2(function() {
      return this;
    })
  );
  return es6Iterator;
}
var hasRequiredArray;
function requireArray() {
  if (hasRequiredArray) return array.exports;
  hasRequiredArray = 1;
  var setPrototypeOf2 = requireSetPrototypeOf(), contains2 = requireContains(), d2 = requireD(), Symbol2 = requireEs6Symbol(), Iterator = requireEs6Iterator();
  var defineProperty = Object.defineProperty, ArrayIterator;
  ArrayIterator = array.exports = function(arr, kind) {
    if (!(this instanceof ArrayIterator)) throw new TypeError("Constructor requires 'new'");
    Iterator.call(this, arr);
    if (!kind) kind = "value";
    else if (contains2.call(kind, "key+value")) kind = "key+value";
    else if (contains2.call(kind, "key")) kind = "key";
    else kind = "value";
    defineProperty(this, "__kind__", d2("", kind));
  };
  if (setPrototypeOf2) setPrototypeOf2(ArrayIterator, Iterator);
  delete ArrayIterator.prototype.constructor;
  ArrayIterator.prototype = Object.create(Iterator.prototype, {
    _resolve: d2(function(i2) {
      if (this.__kind__ === "value") return this.__list__[i2];
      if (this.__kind__ === "key+value") return [i2, this.__list__[i2]];
      return i2;
    })
  });
  defineProperty(ArrayIterator.prototype, Symbol2.toStringTag, d2("c", "Array Iterator"));
  return array.exports;
}
var string = { exports: {} };
var hasRequiredString;
function requireString() {
  if (hasRequiredString) return string.exports;
  hasRequiredString = 1;
  var setPrototypeOf2 = requireSetPrototypeOf(), d2 = requireD(), Symbol2 = requireEs6Symbol(), Iterator = requireEs6Iterator();
  var defineProperty = Object.defineProperty, StringIterator;
  StringIterator = string.exports = function(str) {
    if (!(this instanceof StringIterator)) throw new TypeError("Constructor requires 'new'");
    str = String(str);
    Iterator.call(this, str);
    defineProperty(this, "__length__", d2("", str.length));
  };
  if (setPrototypeOf2) setPrototypeOf2(StringIterator, Iterator);
  delete StringIterator.prototype.constructor;
  StringIterator.prototype = Object.create(Iterator.prototype, {
    _next: d2(function() {
      if (!this.__list__) return void 0;
      if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
      this._unBind();
      return void 0;
    }),
    _resolve: d2(function(i2) {
      var char = this.__list__[i2], code;
      if (this.__nextIndex__ === this.__length__) return char;
      code = char.charCodeAt(0);
      if (code >= 55296 && code <= 56319) return char + this.__list__[this.__nextIndex__++];
      return char;
    })
  });
  defineProperty(StringIterator.prototype, Symbol2.toStringTag, d2("c", "String Iterator"));
  return string.exports;
}
var isIterable;
var hasRequiredIsIterable;
function requireIsIterable() {
  if (hasRequiredIsIterable) return isIterable;
  hasRequiredIsIterable = 1;
  var isArguments2 = requireIsArguments(), isValue2 = requireIsValue(), isString2 = requireIsString();
  var iteratorSymbol = requireEs6Symbol().iterator, isArray = Array.isArray;
  isIterable = function(value) {
    if (!isValue2(value)) return false;
    if (isArray(value)) return true;
    if (isString2(value)) return true;
    if (isArguments2(value)) return true;
    return typeof value[iteratorSymbol] === "function";
  };
  return isIterable;
}
var validIterable;
var hasRequiredValidIterable;
function requireValidIterable() {
  if (hasRequiredValidIterable) return validIterable;
  hasRequiredValidIterable = 1;
  var isIterable2 = requireIsIterable();
  validIterable = function(value) {
    if (!isIterable2(value)) throw new TypeError(value + " is not iterable");
    return value;
  };
  return validIterable;
}
var get;
var hasRequiredGet;
function requireGet() {
  if (hasRequiredGet) return get;
  hasRequiredGet = 1;
  var isArguments2 = requireIsArguments(), isString2 = requireIsString(), ArrayIterator = requireArray(), StringIterator = requireString(), iterable = requireValidIterable(), iteratorSymbol = requireEs6Symbol().iterator;
  get = function(obj) {
    if (typeof iterable(obj)[iteratorSymbol] === "function") return obj[iteratorSymbol]();
    if (isArguments2(obj)) return new ArrayIterator(obj);
    if (isString2(obj)) return new StringIterator(obj);
    return new ArrayIterator(obj);
  };
  return get;
}
var forOf;
var hasRequiredForOf;
function requireForOf() {
  if (hasRequiredForOf) return forOf;
  hasRequiredForOf = 1;
  var isArguments2 = requireIsArguments(), callable = requireValidCallable(), isString2 = requireIsString(), get2 = requireGet();
  var isArray = Array.isArray, call = Function.prototype.call, some = Array.prototype.some;
  forOf = function(iterable, cb) {
    var mode, thisArg = arguments[2], result, doBreak, broken, i2, length, char, code;
    if (isArray(iterable) || isArguments2(iterable)) mode = "array";
    else if (isString2(iterable)) mode = "string";
    else iterable = get2(iterable);
    callable(cb);
    doBreak = function() {
      broken = true;
    };
    if (mode === "array") {
      some.call(iterable, function(value) {
        call.call(cb, thisArg, value, doBreak);
        return broken;
      });
      return;
    }
    if (mode === "string") {
      length = iterable.length;
      for (i2 = 0; i2 < length; ++i2) {
        char = iterable[i2];
        if (i2 + 1 < length) {
          code = char.charCodeAt(0);
          if (code >= 55296 && code <= 56319) char += iterable[++i2];
        }
        call.call(cb, thisArg, char, doBreak);
        if (broken) break;
      }
      return;
    }
    result = iterable.next();
    while (!result.done) {
      call.call(cb, thisArg, result.value, doBreak);
      if (broken) return;
      result = iterable.next();
    }
  };
  return forOf;
}
var isNativeImplemented;
var hasRequiredIsNativeImplemented;
function requireIsNativeImplemented() {
  if (hasRequiredIsNativeImplemented) return isNativeImplemented;
  hasRequiredIsNativeImplemented = 1;
  isNativeImplemented = function() {
    if (typeof WeakMap !== "function") return false;
    return Object.prototype.toString.call(/* @__PURE__ */ new WeakMap()) === "[object WeakMap]";
  }();
  return isNativeImplemented;
}
var polyfill;
var hasRequiredPolyfill;
function requirePolyfill() {
  if (hasRequiredPolyfill) return polyfill;
  hasRequiredPolyfill = 1;
  var isValue2 = requireIsValue(), setPrototypeOf2 = requireSetPrototypeOf(), object = requireValidObject(), ensureValue = requireValidValue(), randomUniq2 = requireRandomUniq(), d2 = requireD(), getIterator = requireGet(), forOf2 = requireForOf(), toStringTagSymbol = requireEs6Symbol().toStringTag, isNative = requireIsNativeImplemented(), isArray = Array.isArray, defineProperty = Object.defineProperty, objHasOwnProperty = Object.prototype.hasOwnProperty, getPrototypeOf = Object.getPrototypeOf, WeakMapPoly;
  polyfill = WeakMapPoly = function() {
    var iterable = arguments[0], self2;
    if (!(this instanceof WeakMapPoly)) throw new TypeError("Constructor requires 'new'");
    self2 = isNative && setPrototypeOf2 && WeakMap !== WeakMapPoly ? setPrototypeOf2(/* @__PURE__ */ new WeakMap(), getPrototypeOf(this)) : this;
    if (isValue2(iterable)) {
      if (!isArray(iterable)) iterable = getIterator(iterable);
    }
    defineProperty(self2, "__weakMapData__", d2("c", "$weakMap$" + randomUniq2()));
    if (!iterable) return self2;
    forOf2(iterable, function(val) {
      ensureValue(val);
      self2.set(val[0], val[1]);
    });
    return self2;
  };
  if (isNative) {
    if (setPrototypeOf2) setPrototypeOf2(WeakMapPoly, WeakMap);
    WeakMapPoly.prototype = Object.create(WeakMap.prototype, { constructor: d2(WeakMapPoly) });
  }
  Object.defineProperties(WeakMapPoly.prototype, {
    delete: d2(function(key) {
      if (objHasOwnProperty.call(object(key), this.__weakMapData__)) {
        delete key[this.__weakMapData__];
        return true;
      }
      return false;
    }),
    get: d2(function(key) {
      if (!objHasOwnProperty.call(object(key), this.__weakMapData__)) return void 0;
      return key[this.__weakMapData__];
    }),
    has: d2(function(key) {
      return objHasOwnProperty.call(object(key), this.__weakMapData__);
    }),
    set: d2(function(key, value) {
      defineProperty(object(key), this.__weakMapData__, d2("c", value));
      return this;
    }),
    toString: d2(function() {
      return "[object WeakMap]";
    })
  });
  defineProperty(WeakMapPoly.prototype, toStringTagSymbol, d2("c", "WeakMap"));
  return polyfill;
}
var es6WeakMap;
var hasRequiredEs6WeakMap;
function requireEs6WeakMap() {
  if (hasRequiredEs6WeakMap) return es6WeakMap;
  hasRequiredEs6WeakMap = 1;
  es6WeakMap = requireIsImplemented$8()() ? WeakMap : requirePolyfill();
  return es6WeakMap;
}
var basic;
var hasRequiredBasic;
function requireBasic() {
  if (hasRequiredBasic) return basic;
  hasRequiredBasic = 1;
  basic = [
    { name: "black", hex: "#000000" },
    { name: "blue", hex: "#0000FF" },
    { name: "cyan", hex: "#00FFFF" },
    { name: "green", hex: "#008000" },
    { name: "teal", hex: "#008080" },
    { name: "turquoise", hex: "#40E0D0" },
    { name: "indigo", hex: "#4B0082" },
    { name: "gray", hex: "#808080" },
    { name: "purple", hex: "#800080" },
    { name: "brown", hex: "#A52A2A" },
    { name: "tan", hex: "#D2B48C" },
    { name: "violet", hex: "#EE82EE" },
    { name: "beige", hex: "#F5F5DC" },
    { name: "fuchsia", hex: "#FF00FF" },
    { name: "gold", hex: "#FFD700" },
    { name: "magenta", hex: "#FF00FF" },
    { name: "orange", hex: "#FFA500" },
    { name: "pink", hex: "#FFC0CB" },
    { name: "red", hex: "#FF0000" },
    { name: "white", hex: "#FFFFFF" },
    { name: "yellow", hex: "#FFFF00" }
  ];
  return basic;
}
var html;
var hasRequiredHtml;
function requireHtml() {
  if (hasRequiredHtml) return html;
  hasRequiredHtml = 1;
  html = [
    { name: "aqua", hex: "#00FFFF" },
    { name: "aliceblue", hex: "#F0F8FF" },
    { name: "antiquewhite", hex: "#FAEBD7" },
    { name: "black", hex: "#000000" },
    { name: "blue", hex: "#0000FF" },
    { name: "cyan", hex: "#00FFFF" },
    { name: "darkblue", hex: "#00008B" },
    { name: "darkcyan", hex: "#008B8B" },
    { name: "darkgreen", hex: "#006400" },
    { name: "darkturquoise", hex: "#00CED1" },
    { name: "deepskyblue", hex: "#00BFFF" },
    { name: "green", hex: "#008000" },
    { name: "lime", hex: "#00FF00" },
    { name: "mediumblue", hex: "#0000CD" },
    { name: "mediumspringgreen", hex: "#00FA9A" },
    { name: "navy", hex: "#000080" },
    { name: "springgreen", hex: "#00FF7F" },
    { name: "teal", hex: "#008080" },
    { name: "midnightblue", hex: "#191970" },
    { name: "dodgerblue", hex: "#1E90FF" },
    { name: "lightseagreen", hex: "#20B2AA" },
    { name: "forestgreen", hex: "#228B22" },
    { name: "seagreen", hex: "#2E8B57" },
    { name: "darkslategray", hex: "#2F4F4F" },
    { name: "darkslategrey", hex: "#2F4F4F" },
    { name: "limegreen", hex: "#32CD32" },
    { name: "mediumseagreen", hex: "#3CB371" },
    { name: "turquoise", hex: "#40E0D0" },
    { name: "royalblue", hex: "#4169E1" },
    { name: "steelblue", hex: "#4682B4" },
    { name: "darkslateblue", hex: "#483D8B" },
    { name: "mediumturquoise", hex: "#48D1CC" },
    { name: "indigo", hex: "#4B0082" },
    { name: "darkolivegreen", hex: "#556B2F" },
    { name: "cadetblue", hex: "#5F9EA0" },
    { name: "cornflowerblue", hex: "#6495ED" },
    { name: "mediumaquamarine", hex: "#66CDAA" },
    { name: "dimgray", hex: "#696969" },
    { name: "dimgrey", hex: "#696969" },
    { name: "slateblue", hex: "#6A5ACD" },
    { name: "olivedrab", hex: "#6B8E23" },
    { name: "slategray", hex: "#708090" },
    { name: "slategrey", hex: "#708090" },
    { name: "lightslategray", hex: "#778899" },
    { name: "lightslategrey", hex: "#778899" },
    { name: "mediumslateblue", hex: "#7B68EE" },
    { name: "lawngreen", hex: "#7CFC00" },
    { name: "aquamarine", hex: "#7FFFD4" },
    { name: "chartreuse", hex: "#7FFF00" },
    { name: "gray", hex: "#808080" },
    { name: "grey", hex: "#808080" },
    { name: "maroon", hex: "#800000" },
    { name: "olive", hex: "#808000" },
    { name: "purple", hex: "#800080" },
    { name: "lightskyblue", hex: "#87CEFA" },
    { name: "skyblue", hex: "#87CEEB" },
    { name: "blueviolet", hex: "#8A2BE2" },
    { name: "darkmagenta", hex: "#8B008B" },
    { name: "darkred", hex: "#8B0000" },
    { name: "saddlebrown", hex: "#8B4513" },
    { name: "darkseagreen", hex: "#8FBC8F" },
    { name: "lightgreen", hex: "#90EE90" },
    { name: "mediumpurple", hex: "#9370DB" },
    { name: "darkviolet", hex: "#9400D3" },
    { name: "palegreen", hex: "#98FB98" },
    { name: "darkorchid", hex: "#9932CC" },
    { name: "yellowgreen", hex: "#9ACD32" },
    { name: "sienna", hex: "#A0522D" },
    { name: "brown", hex: "#A52A2A" },
    { name: "darkgray", hex: "#A9A9A9" },
    { name: "darkgrey", hex: "#A9A9A9" },
    { name: "greenyellow", hex: "#ADFF2F" },
    { name: "lightblue", hex: "#ADD8E6" },
    { name: "paleturquoise", hex: "#AFEEEE" },
    { name: "lightsteelblue", hex: "#B0C4DE" },
    { name: "powderblue", hex: "#B0E0E6" },
    { name: "firebrick", hex: "#B22222" },
    { name: "darkgoldenrod", hex: "#B8860B" },
    { name: "mediumorchid", hex: "#BA55D3" },
    { name: "rosybrown", hex: "#BC8F8F" },
    { name: "darkkhaki", hex: "#BDB76B" },
    { name: "silver", hex: "#C0C0C0" },
    { name: "mediumvioletred", hex: "#C71585" },
    { name: "indianred", hex: "#CD5C5C" },
    { name: "peru", hex: "#CD853F" },
    { name: "chocolate", hex: "#D2691E" },
    { name: "tan", hex: "#D2B48C" },
    { name: "lightgray", hex: "#D3D3D3" },
    { name: "lightgrey", hex: "#D3D3D3" },
    { name: "thistle", hex: "#D8BFD8" },
    { name: "goldenrod", hex: "#DAA520" },
    { name: "orchid", hex: "#DA70D6" },
    { name: "palevioletred", hex: "#DB7093" },
    { name: "crimson", hex: "#DC143C" },
    { name: "gainsboro", hex: "#DCDCDC" },
    { name: "plum", hex: "#DDA0DD" },
    { name: "burlywood", hex: "#DEB887" },
    { name: "lightcyan", hex: "#E0FFFF" },
    { name: "lavender", hex: "#E6E6FA" },
    { name: "darksalmon", hex: "#E9967A" },
    { name: "palegoldenrod", hex: "#EEE8AA" },
    { name: "violet", hex: "#EE82EE" },
    { name: "azure", hex: "#F0FFFF" },
    { name: "honeydew", hex: "#F0FFF0" },
    { name: "khaki", hex: "#F0E68C" },
    { name: "lightcoral", hex: "#F08080" },
    { name: "sandybrown", hex: "#F4A460" },
    { name: "beige", hex: "#F5F5DC" },
    { name: "mintcream", hex: "#F5FFFA" },
    { name: "wheat", hex: "#F5DEB3" },
    { name: "whitesmoke", hex: "#F5F5F5" },
    { name: "ghostwhite", hex: "#F8F8FF" },
    {
      name: "lightgoldenrodyellow",
      hex: "#FAFAD2"
    },
    { name: "linen", hex: "#FAF0E6" },
    { name: "salmon", hex: "#FA8072" },
    { name: "oldlace", hex: "#FDF5E6" },
    { name: "bisque", hex: "#FFE4C4" },
    { name: "blanchedalmond", hex: "#FFEBCD" },
    { name: "coral", hex: "#FF7F50" },
    { name: "cornsilk", hex: "#FFF8DC" },
    { name: "darkorange", hex: "#FF8C00" },
    { name: "deeppink", hex: "#FF1493" },
    { name: "floralwhite", hex: "#FFFAF0" },
    { name: "fuchsia", hex: "#FF00FF" },
    { name: "gold", hex: "#FFD700" },
    { name: "hotpink", hex: "#FF69B4" },
    { name: "ivory", hex: "#FFFFF0" },
    { name: "lavenderblush", hex: "#FFF0F5" },
    { name: "lemonchiffon", hex: "#FFFACD" },
    { name: "lightpink", hex: "#FFB6C1" },
    { name: "lightsalmon", hex: "#FFA07A" },
    { name: "lightyellow", hex: "#FFFFE0" },
    { name: "magenta", hex: "#FF00FF" },
    { name: "mistyrose", hex: "#FFE4E1" },
    { name: "moccasin", hex: "#FFE4B5" },
    { name: "navajowhite", hex: "#FFDEAD" },
    { name: "orange", hex: "#FFA500" },
    { name: "orangered", hex: "#FF4500" },
    { name: "papayawhip", hex: "#FFEFD5" },
    { name: "peachpuff", hex: "#FFDAB9" },
    { name: "pink", hex: "#FFC0CB" },
    { name: "red", hex: "#FF0000" },
    { name: "seashell", hex: "#FFF5EE" },
    { name: "snow", hex: "#FFFAFA" },
    { name: "tomato", hex: "#FF6347" },
    { name: "white", hex: "#FFFFFF" },
    { name: "yellow", hex: "#FFFF00" }
  ];
  return html;
}
var ntc;
var hasRequiredNtc;
function requireNtc() {
  if (hasRequiredNtc) return ntc;
  hasRequiredNtc = 1;
  ntc = [
    {
      "name": "Black",
      "hex": "000000"
    },
    {
      "name": "Navy Blue",
      "hex": "000080"
    },
    {
      "name": "Dark Blue",
      "hex": "0000C8"
    },
    {
      "name": "Blue",
      "hex": "0000FF"
    },
    {
      "name": "Stratos",
      "hex": "000741"
    },
    {
      "name": "Swamp",
      "hex": "001B1C"
    },
    {
      "name": "Resolution Blue",
      "hex": "002387"
    },
    {
      "name": "Deep Fir",
      "hex": "002900"
    },
    {
      "name": "Burnham",
      "hex": "002E20"
    },
    {
      "name": "International Klein Blue",
      "hex": "002FA7"
    },
    {
      "name": "Prussian Blue",
      "hex": "003153"
    },
    {
      "name": "Midnight Blue",
      "hex": "003366"
    },
    {
      "name": "Smalt",
      "hex": "003399"
    },
    {
      "name": "Deep Teal",
      "hex": "003532"
    },
    {
      "name": "Cyprus",
      "hex": "003E40"
    },
    {
      "name": "Kaitoke Green",
      "hex": "004620"
    },
    {
      "name": "Cobalt",
      "hex": "0047AB"
    },
    {
      "name": "Crusoe",
      "hex": "004816"
    },
    {
      "name": "Sherpa Blue",
      "hex": "004950"
    },
    {
      "name": "Endeavour",
      "hex": "0056A7"
    },
    {
      "name": "Camarone",
      "hex": "00581A"
    },
    {
      "name": "Science Blue",
      "hex": "0066CC"
    },
    {
      "name": "Blue Ribbon",
      "hex": "0066FF"
    },
    {
      "name": "Tropical Rain Forest",
      "hex": "00755E"
    },
    {
      "name": "Allports",
      "hex": "0076A3"
    },
    {
      "name": "Deep Cerulean",
      "hex": "007BA7"
    },
    {
      "name": "Lochmara",
      "hex": "007EC7"
    },
    {
      "name": "Azure Radiance",
      "hex": "007FFF"
    },
    {
      "name": "Teal",
      "hex": "008080"
    },
    {
      "name": "Bondi Blue",
      "hex": "0095B6"
    },
    {
      "name": "Pacific Blue",
      "hex": "009DC4"
    },
    {
      "name": "Persian Green",
      "hex": "00A693"
    },
    {
      "name": "Jade",
      "hex": "00A86B"
    },
    {
      "name": "Caribbean Green",
      "hex": "00CC99"
    },
    {
      "name": "Robin's Egg Blue",
      "hex": "00CCCC"
    },
    {
      "name": "Green",
      "hex": "00FF00"
    },
    {
      "name": "Spring Green",
      "hex": "00FF7F"
    },
    {
      "name": "Cyan / Aqua",
      "hex": "00FFFF"
    },
    {
      "name": "Blue Charcoal",
      "hex": "010D1A"
    },
    {
      "name": "Midnight",
      "hex": "011635"
    },
    {
      "name": "Holly",
      "hex": "011D13"
    },
    {
      "name": "Daintree",
      "hex": "012731"
    },
    {
      "name": "Cardin Green",
      "hex": "01361C"
    },
    {
      "name": "County Green",
      "hex": "01371A"
    },
    {
      "name": "Astronaut Blue",
      "hex": "013E62"
    },
    {
      "name": "Regal Blue",
      "hex": "013F6A"
    },
    {
      "name": "Aqua Deep",
      "hex": "014B43"
    },
    {
      "name": "Orient",
      "hex": "015E85"
    },
    {
      "name": "Blue Stone",
      "hex": "016162"
    },
    {
      "name": "Fun Green",
      "hex": "016D39"
    },
    {
      "name": "Pine Green",
      "hex": "01796F"
    },
    {
      "name": "Blue Lagoon",
      "hex": "017987"
    },
    {
      "name": "Deep Sea",
      "hex": "01826B"
    },
    {
      "name": "Green Haze",
      "hex": "01A368"
    },
    {
      "name": "English Holly",
      "hex": "022D15"
    },
    {
      "name": "Sherwood Green",
      "hex": "02402C"
    },
    {
      "name": "Congress Blue",
      "hex": "02478E"
    },
    {
      "name": "Evening Sea",
      "hex": "024E46"
    },
    {
      "name": "Bahama Blue",
      "hex": "026395"
    },
    {
      "name": "Observatory",
      "hex": "02866F"
    },
    {
      "name": "Cerulean",
      "hex": "02A4D3"
    },
    {
      "name": "Tangaroa",
      "hex": "03163C"
    },
    {
      "name": "Green Vogue",
      "hex": "032B52"
    },
    {
      "name": "Mosque",
      "hex": "036A6E"
    },
    {
      "name": "Midnight Moss",
      "hex": "041004"
    },
    {
      "name": "Black Pearl",
      "hex": "041322"
    },
    {
      "name": "Blue Whale",
      "hex": "042E4C"
    },
    {
      "name": "Zuccini",
      "hex": "044022"
    },
    {
      "name": "Teal Blue",
      "hex": "044259"
    },
    {
      "name": "Deep Cove",
      "hex": "051040"
    },
    {
      "name": "Gulf Blue",
      "hex": "051657"
    },
    {
      "name": "Venice Blue",
      "hex": "055989"
    },
    {
      "name": "Watercourse",
      "hex": "056F57"
    },
    {
      "name": "Catalina Blue",
      "hex": "062A78"
    },
    {
      "name": "Tiber",
      "hex": "063537"
    },
    {
      "name": "Gossamer",
      "hex": "069B81"
    },
    {
      "name": "Niagara",
      "hex": "06A189"
    },
    {
      "name": "Tarawera",
      "hex": "073A50"
    },
    {
      "name": "Jaguar",
      "hex": "080110"
    },
    {
      "name": "Black Bean",
      "hex": "081910"
    },
    {
      "name": "Deep Sapphire",
      "hex": "082567"
    },
    {
      "name": "Elf Green",
      "hex": "088370"
    },
    {
      "name": "Bright Turquoise",
      "hex": "08E8DE"
    },
    {
      "name": "Downriver",
      "hex": "092256"
    },
    {
      "name": "Palm Green",
      "hex": "09230F"
    },
    {
      "name": "Madison",
      "hex": "09255D"
    },
    {
      "name": "Bottle Green",
      "hex": "093624"
    },
    {
      "name": "Deep Sea Green",
      "hex": "095859"
    },
    {
      "name": "Salem",
      "hex": "097F4B"
    },
    {
      "name": "Black Russian",
      "hex": "0A001C"
    },
    {
      "name": "Dark Fern",
      "hex": "0A480D"
    },
    {
      "name": "Japanese Laurel",
      "hex": "0A6906"
    },
    {
      "name": "Atoll",
      "hex": "0A6F75"
    },
    {
      "name": "Cod Gray",
      "hex": "0B0B0B"
    },
    {
      "name": "Marshland",
      "hex": "0B0F08"
    },
    {
      "name": "Gordons Green",
      "hex": "0B1107"
    },
    {
      "name": "Black Forest",
      "hex": "0B1304"
    },
    {
      "name": "San Felix",
      "hex": "0B6207"
    },
    {
      "name": "Malachite",
      "hex": "0BDA51"
    },
    {
      "name": "Ebony",
      "hex": "0C0B1D"
    },
    {
      "name": "Woodsmoke",
      "hex": "0C0D0F"
    },
    {
      "name": "Racing Green",
      "hex": "0C1911"
    },
    {
      "name": "Surfie Green",
      "hex": "0C7A79"
    },
    {
      "name": "Blue Chill",
      "hex": "0C8990"
    },
    {
      "name": "Black Rock",
      "hex": "0D0332"
    },
    {
      "name": "Bunker",
      "hex": "0D1117"
    },
    {
      "name": "Aztec",
      "hex": "0D1C19"
    },
    {
      "name": "Bush",
      "hex": "0D2E1C"
    },
    {
      "name": "Cinder",
      "hex": "0E0E18"
    },
    {
      "name": "Firefly",
      "hex": "0E2A30"
    },
    {
      "name": "Torea Bay",
      "hex": "0F2D9E"
    },
    {
      "name": "Vulcan",
      "hex": "10121D"
    },
    {
      "name": "Green Waterloo",
      "hex": "101405"
    },
    {
      "name": "Eden",
      "hex": "105852"
    },
    {
      "name": "Arapawa",
      "hex": "110C6C"
    },
    {
      "name": "Ultramarine",
      "hex": "120A8F"
    },
    {
      "name": "Elephant",
      "hex": "123447"
    },
    {
      "name": "Jewel",
      "hex": "126B40"
    },
    {
      "name": "Diesel",
      "hex": "130000"
    },
    {
      "name": "Asphalt",
      "hex": "130A06"
    },
    {
      "name": "Blue Zodiac",
      "hex": "13264D"
    },
    {
      "name": "Parsley",
      "hex": "134F19"
    },
    {
      "name": "Nero",
      "hex": "140600"
    },
    {
      "name": "Tory Blue",
      "hex": "1450AA"
    },
    {
      "name": "Bunting",
      "hex": "151F4C"
    },
    {
      "name": "Denim",
      "hex": "1560BD"
    },
    {
      "name": "Genoa",
      "hex": "15736B"
    },
    {
      "name": "Mirage",
      "hex": "161928"
    },
    {
      "name": "Hunter Green",
      "hex": "161D10"
    },
    {
      "name": "Big Stone",
      "hex": "162A40"
    },
    {
      "name": "Celtic",
      "hex": "163222"
    },
    {
      "name": "Timber Green",
      "hex": "16322C"
    },
    {
      "name": "Gable Green",
      "hex": "163531"
    },
    {
      "name": "Pine Tree",
      "hex": "171F04"
    },
    {
      "name": "Chathams Blue",
      "hex": "175579"
    },
    {
      "name": "Deep Forest Green",
      "hex": "182D09"
    },
    {
      "name": "Blumine",
      "hex": "18587A"
    },
    {
      "name": "Palm Leaf",
      "hex": "19330E"
    },
    {
      "name": "Nile Blue",
      "hex": "193751"
    },
    {
      "name": "Fun Blue",
      "hex": "1959A8"
    },
    {
      "name": "Lucky Point",
      "hex": "1A1A68"
    },
    {
      "name": "Mountain Meadow",
      "hex": "1AB385"
    },
    {
      "name": "Tolopea",
      "hex": "1B0245"
    },
    {
      "name": "Haiti",
      "hex": "1B1035"
    },
    {
      "name": "Deep Koamaru",
      "hex": "1B127B"
    },
    {
      "name": "Acadia",
      "hex": "1B1404"
    },
    {
      "name": "Seaweed",
      "hex": "1B2F11"
    },
    {
      "name": "Biscay",
      "hex": "1B3162"
    },
    {
      "name": "Matisse",
      "hex": "1B659D"
    },
    {
      "name": "Crowshead",
      "hex": "1C1208"
    },
    {
      "name": "Rangoon Green",
      "hex": "1C1E13"
    },
    {
      "name": "Persian Blue",
      "hex": "1C39BB"
    },
    {
      "name": "Everglade",
      "hex": "1C402E"
    },
    {
      "name": "Elm",
      "hex": "1C7C7D"
    },
    {
      "name": "Green Pea",
      "hex": "1D6142"
    },
    {
      "name": "Creole",
      "hex": "1E0F04"
    },
    {
      "name": "Karaka",
      "hex": "1E1609"
    },
    {
      "name": "El Paso",
      "hex": "1E1708"
    },
    {
      "name": "Cello",
      "hex": "1E385B"
    },
    {
      "name": "Te Papa Green",
      "hex": "1E433C"
    },
    {
      "name": "Dodger Blue",
      "hex": "1E90FF"
    },
    {
      "name": "Eastern Blue",
      "hex": "1E9AB0"
    },
    {
      "name": "Night Rider",
      "hex": "1F120F"
    },
    {
      "name": "Java",
      "hex": "1FC2C2"
    },
    {
      "name": "Jacksons Purple",
      "hex": "20208D"
    },
    {
      "name": "Cloud Burst",
      "hex": "202E54"
    },
    {
      "name": "Blue Dianne",
      "hex": "204852"
    },
    {
      "name": "Eternity",
      "hex": "211A0E"
    },
    {
      "name": "Deep Blue",
      "hex": "220878"
    },
    {
      "name": "Forest Green",
      "hex": "228B22"
    },
    {
      "name": "Mallard",
      "hex": "233418"
    },
    {
      "name": "Violet",
      "hex": "240A40"
    },
    {
      "name": "Kilamanjaro",
      "hex": "240C02"
    },
    {
      "name": "Log Cabin",
      "hex": "242A1D"
    },
    {
      "name": "Black Olive",
      "hex": "242E16"
    },
    {
      "name": "Green House",
      "hex": "24500F"
    },
    {
      "name": "Graphite",
      "hex": "251607"
    },
    {
      "name": "Cannon Black",
      "hex": "251706"
    },
    {
      "name": "Port Gore",
      "hex": "251F4F"
    },
    {
      "name": "Shark",
      "hex": "25272C"
    },
    {
      "name": "Green Kelp",
      "hex": "25311C"
    },
    {
      "name": "Curious Blue",
      "hex": "2596D1"
    },
    {
      "name": "Paua",
      "hex": "260368"
    },
    {
      "name": "Paris M",
      "hex": "26056A"
    },
    {
      "name": "Wood Bark",
      "hex": "261105"
    },
    {
      "name": "Gondola",
      "hex": "261414"
    },
    {
      "name": "Steel Gray",
      "hex": "262335"
    },
    {
      "name": "Ebony Clay",
      "hex": "26283B"
    },
    {
      "name": "Bay of Many",
      "hex": "273A81"
    },
    {
      "name": "Plantation",
      "hex": "27504B"
    },
    {
      "name": "Eucalyptus",
      "hex": "278A5B"
    },
    {
      "name": "Oil",
      "hex": "281E15"
    },
    {
      "name": "Astronaut",
      "hex": "283A77"
    },
    {
      "name": "Mariner",
      "hex": "286ACD"
    },
    {
      "name": "Violent Violet",
      "hex": "290C5E"
    },
    {
      "name": "Bastille",
      "hex": "292130"
    },
    {
      "name": "Zeus",
      "hex": "292319"
    },
    {
      "name": "Charade",
      "hex": "292937"
    },
    {
      "name": "Jelly Bean",
      "hex": "297B9A"
    },
    {
      "name": "Jungle Green",
      "hex": "29AB87"
    },
    {
      "name": "Cherry Pie",
      "hex": "2A0359"
    },
    {
      "name": "Coffee Bean",
      "hex": "2A140E"
    },
    {
      "name": "Baltic Sea",
      "hex": "2A2630"
    },
    {
      "name": "Turtle Green",
      "hex": "2A380B"
    },
    {
      "name": "Cerulean Blue",
      "hex": "2A52BE"
    },
    {
      "name": "Sepia Black",
      "hex": "2B0202"
    },
    {
      "name": "Valhalla",
      "hex": "2B194F"
    },
    {
      "name": "Heavy Metal",
      "hex": "2B3228"
    },
    {
      "name": "Blue Gem",
      "hex": "2C0E8C"
    },
    {
      "name": "Revolver",
      "hex": "2C1632"
    },
    {
      "name": "Bleached Cedar",
      "hex": "2C2133"
    },
    {
      "name": "Lochinvar",
      "hex": "2C8C84"
    },
    {
      "name": "Mikado",
      "hex": "2D2510"
    },
    {
      "name": "Outer Space",
      "hex": "2D383A"
    },
    {
      "name": "St Tropaz",
      "hex": "2D569B"
    },
    {
      "name": "Jacaranda",
      "hex": "2E0329"
    },
    {
      "name": "Jacko Bean",
      "hex": "2E1905"
    },
    {
      "name": "Rangitoto",
      "hex": "2E3222"
    },
    {
      "name": "Rhino",
      "hex": "2E3F62"
    },
    {
      "name": "Sea Green",
      "hex": "2E8B57"
    },
    {
      "name": "Scooter",
      "hex": "2EBFD4"
    },
    {
      "name": "Onion",
      "hex": "2F270E"
    },
    {
      "name": "Governor Bay",
      "hex": "2F3CB3"
    },
    {
      "name": "Sapphire",
      "hex": "2F519E"
    },
    {
      "name": "Spectra",
      "hex": "2F5A57"
    },
    {
      "name": "Casal",
      "hex": "2F6168"
    },
    {
      "name": "Melanzane",
      "hex": "300529"
    },
    {
      "name": "Cocoa Brown",
      "hex": "301F1E"
    },
    {
      "name": "Woodrush",
      "hex": "302A0F"
    },
    {
      "name": "San Juan",
      "hex": "304B6A"
    },
    {
      "name": "Turquoise",
      "hex": "30D5C8"
    },
    {
      "name": "Eclipse",
      "hex": "311C17"
    },
    {
      "name": "Pickled Bluewood",
      "hex": "314459"
    },
    {
      "name": "Azure",
      "hex": "315BA1"
    },
    {
      "name": "Calypso",
      "hex": "31728D"
    },
    {
      "name": "Paradiso",
      "hex": "317D82"
    },
    {
      "name": "Persian Indigo",
      "hex": "32127A"
    },
    {
      "name": "Blackcurrant",
      "hex": "32293A"
    },
    {
      "name": "Mine Shaft",
      "hex": "323232"
    },
    {
      "name": "Stromboli",
      "hex": "325D52"
    },
    {
      "name": "Bilbao",
      "hex": "327C14"
    },
    {
      "name": "Astral",
      "hex": "327DA0"
    },
    {
      "name": "Christalle",
      "hex": "33036B"
    },
    {
      "name": "Thunder",
      "hex": "33292F"
    },
    {
      "name": "Shamrock",
      "hex": "33CC99"
    },
    {
      "name": "Tamarind",
      "hex": "341515"
    },
    {
      "name": "Mardi Gras",
      "hex": "350036"
    },
    {
      "name": "Valentino",
      "hex": "350E42"
    },
    {
      "name": "Jagger",
      "hex": "350E57"
    },
    {
      "name": "Tuna",
      "hex": "353542"
    },
    {
      "name": "Chambray",
      "hex": "354E8C"
    },
    {
      "name": "Martinique",
      "hex": "363050"
    },
    {
      "name": "Tuatara",
      "hex": "363534"
    },
    {
      "name": "Waiouru",
      "hex": "363C0D"
    },
    {
      "name": "Ming",
      "hex": "36747D"
    },
    {
      "name": "La Palma",
      "hex": "368716"
    },
    {
      "name": "Chocolate",
      "hex": "370202"
    },
    {
      "name": "Clinker",
      "hex": "371D09"
    },
    {
      "name": "Brown Tumbleweed",
      "hex": "37290E"
    },
    {
      "name": "Birch",
      "hex": "373021"
    },
    {
      "name": "Oracle",
      "hex": "377475"
    },
    {
      "name": "Blue Diamond",
      "hex": "380474"
    },
    {
      "name": "Grape",
      "hex": "381A51"
    },
    {
      "name": "Dune",
      "hex": "383533"
    },
    {
      "name": "Oxford Blue",
      "hex": "384555"
    },
    {
      "name": "Clover",
      "hex": "384910"
    },
    {
      "name": "Limed Spruce",
      "hex": "394851"
    },
    {
      "name": "Dell",
      "hex": "396413"
    },
    {
      "name": "Toledo",
      "hex": "3A0020"
    },
    {
      "name": "Sambuca",
      "hex": "3A2010"
    },
    {
      "name": "Jacarta",
      "hex": "3A2A6A"
    },
    {
      "name": "William",
      "hex": "3A686C"
    },
    {
      "name": "Killarney",
      "hex": "3A6A47"
    },
    {
      "name": "Keppel",
      "hex": "3AB09E"
    },
    {
      "name": "Temptress",
      "hex": "3B000B"
    },
    {
      "name": "Aubergine",
      "hex": "3B0910"
    },
    {
      "name": "Jon",
      "hex": "3B1F1F"
    },
    {
      "name": "Treehouse",
      "hex": "3B2820"
    },
    {
      "name": "Amazon",
      "hex": "3B7A57"
    },
    {
      "name": "Boston Blue",
      "hex": "3B91B4"
    },
    {
      "name": "Windsor",
      "hex": "3C0878"
    },
    {
      "name": "Rebel",
      "hex": "3C1206"
    },
    {
      "name": "Meteorite",
      "hex": "3C1F76"
    },
    {
      "name": "Dark Ebony",
      "hex": "3C2005"
    },
    {
      "name": "Camouflage",
      "hex": "3C3910"
    },
    {
      "name": "Bright Gray",
      "hex": "3C4151"
    },
    {
      "name": "Cape Cod",
      "hex": "3C4443"
    },
    {
      "name": "Lunar Green",
      "hex": "3C493A"
    },
    {
      "name": "Bean  ",
      "hex": "3D0C02"
    },
    {
      "name": "Bistre",
      "hex": "3D2B1F"
    },
    {
      "name": "Goblin",
      "hex": "3D7D52"
    },
    {
      "name": "Kingfisher Daisy",
      "hex": "3E0480"
    },
    {
      "name": "Cedar",
      "hex": "3E1C14"
    },
    {
      "name": "English Walnut",
      "hex": "3E2B23"
    },
    {
      "name": "Black Marlin",
      "hex": "3E2C1C"
    },
    {
      "name": "Ship Gray",
      "hex": "3E3A44"
    },
    {
      "name": "Pelorous",
      "hex": "3EABBF"
    },
    {
      "name": "Bronze",
      "hex": "3F2109"
    },
    {
      "name": "Cola",
      "hex": "3F2500"
    },
    {
      "name": "Madras",
      "hex": "3F3002"
    },
    {
      "name": "Minsk",
      "hex": "3F307F"
    },
    {
      "name": "Cabbage Pont",
      "hex": "3F4C3A"
    },
    {
      "name": "Tom Thumb",
      "hex": "3F583B"
    },
    {
      "name": "Mineral Green",
      "hex": "3F5D53"
    },
    {
      "name": "Puerto Rico",
      "hex": "3FC1AA"
    },
    {
      "name": "Harlequin",
      "hex": "3FFF00"
    },
    {
      "name": "Brown Pod",
      "hex": "401801"
    },
    {
      "name": "Cork",
      "hex": "40291D"
    },
    {
      "name": "Masala",
      "hex": "403B38"
    },
    {
      "name": "Thatch Green",
      "hex": "403D19"
    },
    {
      "name": "Fiord",
      "hex": "405169"
    },
    {
      "name": "Viridian",
      "hex": "40826D"
    },
    {
      "name": "Chateau Green",
      "hex": "40A860"
    },
    {
      "name": "Ripe Plum",
      "hex": "410056"
    },
    {
      "name": "Paco",
      "hex": "411F10"
    },
    {
      "name": "Deep Oak",
      "hex": "412010"
    },
    {
      "name": "Merlin",
      "hex": "413C37"
    },
    {
      "name": "Gun Powder",
      "hex": "414257"
    },
    {
      "name": "East Bay",
      "hex": "414C7D"
    },
    {
      "name": "Royal Blue",
      "hex": "4169E1"
    },
    {
      "name": "Ocean Green",
      "hex": "41AA78"
    },
    {
      "name": "Burnt Maroon",
      "hex": "420303"
    },
    {
      "name": "Lisbon Brown",
      "hex": "423921"
    },
    {
      "name": "Faded Jade",
      "hex": "427977"
    },
    {
      "name": "Scarlet Gum",
      "hex": "431560"
    },
    {
      "name": "Iroko",
      "hex": "433120"
    },
    {
      "name": "Armadillo",
      "hex": "433E37"
    },
    {
      "name": "River Bed",
      "hex": "434C59"
    },
    {
      "name": "Green Leaf",
      "hex": "436A0D"
    },
    {
      "name": "Barossa",
      "hex": "44012D"
    },
    {
      "name": "Morocco Brown",
      "hex": "441D00"
    },
    {
      "name": "Mako",
      "hex": "444954"
    },
    {
      "name": "Kelp",
      "hex": "454936"
    },
    {
      "name": "San Marino",
      "hex": "456CAC"
    },
    {
      "name": "Picton Blue",
      "hex": "45B1E8"
    },
    {
      "name": "Loulou",
      "hex": "460B41"
    },
    {
      "name": "Crater Brown",
      "hex": "462425"
    },
    {
      "name": "Gray Asparagus",
      "hex": "465945"
    },
    {
      "name": "Steel Blue",
      "hex": "4682B4"
    },
    {
      "name": "Rustic Red",
      "hex": "480404"
    },
    {
      "name": "Bulgarian Rose",
      "hex": "480607"
    },
    {
      "name": "Clairvoyant",
      "hex": "480656"
    },
    {
      "name": "Cocoa Bean",
      "hex": "481C1C"
    },
    {
      "name": "Woody Brown",
      "hex": "483131"
    },
    {
      "name": "Taupe",
      "hex": "483C32"
    },
    {
      "name": "Van Cleef",
      "hex": "49170C"
    },
    {
      "name": "Brown Derby",
      "hex": "492615"
    },
    {
      "name": "Metallic Bronze",
      "hex": "49371B"
    },
    {
      "name": "Verdun Green",
      "hex": "495400"
    },
    {
      "name": "Blue Bayoux",
      "hex": "496679"
    },
    {
      "name": "Bismark",
      "hex": "497183"
    },
    {
      "name": "Bracken",
      "hex": "4A2A04"
    },
    {
      "name": "Deep Bronze",
      "hex": "4A3004"
    },
    {
      "name": "Mondo",
      "hex": "4A3C30"
    },
    {
      "name": "Tundora",
      "hex": "4A4244"
    },
    {
      "name": "Gravel",
      "hex": "4A444B"
    },
    {
      "name": "Trout",
      "hex": "4A4E5A"
    },
    {
      "name": "Pigment Indigo",
      "hex": "4B0082"
    },
    {
      "name": "Nandor",
      "hex": "4B5D52"
    },
    {
      "name": "Saddle",
      "hex": "4C3024"
    },
    {
      "name": "Abbey",
      "hex": "4C4F56"
    },
    {
      "name": "Blackberry",
      "hex": "4D0135"
    },
    {
      "name": "Cab Sav",
      "hex": "4D0A18"
    },
    {
      "name": "Indian Tan",
      "hex": "4D1E01"
    },
    {
      "name": "Cowboy",
      "hex": "4D282D"
    },
    {
      "name": "Livid Brown",
      "hex": "4D282E"
    },
    {
      "name": "Rock",
      "hex": "4D3833"
    },
    {
      "name": "Punga",
      "hex": "4D3D14"
    },
    {
      "name": "Bronzetone",
      "hex": "4D400F"
    },
    {
      "name": "Woodland",
      "hex": "4D5328"
    },
    {
      "name": "Mahogany",
      "hex": "4E0606"
    },
    {
      "name": "Bossanova",
      "hex": "4E2A5A"
    },
    {
      "name": "Matterhorn",
      "hex": "4E3B41"
    },
    {
      "name": "Bronze Olive",
      "hex": "4E420C"
    },
    {
      "name": "Mulled Wine",
      "hex": "4E4562"
    },
    {
      "name": "Axolotl",
      "hex": "4E6649"
    },
    {
      "name": "Wedgewood",
      "hex": "4E7F9E"
    },
    {
      "name": "Shakespeare",
      "hex": "4EABD1"
    },
    {
      "name": "Honey Flower",
      "hex": "4F1C70"
    },
    {
      "name": "Daisy Bush",
      "hex": "4F2398"
    },
    {
      "name": "Indigo",
      "hex": "4F69C6"
    },
    {
      "name": "Fern Green",
      "hex": "4F7942"
    },
    {
      "name": "Fruit Salad",
      "hex": "4F9D5D"
    },
    {
      "name": "Apple",
      "hex": "4FA83D"
    },
    {
      "name": "Mortar",
      "hex": "504351"
    },
    {
      "name": "Kashmir Blue",
      "hex": "507096"
    },
    {
      "name": "Cutty Sark",
      "hex": "507672"
    },
    {
      "name": "Emerald",
      "hex": "50C878"
    },
    {
      "name": "Emperor",
      "hex": "514649"
    },
    {
      "name": "Chalet Green",
      "hex": "516E3D"
    },
    {
      "name": "Como",
      "hex": "517C66"
    },
    {
      "name": "Smalt Blue",
      "hex": "51808F"
    },
    {
      "name": "Castro",
      "hex": "52001F"
    },
    {
      "name": "Maroon Oak",
      "hex": "520C17"
    },
    {
      "name": "Gigas",
      "hex": "523C94"
    },
    {
      "name": "Voodoo",
      "hex": "533455"
    },
    {
      "name": "Victoria",
      "hex": "534491"
    },
    {
      "name": "Hippie Green",
      "hex": "53824B"
    },
    {
      "name": "Heath",
      "hex": "541012"
    },
    {
      "name": "Judge Gray",
      "hex": "544333"
    },
    {
      "name": "Fuscous Gray",
      "hex": "54534D"
    },
    {
      "name": "Vida Loca",
      "hex": "549019"
    },
    {
      "name": "Cioccolato",
      "hex": "55280C"
    },
    {
      "name": "Saratoga",
      "hex": "555B10"
    },
    {
      "name": "Finlandia",
      "hex": "556D56"
    },
    {
      "name": "Havelock Blue",
      "hex": "5590D9"
    },
    {
      "name": "Fountain Blue",
      "hex": "56B4BE"
    },
    {
      "name": "Spring Leaves",
      "hex": "578363"
    },
    {
      "name": "Saddle Brown",
      "hex": "583401"
    },
    {
      "name": "Scarpa Flow",
      "hex": "585562"
    },
    {
      "name": "Cactus",
      "hex": "587156"
    },
    {
      "name": "Hippie Blue",
      "hex": "589AAF"
    },
    {
      "name": "Wine Berry",
      "hex": "591D35"
    },
    {
      "name": "Brown Bramble",
      "hex": "592804"
    },
    {
      "name": "Congo Brown",
      "hex": "593737"
    },
    {
      "name": "Millbrook",
      "hex": "594433"
    },
    {
      "name": "Waikawa Gray",
      "hex": "5A6E9C"
    },
    {
      "name": "Horizon",
      "hex": "5A87A0"
    },
    {
      "name": "Jambalaya",
      "hex": "5B3013"
    },
    {
      "name": "Bordeaux",
      "hex": "5C0120"
    },
    {
      "name": "Mulberry Wood",
      "hex": "5C0536"
    },
    {
      "name": "Carnaby Tan",
      "hex": "5C2E01"
    },
    {
      "name": "Comet",
      "hex": "5C5D75"
    },
    {
      "name": "Redwood",
      "hex": "5D1E0F"
    },
    {
      "name": "Don Juan",
      "hex": "5D4C51"
    },
    {
      "name": "Chicago",
      "hex": "5D5C58"
    },
    {
      "name": "Verdigris",
      "hex": "5D5E37"
    },
    {
      "name": "Dingley",
      "hex": "5D7747"
    },
    {
      "name": "Breaker Bay",
      "hex": "5DA19F"
    },
    {
      "name": "Kabul",
      "hex": "5E483E"
    },
    {
      "name": "Hemlock",
      "hex": "5E5D3B"
    },
    {
      "name": "Irish Coffee",
      "hex": "5F3D26"
    },
    {
      "name": "Mid Gray",
      "hex": "5F5F6E"
    },
    {
      "name": "Shuttle Gray",
      "hex": "5F6672"
    },
    {
      "name": "Aqua Forest",
      "hex": "5FA777"
    },
    {
      "name": "Tradewind",
      "hex": "5FB3AC"
    },
    {
      "name": "Horses Neck",
      "hex": "604913"
    },
    {
      "name": "Smoky",
      "hex": "605B73"
    },
    {
      "name": "Corduroy",
      "hex": "606E68"
    },
    {
      "name": "Danube",
      "hex": "6093D1"
    },
    {
      "name": "Espresso",
      "hex": "612718"
    },
    {
      "name": "Eggplant",
      "hex": "614051"
    },
    {
      "name": "Costa Del Sol",
      "hex": "615D30"
    },
    {
      "name": "Glade Green",
      "hex": "61845F"
    },
    {
      "name": "Buccaneer",
      "hex": "622F30"
    },
    {
      "name": "Quincy",
      "hex": "623F2D"
    },
    {
      "name": "Butterfly Bush",
      "hex": "624E9A"
    },
    {
      "name": "West Coast",
      "hex": "625119"
    },
    {
      "name": "Finch",
      "hex": "626649"
    },
    {
      "name": "Patina",
      "hex": "639A8F"
    },
    {
      "name": "Fern",
      "hex": "63B76C"
    },
    {
      "name": "Blue Violet",
      "hex": "6456B7"
    },
    {
      "name": "Dolphin",
      "hex": "646077"
    },
    {
      "name": "Storm Dust",
      "hex": "646463"
    },
    {
      "name": "Siam",
      "hex": "646A54"
    },
    {
      "name": "Nevada",
      "hex": "646E75"
    },
    {
      "name": "Cornflower Blue",
      "hex": "6495ED"
    },
    {
      "name": "Viking",
      "hex": "64CCDB"
    },
    {
      "name": "Rosewood",
      "hex": "65000B"
    },
    {
      "name": "Cherrywood",
      "hex": "651A14"
    },
    {
      "name": "Purple Heart",
      "hex": "652DC1"
    },
    {
      "name": "Fern Frond",
      "hex": "657220"
    },
    {
      "name": "Willow Grove",
      "hex": "65745D"
    },
    {
      "name": "Hoki",
      "hex": "65869F"
    },
    {
      "name": "Pompadour",
      "hex": "660045"
    },
    {
      "name": "Purple",
      "hex": "660099"
    },
    {
      "name": "Tyrian Purple",
      "hex": "66023C"
    },
    {
      "name": "Dark Tan",
      "hex": "661010"
    },
    {
      "name": "Silver Tree",
      "hex": "66B58F"
    },
    {
      "name": "Bright Green",
      "hex": "66FF00"
    },
    {
      "name": "Screamin' Green",
      "hex": "66FF66"
    },
    {
      "name": "Black Rose",
      "hex": "67032D"
    },
    {
      "name": "Scampi",
      "hex": "675FA6"
    },
    {
      "name": "Ironside Gray",
      "hex": "676662"
    },
    {
      "name": "Viridian Green",
      "hex": "678975"
    },
    {
      "name": "Christi",
      "hex": "67A712"
    },
    {
      "name": "Nutmeg Wood Finish",
      "hex": "683600"
    },
    {
      "name": "Zambezi",
      "hex": "685558"
    },
    {
      "name": "Salt Box",
      "hex": "685E6E"
    },
    {
      "name": "Tawny Port",
      "hex": "692545"
    },
    {
      "name": "Finn",
      "hex": "692D54"
    },
    {
      "name": "Scorpion",
      "hex": "695F62"
    },
    {
      "name": "Lynch",
      "hex": "697E9A"
    },
    {
      "name": "Spice",
      "hex": "6A442E"
    },
    {
      "name": "Himalaya",
      "hex": "6A5D1B"
    },
    {
      "name": "Soya Bean",
      "hex": "6A6051"
    },
    {
      "name": "Hairy Heath",
      "hex": "6B2A14"
    },
    {
      "name": "Royal Purple",
      "hex": "6B3FA0"
    },
    {
      "name": "Shingle Fawn",
      "hex": "6B4E31"
    },
    {
      "name": "Dorado",
      "hex": "6B5755"
    },
    {
      "name": "Bermuda Gray",
      "hex": "6B8BA2"
    },
    {
      "name": "Olive Drab",
      "hex": "6B8E23"
    },
    {
      "name": "Eminence",
      "hex": "6C3082"
    },
    {
      "name": "Turquoise Blue",
      "hex": "6CDAE7"
    },
    {
      "name": "Lonestar",
      "hex": "6D0101"
    },
    {
      "name": "Pine Cone",
      "hex": "6D5E54"
    },
    {
      "name": "Dove Gray",
      "hex": "6D6C6C"
    },
    {
      "name": "Juniper",
      "hex": "6D9292"
    },
    {
      "name": "Gothic",
      "hex": "6D92A1"
    },
    {
      "name": "Red Oxide",
      "hex": "6E0902"
    },
    {
      "name": "Moccaccino",
      "hex": "6E1D14"
    },
    {
      "name": "Pickled Bean",
      "hex": "6E4826"
    },
    {
      "name": "Dallas",
      "hex": "6E4B26"
    },
    {
      "name": "Kokoda",
      "hex": "6E6D57"
    },
    {
      "name": "Pale Sky",
      "hex": "6E7783"
    },
    {
      "name": "Cafe Royale",
      "hex": "6F440C"
    },
    {
      "name": "Flint",
      "hex": "6F6A61"
    },
    {
      "name": "Highland",
      "hex": "6F8E63"
    },
    {
      "name": "Limeade",
      "hex": "6F9D02"
    },
    {
      "name": "Downy",
      "hex": "6FD0C5"
    },
    {
      "name": "Persian Plum",
      "hex": "701C1C"
    },
    {
      "name": "Sepia",
      "hex": "704214"
    },
    {
      "name": "Antique Bronze",
      "hex": "704A07"
    },
    {
      "name": "Ferra",
      "hex": "704F50"
    },
    {
      "name": "Coffee",
      "hex": "706555"
    },
    {
      "name": "Slate Gray",
      "hex": "708090"
    },
    {
      "name": "Cedar Wood Finish",
      "hex": "711A00"
    },
    {
      "name": "Metallic Copper",
      "hex": "71291D"
    },
    {
      "name": "Affair",
      "hex": "714693"
    },
    {
      "name": "Studio",
      "hex": "714AB2"
    },
    {
      "name": "Tobacco Brown",
      "hex": "715D47"
    },
    {
      "name": "Yellow Metal",
      "hex": "716338"
    },
    {
      "name": "Peat",
      "hex": "716B56"
    },
    {
      "name": "Olivetone",
      "hex": "716E10"
    },
    {
      "name": "Storm Gray",
      "hex": "717486"
    },
    {
      "name": "Sirocco",
      "hex": "718080"
    },
    {
      "name": "Aquamarine Blue",
      "hex": "71D9E2"
    },
    {
      "name": "Venetian Red",
      "hex": "72010F"
    },
    {
      "name": "Old Copper",
      "hex": "724A2F"
    },
    {
      "name": "Go Ben",
      "hex": "726D4E"
    },
    {
      "name": "Raven",
      "hex": "727B89"
    },
    {
      "name": "Seance",
      "hex": "731E8F"
    },
    {
      "name": "Raw Umber",
      "hex": "734A12"
    },
    {
      "name": "Kimberly",
      "hex": "736C9F"
    },
    {
      "name": "Crocodile",
      "hex": "736D58"
    },
    {
      "name": "Crete",
      "hex": "737829"
    },
    {
      "name": "Xanadu",
      "hex": "738678"
    },
    {
      "name": "Spicy Mustard",
      "hex": "74640D"
    },
    {
      "name": "Limed Ash",
      "hex": "747D63"
    },
    {
      "name": "Rolling Stone",
      "hex": "747D83"
    },
    {
      "name": "Blue Smoke",
      "hex": "748881"
    },
    {
      "name": "Laurel",
      "hex": "749378"
    },
    {
      "name": "Mantis",
      "hex": "74C365"
    },
    {
      "name": "Russett",
      "hex": "755A57"
    },
    {
      "name": "Deluge",
      "hex": "7563A8"
    },
    {
      "name": "Cosmic",
      "hex": "76395D"
    },
    {
      "name": "Blue Marguerite",
      "hex": "7666C6"
    },
    {
      "name": "Lima",
      "hex": "76BD17"
    },
    {
      "name": "Sky Blue",
      "hex": "76D7EA"
    },
    {
      "name": "Dark Burgundy",
      "hex": "770F05"
    },
    {
      "name": "Crown of Thorns",
      "hex": "771F1F"
    },
    {
      "name": "Walnut",
      "hex": "773F1A"
    },
    {
      "name": "Pablo",
      "hex": "776F61"
    },
    {
      "name": "Pacifika",
      "hex": "778120"
    },
    {
      "name": "Oxley",
      "hex": "779E86"
    },
    {
      "name": "Pastel Green",
      "hex": "77DD77"
    },
    {
      "name": "Japanese Maple",
      "hex": "780109"
    },
    {
      "name": "Mocha",
      "hex": "782D19"
    },
    {
      "name": "Peanut",
      "hex": "782F16"
    },
    {
      "name": "Camouflage Green",
      "hex": "78866B"
    },
    {
      "name": "Wasabi",
      "hex": "788A25"
    },
    {
      "name": "Ship Cove",
      "hex": "788BBA"
    },
    {
      "name": "Sea Nymph",
      "hex": "78A39C"
    },
    {
      "name": "Roman Coffee",
      "hex": "795D4C"
    },
    {
      "name": "Old Lavender",
      "hex": "796878"
    },
    {
      "name": "Rum",
      "hex": "796989"
    },
    {
      "name": "Fedora",
      "hex": "796A78"
    },
    {
      "name": "Sandstone",
      "hex": "796D62"
    },
    {
      "name": "Spray",
      "hex": "79DEEC"
    },
    {
      "name": "Siren",
      "hex": "7A013A"
    },
    {
      "name": "Fuchsia Blue",
      "hex": "7A58C1"
    },
    {
      "name": "Boulder",
      "hex": "7A7A7A"
    },
    {
      "name": "Wild Blue Yonder",
      "hex": "7A89B8"
    },
    {
      "name": "De York",
      "hex": "7AC488"
    },
    {
      "name": "Red Beech",
      "hex": "7B3801"
    },
    {
      "name": "Cinnamon",
      "hex": "7B3F00"
    },
    {
      "name": "Yukon Gold",
      "hex": "7B6608"
    },
    {
      "name": "Tapa",
      "hex": "7B7874"
    },
    {
      "name": "Waterloo ",
      "hex": "7B7C94"
    },
    {
      "name": "Flax Smoke",
      "hex": "7B8265"
    },
    {
      "name": "Amulet",
      "hex": "7B9F80"
    },
    {
      "name": "Asparagus",
      "hex": "7BA05B"
    },
    {
      "name": "Kenyan Copper",
      "hex": "7C1C05"
    },
    {
      "name": "Pesto",
      "hex": "7C7631"
    },
    {
      "name": "Topaz",
      "hex": "7C778A"
    },
    {
      "name": "Concord",
      "hex": "7C7B7A"
    },
    {
      "name": "Jumbo",
      "hex": "7C7B82"
    },
    {
      "name": "Trendy Green",
      "hex": "7C881A"
    },
    {
      "name": "Gumbo",
      "hex": "7CA1A6"
    },
    {
      "name": "Acapulco",
      "hex": "7CB0A1"
    },
    {
      "name": "Neptune",
      "hex": "7CB7BB"
    },
    {
      "name": "Pueblo",
      "hex": "7D2C14"
    },
    {
      "name": "Bay Leaf",
      "hex": "7DA98D"
    },
    {
      "name": "Malibu",
      "hex": "7DC8F7"
    },
    {
      "name": "Bermuda",
      "hex": "7DD8C6"
    },
    {
      "name": "Copper Canyon",
      "hex": "7E3A15"
    },
    {
      "name": "Claret",
      "hex": "7F1734"
    },
    {
      "name": "Peru Tan",
      "hex": "7F3A02"
    },
    {
      "name": "Falcon",
      "hex": "7F626D"
    },
    {
      "name": "Mobster",
      "hex": "7F7589"
    },
    {
      "name": "Moody Blue",
      "hex": "7F76D3"
    },
    {
      "name": "Chartreuse",
      "hex": "7FFF00"
    },
    {
      "name": "Aquamarine",
      "hex": "7FFFD4"
    },
    {
      "name": "Maroon",
      "hex": "800000"
    },
    {
      "name": "Rose Bud Cherry",
      "hex": "800B47"
    },
    {
      "name": "Falu Red",
      "hex": "801818"
    },
    {
      "name": "Red Robin",
      "hex": "80341F"
    },
    {
      "name": "Vivid Violet",
      "hex": "803790"
    },
    {
      "name": "Russet",
      "hex": "80461B"
    },
    {
      "name": "Friar Gray",
      "hex": "807E79"
    },
    {
      "name": "Olive",
      "hex": "808000"
    },
    {
      "name": "Gray",
      "hex": "808080"
    },
    {
      "name": "Gulf Stream",
      "hex": "80B3AE"
    },
    {
      "name": "Glacier",
      "hex": "80B3C4"
    },
    {
      "name": "Seagull",
      "hex": "80CCEA"
    },
    {
      "name": "Nutmeg",
      "hex": "81422C"
    },
    {
      "name": "Spicy Pink",
      "hex": "816E71"
    },
    {
      "name": "Empress",
      "hex": "817377"
    },
    {
      "name": "Spanish Green",
      "hex": "819885"
    },
    {
      "name": "Sand Dune",
      "hex": "826F65"
    },
    {
      "name": "Gunsmoke",
      "hex": "828685"
    },
    {
      "name": "Battleship Gray",
      "hex": "828F72"
    },
    {
      "name": "Merlot",
      "hex": "831923"
    },
    {
      "name": "Shadow",
      "hex": "837050"
    },
    {
      "name": "Chelsea Cucumber",
      "hex": "83AA5D"
    },
    {
      "name": "Monte Carlo",
      "hex": "83D0C6"
    },
    {
      "name": "Plum",
      "hex": "843179"
    },
    {
      "name": "Granny Smith",
      "hex": "84A0A0"
    },
    {
      "name": "Chetwode Blue",
      "hex": "8581D9"
    },
    {
      "name": "Bandicoot",
      "hex": "858470"
    },
    {
      "name": "Bali Hai",
      "hex": "859FAF"
    },
    {
      "name": "Half Baked",
      "hex": "85C4CC"
    },
    {
      "name": "Red Devil",
      "hex": "860111"
    },
    {
      "name": "Lotus",
      "hex": "863C3C"
    },
    {
      "name": "Ironstone",
      "hex": "86483C"
    },
    {
      "name": "Bull Shot",
      "hex": "864D1E"
    },
    {
      "name": "Rusty Nail",
      "hex": "86560A"
    },
    {
      "name": "Bitter",
      "hex": "868974"
    },
    {
      "name": "Regent Gray",
      "hex": "86949F"
    },
    {
      "name": "Disco",
      "hex": "871550"
    },
    {
      "name": "Americano",
      "hex": "87756E"
    },
    {
      "name": "Hurricane",
      "hex": "877C7B"
    },
    {
      "name": "Oslo Gray",
      "hex": "878D91"
    },
    {
      "name": "Sushi",
      "hex": "87AB39"
    },
    {
      "name": "Spicy Mix",
      "hex": "885342"
    },
    {
      "name": "Kumera",
      "hex": "886221"
    },
    {
      "name": "Suva Gray",
      "hex": "888387"
    },
    {
      "name": "Avocado",
      "hex": "888D65"
    },
    {
      "name": "Camelot",
      "hex": "893456"
    },
    {
      "name": "Solid Pink",
      "hex": "893843"
    },
    {
      "name": "Cannon Pink",
      "hex": "894367"
    },
    {
      "name": "Makara",
      "hex": "897D6D"
    },
    {
      "name": "Burnt Umber",
      "hex": "8A3324"
    },
    {
      "name": "True V",
      "hex": "8A73D6"
    },
    {
      "name": "Clay Creek",
      "hex": "8A8360"
    },
    {
      "name": "Monsoon",
      "hex": "8A8389"
    },
    {
      "name": "Stack",
      "hex": "8A8F8A"
    },
    {
      "name": "Jordy Blue",
      "hex": "8AB9F1"
    },
    {
      "name": "Electric Violet",
      "hex": "8B00FF"
    },
    {
      "name": "Monarch",
      "hex": "8B0723"
    },
    {
      "name": "Corn Harvest",
      "hex": "8B6B0B"
    },
    {
      "name": "Olive Haze",
      "hex": "8B8470"
    },
    {
      "name": "Schooner",
      "hex": "8B847E"
    },
    {
      "name": "Natural Gray",
      "hex": "8B8680"
    },
    {
      "name": "Mantle",
      "hex": "8B9C90"
    },
    {
      "name": "Portage",
      "hex": "8B9FEE"
    },
    {
      "name": "Envy",
      "hex": "8BA690"
    },
    {
      "name": "Cascade",
      "hex": "8BA9A5"
    },
    {
      "name": "Riptide",
      "hex": "8BE6D8"
    },
    {
      "name": "Cardinal Pink",
      "hex": "8C055E"
    },
    {
      "name": "Mule Fawn",
      "hex": "8C472F"
    },
    {
      "name": "Potters Clay",
      "hex": "8C5738"
    },
    {
      "name": "Trendy Pink",
      "hex": "8C6495"
    },
    {
      "name": "Paprika",
      "hex": "8D0226"
    },
    {
      "name": "Sanguine Brown",
      "hex": "8D3D38"
    },
    {
      "name": "Tosca",
      "hex": "8D3F3F"
    },
    {
      "name": "Cement",
      "hex": "8D7662"
    },
    {
      "name": "Granite Green",
      "hex": "8D8974"
    },
    {
      "name": "Manatee",
      "hex": "8D90A1"
    },
    {
      "name": "Polo Blue",
      "hex": "8DA8CC"
    },
    {
      "name": "Red Berry",
      "hex": "8E0000"
    },
    {
      "name": "Rope",
      "hex": "8E4D1E"
    },
    {
      "name": "Opium",
      "hex": "8E6F70"
    },
    {
      "name": "Domino",
      "hex": "8E775E"
    },
    {
      "name": "Mamba",
      "hex": "8E8190"
    },
    {
      "name": "Nepal",
      "hex": "8EABC1"
    },
    {
      "name": "Pohutukawa",
      "hex": "8F021C"
    },
    {
      "name": "El Salva",
      "hex": "8F3E33"
    },
    {
      "name": "Korma",
      "hex": "8F4B0E"
    },
    {
      "name": "Squirrel",
      "hex": "8F8176"
    },
    {
      "name": "Vista Blue",
      "hex": "8FD6B4"
    },
    {
      "name": "Burgundy",
      "hex": "900020"
    },
    {
      "name": "Old Brick",
      "hex": "901E1E"
    },
    {
      "name": "Hemp",
      "hex": "907874"
    },
    {
      "name": "Almond Frost",
      "hex": "907B71"
    },
    {
      "name": "Sycamore",
      "hex": "908D39"
    },
    {
      "name": "Sangria",
      "hex": "92000A"
    },
    {
      "name": "Cumin",
      "hex": "924321"
    },
    {
      "name": "Beaver",
      "hex": "926F5B"
    },
    {
      "name": "Stonewall",
      "hex": "928573"
    },
    {
      "name": "Venus",
      "hex": "928590"
    },
    {
      "name": "Medium Purple",
      "hex": "9370DB"
    },
    {
      "name": "Cornflower",
      "hex": "93CCEA"
    },
    {
      "name": "Algae Green",
      "hex": "93DFB8"
    },
    {
      "name": "Copper Rust",
      "hex": "944747"
    },
    {
      "name": "Arrowtown",
      "hex": "948771"
    },
    {
      "name": "Scarlett",
      "hex": "950015"
    },
    {
      "name": "Strikemaster",
      "hex": "956387"
    },
    {
      "name": "Mountain Mist",
      "hex": "959396"
    },
    {
      "name": "Carmine",
      "hex": "960018"
    },
    {
      "name": "Brown",
      "hex": "964B00"
    },
    {
      "name": "Leather",
      "hex": "967059"
    },
    {
      "name": "Purple Mountain's Majesty",
      "hex": "9678B6"
    },
    {
      "name": "Lavender Purple",
      "hex": "967BB6"
    },
    {
      "name": "Pewter",
      "hex": "96A8A1"
    },
    {
      "name": "Summer Green",
      "hex": "96BBAB"
    },
    {
      "name": "Au Chico",
      "hex": "97605D"
    },
    {
      "name": "Wisteria",
      "hex": "9771B5"
    },
    {
      "name": "Atlantis",
      "hex": "97CD2D"
    },
    {
      "name": "Vin Rouge",
      "hex": "983D61"
    },
    {
      "name": "Lilac Bush",
      "hex": "9874D3"
    },
    {
      "name": "Bazaar",
      "hex": "98777B"
    },
    {
      "name": "Hacienda",
      "hex": "98811B"
    },
    {
      "name": "Pale Oyster",
      "hex": "988D77"
    },
    {
      "name": "Mint Green",
      "hex": "98FF98"
    },
    {
      "name": "Fresh Eggplant",
      "hex": "990066"
    },
    {
      "name": "Violet Eggplant",
      "hex": "991199"
    },
    {
      "name": "Tamarillo",
      "hex": "991613"
    },
    {
      "name": "Totem Pole",
      "hex": "991B07"
    },
    {
      "name": "Copper Rose",
      "hex": "996666"
    },
    {
      "name": "Amethyst",
      "hex": "9966CC"
    },
    {
      "name": "Mountbatten Pink",
      "hex": "997A8D"
    },
    {
      "name": "Blue Bell",
      "hex": "9999CC"
    },
    {
      "name": "Prairie Sand",
      "hex": "9A3820"
    },
    {
      "name": "Toast",
      "hex": "9A6E61"
    },
    {
      "name": "Gurkha",
      "hex": "9A9577"
    },
    {
      "name": "Olivine",
      "hex": "9AB973"
    },
    {
      "name": "Shadow Green",
      "hex": "9AC2B8"
    },
    {
      "name": "Oregon",
      "hex": "9B4703"
    },
    {
      "name": "Lemon Grass",
      "hex": "9B9E8F"
    },
    {
      "name": "Stiletto",
      "hex": "9C3336"
    },
    {
      "name": "Hawaiian Tan",
      "hex": "9D5616"
    },
    {
      "name": "Gull Gray",
      "hex": "9DACB7"
    },
    {
      "name": "Pistachio",
      "hex": "9DC209"
    },
    {
      "name": "Granny Smith Apple",
      "hex": "9DE093"
    },
    {
      "name": "Anakiwa",
      "hex": "9DE5FF"
    },
    {
      "name": "Chelsea Gem",
      "hex": "9E5302"
    },
    {
      "name": "Sepia Skin",
      "hex": "9E5B40"
    },
    {
      "name": "Sage",
      "hex": "9EA587"
    },
    {
      "name": "Citron",
      "hex": "9EA91F"
    },
    {
      "name": "Rock Blue",
      "hex": "9EB1CD"
    },
    {
      "name": "Morning Glory",
      "hex": "9EDEE0"
    },
    {
      "name": "Cognac",
      "hex": "9F381D"
    },
    {
      "name": "Reef Gold",
      "hex": "9F821C"
    },
    {
      "name": "Star Dust",
      "hex": "9F9F9C"
    },
    {
      "name": "Santas Gray",
      "hex": "9FA0B1"
    },
    {
      "name": "Sinbad",
      "hex": "9FD7D3"
    },
    {
      "name": "Feijoa",
      "hex": "9FDD8C"
    },
    {
      "name": "Tabasco",
      "hex": "A02712"
    },
    {
      "name": "Buttered Rum",
      "hex": "A1750D"
    },
    {
      "name": "Hit Gray",
      "hex": "A1ADB5"
    },
    {
      "name": "Citrus",
      "hex": "A1C50A"
    },
    {
      "name": "Aqua Island",
      "hex": "A1DAD7"
    },
    {
      "name": "Water Leaf",
      "hex": "A1E9DE"
    },
    {
      "name": "Flirt",
      "hex": "A2006D"
    },
    {
      "name": "Rouge",
      "hex": "A23B6C"
    },
    {
      "name": "Cape Palliser",
      "hex": "A26645"
    },
    {
      "name": "Gray Chateau",
      "hex": "A2AAB3"
    },
    {
      "name": "Edward",
      "hex": "A2AEAB"
    },
    {
      "name": "Pharlap",
      "hex": "A3807B"
    },
    {
      "name": "Amethyst Smoke",
      "hex": "A397B4"
    },
    {
      "name": "Blizzard Blue",
      "hex": "A3E3ED"
    },
    {
      "name": "Delta",
      "hex": "A4A49D"
    },
    {
      "name": "Wistful",
      "hex": "A4A6D3"
    },
    {
      "name": "Green Smoke",
      "hex": "A4AF6E"
    },
    {
      "name": "Jazzberry Jam",
      "hex": "A50B5E"
    },
    {
      "name": "Zorba",
      "hex": "A59B91"
    },
    {
      "name": "Bahia",
      "hex": "A5CB0C"
    },
    {
      "name": "Roof Terracotta",
      "hex": "A62F20"
    },
    {
      "name": "Paarl",
      "hex": "A65529"
    },
    {
      "name": "Barley Corn",
      "hex": "A68B5B"
    },
    {
      "name": "Donkey Brown",
      "hex": "A69279"
    },
    {
      "name": "Dawn",
      "hex": "A6A29A"
    },
    {
      "name": "Mexican Red",
      "hex": "A72525"
    },
    {
      "name": "Luxor Gold",
      "hex": "A7882C"
    },
    {
      "name": "Rich Gold",
      "hex": "A85307"
    },
    {
      "name": "Reno Sand",
      "hex": "A86515"
    },
    {
      "name": "Coral Tree",
      "hex": "A86B6B"
    },
    {
      "name": "Dusty Gray",
      "hex": "A8989B"
    },
    {
      "name": "Dull Lavender",
      "hex": "A899E6"
    },
    {
      "name": "Tallow",
      "hex": "A8A589"
    },
    {
      "name": "Bud",
      "hex": "A8AE9C"
    },
    {
      "name": "Locust",
      "hex": "A8AF8E"
    },
    {
      "name": "Norway",
      "hex": "A8BD9F"
    },
    {
      "name": "Chinook",
      "hex": "A8E3BD"
    },
    {
      "name": "Gray Olive",
      "hex": "A9A491"
    },
    {
      "name": "Aluminium",
      "hex": "A9ACB6"
    },
    {
      "name": "Cadet Blue",
      "hex": "A9B2C3"
    },
    {
      "name": "Schist",
      "hex": "A9B497"
    },
    {
      "name": "Tower Gray",
      "hex": "A9BDBF"
    },
    {
      "name": "Perano",
      "hex": "A9BEF2"
    },
    {
      "name": "Opal",
      "hex": "A9C6C2"
    },
    {
      "name": "Night Shadz",
      "hex": "AA375A"
    },
    {
      "name": "Fire",
      "hex": "AA4203"
    },
    {
      "name": "Muesli",
      "hex": "AA8B5B"
    },
    {
      "name": "Sandal",
      "hex": "AA8D6F"
    },
    {
      "name": "Shady Lady",
      "hex": "AAA5A9"
    },
    {
      "name": "Logan",
      "hex": "AAA9CD"
    },
    {
      "name": "Spun Pearl",
      "hex": "AAABB7"
    },
    {
      "name": "Regent St Blue",
      "hex": "AAD6E6"
    },
    {
      "name": "Magic Mint",
      "hex": "AAF0D1"
    },
    {
      "name": "Lipstick",
      "hex": "AB0563"
    },
    {
      "name": "Royal Heath",
      "hex": "AB3472"
    },
    {
      "name": "Sandrift",
      "hex": "AB917A"
    },
    {
      "name": "Cold Purple",
      "hex": "ABA0D9"
    },
    {
      "name": "Bronco",
      "hex": "ABA196"
    },
    {
      "name": "Limed Oak",
      "hex": "AC8A56"
    },
    {
      "name": "East Side",
      "hex": "AC91CE"
    },
    {
      "name": "Lemon Ginger",
      "hex": "AC9E22"
    },
    {
      "name": "Napa",
      "hex": "ACA494"
    },
    {
      "name": "Hillary",
      "hex": "ACA586"
    },
    {
      "name": "Cloudy",
      "hex": "ACA59F"
    },
    {
      "name": "Silver Chalice",
      "hex": "ACACAC"
    },
    {
      "name": "Swamp Green",
      "hex": "ACB78E"
    },
    {
      "name": "Spring Rain",
      "hex": "ACCBB1"
    },
    {
      "name": "Conifer",
      "hex": "ACDD4D"
    },
    {
      "name": "Celadon",
      "hex": "ACE1AF"
    },
    {
      "name": "Mandalay",
      "hex": "AD781B"
    },
    {
      "name": "Casper",
      "hex": "ADBED1"
    },
    {
      "name": "Moss Green",
      "hex": "ADDFAD"
    },
    {
      "name": "Padua",
      "hex": "ADE6C4"
    },
    {
      "name": "Green Yellow",
      "hex": "ADFF2F"
    },
    {
      "name": "Hippie Pink",
      "hex": "AE4560"
    },
    {
      "name": "Desert",
      "hex": "AE6020"
    },
    {
      "name": "Bouquet",
      "hex": "AE809E"
    },
    {
      "name": "Medium Carmine",
      "hex": "AF4035"
    },
    {
      "name": "Apple Blossom",
      "hex": "AF4D43"
    },
    {
      "name": "Brown Rust",
      "hex": "AF593E"
    },
    {
      "name": "Driftwood",
      "hex": "AF8751"
    },
    {
      "name": "Alpine",
      "hex": "AF8F2C"
    },
    {
      "name": "Lucky",
      "hex": "AF9F1C"
    },
    {
      "name": "Martini",
      "hex": "AFA09E"
    },
    {
      "name": "Bombay",
      "hex": "AFB1B8"
    },
    {
      "name": "Pigeon Post",
      "hex": "AFBDD9"
    },
    {
      "name": "Cadillac",
      "hex": "B04C6A"
    },
    {
      "name": "Matrix",
      "hex": "B05D54"
    },
    {
      "name": "Tapestry",
      "hex": "B05E81"
    },
    {
      "name": "Mai Tai",
      "hex": "B06608"
    },
    {
      "name": "Del Rio",
      "hex": "B09A95"
    },
    {
      "name": "Powder Blue",
      "hex": "B0E0E6"
    },
    {
      "name": "Inch Worm",
      "hex": "B0E313"
    },
    {
      "name": "Bright Red",
      "hex": "B10000"
    },
    {
      "name": "Vesuvius",
      "hex": "B14A0B"
    },
    {
      "name": "Pumpkin Skin",
      "hex": "B1610B"
    },
    {
      "name": "Santa Fe",
      "hex": "B16D52"
    },
    {
      "name": "Teak",
      "hex": "B19461"
    },
    {
      "name": "Fringy Flower",
      "hex": "B1E2C1"
    },
    {
      "name": "Ice Cold",
      "hex": "B1F4E7"
    },
    {
      "name": "Shiraz",
      "hex": "B20931"
    },
    {
      "name": "Biloba Flower",
      "hex": "B2A1EA"
    },
    {
      "name": "Tall Poppy",
      "hex": "B32D29"
    },
    {
      "name": "Fiery Orange",
      "hex": "B35213"
    },
    {
      "name": "Hot Toddy",
      "hex": "B38007"
    },
    {
      "name": "Taupe Gray",
      "hex": "B3AF95"
    },
    {
      "name": "La Rioja",
      "hex": "B3C110"
    },
    {
      "name": "Well Read",
      "hex": "B43332"
    },
    {
      "name": "Blush",
      "hex": "B44668"
    },
    {
      "name": "Jungle Mist",
      "hex": "B4CFD3"
    },
    {
      "name": "Turkish Rose",
      "hex": "B57281"
    },
    {
      "name": "Lavender",
      "hex": "B57EDC"
    },
    {
      "name": "Mongoose",
      "hex": "B5A27F"
    },
    {
      "name": "Olive Green",
      "hex": "B5B35C"
    },
    {
      "name": "Jet Stream",
      "hex": "B5D2CE"
    },
    {
      "name": "Cruise",
      "hex": "B5ECDF"
    },
    {
      "name": "Hibiscus",
      "hex": "B6316C"
    },
    {
      "name": "Thatch",
      "hex": "B69D98"
    },
    {
      "name": "Heathered Gray",
      "hex": "B6B095"
    },
    {
      "name": "Eagle",
      "hex": "B6BAA4"
    },
    {
      "name": "Spindle",
      "hex": "B6D1EA"
    },
    {
      "name": "Gum Leaf",
      "hex": "B6D3BF"
    },
    {
      "name": "Rust",
      "hex": "B7410E"
    },
    {
      "name": "Muddy Waters",
      "hex": "B78E5C"
    },
    {
      "name": "Sahara",
      "hex": "B7A214"
    },
    {
      "name": "Husk",
      "hex": "B7A458"
    },
    {
      "name": "Nobel",
      "hex": "B7B1B1"
    },
    {
      "name": "Heather",
      "hex": "B7C3D0"
    },
    {
      "name": "Madang",
      "hex": "B7F0BE"
    },
    {
      "name": "Milano Red",
      "hex": "B81104"
    },
    {
      "name": "Copper",
      "hex": "B87333"
    },
    {
      "name": "Gimblet",
      "hex": "B8B56A"
    },
    {
      "name": "Green Spring",
      "hex": "B8C1B1"
    },
    {
      "name": "Celery",
      "hex": "B8C25D"
    },
    {
      "name": "Sail",
      "hex": "B8E0F9"
    },
    {
      "name": "Chestnut",
      "hex": "B94E48"
    },
    {
      "name": "Crail",
      "hex": "B95140"
    },
    {
      "name": "Marigold",
      "hex": "B98D28"
    },
    {
      "name": "Wild Willow",
      "hex": "B9C46A"
    },
    {
      "name": "Rainee",
      "hex": "B9C8AC"
    },
    {
      "name": "Guardsman Red",
      "hex": "BA0101"
    },
    {
      "name": "Rock Spray",
      "hex": "BA450C"
    },
    {
      "name": "Bourbon",
      "hex": "BA6F1E"
    },
    {
      "name": "Pirate Gold",
      "hex": "BA7F03"
    },
    {
      "name": "Nomad",
      "hex": "BAB1A2"
    },
    {
      "name": "Submarine",
      "hex": "BAC7C9"
    },
    {
      "name": "Charlotte",
      "hex": "BAEEF9"
    },
    {
      "name": "Medium Red Violet",
      "hex": "BB3385"
    },
    {
      "name": "Brandy Rose",
      "hex": "BB8983"
    },
    {
      "name": "Rio Grande",
      "hex": "BBD009"
    },
    {
      "name": "Surf",
      "hex": "BBD7C1"
    },
    {
      "name": "Powder Ash",
      "hex": "BCC9C2"
    },
    {
      "name": "Tuscany",
      "hex": "BD5E2E"
    },
    {
      "name": "Quicksand",
      "hex": "BD978E"
    },
    {
      "name": "Silk",
      "hex": "BDB1A8"
    },
    {
      "name": "Malta",
      "hex": "BDB2A1"
    },
    {
      "name": "Chatelle",
      "hex": "BDB3C7"
    },
    {
      "name": "Lavender Gray",
      "hex": "BDBBD7"
    },
    {
      "name": "French Gray",
      "hex": "BDBDC6"
    },
    {
      "name": "Clay Ash",
      "hex": "BDC8B3"
    },
    {
      "name": "Loblolly",
      "hex": "BDC9CE"
    },
    {
      "name": "French Pass",
      "hex": "BDEDFD"
    },
    {
      "name": "London Hue",
      "hex": "BEA6C3"
    },
    {
      "name": "Pink Swan",
      "hex": "BEB5B7"
    },
    {
      "name": "Fuego",
      "hex": "BEDE0D"
    },
    {
      "name": "Rose of Sharon",
      "hex": "BF5500"
    },
    {
      "name": "Tide",
      "hex": "BFB8B0"
    },
    {
      "name": "Blue Haze",
      "hex": "BFBED8"
    },
    {
      "name": "Silver Sand",
      "hex": "BFC1C2"
    },
    {
      "name": "Key Lime Pie",
      "hex": "BFC921"
    },
    {
      "name": "Ziggurat",
      "hex": "BFDBE2"
    },
    {
      "name": "Lime",
      "hex": "BFFF00"
    },
    {
      "name": "Thunderbird",
      "hex": "C02B18"
    },
    {
      "name": "Mojo",
      "hex": "C04737"
    },
    {
      "name": "Old Rose",
      "hex": "C08081"
    },
    {
      "name": "Silver",
      "hex": "C0C0C0"
    },
    {
      "name": "Pale Leaf",
      "hex": "C0D3B9"
    },
    {
      "name": "Pixie Green",
      "hex": "C0D8B6"
    },
    {
      "name": "Tia Maria",
      "hex": "C1440E"
    },
    {
      "name": "Fuchsia Pink",
      "hex": "C154C1"
    },
    {
      "name": "Buddha Gold",
      "hex": "C1A004"
    },
    {
      "name": "Bison Hide",
      "hex": "C1B7A4"
    },
    {
      "name": "Tea",
      "hex": "C1BAB0"
    },
    {
      "name": "Gray Suit",
      "hex": "C1BECD"
    },
    {
      "name": "Sprout",
      "hex": "C1D7B0"
    },
    {
      "name": "Sulu",
      "hex": "C1F07C"
    },
    {
      "name": "Indochine",
      "hex": "C26B03"
    },
    {
      "name": "Twine",
      "hex": "C2955D"
    },
    {
      "name": "Cotton Seed",
      "hex": "C2BDB6"
    },
    {
      "name": "Pumice",
      "hex": "C2CAC4"
    },
    {
      "name": "Jagged Ice",
      "hex": "C2E8E5"
    },
    {
      "name": "Maroon Flush",
      "hex": "C32148"
    },
    {
      "name": "Indian Khaki",
      "hex": "C3B091"
    },
    {
      "name": "Pale Slate",
      "hex": "C3BFC1"
    },
    {
      "name": "Gray Nickel",
      "hex": "C3C3BD"
    },
    {
      "name": "Periwinkle Gray",
      "hex": "C3CDE6"
    },
    {
      "name": "Tiara",
      "hex": "C3D1D1"
    },
    {
      "name": "Tropical Blue",
      "hex": "C3DDF9"
    },
    {
      "name": "Cardinal",
      "hex": "C41E3A"
    },
    {
      "name": "Fuzzy Wuzzy Brown",
      "hex": "C45655"
    },
    {
      "name": "Orange Roughy",
      "hex": "C45719"
    },
    {
      "name": "Mist Gray",
      "hex": "C4C4BC"
    },
    {
      "name": "Coriander",
      "hex": "C4D0B0"
    },
    {
      "name": "Mint Tulip",
      "hex": "C4F4EB"
    },
    {
      "name": "Mulberry",
      "hex": "C54B8C"
    },
    {
      "name": "Nugget",
      "hex": "C59922"
    },
    {
      "name": "Tussock",
      "hex": "C5994B"
    },
    {
      "name": "Sea Mist",
      "hex": "C5DBCA"
    },
    {
      "name": "Yellow Green",
      "hex": "C5E17A"
    },
    {
      "name": "Brick Red",
      "hex": "C62D42"
    },
    {
      "name": "Contessa",
      "hex": "C6726B"
    },
    {
      "name": "Oriental Pink",
      "hex": "C69191"
    },
    {
      "name": "Roti",
      "hex": "C6A84B"
    },
    {
      "name": "Ash",
      "hex": "C6C3B5"
    },
    {
      "name": "Kangaroo",
      "hex": "C6C8BD"
    },
    {
      "name": "Las Palmas",
      "hex": "C6E610"
    },
    {
      "name": "Monza",
      "hex": "C7031E"
    },
    {
      "name": "Red Violet",
      "hex": "C71585"
    },
    {
      "name": "Coral Reef",
      "hex": "C7BCA2"
    },
    {
      "name": "Melrose",
      "hex": "C7C1FF"
    },
    {
      "name": "Cloud",
      "hex": "C7C4BF"
    },
    {
      "name": "Ghost",
      "hex": "C7C9D5"
    },
    {
      "name": "Pine Glade",
      "hex": "C7CD90"
    },
    {
      "name": "Botticelli",
      "hex": "C7DDE5"
    },
    {
      "name": "Antique Brass",
      "hex": "C88A65"
    },
    {
      "name": "Lilac",
      "hex": "C8A2C8"
    },
    {
      "name": "Hokey Pokey",
      "hex": "C8A528"
    },
    {
      "name": "Lily",
      "hex": "C8AABF"
    },
    {
      "name": "Laser",
      "hex": "C8B568"
    },
    {
      "name": "Edgewater",
      "hex": "C8E3D7"
    },
    {
      "name": "Piper",
      "hex": "C96323"
    },
    {
      "name": "Pizza",
      "hex": "C99415"
    },
    {
      "name": "Light Wisteria",
      "hex": "C9A0DC"
    },
    {
      "name": "Rodeo Dust",
      "hex": "C9B29B"
    },
    {
      "name": "Sundance",
      "hex": "C9B35B"
    },
    {
      "name": "Earls Green",
      "hex": "C9B93B"
    },
    {
      "name": "Silver Rust",
      "hex": "C9C0BB"
    },
    {
      "name": "Conch",
      "hex": "C9D9D2"
    },
    {
      "name": "Reef",
      "hex": "C9FFA2"
    },
    {
      "name": "Aero Blue",
      "hex": "C9FFE5"
    },
    {
      "name": "Flush Mahogany",
      "hex": "CA3435"
    },
    {
      "name": "Turmeric",
      "hex": "CABB48"
    },
    {
      "name": "Paris White",
      "hex": "CADCD4"
    },
    {
      "name": "Bitter Lemon",
      "hex": "CAE00D"
    },
    {
      "name": "Skeptic",
      "hex": "CAE6DA"
    },
    {
      "name": "Viola",
      "hex": "CB8FA9"
    },
    {
      "name": "Foggy Gray",
      "hex": "CBCAB6"
    },
    {
      "name": "Green Mist",
      "hex": "CBD3B0"
    },
    {
      "name": "Nebula",
      "hex": "CBDBD6"
    },
    {
      "name": "Persian Red",
      "hex": "CC3333"
    },
    {
      "name": "Burnt Orange",
      "hex": "CC5500"
    },
    {
      "name": "Ochre",
      "hex": "CC7722"
    },
    {
      "name": "Puce",
      "hex": "CC8899"
    },
    {
      "name": "Thistle Green",
      "hex": "CCCAA8"
    },
    {
      "name": "Periwinkle",
      "hex": "CCCCFF"
    },
    {
      "name": "Electric Lime",
      "hex": "CCFF00"
    },
    {
      "name": "Tenn",
      "hex": "CD5700"
    },
    {
      "name": "Chestnut Rose",
      "hex": "CD5C5C"
    },
    {
      "name": "Brandy Punch",
      "hex": "CD8429"
    },
    {
      "name": "Onahau",
      "hex": "CDF4FF"
    },
    {
      "name": "Sorrell Brown",
      "hex": "CEB98F"
    },
    {
      "name": "Cold Turkey",
      "hex": "CEBABA"
    },
    {
      "name": "Yuma",
      "hex": "CEC291"
    },
    {
      "name": "Chino",
      "hex": "CEC7A7"
    },
    {
      "name": "Eunry",
      "hex": "CFA39D"
    },
    {
      "name": "Old Gold",
      "hex": "CFB53B"
    },
    {
      "name": "Tasman",
      "hex": "CFDCCF"
    },
    {
      "name": "Surf Crest",
      "hex": "CFE5D2"
    },
    {
      "name": "Humming Bird",
      "hex": "CFF9F3"
    },
    {
      "name": "Scandal",
      "hex": "CFFAF4"
    },
    {
      "name": "Red Stage",
      "hex": "D05F04"
    },
    {
      "name": "Hopbush",
      "hex": "D06DA1"
    },
    {
      "name": "Meteor",
      "hex": "D07D12"
    },
    {
      "name": "Perfume",
      "hex": "D0BEF8"
    },
    {
      "name": "Prelude",
      "hex": "D0C0E5"
    },
    {
      "name": "Tea Green",
      "hex": "D0F0C0"
    },
    {
      "name": "Geebung",
      "hex": "D18F1B"
    },
    {
      "name": "Vanilla",
      "hex": "D1BEA8"
    },
    {
      "name": "Soft Amber",
      "hex": "D1C6B4"
    },
    {
      "name": "Celeste",
      "hex": "D1D2CA"
    },
    {
      "name": "Mischka",
      "hex": "D1D2DD"
    },
    {
      "name": "Pear",
      "hex": "D1E231"
    },
    {
      "name": "Hot Cinnamon",
      "hex": "D2691E"
    },
    {
      "name": "Raw Sienna",
      "hex": "D27D46"
    },
    {
      "name": "Careys Pink",
      "hex": "D29EAA"
    },
    {
      "name": "Tan",
      "hex": "D2B48C"
    },
    {
      "name": "Deco",
      "hex": "D2DA97"
    },
    {
      "name": "Blue Romance",
      "hex": "D2F6DE"
    },
    {
      "name": "Gossip",
      "hex": "D2F8B0"
    },
    {
      "name": "Sisal",
      "hex": "D3CBBA"
    },
    {
      "name": "Swirl",
      "hex": "D3CDC5"
    },
    {
      "name": "Charm",
      "hex": "D47494"
    },
    {
      "name": "Clam Shell",
      "hex": "D4B6AF"
    },
    {
      "name": "Straw",
      "hex": "D4BF8D"
    },
    {
      "name": "Akaroa",
      "hex": "D4C4A8"
    },
    {
      "name": "Bird Flower",
      "hex": "D4CD16"
    },
    {
      "name": "Iron",
      "hex": "D4D7D9"
    },
    {
      "name": "Geyser",
      "hex": "D4DFE2"
    },
    {
      "name": "Hawkes Blue",
      "hex": "D4E2FC"
    },
    {
      "name": "Grenadier",
      "hex": "D54600"
    },
    {
      "name": "Can Can",
      "hex": "D591A4"
    },
    {
      "name": "Whiskey",
      "hex": "D59A6F"
    },
    {
      "name": "Winter Hazel",
      "hex": "D5D195"
    },
    {
      "name": "Granny Apple",
      "hex": "D5F6E3"
    },
    {
      "name": "My Pink",
      "hex": "D69188"
    },
    {
      "name": "Tacha",
      "hex": "D6C562"
    },
    {
      "name": "Moon Raker",
      "hex": "D6CEF6"
    },
    {
      "name": "Quill Gray",
      "hex": "D6D6D1"
    },
    {
      "name": "Snowy Mint",
      "hex": "D6FFDB"
    },
    {
      "name": "New York Pink",
      "hex": "D7837F"
    },
    {
      "name": "Pavlova",
      "hex": "D7C498"
    },
    {
      "name": "Fog",
      "hex": "D7D0FF"
    },
    {
      "name": "Valencia",
      "hex": "D84437"
    },
    {
      "name": "Japonica",
      "hex": "D87C63"
    },
    {
      "name": "Thistle",
      "hex": "D8BFD8"
    },
    {
      "name": "Maverick",
      "hex": "D8C2D5"
    },
    {
      "name": "Foam",
      "hex": "D8FCFA"
    },
    {
      "name": "Cabaret",
      "hex": "D94972"
    },
    {
      "name": "Burning Sand",
      "hex": "D99376"
    },
    {
      "name": "Cameo",
      "hex": "D9B99B"
    },
    {
      "name": "Timberwolf",
      "hex": "D9D6CF"
    },
    {
      "name": "Tana",
      "hex": "D9DCC1"
    },
    {
      "name": "Link Water",
      "hex": "D9E4F5"
    },
    {
      "name": "Mabel",
      "hex": "D9F7FF"
    },
    {
      "name": "Cerise",
      "hex": "DA3287"
    },
    {
      "name": "Flame Pea",
      "hex": "DA5B38"
    },
    {
      "name": "Bamboo",
      "hex": "DA6304"
    },
    {
      "name": "Red Damask",
      "hex": "DA6A41"
    },
    {
      "name": "Orchid",
      "hex": "DA70D6"
    },
    {
      "name": "Copperfield",
      "hex": "DA8A67"
    },
    {
      "name": "Golden Grass",
      "hex": "DAA520"
    },
    {
      "name": "Zanah",
      "hex": "DAECD6"
    },
    {
      "name": "Iceberg",
      "hex": "DAF4F0"
    },
    {
      "name": "Oyster Bay",
      "hex": "DAFAFF"
    },
    {
      "name": "Cranberry",
      "hex": "DB5079"
    },
    {
      "name": "Petite Orchid",
      "hex": "DB9690"
    },
    {
      "name": "Di Serria",
      "hex": "DB995E"
    },
    {
      "name": "Alto",
      "hex": "DBDBDB"
    },
    {
      "name": "Frosted Mint",
      "hex": "DBFFF8"
    },
    {
      "name": "Crimson",
      "hex": "DC143C"
    },
    {
      "name": "Punch",
      "hex": "DC4333"
    },
    {
      "name": "Galliano",
      "hex": "DCB20C"
    },
    {
      "name": "Blossom",
      "hex": "DCB4BC"
    },
    {
      "name": "Wattle",
      "hex": "DCD747"
    },
    {
      "name": "Westar",
      "hex": "DCD9D2"
    },
    {
      "name": "Moon Mist",
      "hex": "DCDDCC"
    },
    {
      "name": "Caper",
      "hex": "DCEDB4"
    },
    {
      "name": "Swans Down",
      "hex": "DCF0EA"
    },
    {
      "name": "Swiss Coffee",
      "hex": "DDD6D5"
    },
    {
      "name": "White Ice",
      "hex": "DDF9F1"
    },
    {
      "name": "Cerise Red",
      "hex": "DE3163"
    },
    {
      "name": "Roman",
      "hex": "DE6360"
    },
    {
      "name": "Tumbleweed",
      "hex": "DEA681"
    },
    {
      "name": "Gold Tips",
      "hex": "DEBA13"
    },
    {
      "name": "Brandy",
      "hex": "DEC196"
    },
    {
      "name": "Wafer",
      "hex": "DECBC6"
    },
    {
      "name": "Sapling",
      "hex": "DED4A4"
    },
    {
      "name": "Barberry",
      "hex": "DED717"
    },
    {
      "name": "Beryl Green",
      "hex": "DEE5C0"
    },
    {
      "name": "Pattens Blue",
      "hex": "DEF5FF"
    },
    {
      "name": "Heliotrope",
      "hex": "DF73FF"
    },
    {
      "name": "Apache",
      "hex": "DFBE6F"
    },
    {
      "name": "Chenin",
      "hex": "DFCD6F"
    },
    {
      "name": "Lola",
      "hex": "DFCFDB"
    },
    {
      "name": "Willow Brook",
      "hex": "DFECDA"
    },
    {
      "name": "Chartreuse Yellow",
      "hex": "DFFF00"
    },
    {
      "name": "Mauve",
      "hex": "E0B0FF"
    },
    {
      "name": "Anzac",
      "hex": "E0B646"
    },
    {
      "name": "Harvest Gold",
      "hex": "E0B974"
    },
    {
      "name": "Calico",
      "hex": "E0C095"
    },
    {
      "name": "Baby Blue",
      "hex": "E0FFFF"
    },
    {
      "name": "Sunglo",
      "hex": "E16865"
    },
    {
      "name": "Equator",
      "hex": "E1BC64"
    },
    {
      "name": "Pink Flare",
      "hex": "E1C0C8"
    },
    {
      "name": "Periglacial Blue",
      "hex": "E1E6D6"
    },
    {
      "name": "Kidnapper",
      "hex": "E1EAD4"
    },
    {
      "name": "Tara",
      "hex": "E1F6E8"
    },
    {
      "name": "Mandy",
      "hex": "E25465"
    },
    {
      "name": "Terracotta",
      "hex": "E2725B"
    },
    {
      "name": "Golden Bell",
      "hex": "E28913"
    },
    {
      "name": "Shocking",
      "hex": "E292C0"
    },
    {
      "name": "Dixie",
      "hex": "E29418"
    },
    {
      "name": "Light Orchid",
      "hex": "E29CD2"
    },
    {
      "name": "Snuff",
      "hex": "E2D8ED"
    },
    {
      "name": "Mystic",
      "hex": "E2EBED"
    },
    {
      "name": "Apple Green",
      "hex": "E2F3EC"
    },
    {
      "name": "Razzmatazz",
      "hex": "E30B5C"
    },
    {
      "name": "Alizarin Crimson",
      "hex": "E32636"
    },
    {
      "name": "Cinnabar",
      "hex": "E34234"
    },
    {
      "name": "Cavern Pink",
      "hex": "E3BEBE"
    },
    {
      "name": "Peppermint",
      "hex": "E3F5E1"
    },
    {
      "name": "Mindaro",
      "hex": "E3F988"
    },
    {
      "name": "Deep Blush",
      "hex": "E47698"
    },
    {
      "name": "Gamboge",
      "hex": "E49B0F"
    },
    {
      "name": "Melanie",
      "hex": "E4C2D5"
    },
    {
      "name": "Twilight",
      "hex": "E4CFDE"
    },
    {
      "name": "Bone",
      "hex": "E4D1C0"
    },
    {
      "name": "Sunflower",
      "hex": "E4D422"
    },
    {
      "name": "Grain Brown",
      "hex": "E4D5B7"
    },
    {
      "name": "Zombie",
      "hex": "E4D69B"
    },
    {
      "name": "Frostee",
      "hex": "E4F6E7"
    },
    {
      "name": "Snow Flurry",
      "hex": "E4FFD1"
    },
    {
      "name": "Amaranth",
      "hex": "E52B50"
    },
    {
      "name": "Zest",
      "hex": "E5841B"
    },
    {
      "name": "Dust Storm",
      "hex": "E5CCC9"
    },
    {
      "name": "Stark White",
      "hex": "E5D7BD"
    },
    {
      "name": "Hampton",
      "hex": "E5D8AF"
    },
    {
      "name": "Bon Jour",
      "hex": "E5E0E1"
    },
    {
      "name": "Mercury",
      "hex": "E5E5E5"
    },
    {
      "name": "Polar",
      "hex": "E5F9F6"
    },
    {
      "name": "Trinidad",
      "hex": "E64E03"
    },
    {
      "name": "Gold Sand",
      "hex": "E6BE8A"
    },
    {
      "name": "Cashmere",
      "hex": "E6BEA5"
    },
    {
      "name": "Double Spanish White",
      "hex": "E6D7B9"
    },
    {
      "name": "Satin Linen",
      "hex": "E6E4D4"
    },
    {
      "name": "Harp",
      "hex": "E6F2EA"
    },
    {
      "name": "Off Green",
      "hex": "E6F8F3"
    },
    {
      "name": "Hint of Green",
      "hex": "E6FFE9"
    },
    {
      "name": "Tranquil",
      "hex": "E6FFFF"
    },
    {
      "name": "Mango Tango",
      "hex": "E77200"
    },
    {
      "name": "Christine",
      "hex": "E7730A"
    },
    {
      "name": "Tonys Pink",
      "hex": "E79F8C"
    },
    {
      "name": "Kobi",
      "hex": "E79FC4"
    },
    {
      "name": "Rose Fog",
      "hex": "E7BCB4"
    },
    {
      "name": "Corn",
      "hex": "E7BF05"
    },
    {
      "name": "Putty",
      "hex": "E7CD8C"
    },
    {
      "name": "Gray Nurse",
      "hex": "E7ECE6"
    },
    {
      "name": "Lily White",
      "hex": "E7F8FF"
    },
    {
      "name": "Bubbles",
      "hex": "E7FEFF"
    },
    {
      "name": "Fire Bush",
      "hex": "E89928"
    },
    {
      "name": "Shilo",
      "hex": "E8B9B3"
    },
    {
      "name": "Pearl Bush",
      "hex": "E8E0D5"
    },
    {
      "name": "Green White",
      "hex": "E8EBE0"
    },
    {
      "name": "Chrome White",
      "hex": "E8F1D4"
    },
    {
      "name": "Gin",
      "hex": "E8F2EB"
    },
    {
      "name": "Aqua Squeeze",
      "hex": "E8F5F2"
    },
    {
      "name": "Clementine",
      "hex": "E96E00"
    },
    {
      "name": "Burnt Sienna",
      "hex": "E97451"
    },
    {
      "name": "Tahiti Gold",
      "hex": "E97C07"
    },
    {
      "name": "Oyster Pink",
      "hex": "E9CECD"
    },
    {
      "name": "Confetti",
      "hex": "E9D75A"
    },
    {
      "name": "Ebb",
      "hex": "E9E3E3"
    },
    {
      "name": "Ottoman",
      "hex": "E9F8ED"
    },
    {
      "name": "Clear Day",
      "hex": "E9FFFD"
    },
    {
      "name": "Carissma",
      "hex": "EA88A8"
    },
    {
      "name": "Porsche",
      "hex": "EAAE69"
    },
    {
      "name": "Tulip Tree",
      "hex": "EAB33B"
    },
    {
      "name": "Rob Roy",
      "hex": "EAC674"
    },
    {
      "name": "Raffia",
      "hex": "EADAB8"
    },
    {
      "name": "White Rock",
      "hex": "EAE8D4"
    },
    {
      "name": "Panache",
      "hex": "EAF6EE"
    },
    {
      "name": "Solitude",
      "hex": "EAF6FF"
    },
    {
      "name": "Aqua Spring",
      "hex": "EAF9F5"
    },
    {
      "name": "Dew",
      "hex": "EAFFFE"
    },
    {
      "name": "Apricot",
      "hex": "EB9373"
    },
    {
      "name": "Zinnwaldite",
      "hex": "EBC2AF"
    },
    {
      "name": "Fuel Yellow",
      "hex": "ECA927"
    },
    {
      "name": "Ronchi",
      "hex": "ECC54E"
    },
    {
      "name": "French Lilac",
      "hex": "ECC7EE"
    },
    {
      "name": "Just Right",
      "hex": "ECCDB9"
    },
    {
      "name": "Wild Rice",
      "hex": "ECE090"
    },
    {
      "name": "Fall Green",
      "hex": "ECEBBD"
    },
    {
      "name": "Aths Special",
      "hex": "ECEBCE"
    },
    {
      "name": "Starship",
      "hex": "ECF245"
    },
    {
      "name": "Red Ribbon",
      "hex": "ED0A3F"
    },
    {
      "name": "Tango",
      "hex": "ED7A1C"
    },
    {
      "name": "Carrot Orange",
      "hex": "ED9121"
    },
    {
      "name": "Sea Pink",
      "hex": "ED989E"
    },
    {
      "name": "Tacao",
      "hex": "EDB381"
    },
    {
      "name": "Desert Sand",
      "hex": "EDC9AF"
    },
    {
      "name": "Pancho",
      "hex": "EDCDAB"
    },
    {
      "name": "Chamois",
      "hex": "EDDCB1"
    },
    {
      "name": "Primrose",
      "hex": "EDEA99"
    },
    {
      "name": "Frost",
      "hex": "EDF5DD"
    },
    {
      "name": "Aqua Haze",
      "hex": "EDF5F5"
    },
    {
      "name": "Zumthor",
      "hex": "EDF6FF"
    },
    {
      "name": "Narvik",
      "hex": "EDF9F1"
    },
    {
      "name": "Honeysuckle",
      "hex": "EDFC84"
    },
    {
      "name": "Lavender Magenta",
      "hex": "EE82EE"
    },
    {
      "name": "Beauty Bush",
      "hex": "EEC1BE"
    },
    {
      "name": "Chalky",
      "hex": "EED794"
    },
    {
      "name": "Almond",
      "hex": "EED9C4"
    },
    {
      "name": "Flax",
      "hex": "EEDC82"
    },
    {
      "name": "Bizarre",
      "hex": "EEDEDA"
    },
    {
      "name": "Double Colonial White",
      "hex": "EEE3AD"
    },
    {
      "name": "Cararra",
      "hex": "EEEEE8"
    },
    {
      "name": "Manz",
      "hex": "EEEF78"
    },
    {
      "name": "Tahuna Sands",
      "hex": "EEF0C8"
    },
    {
      "name": "Athens Gray",
      "hex": "EEF0F3"
    },
    {
      "name": "Tusk",
      "hex": "EEF3C3"
    },
    {
      "name": "Loafer",
      "hex": "EEF4DE"
    },
    {
      "name": "Catskill White",
      "hex": "EEF6F7"
    },
    {
      "name": "Twilight Blue",
      "hex": "EEFDFF"
    },
    {
      "name": "Jonquil",
      "hex": "EEFF9A"
    },
    {
      "name": "Rice Flower",
      "hex": "EEFFE2"
    },
    {
      "name": "Jaffa",
      "hex": "EF863F"
    },
    {
      "name": "Gallery",
      "hex": "EFEFEF"
    },
    {
      "name": "Porcelain",
      "hex": "EFF2F3"
    },
    {
      "name": "Mauvelous",
      "hex": "F091A9"
    },
    {
      "name": "Golden Dream",
      "hex": "F0D52D"
    },
    {
      "name": "Golden Sand",
      "hex": "F0DB7D"
    },
    {
      "name": "Buff",
      "hex": "F0DC82"
    },
    {
      "name": "Prim",
      "hex": "F0E2EC"
    },
    {
      "name": "Khaki",
      "hex": "F0E68C"
    },
    {
      "name": "Selago",
      "hex": "F0EEFD"
    },
    {
      "name": "Titan White",
      "hex": "F0EEFF"
    },
    {
      "name": "Alice Blue",
      "hex": "F0F8FF"
    },
    {
      "name": "Feta",
      "hex": "F0FCEA"
    },
    {
      "name": "Gold Drop",
      "hex": "F18200"
    },
    {
      "name": "Wewak",
      "hex": "F19BAB"
    },
    {
      "name": "Sahara Sand",
      "hex": "F1E788"
    },
    {
      "name": "Parchment",
      "hex": "F1E9D2"
    },
    {
      "name": "Blue Chalk",
      "hex": "F1E9FF"
    },
    {
      "name": "Mint Julep",
      "hex": "F1EEC1"
    },
    {
      "name": "Seashell",
      "hex": "F1F1F1"
    },
    {
      "name": "Saltpan",
      "hex": "F1F7F2"
    },
    {
      "name": "Tidal",
      "hex": "F1FFAD"
    },
    {
      "name": "Chiffon",
      "hex": "F1FFC8"
    },
    {
      "name": "Flamingo",
      "hex": "F2552A"
    },
    {
      "name": "Tangerine",
      "hex": "F28500"
    },
    {
      "name": "Mandys Pink",
      "hex": "F2C3B2"
    },
    {
      "name": "Concrete",
      "hex": "F2F2F2"
    },
    {
      "name": "Black Squeeze",
      "hex": "F2FAFA"
    },
    {
      "name": "Pomegranate",
      "hex": "F34723"
    },
    {
      "name": "Buttercup",
      "hex": "F3AD16"
    },
    {
      "name": "New Orleans",
      "hex": "F3D69D"
    },
    {
      "name": "Vanilla Ice",
      "hex": "F3D9DF"
    },
    {
      "name": "Sidecar",
      "hex": "F3E7BB"
    },
    {
      "name": "Dawn Pink",
      "hex": "F3E9E5"
    },
    {
      "name": "Wheatfield",
      "hex": "F3EDCF"
    },
    {
      "name": "Canary",
      "hex": "F3FB62"
    },
    {
      "name": "Orinoco",
      "hex": "F3FBD4"
    },
    {
      "name": "Carla",
      "hex": "F3FFD8"
    },
    {
      "name": "Hollywood Cerise",
      "hex": "F400A1"
    },
    {
      "name": "Sandy brown",
      "hex": "F4A460"
    },
    {
      "name": "Saffron",
      "hex": "F4C430"
    },
    {
      "name": "Ripe Lemon",
      "hex": "F4D81C"
    },
    {
      "name": "Janna",
      "hex": "F4EBD3"
    },
    {
      "name": "Pampas",
      "hex": "F4F2EE"
    },
    {
      "name": "Wild Sand",
      "hex": "F4F4F4"
    },
    {
      "name": "Zircon",
      "hex": "F4F8FF"
    },
    {
      "name": "Froly",
      "hex": "F57584"
    },
    {
      "name": "Cream Can",
      "hex": "F5C85C"
    },
    {
      "name": "Manhattan",
      "hex": "F5C999"
    },
    {
      "name": "Maize",
      "hex": "F5D5A0"
    },
    {
      "name": "Wheat",
      "hex": "F5DEB3"
    },
    {
      "name": "Sandwisp",
      "hex": "F5E7A2"
    },
    {
      "name": "Pot Pourri",
      "hex": "F5E7E2"
    },
    {
      "name": "Albescent White",
      "hex": "F5E9D3"
    },
    {
      "name": "Soft Peach",
      "hex": "F5EDEF"
    },
    {
      "name": "Ecru White",
      "hex": "F5F3E5"
    },
    {
      "name": "Beige",
      "hex": "F5F5DC"
    },
    {
      "name": "Golden Fizz",
      "hex": "F5FB3D"
    },
    {
      "name": "Australian Mint",
      "hex": "F5FFBE"
    },
    {
      "name": "French Rose",
      "hex": "F64A8A"
    },
    {
      "name": "Brilliant Rose",
      "hex": "F653A6"
    },
    {
      "name": "Illusion",
      "hex": "F6A4C9"
    },
    {
      "name": "Merino",
      "hex": "F6F0E6"
    },
    {
      "name": "Black Haze",
      "hex": "F6F7F7"
    },
    {
      "name": "Spring Sun",
      "hex": "F6FFDC"
    },
    {
      "name": "Violet Red",
      "hex": "F7468A"
    },
    {
      "name": "Chilean Fire",
      "hex": "F77703"
    },
    {
      "name": "Persian Pink",
      "hex": "F77FBE"
    },
    {
      "name": "Rajah",
      "hex": "F7B668"
    },
    {
      "name": "Azalea",
      "hex": "F7C8DA"
    },
    {
      "name": "We Peep",
      "hex": "F7DBE6"
    },
    {
      "name": "Quarter Spanish White",
      "hex": "F7F2E1"
    },
    {
      "name": "Whisper",
      "hex": "F7F5FA"
    },
    {
      "name": "Snow Drift",
      "hex": "F7FAF7"
    },
    {
      "name": "Casablanca",
      "hex": "F8B853"
    },
    {
      "name": "Chantilly",
      "hex": "F8C3DF"
    },
    {
      "name": "Cherub",
      "hex": "F8D9E9"
    },
    {
      "name": "Marzipan",
      "hex": "F8DB9D"
    },
    {
      "name": "Energy Yellow",
      "hex": "F8DD5C"
    },
    {
      "name": "Givry",
      "hex": "F8E4BF"
    },
    {
      "name": "White Linen",
      "hex": "F8F0E8"
    },
    {
      "name": "Magnolia",
      "hex": "F8F4FF"
    },
    {
      "name": "Spring Wood",
      "hex": "F8F6F1"
    },
    {
      "name": "Coconut Cream",
      "hex": "F8F7DC"
    },
    {
      "name": "White Lilac",
      "hex": "F8F7FC"
    },
    {
      "name": "Desert Storm",
      "hex": "F8F8F7"
    },
    {
      "name": "Texas",
      "hex": "F8F99C"
    },
    {
      "name": "Corn Field",
      "hex": "F8FACD"
    },
    {
      "name": "Mimosa",
      "hex": "F8FDD3"
    },
    {
      "name": "Carnation",
      "hex": "F95A61"
    },
    {
      "name": "Saffron Mango",
      "hex": "F9BF58"
    },
    {
      "name": "Carousel Pink",
      "hex": "F9E0ED"
    },
    {
      "name": "Dairy Cream",
      "hex": "F9E4BC"
    },
    {
      "name": "Portica",
      "hex": "F9E663"
    },
    {
      "name": "Amour",
      "hex": "F9EAF3"
    },
    {
      "name": "Rum Swizzle",
      "hex": "F9F8E4"
    },
    {
      "name": "Dolly",
      "hex": "F9FF8B"
    },
    {
      "name": "Sugar Cane",
      "hex": "F9FFF6"
    },
    {
      "name": "Ecstasy",
      "hex": "FA7814"
    },
    {
      "name": "Tan Hide",
      "hex": "FA9D5A"
    },
    {
      "name": "Corvette",
      "hex": "FAD3A2"
    },
    {
      "name": "Peach Yellow",
      "hex": "FADFAD"
    },
    {
      "name": "Turbo",
      "hex": "FAE600"
    },
    {
      "name": "Astra",
      "hex": "FAEAB9"
    },
    {
      "name": "Champagne",
      "hex": "FAECCC"
    },
    {
      "name": "Linen",
      "hex": "FAF0E6"
    },
    {
      "name": "Fantasy",
      "hex": "FAF3F0"
    },
    {
      "name": "Citrine White",
      "hex": "FAF7D6"
    },
    {
      "name": "Alabaster",
      "hex": "FAFAFA"
    },
    {
      "name": "Hint of Yellow",
      "hex": "FAFDE4"
    },
    {
      "name": "Milan",
      "hex": "FAFFA4"
    },
    {
      "name": "Brink Pink",
      "hex": "FB607F"
    },
    {
      "name": "Geraldine",
      "hex": "FB8989"
    },
    {
      "name": "Lavender Rose",
      "hex": "FBA0E3"
    },
    {
      "name": "Sea Buckthorn",
      "hex": "FBA129"
    },
    {
      "name": "Sun",
      "hex": "FBAC13"
    },
    {
      "name": "Lavender Pink",
      "hex": "FBAED2"
    },
    {
      "name": "Rose Bud",
      "hex": "FBB2A3"
    },
    {
      "name": "Cupid",
      "hex": "FBBEDA"
    },
    {
      "name": "Classic Rose",
      "hex": "FBCCE7"
    },
    {
      "name": "Apricot Peach",
      "hex": "FBCEB1"
    },
    {
      "name": "Banana Mania",
      "hex": "FBE7B2"
    },
    {
      "name": "Marigold Yellow",
      "hex": "FBE870"
    },
    {
      "name": "Festival",
      "hex": "FBE96C"
    },
    {
      "name": "Sweet Corn",
      "hex": "FBEA8C"
    },
    {
      "name": "Candy Corn",
      "hex": "FBEC5D"
    },
    {
      "name": "Hint of Red",
      "hex": "FBF9F9"
    },
    {
      "name": "Shalimar",
      "hex": "FBFFBA"
    },
    {
      "name": "Shocking Pink",
      "hex": "FC0FC0"
    },
    {
      "name": "Tickle Me Pink",
      "hex": "FC80A5"
    },
    {
      "name": "Tree Poppy",
      "hex": "FC9C1D"
    },
    {
      "name": "Lightning Yellow",
      "hex": "FCC01E"
    },
    {
      "name": "Goldenrod",
      "hex": "FCD667"
    },
    {
      "name": "Candlelight",
      "hex": "FCD917"
    },
    {
      "name": "Cherokee",
      "hex": "FCDA98"
    },
    {
      "name": "Double Pearl Lusta",
      "hex": "FCF4D0"
    },
    {
      "name": "Pearl Lusta",
      "hex": "FCF4DC"
    },
    {
      "name": "Vista White",
      "hex": "FCF8F7"
    },
    {
      "name": "Bianca",
      "hex": "FCFBF3"
    },
    {
      "name": "Moon Glow",
      "hex": "FCFEDA"
    },
    {
      "name": "China Ivory",
      "hex": "FCFFE7"
    },
    {
      "name": "Ceramic",
      "hex": "FCFFF9"
    },
    {
      "name": "Torch Red",
      "hex": "FD0E35"
    },
    {
      "name": "Wild Watermelon",
      "hex": "FD5B78"
    },
    {
      "name": "Crusta",
      "hex": "FD7B33"
    },
    {
      "name": "Sorbus",
      "hex": "FD7C07"
    },
    {
      "name": "Sweet Pink",
      "hex": "FD9FA2"
    },
    {
      "name": "Light Apricot",
      "hex": "FDD5B1"
    },
    {
      "name": "Pig Pink",
      "hex": "FDD7E4"
    },
    {
      "name": "Cinderella",
      "hex": "FDE1DC"
    },
    {
      "name": "Golden Glow",
      "hex": "FDE295"
    },
    {
      "name": "Lemon",
      "hex": "FDE910"
    },
    {
      "name": "Old Lace",
      "hex": "FDF5E6"
    },
    {
      "name": "Half Colonial White",
      "hex": "FDF6D3"
    },
    {
      "name": "Drover",
      "hex": "FDF7AD"
    },
    {
      "name": "Pale Prim",
      "hex": "FDFEB8"
    },
    {
      "name": "Cumulus",
      "hex": "FDFFD5"
    },
    {
      "name": "Persian Rose",
      "hex": "FE28A2"
    },
    {
      "name": "Sunset Orange",
      "hex": "FE4C40"
    },
    {
      "name": "Bittersweet",
      "hex": "FE6F5E"
    },
    {
      "name": "California",
      "hex": "FE9D04"
    },
    {
      "name": "Yellow Sea",
      "hex": "FEA904"
    },
    {
      "name": "Melon",
      "hex": "FEBAAD"
    },
    {
      "name": "Bright Sun",
      "hex": "FED33C"
    },
    {
      "name": "Dandelion",
      "hex": "FED85D"
    },
    {
      "name": "Salomie",
      "hex": "FEDB8D"
    },
    {
      "name": "Cape Honey",
      "hex": "FEE5AC"
    },
    {
      "name": "Remy",
      "hex": "FEEBF3"
    },
    {
      "name": "Oasis",
      "hex": "FEEFCE"
    },
    {
      "name": "Bridesmaid",
      "hex": "FEF0EC"
    },
    {
      "name": "Beeswax",
      "hex": "FEF2C7"
    },
    {
      "name": "Bleach White",
      "hex": "FEF3D8"
    },
    {
      "name": "Pipi",
      "hex": "FEF4CC"
    },
    {
      "name": "Half Spanish White",
      "hex": "FEF4DB"
    },
    {
      "name": "Wisp Pink",
      "hex": "FEF4F8"
    },
    {
      "name": "Provincial Pink",
      "hex": "FEF5F1"
    },
    {
      "name": "Half Dutch White",
      "hex": "FEF7DE"
    },
    {
      "name": "Solitaire",
      "hex": "FEF8E2"
    },
    {
      "name": "White Pointer",
      "hex": "FEF8FF"
    },
    {
      "name": "Off Yellow",
      "hex": "FEF9E3"
    },
    {
      "name": "Orange White",
      "hex": "FEFCED"
    },
    {
      "name": "Red",
      "hex": "FF0000"
    },
    {
      "name": "Rose",
      "hex": "FF007F"
    },
    {
      "name": "Purple Pizzazz",
      "hex": "FF00CC"
    },
    {
      "name": "Magenta / Fuchsia",
      "hex": "FF00FF"
    },
    {
      "name": "Scarlet",
      "hex": "FF2400"
    },
    {
      "name": "Wild Strawberry",
      "hex": "FF3399"
    },
    {
      "name": "Razzle Dazzle Rose",
      "hex": "FF33CC"
    },
    {
      "name": "Radical Red",
      "hex": "FF355E"
    },
    {
      "name": "Red Orange",
      "hex": "FF3F34"
    },
    {
      "name": "Coral Red",
      "hex": "FF4040"
    },
    {
      "name": "Vermilion",
      "hex": "FF4D00"
    },
    {
      "name": "International Orange",
      "hex": "FF4F00"
    },
    {
      "name": "Outrageous Orange",
      "hex": "FF6037"
    },
    {
      "name": "Blaze Orange",
      "hex": "FF6600"
    },
    {
      "name": "Pink Flamingo",
      "hex": "FF66FF"
    },
    {
      "name": "Orange",
      "hex": "FF681F"
    },
    {
      "name": "Hot Pink",
      "hex": "FF69B4"
    },
    {
      "name": "Persimmon",
      "hex": "FF6B53"
    },
    {
      "name": "Blush Pink",
      "hex": "FF6FFF"
    },
    {
      "name": "Burning Orange",
      "hex": "FF7034"
    },
    {
      "name": "Pumpkin",
      "hex": "FF7518"
    },
    {
      "name": "Flamenco",
      "hex": "FF7D07"
    },
    {
      "name": "Flush Orange",
      "hex": "FF7F00"
    },
    {
      "name": "Coral",
      "hex": "FF7F50"
    },
    {
      "name": "Salmon",
      "hex": "FF8C69"
    },
    {
      "name": "Pizazz",
      "hex": "FF9000"
    },
    {
      "name": "West Side",
      "hex": "FF910F"
    },
    {
      "name": "Pink Salmon",
      "hex": "FF91A4"
    },
    {
      "name": "Neon Carrot",
      "hex": "FF9933"
    },
    {
      "name": "Atomic Tangerine",
      "hex": "FF9966"
    },
    {
      "name": "Vivid Tangerine",
      "hex": "FF9980"
    },
    {
      "name": "Sunshade",
      "hex": "FF9E2C"
    },
    {
      "name": "Orange Peel",
      "hex": "FFA000"
    },
    {
      "name": "Mona Lisa",
      "hex": "FFA194"
    },
    {
      "name": "Web Orange",
      "hex": "FFA500"
    },
    {
      "name": "Carnation Pink",
      "hex": "FFA6C9"
    },
    {
      "name": "Hit Pink",
      "hex": "FFAB81"
    },
    {
      "name": "Yellow Orange",
      "hex": "FFAE42"
    },
    {
      "name": "Cornflower Lilac",
      "hex": "FFB0AC"
    },
    {
      "name": "Sundown",
      "hex": "FFB1B3"
    },
    {
      "name": "My Sin",
      "hex": "FFB31F"
    },
    {
      "name": "Texas Rose",
      "hex": "FFB555"
    },
    {
      "name": "Cotton Candy",
      "hex": "FFB7D5"
    },
    {
      "name": "Macaroni and Cheese",
      "hex": "FFB97B"
    },
    {
      "name": "Selective Yellow",
      "hex": "FFBA00"
    },
    {
      "name": "Koromiko",
      "hex": "FFBD5F"
    },
    {
      "name": "Amber",
      "hex": "FFBF00"
    },
    {
      "name": "Wax Flower",
      "hex": "FFC0A8"
    },
    {
      "name": "Pink",
      "hex": "FFC0CB"
    },
    {
      "name": "Your Pink",
      "hex": "FFC3C0"
    },
    {
      "name": "Supernova",
      "hex": "FFC901"
    },
    {
      "name": "Flesh",
      "hex": "FFCBA4"
    },
    {
      "name": "Sunglow",
      "hex": "FFCC33"
    },
    {
      "name": "Golden Tainoi",
      "hex": "FFCC5C"
    },
    {
      "name": "Peach Orange",
      "hex": "FFCC99"
    },
    {
      "name": "Chardonnay",
      "hex": "FFCD8C"
    },
    {
      "name": "Pastel Pink",
      "hex": "FFD1DC"
    },
    {
      "name": "Romantic",
      "hex": "FFD2B7"
    },
    {
      "name": "Grandis",
      "hex": "FFD38C"
    },
    {
      "name": "Gold",
      "hex": "FFD700"
    },
    {
      "name": "School bus Yellow",
      "hex": "FFD800"
    },
    {
      "name": "Cosmos",
      "hex": "FFD8D9"
    },
    {
      "name": "Mustard",
      "hex": "FFDB58"
    },
    {
      "name": "Peach Schnapps",
      "hex": "FFDCD6"
    },
    {
      "name": "Caramel",
      "hex": "FFDDAF"
    },
    {
      "name": "Tuft Bush",
      "hex": "FFDDCD"
    },
    {
      "name": "Watusi",
      "hex": "FFDDCF"
    },
    {
      "name": "Pink Lace",
      "hex": "FFDDF4"
    },
    {
      "name": "Navajo White",
      "hex": "FFDEAD"
    },
    {
      "name": "Frangipani",
      "hex": "FFDEB3"
    },
    {
      "name": "Pippin",
      "hex": "FFE1DF"
    },
    {
      "name": "Pale Rose",
      "hex": "FFE1F2"
    },
    {
      "name": "Negroni",
      "hex": "FFE2C5"
    },
    {
      "name": "Cream Brulee",
      "hex": "FFE5A0"
    },
    {
      "name": "Peach",
      "hex": "FFE5B4"
    },
    {
      "name": "Tequila",
      "hex": "FFE6C7"
    },
    {
      "name": "Kournikova",
      "hex": "FFE772"
    },
    {
      "name": "Sandy Beach",
      "hex": "FFEAC8"
    },
    {
      "name": "Karry",
      "hex": "FFEAD4"
    },
    {
      "name": "Broom",
      "hex": "FFEC13"
    },
    {
      "name": "Colonial White",
      "hex": "FFEDBC"
    },
    {
      "name": "Derby",
      "hex": "FFEED8"
    },
    {
      "name": "Vis Vis",
      "hex": "FFEFA1"
    },
    {
      "name": "Egg White",
      "hex": "FFEFC1"
    },
    {
      "name": "Papaya Whip",
      "hex": "FFEFD5"
    },
    {
      "name": "Fair Pink",
      "hex": "FFEFEC"
    },
    {
      "name": "Peach Cream",
      "hex": "FFF0DB"
    },
    {
      "name": "Lavender blush",
      "hex": "FFF0F5"
    },
    {
      "name": "Gorse",
      "hex": "FFF14F"
    },
    {
      "name": "Buttermilk",
      "hex": "FFF1B5"
    },
    {
      "name": "Pink Lady",
      "hex": "FFF1D8"
    },
    {
      "name": "Forget Me Not",
      "hex": "FFF1EE"
    },
    {
      "name": "Tutu",
      "hex": "FFF1F9"
    },
    {
      "name": "Picasso",
      "hex": "FFF39D"
    },
    {
      "name": "Chardon",
      "hex": "FFF3F1"
    },
    {
      "name": "Paris Daisy",
      "hex": "FFF46E"
    },
    {
      "name": "Barley White",
      "hex": "FFF4CE"
    },
    {
      "name": "Egg Sour",
      "hex": "FFF4DD"
    },
    {
      "name": "Sazerac",
      "hex": "FFF4E0"
    },
    {
      "name": "Serenade",
      "hex": "FFF4E8"
    },
    {
      "name": "Chablis",
      "hex": "FFF4F3"
    },
    {
      "name": "Seashell Peach",
      "hex": "FFF5EE"
    },
    {
      "name": "Sauvignon",
      "hex": "FFF5F3"
    },
    {
      "name": "Milk Punch",
      "hex": "FFF6D4"
    },
    {
      "name": "Varden",
      "hex": "FFF6DF"
    },
    {
      "name": "Rose White",
      "hex": "FFF6F5"
    },
    {
      "name": "Baja White",
      "hex": "FFF8D1"
    },
    {
      "name": "Gin Fizz",
      "hex": "FFF9E2"
    },
    {
      "name": "Early Dawn",
      "hex": "FFF9E6"
    },
    {
      "name": "Lemon Chiffon",
      "hex": "FFFACD"
    },
    {
      "name": "Bridal Heath",
      "hex": "FFFAF4"
    },
    {
      "name": "Scotch Mist",
      "hex": "FFFBDC"
    },
    {
      "name": "Soapstone",
      "hex": "FFFBF9"
    },
    {
      "name": "Witch Haze",
      "hex": "FFFC99"
    },
    {
      "name": "Buttery White",
      "hex": "FFFCEA"
    },
    {
      "name": "Island Spice",
      "hex": "FFFCEE"
    },
    {
      "name": "Cream",
      "hex": "FFFDD0"
    },
    {
      "name": "Chilean Heath",
      "hex": "FFFDE6"
    },
    {
      "name": "Travertine",
      "hex": "FFFDE8"
    },
    {
      "name": "Orchid White",
      "hex": "FFFDF3"
    },
    {
      "name": "Quarter Pearl Lusta",
      "hex": "FFFDF4"
    },
    {
      "name": "Half and Half",
      "hex": "FFFEE1"
    },
    {
      "name": "Apricot White",
      "hex": "FFFEEC"
    },
    {
      "name": "Rice Cake",
      "hex": "FFFEF0"
    },
    {
      "name": "Black White",
      "hex": "FFFEF6"
    },
    {
      "name": "Romance",
      "hex": "FFFEFD"
    },
    {
      "name": "Yellow",
      "hex": "FFFF00"
    },
    {
      "name": "Laser Lemon",
      "hex": "FFFF66"
    },
    {
      "name": "Pale Canary",
      "hex": "FFFF99"
    },
    {
      "name": "Portafino",
      "hex": "FFFFB4"
    },
    {
      "name": "Ivory",
      "hex": "FFFFF0"
    },
    {
      "name": "White",
      "hex": "FFFFFF"
    }
  ];
  return ntc;
}
var pantone;
var hasRequiredPantone;
function requirePantone() {
  if (hasRequiredPantone) return pantone;
  hasRequiredPantone = 1;
  pantone = [{
    "name": "Mahogany",
    "hex": "#CD4A4A"
  }, {
    "name": "Fuzzy Wuzzy Brown",
    "hex": "#CC6666"
  }, {
    "name": "Chestnut",
    "hex": "#BC5D58"
  }, {
    "name": "Red Orange",
    "hex": "#FF5349"
  }, {
    "name": "Sunset Orange",
    "hex": "#FD5E53"
  }, {
    "name": "Bittersweet",
    "hex": "#FD7C6E"
  }, {
    "name": "Melon",
    "hex": "#FDBCB4"
  }, {
    "name": "Outrageous Orange",
    "hex": "#FF6E4A"
  }, {
    "name": "Vivid Tangerine",
    "hex": "#FFA089"
  }, {
    "name": "Burnt Sienna",
    "hex": "#EA7E5D"
  }, {
    "name": "Brown",
    "hex": "#B4674D"
  }, {
    "name": "Sepia",
    "hex": "#A5694F"
  }, {
    "name": "Orange",
    "hex": "#FF7538"
  }, {
    "name": "Burnt Orange",
    "hex": "#FF7F49"
  }, {
    "name": "Copper",
    "hex": "#DD9475"
  }, {
    "name": "Mango Tango",
    "hex": "#FF8243"
  }, {
    "name": "Atomic Tangerine",
    "hex": "#FFA474"
  }, {
    "name": "Beaver",
    "hex": "#9F8170"
  }, {
    "name": "Antique Brass",
    "hex": "#CD9575"
  }, {
    "name": "Desert Sand",
    "hex": "#EFCDB8"
  }, {
    "name": "Raw Sienna",
    "hex": "#D68A59"
  }, {
    "name": "Tumbleweed",
    "hex": "#DEAA88"
  }, {
    "name": "Tan",
    "hex": "#FAA76C"
  }, {
    "name": "Peach",
    "hex": "#FFCFAB"
  }, {
    "name": "Macaroni and Cheese",
    "hex": "#FFBD88"
  }, {
    "name": "Apricot",
    "hex": "#FDD9B5"
  }, {
    "name": "Neon Carrot",
    "hex": "#FFA343"
  }, {
    "name": "Almond",
    "hex": "#EFDBC5"
  }, {
    "name": "Yellow Orange",
    "hex": "#FFB653"
  }, {
    "name": "Gold",
    "hex": "#E7C697"
  }, {
    "name": "Shadow",
    "hex": "#8A795D"
  }, {
    "name": "Banana Mania",
    "hex": "#FAE7B5"
  }, {
    "name": "Sunglow",
    "hex": "#FFCF48"
  }, {
    "name": "Goldenrod",
    "hex": "#FCD975"
  }, {
    "name": "Dandelion",
    "hex": "#FDDB6D"
  }, {
    "name": "Yellow",
    "hex": "#FCE883"
  }, {
    "name": "Green Yellow",
    "hex": "#F0E891"
  }, {
    "name": "Spring Green",
    "hex": "#ECEABE"
  }, {
    "name": "Olive Green",
    "hex": "#BAB86C"
  }, {
    "name": "Laser Lemon",
    "hex": "#FDFC74"
  }, {
    "name": "Unmellow Yellow",
    "hex": "#FDFC74"
  }, {
    "name": "Canary",
    "hex": "#FFFF99"
  }, {
    "name": "Yellow Green",
    "hex": "#C5E384"
  }, {
    "name": "Inch Worm",
    "hex": "#B2EC5D"
  }, {
    "name": "Asparagus",
    "hex": "#87A96B"
  }, {
    "name": "Granny Smith Apple",
    "hex": "#A8E4A0"
  }, {
    "name": "Electric Lime",
    "hex": "#1DF914"
  }, {
    "name": "Screamin Green",
    "hex": "#76FF7A"
  }, {
    "name": "Fern",
    "hex": "#71BC78"
  }, {
    "name": "Forest Green",
    "hex": "#6DAE81"
  }, {
    "name": "Sea Green",
    "hex": "#9FE2BF"
  }, {
    "name": "Green",
    "hex": "#1CAC78"
  }, {
    "name": "Mountain Meadow",
    "hex": "#30BA8F"
  }, {
    "name": "Shamrock",
    "hex": "#45CEA2"
  }, {
    "name": "Jungle Green",
    "hex": "#3BB08F"
  }, {
    "name": "Caribbean Green",
    "hex": "#1CD3A2"
  }, {
    "name": "Tropical Rain Forest",
    "hex": "#17806D"
  }, {
    "name": "Pine Green",
    "hex": "#158078"
  }, {
    "name": "Robin Egg Blue",
    "hex": "#1FCECB"
  }, {
    "name": "Aquamarine",
    "hex": "#78DBE2"
  }, {
    "name": "Turquoise Blue",
    "hex": "#77DDE7"
  }, {
    "name": "Sky Blue",
    "hex": "#80DAEB"
  }, {
    "name": "Outer Space",
    "hex": "#414A4C"
  }, {
    "name": "Blue Green",
    "hex": "#199EBD"
  }, {
    "name": "Pacific Blue",
    "hex": "#1CA9C9"
  }, {
    "name": "Cerulean",
    "hex": "#1DACD6"
  }, {
    "name": "Cornflower",
    "hex": "#9ACEEB"
  }, {
    "name": "Midnight Blue",
    "hex": "#1A4876"
  }, {
    "name": "Navy Blue",
    "hex": "#1974D2"
  }, {
    "name": "Denim",
    "hex": "#2B6CC4"
  }, {
    "name": "Blue",
    "hex": "#1F75FE"
  }, {
    "name": "Periwinkle",
    "hex": "#C5D0E6"
  }, {
    "name": "Cadet Blue",
    "hex": "#B0B7C6"
  }, {
    "name": "Indigo",
    "hex": "#5D76CB"
  }, {
    "name": "Wild Blue Yonder",
    "hex": "#A2ADD0"
  }, {
    "name": "Manatee",
    "hex": "#979AAA"
  }, {
    "name": "Blue Bell",
    "hex": "#ADADD6"
  }, {
    "name": "Blue Violet",
    "hex": "#7366BD"
  }, {
    "name": "Purple Heart",
    "hex": "#7442C8"
  }, {
    "name": "Royal Purple",
    "hex": "#7851A9"
  }, {
    "name": "Purple Mountains’ Majesty",
    "hex": "#9D81BA"
  }, {
    "name": "Violet (Purple)",
    "hex": "#926EAE"
  }, {
    "name": "Wisteria",
    "hex": "#CDA4DE"
  }, {
    "name": "Vivid Violet",
    "hex": "#8F509D"
  }, {
    "name": "Fuchsia",
    "hex": "#C364C5"
  }, {
    "name": "Shocking Pink",
    "hex": "#FB7EFD"
  }, {
    "name": "Pink Flamingo",
    "hex": "#FC74FD"
  }, {
    "name": "Plum",
    "hex": "#8E4585"
  }, {
    "name": "Hot Magenta",
    "hex": "#FF1DCE"
  }, {
    "name": "Purple Pizzazz",
    "hex": "#FF1DCE"
  }, {
    "name": "Razzle Dazzle Rose",
    "hex": "#FF48D0"
  }, {
    "name": "Orchid",
    "hex": "#E6A8D7"
  }, {
    "name": "Red Violet",
    "hex": "#C0448F"
  }, {
    "name": "Eggplant",
    "hex": "#6E5160"
  }, {
    "name": "Cerise",
    "hex": "#DD4492"
  }, {
    "name": "Wild Strawberry",
    "hex": "#FF43A4"
  }, {
    "name": "Magenta",
    "hex": "#F664AF"
  }, {
    "name": "Lavender",
    "hex": "#FCB4D5"
  }, {
    "name": "Cotton Candy",
    "hex": "#FFBCD9"
  }, {
    "name": "Violet Red",
    "hex": "#F75394"
  }, {
    "name": "Carnation Pink",
    "hex": "#FFAACC"
  }, {
    "name": "Razzmatazz",
    "hex": "#E3256B"
  }, {
    "name": "Piggy Pink",
    "hex": "#FDD7E4"
  }, {
    "name": "Jazzberry Jam",
    "hex": "#CA3767"
  }, {
    "name": "Blush",
    "hex": "#DE5D83"
  }, {
    "name": "Tickle Me Pink",
    "hex": "#FC89AC"
  }, {
    "name": "Pink Sherbet",
    "hex": "#F780A1"
  }, {
    "name": "Maroon",
    "hex": "#C8385A"
  }, {
    "name": "Red",
    "hex": "#EE204D"
  }, {
    "name": "Radical Red",
    "hex": "#FF496C"
  }, {
    "name": "Mauvelous",
    "hex": "#EF98AA"
  }, {
    "name": "Wild Watermelon",
    "hex": "#FC6C85"
  }, {
    "name": "Scarlet",
    "hex": "#FC2847"
  }, {
    "name": "Salmon",
    "hex": "#FF9BAA"
  }, {
    "name": "Brick Red",
    "hex": "#CB4154"
  }, {
    "name": "White",
    "hex": "#EDEDED"
  }, {
    "name": "Timberwolf",
    "hex": "#DBD7D2"
  }, {
    "name": "Silver",
    "hex": "#CDC5C2"
  }, {
    "name": "Gray",
    "hex": "#95918C"
  }, {
    "name": "Black",
    "hex": "#232323"
  }];
  return pantone;
}
var roygbiv;
var hasRequiredRoygbiv;
function requireRoygbiv() {
  if (hasRequiredRoygbiv) return roygbiv;
  hasRequiredRoygbiv = 1;
  roygbiv = [
    { name: "red", hex: "#FF0000" },
    { name: "orange", hex: "#FFA500" },
    { name: "yellow", hex: "#FFFF00" },
    { name: "green", hex: "#008000" },
    { name: "blue", hex: "#0000FF" },
    { name: "indigo", hex: "#4B0082" },
    { name: "violet", hex: "#EE82EE" }
  ];
  return roygbiv;
}
var x11;
var hasRequiredX11;
function requireX11() {
  if (hasRequiredX11) return x11;
  hasRequiredX11 = 1;
  x11 = [{
    name: "indigo",
    hex: "#4b0082"
  }, {
    name: "gold",
    hex: "#ffd700"
  }, {
    name: "hotpink",
    hex: "#ff69b4"
  }, {
    name: "firebrick",
    hex: "#b22222"
  }, {
    name: "indianred",
    hex: "#cd5c5c"
  }, {
    name: "yellow",
    hex: "#ffff00"
  }, {
    name: "mistyrose",
    hex: "#ffe4e1"
  }, {
    name: "darkolivegreen",
    hex: "#556b2f"
  }, {
    name: "olive",
    hex: "#808000"
  }, {
    name: "darkseagreen",
    hex: "#8fbc8f"
  }, {
    name: "pink",
    hex: "#ffc0cb"
  }, {
    name: "tomato",
    hex: "#ff6347"
  }, {
    name: "lightcoral",
    hex: "#f08080"
  }, {
    name: "orangered",
    hex: "#ff4500"
  }, {
    name: "navajowhite",
    hex: "#ffdead"
  }, {
    name: "lime",
    hex: "#00ff00"
  }, {
    name: "palegreen",
    hex: "#98fb98"
  }, {
    name: "darkslategrey",
    hex: "#2f4f4f"
  }, {
    name: "greenyellow",
    hex: "#adff2f"
  }, {
    name: "burlywood",
    hex: "#deb887"
  }, {
    name: "seashell",
    hex: "#fff5ee"
  }, {
    name: "mediumspringgreen",
    hex: "#00fa9a"
  }, {
    name: "fuchsia",
    hex: "#ff00ff"
  }, {
    name: "papayawhip",
    hex: "#ffefd5"
  }, {
    name: "blanchedalmond",
    hex: "#ffebcd"
  }, {
    name: "chartreuse",
    hex: "#7fff00"
  }, {
    name: "dimgray",
    hex: "#696969"
  }, {
    name: "black",
    hex: "#000000"
  }, {
    name: "peachpuff",
    hex: "#ffdab9"
  }, {
    name: "springgreen",
    hex: "#00ff7f"
  }, {
    name: "aquamarine",
    hex: "#7fffd4"
  }, {
    name: "white",
    hex: "#ffffff"
  }, {
    name: "orange",
    hex: "#ffa500"
  }, {
    name: "lightsalmon",
    hex: "#ffa07a"
  }, {
    name: "darkslategray",
    hex: "#2f4f4f"
  }, {
    name: "brown",
    hex: "#a52a2a"
  }, {
    name: "ivory",
    hex: "#fffff0"
  }, {
    name: "dodgerblue",
    hex: "#1e90ff"
  }, {
    name: "peru",
    hex: "#cd853f"
  }, {
    name: "lawngreen",
    hex: "#7cfc00"
  }, {
    name: "chocolate",
    hex: "#d2691e"
  }, {
    name: "crimson",
    hex: "#dc143c"
  }, {
    name: "forestgreen",
    hex: "#228b22"
  }, {
    name: "darkgrey",
    hex: "#a9a9a9"
  }, {
    name: "lightseagreen",
    hex: "#20b2aa"
  }, {
    name: "cyan",
    hex: "#00ffff"
  }, {
    name: "mintcream",
    hex: "#f5fffa"
  }, {
    name: "silver",
    hex: "#c0c0c0"
  }, {
    name: "antiquewhite",
    hex: "#faebd7"
  }, {
    name: "mediumorchid",
    hex: "#ba55d3"
  }, {
    name: "skyblue",
    hex: "#87ceeb"
  }, {
    name: "gray",
    hex: "#808080"
  }, {
    name: "darkturquoise",
    hex: "#00ced1"
  }, {
    name: "goldenrod",
    hex: "#daa520"
  }, {
    name: "darkgreen",
    hex: "#006400"
  }, {
    name: "floralwhite",
    hex: "#fffaf0"
  }, {
    name: "darkviolet",
    hex: "#9400d3"
  }, {
    name: "darkgray",
    hex: "#a9a9a9"
  }, {
    name: "moccasin",
    hex: "#ffe4b5"
  }, {
    name: "saddlebrown",
    hex: "#8b4513"
  }, {
    name: "grey",
    hex: "#808080"
  }, {
    name: "darkslateblue",
    hex: "#483d8b"
  }, {
    name: "lightskyblue",
    hex: "#87cefa"
  }, {
    name: "lightpink",
    hex: "#ffb6c1"
  }, {
    name: "mediumvioletred",
    hex: "#c71585"
  }, {
    name: "slategrey",
    hex: "#708090"
  }, {
    name: "red",
    hex: "#ff0000"
  }, {
    name: "deeppink",
    hex: "#ff1493"
  }, {
    name: "limegreen",
    hex: "#32cd32"
  }, {
    name: "darkmagenta",
    hex: "#8b008b"
  }, {
    name: "palegoldenrod",
    hex: "#eee8aa"
  }, {
    name: "plum",
    hex: "#dda0dd"
  }, {
    name: "turquoise",
    hex: "#40e0d0"
  }, {
    name: "lightgrey",
    hex: "#d3d3d3"
  }, {
    name: "lightgoldenrodyellow",
    hex: "#fafad2"
  }, {
    name: "darkgoldenrod",
    hex: "#b8860b"
  }, {
    name: "lavender",
    hex: "#e6e6fa"
  }, {
    name: "maroon",
    hex: "#800000"
  }, {
    name: "yellowgreen",
    hex: "#9acd32"
  }, {
    name: "sandybrown",
    hex: "#f4a460"
  }, {
    name: "thistle",
    hex: "#d8bfd8"
  }, {
    name: "violet",
    hex: "#ee82ee"
  }, {
    name: "navy",
    hex: "#000080"
  }, {
    name: "magenta",
    hex: "#ff00ff"
  }, {
    name: "dimgrey",
    hex: "#696969"
  }, {
    name: "tan",
    hex: "#d2b48c"
  }, {
    name: "rosybrown",
    hex: "#bc8f8f"
  }, {
    name: "olivedrab",
    hex: "#6b8e23"
  }, {
    name: "blue",
    hex: "#0000ff"
  }, {
    name: "lightblue",
    hex: "#add8e6"
  }, {
    name: "ghostwhite",
    hex: "#f8f8ff"
  }, {
    name: "honeydew",
    hex: "#f0fff0"
  }, {
    name: "cornflowerblue",
    hex: "#6495ed"
  }, {
    name: "slateblue",
    hex: "#6a5acd"
  }, {
    name: "linen",
    hex: "#faf0e6"
  }, {
    name: "darkblue",
    hex: "#00008b"
  }, {
    name: "powderblue",
    hex: "#b0e0e6"
  }, {
    name: "seagreen",
    hex: "#2e8b57"
  }, {
    name: "darkkhaki",
    hex: "#bdb76b"
  }, {
    name: "snow",
    hex: "#fffafa"
  }, {
    name: "sienna",
    hex: "#a0522d"
  }, {
    name: "mediumblue",
    hex: "#0000cd"
  }, {
    name: "royalblue",
    hex: "#4169e1"
  }, {
    name: "lightcyan",
    hex: "#e0ffff"
  }, {
    name: "green",
    hex: "#008000"
  }, {
    name: "mediumpurple",
    hex: "#9370db"
  }, {
    name: "midnightblue",
    hex: "#191970"
  }, {
    name: "cornsilk",
    hex: "#fff8dc"
  }, {
    name: "paleturquoise",
    hex: "#afeeee"
  }, {
    name: "bisque",
    hex: "#ffe4c4"
  }, {
    name: "slategray",
    hex: "#708090"
  }, {
    name: "darkcyan",
    hex: "#008b8b"
  }, {
    name: "khaki",
    hex: "#f0e68c"
  }, {
    name: "wheat",
    hex: "#f5deb3"
  }, {
    name: "teal",
    hex: "#008080"
  }, {
    name: "darkorchid",
    hex: "#9932cc"
  }, {
    name: "deepskyblue",
    hex: "#00bfff"
  }, {
    name: "salmon",
    hex: "#fa8072"
  }, {
    name: "darkred",
    hex: "#8b0000"
  }, {
    name: "steelblue",
    hex: "#4682b4"
  }, {
    name: "palevioletred",
    hex: "#db7093"
  }, {
    name: "lightslategray",
    hex: "#778899"
  }, {
    name: "aliceblue",
    hex: "#f0f8ff"
  }, {
    name: "lightslategrey",
    hex: "#778899"
  }, {
    name: "lightgreen",
    hex: "#90ee90"
  }, {
    name: "orchid",
    hex: "#da70d6"
  }, {
    name: "gainsboro",
    hex: "#dcdcdc"
  }, {
    name: "mediumseagreen",
    hex: "#3cb371"
  }, {
    name: "lightgray",
    hex: "#d3d3d3"
  }, {
    name: "mediumturquoise",
    hex: "#48d1cc"
  }, {
    name: "lemonchiffon",
    hex: "#fffacd"
  }, {
    name: "cadetblue",
    hex: "#5f9ea0"
  }, {
    name: "lightyellow",
    hex: "#ffffe0"
  }, {
    name: "lavenderblush",
    hex: "#fff0f5"
  }, {
    name: "coral",
    hex: "#ff7f50"
  }, {
    name: "purple",
    hex: "#800080"
  }, {
    name: "aqua",
    hex: "#00ffff"
  }, {
    name: "whitesmoke",
    hex: "#f5f5f5"
  }, {
    name: "mediumslateblue",
    hex: "#7b68ee"
  }, {
    name: "darkorange",
    hex: "#ff8c00"
  }, {
    name: "mediumaquamarine",
    hex: "#66cdaa"
  }, {
    name: "darksalmon",
    hex: "#e9967a"
  }, {
    name: "beige",
    hex: "#f5f5dc"
  }, {
    name: "blueviolet",
    hex: "#8a2be2"
  }, {
    name: "azure",
    hex: "#f0ffff"
  }, {
    name: "lightsteelblue",
    hex: "#b0c4de"
  }, {
    name: "oldlace",
    hex: "#fdf5e6"
  }];
  return x11;
}
var hasRequiredColorNamer;
function requireColorNamer() {
  if (hasRequiredColorNamer) return colorNamer.exports;
  hasRequiredColorNamer = 1;
  var chroma2 = requireChroma();
  var WeakMap2 = requireEs6WeakMap();
  var lists = {
    basic: requireBasic(),
    html: requireHtml(),
    ntc: requireNtc(),
    pantone: requirePantone(),
    roygbiv: requireRoygbiv(),
    x11: requireX11()
  };
  var cache = new WeakMap2();
  var namer = colorNamer.exports = function(color, options) {
    options = options || {};
    var cacheKey = { color, options };
    if (cache.has(cacheKey)) {
      return cache.get(cacheKey);
    }
    var deltaE = String(options.distance).toLowerCase() === "deltae";
    color = chroma2(color);
    var results = {};
    for (var key in lists) {
      if (options.pick && options.pick.indexOf(key) === -1) {
        continue;
      }
      if (options.omit && options.omit.indexOf(key) !== -1) {
        continue;
      }
      results[key] = lists[key].map(function(name) {
        name.distance = deltaE ? chroma2.deltaE(color, chroma2(name.hex)) : chroma2.distance(color, chroma2(name.hex));
        return name;
      }).sort(function(a, b2) {
        return a.distance - b2.distance;
      });
    }
    cache.set(cacheKey, results);
    return results;
  };
  namer.chroma = chroma2;
  namer.lists = lists;
  return colorNamer.exports;
}
requireColorNamer();
var lodash$1 = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
var lodash = lodash$1.exports;
var hasRequiredLodash;
function requireLodash() {
  if (hasRequiredLodash) return lodash$1.exports;
  hasRequiredLodash = 1;
  (function(module2, exports2) {
    (function() {
      var undefined$1;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array2, setter, iteratee, accumulator) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          var value = array2[index];
          setter(accumulator, value, iteratee(value), array2);
        }
        return accumulator;
      }
      function arrayEach(array2, iteratee) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          if (iteratee(array2[index], index, array2) === false) {
            break;
          }
        }
        return array2;
      }
      function arrayEachRight(array2, iteratee) {
        var length = array2 == null ? 0 : array2.length;
        while (length--) {
          if (iteratee(array2[length], length, array2) === false) {
            break;
          }
        }
        return array2;
      }
      function arrayEvery(array2, predicate) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          if (!predicate(array2[index], index, array2)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array2, predicate) {
        var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array2[index];
          if (predicate(value, index, array2)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array2, value) {
        var length = array2 == null ? 0 : array2.length;
        return !!length && baseIndexOf(array2, value, 0) > -1;
      }
      function arrayIncludesWith(array2, value, comparator) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          if (comparator(value, array2[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array2, iteratee) {
        var index = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array2[index], index, array2);
        }
        return result;
      }
      function arrayPush(array2, values) {
        var index = -1, length = values.length, offset = array2.length;
        while (++index < length) {
          array2[offset + index] = values[index];
        }
        return array2;
      }
      function arrayReduce(array2, iteratee, accumulator, initAccum) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        if (initAccum && length) {
          accumulator = array2[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array2[index], index, array2);
        }
        return accumulator;
      }
      function arrayReduceRight(array2, iteratee, accumulator, initAccum) {
        var length = array2 == null ? 0 : array2.length;
        if (initAccum && length) {
          accumulator = array2[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array2[length], length, array2);
        }
        return accumulator;
      }
      function arraySome(array2, predicate) {
        var index = -1, length = array2 == null ? 0 : array2.length;
        while (++index < length) {
          if (predicate(array2[index], index, array2)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string2) {
        return string2.split("");
      }
      function asciiWords(string2) {
        return string2.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length = array2.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array2[index], index, array2)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array2, value, fromIndex) {
        return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array2, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array2.length;
        while (++index < length) {
          if (comparator(array2[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array2, iteratee) {
        var length = array2 == null ? 0 : array2.length;
        return length ? baseSum(array2, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined$1 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined$1 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array2, comparer) {
        var length = array2.length;
        array2.sort(comparer);
        while (length--) {
          array2[length] = array2[length].value;
        }
        return array2;
      }
      function baseSum(array2, iteratee) {
        var result, index = -1, length = array2.length;
        while (++index < length) {
          var current = iteratee(array2[index]);
          if (current !== undefined$1) {
            result = result === undefined$1 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string2) {
        return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array2, placeholder) {
        var length = array2.length, result = 0;
        while (length--) {
          if (array2[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined$1 : object[key];
      }
      function hasUnicode(string2) {
        return reHasUnicode.test(string2);
      }
      function hasUnicodeWord(string2) {
        return reHasUnicodeWord.test(string2);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map2) {
        var index = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array2, placeholder) {
        var index = -1, length = array2.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array2[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array2[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array2, value, fromIndex) {
        var index = fromIndex - 1, length = array2.length;
        while (++index < length) {
          if (array2[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array2, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array2[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string2) {
        return hasUnicode(string2) ? unicodeSize(string2) : asciiSize(string2);
      }
      function stringToArray(string2) {
        return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
      }
      function trimmedEndIndex(string2) {
        var index = string2.length;
        while (index-- && reWhitespace.test(string2.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string2) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string2)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string2) {
        return string2.match(reUnicode) || [];
      }
      function unicodeWords(string2) {
        return string2.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
        var Array2 = context.Array, Date = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty2 = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context.Buffer : undefined$1, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined$1, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined$1, symIterator = Symbol2 ? Symbol2.iterator : undefined$1, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined$1;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;
        function lodash2(value) {
          if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined$1;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined$1;
        }
        lodash2.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash2
          }
        };
        lodash2.prototype = baseLodash.prototype;
        lodash2.prototype.constructor = lodash2;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array2 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array2), isRight = dir < 0, arrLength = isArr ? array2.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array2, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array2[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined$1 : result2;
          }
          return hasOwnProperty2.call(data, key) ? data[key] : undefined$1;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined$1 : hasOwnProperty2.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined$1 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array2) {
          var length = array2.length;
          return length ? array2[baseRandom(0, length - 1)] : undefined$1;
        }
        function arraySampleSize(array2, n) {
          return shuffleSelf(copyArray(array2), baseClamp(n, 0, array2.length));
        }
        function arrayShuffle(array2) {
          return shuffleSelf(copyArray(array2));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined$1 && !eq(object[key], value) || value === undefined$1 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined$1 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array2, key) {
          var length = array2.length;
          while (length--) {
            if (eq(array2[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys2(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined$1 : get2(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined$1) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined$1) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined$1) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag == objectTag || tag == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
          var props = isArr ? undefined$1 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys2(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined$1 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined$1, args);
          }, wait);
        }
        function baseDifference(array2, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array2.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array2[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array2, iteratee2, comparator) {
          var index = -1, length = array2.length;
          while (++index < length) {
            var value = array2[index], current = iteratee2(value);
            if (current != null && (computed === undefined$1 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array2, value, start, end) {
          var length = array2.length;
          start = toInteger2(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined$1 || end > length ? length : toInteger2(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array2[start++] = value;
          }
          return array2;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array2, depth, predicate, isStrict, result2) {
          var index = -1, length = array2.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array2[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys2);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys2);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction2(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined$1;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined$1 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty2.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array2 = arrays[othIndex];
            if (othIndex && iteratee2) {
              array2 = arrayMap(array2, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array2.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array2.length >= 120) ? new SetCache(othIndex && array2) : undefined$1;
          }
          array2 = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined$1 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined$1 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty2.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject2(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get2(object, path);
            return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject2(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined$1;
              if (newValue === undefined$1) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined$1;
          var isCommon = newValue === undefined$1;
          if (isCommon) {
            var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments2(srcValue)) {
              newValue = objValue;
              if (isArguments2(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array2, n) {
          var length = array2.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array2[n] : undefined$1;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array2, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array2;
          if (array2 === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array2, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array2) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array2, fromIndex, 1);
            }
          }
          return array2;
        }
        function basePullAt(array2, indexes) {
          var length = array2 ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array2, index, 1);
              } else {
                baseUnset(array2, index);
              }
            }
          }
          return array2;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string2, n) {
          var result2 = "";
          if (!string2 || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string2;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string2 += string2;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array2 = values(collection);
          return shuffleSelf(array2, baseClamp(n, 0, array2.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject2(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
              if (newValue === undefined$1) {
                newValue = isObject2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string2) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string2),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array2, start, end) {
          var index = -1, length = array2.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array2[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array2, value, retHighest) {
          var low = 0, high = array2 == null ? low : array2.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array2[mid];
              if (computed !== null && !isSymbol2(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array2, value, identity, retHighest);
        }
        function baseSortedIndexBy(array2, value, iteratee2, retHighest) {
          var low = 0, high = array2 == null ? 0 : array2.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol2(value), valIsUndefined = value === undefined$1;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array2[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol2(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array2, iteratee2) {
          var index = -1, length = array2.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol2(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol2(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -Infinity ? "-0" : result2;
        }
        function baseUniq(array2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array2.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array2);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array2[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array2, predicate, isDrop, fromRight) {
          var length = array2.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array2[index], index, array2)) {
          }
          return isDrop ? baseSlice(array2, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array2, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array2 = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array2, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined$1;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array2, start, end) {
          var length = array2.length;
          end = end === undefined$1 ? length : end;
          return !start && end >= length ? array2 : baseSlice(array2, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
            var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array2) {
          var index = -1, length = source.length;
          array2 || (array2 = Array2(length));
          while (++index < length) {
            array2[index] = source[index];
          }
          return array2;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;
            if (newValue === undefined$1) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$1, guard = length > 2 ? sources[2] : undefined$1;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined$1;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined$1 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn2.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string2) {
            string2 = toString(string2);
            var strSymbols = hasUnicode(string2) ? stringToArray(string2) : undefined$1;
            var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string2) {
            return arrayReduce(words(deburr(string2).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined$1,
                args,
                holders,
                undefined$1,
                undefined$1,
                arity - length
              );
            }
            var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn2, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys2(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined$1;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined$1;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn2 = Ctor || createCtor(fn2);
            }
            return fn2.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined$1 && other === undefined$1) {
              return defaultValue;
            }
            if (value !== undefined$1) {
              result2 = value;
            }
            if (other !== undefined$1) {
              if (result2 === undefined$1) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined$1 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn2, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined$1;
            }
            start = toFinite(start);
            if (end === undefined$1) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber(value);
              other = toNumber(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= -4;
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined$1, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger2(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag(object);
            if (tag == mapTag) {
              return mapToArray(object);
            }
            if (tag == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= -97;
            partials = holders = undefined$1;
          }
          ary2 = ary2 === undefined$1 ? ary2 : nativeMax(toInteger2(ary2), 0);
          arity = arity === undefined$1 ? arity : toInteger2(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined$1;
          }
          var data = isBindKey ? undefined$1 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= -25;
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined$1, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined$1 || eq(objValue, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined$1 : value;
        }
        function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array2);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array2;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
          stack.set(array2, other);
          stack.set(other, array2);
          while (++index < arrLength) {
            var arrValue = array2[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array2, stack) : customizer(arrValue, othValue, index, array2, other, stack);
            }
            if (compared !== undefined$1) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array2);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other);
            case errorTag:
              return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
              return object == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other);
              var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined$1, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys2, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array2 = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array2.length : 0;
          while (length--) {
            var data = array2[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash2.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map3, key) {
          var data = map3.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys2(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined$1;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
          try {
            value[symToStringTag] = undefined$1;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments2(object));
        }
        function initCloneArray(array2) {
          var length = array2.length, result2 = new array2.constructor(length);
          if (length && typeof array2[0] == "string" && hasOwnProperty2.call(array2, "index")) {
            result2.index = array2.index;
            result2.input = array2.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray(value) || isArguments2(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject2(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash2[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined$1 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array2 = Array2(length);
            while (++index < length) {
              array2[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array2);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array2, indexes) {
          var arrLength = array2.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array2);
          while (length--) {
            var index = indexes[length];
            array2[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
          }
          return array2;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined$1, arguments);
          };
        }
        function shuffleSelf(array2, size2) {
          var index = -1, length = array2.length, lastIndex = length - 1;
          size2 = size2 === undefined$1 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array2[rand];
            array2[rand] = array2[index];
            array2[index] = value;
          }
          array2.length = size2;
          return array2;
        }
        var stringToPath = memoizeCapped(function(string2) {
          var result2 = [];
          if (string2.charCodeAt(0) === 46) {
            result2.push("");
          }
          string2.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol2(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -Infinity ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array2, size2, guard) {
          if (guard ? isIterateeCall(array2, size2, guard) : size2 === undefined$1) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger2(size2), 0);
          }
          var length = array2 == null ? 0 : array2.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array2, index, index += size2);
          }
          return result2;
        }
        function compact(array2) {
          var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array2[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array2 = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray(array2) ? copyArray(array2) : [array2], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array2, values2) {
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array2, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array2, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined$1;
          }
          return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
        });
        function drop(array2, n, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger2(n);
          return baseSlice(array2, n < 0 ? 0 : n, length);
        }
        function dropRight(array2, n, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger2(n);
          n = length - n;
          return baseSlice(array2, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), true) : [];
        }
        function fill(array2, value, start, end) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array2, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array2, value, start, end);
        }
        function findIndex(array2, predicate, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger2(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array2, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array2, predicate, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined$1) {
            index = toInteger2(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array2, getIteratee(predicate, 3), index, true);
        }
        function flatten(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseFlatten(array2, 1) : [];
        }
        function flattenDeep(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseFlatten(array2, INFINITY) : [];
        }
        function flattenDepth(array2, depth) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined$1 ? 1 : toInteger2(depth);
          return baseFlatten(array2, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array2) {
          return array2 && array2.length ? array2[0] : undefined$1;
        }
        function indexOf(array2, value, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger2(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array2, value, index);
        }
        function initial(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseSlice(array2, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined$1;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
        });
        function join(array2, separator) {
          return array2 == null ? "" : nativeJoin.call(array2, separator);
        }
        function last(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? array2[length - 1] : undefined$1;
        }
        function lastIndexOf(array2, value, fromIndex) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined$1) {
            index = toInteger2(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array2, value, index) : baseFindIndex(array2, baseIsNaN, index, true);
        }
        function nth(array2, n) {
          return array2 && array2.length ? baseNth(array2, toInteger2(n)) : undefined$1;
        }
        var pull = baseRest(pullAll);
        function pullAll(array2, values2) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2) : array2;
        }
        function pullAllBy(array2, values2, iteratee2) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, getIteratee(iteratee2, 2)) : array2;
        }
        function pullAllWith(array2, values2, comparator) {
          return array2 && array2.length && values2 && values2.length ? basePullAll(array2, values2, undefined$1, comparator) : array2;
        }
        var pullAt = flatRest(function(array2, indexes) {
          var length = array2 == null ? 0 : array2.length, result2 = baseAt(array2, indexes);
          basePullAt(array2, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array2, predicate) {
          var result2 = [];
          if (!(array2 && array2.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array2.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array2[index];
            if (predicate(value, index, array2)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array2, indexes);
          return result2;
        }
        function reverse(array2) {
          return array2 == null ? array2 : nativeReverse.call(array2);
        }
        function slice(array2, start, end) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array2, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger2(start);
            end = end === undefined$1 ? length : toInteger2(end);
          }
          return baseSlice(array2, start, end);
        }
        function sortedIndex(array2, value) {
          return baseSortedIndex(array2, value);
        }
        function sortedIndexBy(array2, value, iteratee2) {
          return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array2, value) {
          var length = array2 == null ? 0 : array2.length;
          if (length) {
            var index = baseSortedIndex(array2, value);
            if (index < length && eq(array2[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array2, value) {
          return baseSortedIndex(array2, value, true);
        }
        function sortedLastIndexBy(array2, value, iteratee2) {
          return baseSortedIndexBy(array2, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array2, value) {
          var length = array2 == null ? 0 : array2.length;
          if (length) {
            var index = baseSortedIndex(array2, value, true) - 1;
            if (eq(array2[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array2) {
          return array2 && array2.length ? baseSortedUniq(array2) : [];
        }
        function sortedUniqBy(array2, iteratee2) {
          return array2 && array2.length ? baseSortedUniq(array2, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array2) {
          var length = array2 == null ? 0 : array2.length;
          return length ? baseSlice(array2, 1, length) : [];
        }
        function take(array2, n, guard) {
          if (!(array2 && array2.length)) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger2(n);
          return baseSlice(array2, 0, n < 0 ? 0 : n);
        }
        function takeRight(array2, n, guard) {
          var length = array2 == null ? 0 : array2.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger2(n);
          n = length - n;
          return baseSlice(array2, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array2, predicate) {
          return array2 && array2.length ? baseWhile(array2, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
        });
        function uniq(array2) {
          return array2 && array2.length ? baseUniq(array2) : [];
        }
        function uniqBy(array2, iteratee2) {
          return array2 && array2.length ? baseUniq(array2, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array2, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return array2 && array2.length ? baseUniq(array2, undefined$1, comparator) : [];
        }
        function unzip(array2) {
          if (!(array2 && array2.length)) {
            return [];
          }
          var length = 0;
          array2 = arrayFilter(array2, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array2, baseProperty(index));
          });
        }
        function unzipWith(array2, iteratee2) {
          if (!(array2 && array2.length)) {
            return [];
          }
          var result2 = unzip(array2);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined$1, group);
          });
        }
        var without = baseRest(function(array2, values2) {
          return isArrayLikeObject(array2) ? baseDifference(array2, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined$1;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$1;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash2(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined$1
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array2) {
            if (length && !array2.length) {
              array2.push(undefined$1);
            }
            return array2;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined$1) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined$1;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined$1
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map2(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map2(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined$1 ? 1 : toInteger2(depth);
          return baseFlatten(map2(collection, iteratee2), depth);
        }
        function forEach2(collection, iteratee2) {
          var func = isArray(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map2(collection, iteratee2) {
          var func = isArray(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined$1 : orders;
          if (!isArray(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
            n = 1;
          } else {
            n = toInteger2(n);
          }
          var func = isArray(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString2(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag(collection);
          if (tag == mapTag || tag == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger2(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined$1 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger2(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined$1;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined$1;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined$1;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined$1;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined$1) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined$1;
          }
          function flush() {
            return timerId === undefined$1 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined$1) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined$1) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined$1 ? start : toInteger2(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger2(start), 0);
          return baseRest(function(args) {
            var array2 = args[start], otherArgs = castSlice(args, 0, start);
            if (array2) {
              arrayPush(otherArgs, array2);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject2(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce2(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys2(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt2 = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments2 = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments2(value))) {
            return !value.length;
          }
          var tag = getTag(value);
          if (tag == mapTag || tag == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty2.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          var result2 = customizer ? customizer(value, other) : undefined$1;
          return result2 === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger2(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -9007199254740991 && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol2(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined$1;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt2 = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString2(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -Infinity) {
            var sign2 = value < 0 ? -1 : 1;
            return sign2 * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger2(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger2(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol2(value)) {
            return NAN;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger2(value), -9007199254740991, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign2 = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys2(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys2(source), object, customizer);
        });
        var at2 = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined$1;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined$1 || eq(value, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined$1, customDefaultsMerge);
          return apply(mergeWith, undefined$1, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys2(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get2(object, path, defaultValue) {
          var result2 = object == null ? undefined$1 : baseGet(object, path);
          return result2 === undefined$1 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty2.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys2(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined$1;
          }
          while (++index < length) {
            var value = object == null ? undefined$1 : object[toKey(path[index])];
            if (value === undefined$1) {
              index = length;
              value = defaultValue;
            }
            object = isFunction2(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys2);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object)) {
              accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys2(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined$1) {
            upper = lower;
            lower = undefined$1;
          }
          if (upper !== undefined$1) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined$1) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined$1;
          }
          if (floating === undefined$1) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined$1;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined$1;
            }
          }
          if (lower === undefined$1 && upper === undefined$1) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined$1) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string2) {
          return upperFirst(toString(string2).toLowerCase());
        }
        function deburr(string2) {
          string2 = toString(string2);
          return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string2, target, position) {
          string2 = toString(string2);
          target = baseToString(target);
          var length = string2.length;
          position = position === undefined$1 ? length : baseClamp(toInteger2(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string2.slice(position, end) == target;
        }
        function escape(string2) {
          string2 = toString(string2);
          return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
        }
        function escapeRegExp(string2) {
          string2 = toString(string2);
          return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar, "\\$&") : string2;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string2, length, chars) {
          string2 = toString(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          if (!length || strLength >= length) {
            return string2;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string2, length, chars) {
          string2 = toString(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          return length && strLength < length ? string2 + createPadding(length - strLength, chars) : string2;
        }
        function padStart(string2, length, chars) {
          string2 = toString(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string2 : string2;
        }
        function parseInt2(string2, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string2).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string2, n, guard) {
          if (guard ? isIterateeCall(string2, n, guard) : n === undefined$1) {
            n = 1;
          } else {
            n = toInteger2(n);
          }
          return baseRepeat(toString(string2), n);
        }
        function replace() {
          var args = arguments, string2 = toString(args[0]);
          return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string2, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string2, separator, limit)) {
            separator = limit = undefined$1;
          }
          limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string2 = toString(string2);
          if (string2 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string2)) {
              return castSlice(stringToArray(string2), 0, limit);
            }
          }
          return string2.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string2, target, position) {
          string2 = toString(string2);
          position = position == null ? 0 : baseClamp(toInteger2(position), 0, string2.length);
          target = baseToString(target);
          return string2.slice(position, position + target.length) == target;
        }
        function template(string2, options, guard) {
          var settings = lodash2.templateSettings;
          if (guard && isIterateeCall(string2, options, guard)) {
            options = undefined$1;
          }
          string2 = toString(string2);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string2.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string2.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty2.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string2, chars, guard) {
          string2 = toString(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return baseTrim(string2);
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string2, chars, guard) {
          string2 = toString(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return string2.slice(0, trimmedEndIndex(string2) + 1);
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string2, chars, guard) {
          string2 = toString(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return string2.replace(reTrimStart, "");
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string2, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger2(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string2 = toString(string2);
          var strLength = string2.length;
          if (hasUnicode(string2)) {
            var strSymbols = stringToArray(string2);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string2;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string2.slice(0, end);
          if (separator === undefined$1) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string2.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined$1 ? end : newEnd);
            }
          } else if (string2.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape(string2) {
          string2 = toString(string2);
          return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string2, pattern, guard) {
          string2 = toString(string2);
          pattern = guard ? undefined$1 : pattern;
          if (pattern === undefined$1) {
            return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
          }
          return string2.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined$1, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys2(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys2(source));
          }
          var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n) {
          n = toInteger2(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined$1 : baseGet(object, path);
          };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger2(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol2(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array2) {
          return array2 && array2.length ? baseExtremum(array2, identity, baseGt) : undefined$1;
        }
        function maxBy(array2, iteratee2) {
          return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseGt) : undefined$1;
        }
        function mean(array2) {
          return baseMean(array2, identity);
        }
        function meanBy(array2, iteratee2) {
          return baseMean(array2, getIteratee(iteratee2, 2));
        }
        function min(array2) {
          return array2 && array2.length ? baseExtremum(array2, identity, baseLt) : undefined$1;
        }
        function minBy(array2, iteratee2) {
          return array2 && array2.length ? baseExtremum(array2, getIteratee(iteratee2, 2), baseLt) : undefined$1;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array2) {
          return array2 && array2.length ? baseSum(array2, identity) : 0;
        }
        function sumBy(array2, iteratee2) {
          return array2 && array2.length ? baseSum(array2, getIteratee(iteratee2, 2)) : 0;
        }
        lodash2.after = after;
        lodash2.ary = ary;
        lodash2.assign = assign2;
        lodash2.assignIn = assignIn;
        lodash2.assignInWith = assignInWith;
        lodash2.assignWith = assignWith;
        lodash2.at = at2;
        lodash2.before = before;
        lodash2.bind = bind;
        lodash2.bindAll = bindAll;
        lodash2.bindKey = bindKey;
        lodash2.castArray = castArray;
        lodash2.chain = chain;
        lodash2.chunk = chunk;
        lodash2.compact = compact;
        lodash2.concat = concat;
        lodash2.cond = cond;
        lodash2.conforms = conforms;
        lodash2.constant = constant;
        lodash2.countBy = countBy;
        lodash2.create = create;
        lodash2.curry = curry;
        lodash2.curryRight = curryRight;
        lodash2.debounce = debounce2;
        lodash2.defaults = defaults;
        lodash2.defaultsDeep = defaultsDeep;
        lodash2.defer = defer;
        lodash2.delay = delay;
        lodash2.difference = difference;
        lodash2.differenceBy = differenceBy;
        lodash2.differenceWith = differenceWith;
        lodash2.drop = drop;
        lodash2.dropRight = dropRight;
        lodash2.dropRightWhile = dropRightWhile;
        lodash2.dropWhile = dropWhile;
        lodash2.fill = fill;
        lodash2.filter = filter;
        lodash2.flatMap = flatMap;
        lodash2.flatMapDeep = flatMapDeep;
        lodash2.flatMapDepth = flatMapDepth;
        lodash2.flatten = flatten;
        lodash2.flattenDeep = flattenDeep;
        lodash2.flattenDepth = flattenDepth;
        lodash2.flip = flip;
        lodash2.flow = flow;
        lodash2.flowRight = flowRight;
        lodash2.fromPairs = fromPairs;
        lodash2.functions = functions;
        lodash2.functionsIn = functionsIn;
        lodash2.groupBy = groupBy;
        lodash2.initial = initial;
        lodash2.intersection = intersection;
        lodash2.intersectionBy = intersectionBy;
        lodash2.intersectionWith = intersectionWith;
        lodash2.invert = invert;
        lodash2.invertBy = invertBy;
        lodash2.invokeMap = invokeMap;
        lodash2.iteratee = iteratee;
        lodash2.keyBy = keyBy;
        lodash2.keys = keys2;
        lodash2.keysIn = keysIn;
        lodash2.map = map2;
        lodash2.mapKeys = mapKeys;
        lodash2.mapValues = mapValues;
        lodash2.matches = matches;
        lodash2.matchesProperty = matchesProperty;
        lodash2.memoize = memoize;
        lodash2.merge = merge;
        lodash2.mergeWith = mergeWith;
        lodash2.method = method;
        lodash2.methodOf = methodOf;
        lodash2.mixin = mixin;
        lodash2.negate = negate;
        lodash2.nthArg = nthArg;
        lodash2.omit = omit;
        lodash2.omitBy = omitBy;
        lodash2.once = once;
        lodash2.orderBy = orderBy;
        lodash2.over = over;
        lodash2.overArgs = overArgs;
        lodash2.overEvery = overEvery;
        lodash2.overSome = overSome;
        lodash2.partial = partial;
        lodash2.partialRight = partialRight;
        lodash2.partition = partition;
        lodash2.pick = pick;
        lodash2.pickBy = pickBy;
        lodash2.property = property;
        lodash2.propertyOf = propertyOf;
        lodash2.pull = pull;
        lodash2.pullAll = pullAll;
        lodash2.pullAllBy = pullAllBy;
        lodash2.pullAllWith = pullAllWith;
        lodash2.pullAt = pullAt;
        lodash2.range = range;
        lodash2.rangeRight = rangeRight;
        lodash2.rearg = rearg;
        lodash2.reject = reject;
        lodash2.remove = remove;
        lodash2.rest = rest;
        lodash2.reverse = reverse;
        lodash2.sampleSize = sampleSize;
        lodash2.set = set;
        lodash2.setWith = setWith;
        lodash2.shuffle = shuffle;
        lodash2.slice = slice;
        lodash2.sortBy = sortBy;
        lodash2.sortedUniq = sortedUniq;
        lodash2.sortedUniqBy = sortedUniqBy;
        lodash2.split = split;
        lodash2.spread = spread;
        lodash2.tail = tail;
        lodash2.take = take;
        lodash2.takeRight = takeRight;
        lodash2.takeRightWhile = takeRightWhile;
        lodash2.takeWhile = takeWhile;
        lodash2.tap = tap;
        lodash2.throttle = throttle;
        lodash2.thru = thru;
        lodash2.toArray = toArray;
        lodash2.toPairs = toPairs;
        lodash2.toPairsIn = toPairsIn;
        lodash2.toPath = toPath;
        lodash2.toPlainObject = toPlainObject;
        lodash2.transform = transform;
        lodash2.unary = unary;
        lodash2.union = union;
        lodash2.unionBy = unionBy;
        lodash2.unionWith = unionWith;
        lodash2.uniq = uniq;
        lodash2.uniqBy = uniqBy;
        lodash2.uniqWith = uniqWith;
        lodash2.unset = unset;
        lodash2.unzip = unzip;
        lodash2.unzipWith = unzipWith;
        lodash2.update = update;
        lodash2.updateWith = updateWith;
        lodash2.values = values;
        lodash2.valuesIn = valuesIn;
        lodash2.without = without;
        lodash2.words = words;
        lodash2.wrap = wrap;
        lodash2.xor = xor;
        lodash2.xorBy = xorBy;
        lodash2.xorWith = xorWith;
        lodash2.zip = zip;
        lodash2.zipObject = zipObject;
        lodash2.zipObjectDeep = zipObjectDeep;
        lodash2.zipWith = zipWith;
        lodash2.entries = toPairs;
        lodash2.entriesIn = toPairsIn;
        lodash2.extend = assignIn;
        lodash2.extendWith = assignInWith;
        mixin(lodash2, lodash2);
        lodash2.add = add;
        lodash2.attempt = attempt;
        lodash2.camelCase = camelCase;
        lodash2.capitalize = capitalize;
        lodash2.ceil = ceil;
        lodash2.clamp = clamp;
        lodash2.clone = clone;
        lodash2.cloneDeep = cloneDeep;
        lodash2.cloneDeepWith = cloneDeepWith;
        lodash2.cloneWith = cloneWith;
        lodash2.conformsTo = conformsTo;
        lodash2.deburr = deburr;
        lodash2.defaultTo = defaultTo;
        lodash2.divide = divide;
        lodash2.endsWith = endsWith;
        lodash2.eq = eq;
        lodash2.escape = escape;
        lodash2.escapeRegExp = escapeRegExp;
        lodash2.every = every;
        lodash2.find = find;
        lodash2.findIndex = findIndex;
        lodash2.findKey = findKey;
        lodash2.findLast = findLast;
        lodash2.findLastIndex = findLastIndex;
        lodash2.findLastKey = findLastKey;
        lodash2.floor = floor;
        lodash2.forEach = forEach2;
        lodash2.forEachRight = forEachRight;
        lodash2.forIn = forIn;
        lodash2.forInRight = forInRight;
        lodash2.forOwn = forOwn;
        lodash2.forOwnRight = forOwnRight;
        lodash2.get = get2;
        lodash2.gt = gt2;
        lodash2.gte = gte;
        lodash2.has = has;
        lodash2.hasIn = hasIn;
        lodash2.head = head;
        lodash2.identity = identity;
        lodash2.includes = includes;
        lodash2.indexOf = indexOf;
        lodash2.inRange = inRange;
        lodash2.invoke = invoke;
        lodash2.isArguments = isArguments2;
        lodash2.isArray = isArray;
        lodash2.isArrayBuffer = isArrayBuffer;
        lodash2.isArrayLike = isArrayLike;
        lodash2.isArrayLikeObject = isArrayLikeObject;
        lodash2.isBoolean = isBoolean;
        lodash2.isBuffer = isBuffer;
        lodash2.isDate = isDate;
        lodash2.isElement = isElement;
        lodash2.isEmpty = isEmpty;
        lodash2.isEqual = isEqual;
        lodash2.isEqualWith = isEqualWith;
        lodash2.isError = isError;
        lodash2.isFinite = isFinite2;
        lodash2.isFunction = isFunction2;
        lodash2.isInteger = isInteger;
        lodash2.isLength = isLength;
        lodash2.isMap = isMap;
        lodash2.isMatch = isMatch;
        lodash2.isMatchWith = isMatchWith;
        lodash2.isNaN = isNaN2;
        lodash2.isNative = isNative;
        lodash2.isNil = isNil;
        lodash2.isNull = isNull;
        lodash2.isNumber = isNumber;
        lodash2.isObject = isObject2;
        lodash2.isObjectLike = isObjectLike;
        lodash2.isPlainObject = isPlainObject;
        lodash2.isRegExp = isRegExp;
        lodash2.isSafeInteger = isSafeInteger;
        lodash2.isSet = isSet;
        lodash2.isString = isString2;
        lodash2.isSymbol = isSymbol2;
        lodash2.isTypedArray = isTypedArray;
        lodash2.isUndefined = isUndefined;
        lodash2.isWeakMap = isWeakMap;
        lodash2.isWeakSet = isWeakSet;
        lodash2.join = join;
        lodash2.kebabCase = kebabCase;
        lodash2.last = last;
        lodash2.lastIndexOf = lastIndexOf;
        lodash2.lowerCase = lowerCase;
        lodash2.lowerFirst = lowerFirst;
        lodash2.lt = lt2;
        lodash2.lte = lte;
        lodash2.max = max;
        lodash2.maxBy = maxBy;
        lodash2.mean = mean;
        lodash2.meanBy = meanBy;
        lodash2.min = min;
        lodash2.minBy = minBy;
        lodash2.stubArray = stubArray;
        lodash2.stubFalse = stubFalse;
        lodash2.stubObject = stubObject;
        lodash2.stubString = stubString;
        lodash2.stubTrue = stubTrue;
        lodash2.multiply = multiply;
        lodash2.nth = nth;
        lodash2.noConflict = noConflict;
        lodash2.noop = noop2;
        lodash2.now = now;
        lodash2.pad = pad;
        lodash2.padEnd = padEnd;
        lodash2.padStart = padStart;
        lodash2.parseInt = parseInt2;
        lodash2.random = random;
        lodash2.reduce = reduce;
        lodash2.reduceRight = reduceRight;
        lodash2.repeat = repeat;
        lodash2.replace = replace;
        lodash2.result = result;
        lodash2.round = round;
        lodash2.runInContext = runInContext2;
        lodash2.sample = sample;
        lodash2.size = size;
        lodash2.snakeCase = snakeCase;
        lodash2.some = some;
        lodash2.sortedIndex = sortedIndex;
        lodash2.sortedIndexBy = sortedIndexBy;
        lodash2.sortedIndexOf = sortedIndexOf;
        lodash2.sortedLastIndex = sortedLastIndex;
        lodash2.sortedLastIndexBy = sortedLastIndexBy;
        lodash2.sortedLastIndexOf = sortedLastIndexOf;
        lodash2.startCase = startCase;
        lodash2.startsWith = startsWith;
        lodash2.subtract = subtract;
        lodash2.sum = sum;
        lodash2.sumBy = sumBy;
        lodash2.template = template;
        lodash2.times = times;
        lodash2.toFinite = toFinite;
        lodash2.toInteger = toInteger2;
        lodash2.toLength = toLength;
        lodash2.toLower = toLower;
        lodash2.toNumber = toNumber;
        lodash2.toSafeInteger = toSafeInteger;
        lodash2.toString = toString;
        lodash2.toUpper = toUpper;
        lodash2.trim = trim;
        lodash2.trimEnd = trimEnd;
        lodash2.trimStart = trimStart;
        lodash2.truncate = truncate;
        lodash2.unescape = unescape;
        lodash2.uniqueId = uniqueId;
        lodash2.upperCase = upperCase;
        lodash2.upperFirst = upperFirst;
        lodash2.each = forEach2;
        lodash2.eachRight = forEachRight;
        lodash2.first = head;
        mixin(lodash2, function() {
          var source = {};
          baseForOwn(lodash2, function(func, methodName) {
            if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash2.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash2[methodName].placeholder = lodash2;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined$1 ? 1 : nativeMax(toInteger2(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger2(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined$1) {
            end = toInteger2(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash2.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash2, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$1 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash2.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash2[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty2.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined$1
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash2.prototype.at = wrapperAt;
        lodash2.prototype.chain = wrapperChain;
        lodash2.prototype.commit = wrapperCommit;
        lodash2.prototype.next = wrapperNext;
        lodash2.prototype.plant = wrapperPlant;
        lodash2.prototype.reverse = wrapperReverse;
        lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
        lodash2.prototype.first = lodash2.prototype.head;
        if (symIterator) {
          lodash2.prototype[symIterator] = wrapperToIterator;
        }
        return lodash2;
      };
      var _2 = runInContext();
      if (freeModule) {
        (freeModule.exports = _2)._ = _2;
        freeExports._ = _2;
      } else {
        root._ = _2;
      }
    }).call(lodash);
  })(lodash$1, lodash$1.exports);
  return lodash$1.exports;
}
requireLodash();
function getStyles(element) {
  const computed = getComputedStyle(element);
  const inline = getInlineStyles(element);
  const stylesheet = getStylesheetStyles(element);
  const defined = {
    width: "auto",
    height: "auto",
    ...inline,
    ...stylesheet
  };
  return {
    defined,
    computed
  };
}
function getComputedStyleByDomId(domId) {
  const element = elementFromDomId(domId);
  if (!element) {
    return {};
  }
  return getComputedStyle(element);
}
function getComputedStyle(element) {
  const computedStyle = jsonClone(window.getComputedStyle(element));
  return computedStyle;
}
function getInlineStyles(element) {
  const styles = {};
  const inlineStyles = parseCssText(element.style.cssText);
  Object.entries(inlineStyles).forEach(([prop, value]) => {
    styles[prop] = value;
  });
  return styles;
}
function getStylesheetStyles(element) {
  const styles = {};
  const sheets = document.styleSheets;
  for (let i2 = 0; i2 < sheets.length; i2++) {
    let rules;
    try {
      rules = Array.from(sheets[i2].cssRules) || sheets[i2].rules;
    } catch (e) {
      console.warn("Can't read the css rules of: " + sheets[i2].href, e);
      continue;
    }
    for (let j = 0; j < rules.length; j++) {
      try {
        if (element.matches(rules[j].selectorText)) {
          const ruleStyles = parseCssText(rules[j].style.cssText);
          Object.entries(ruleStyles).forEach(([prop, value]) => styles[prop] = value);
        }
      } catch (e) {
        console.warn("Error", e);
      }
    }
  }
  return styles;
}
function parseCssText(cssText) {
  const styles = {};
  cssText.split(";").forEach((style) => {
    style = style.trim();
    if (!style) {
      return;
    }
    const [property, ...values] = style.split(":");
    styles[property.trim()] = values.join(":").trim();
  });
  return styles;
}
const getDeepElement$1 = (x2, y2) => {
  const el = document.elementFromPoint(x2, y2);
  if (!el) {
    return;
  }
  const crawlShadows = (node) => {
    if (node == null ? void 0 : node.shadowRoot) {
      const potential = node.shadowRoot.elementFromPoint(x2, y2);
      if (potential == node) {
        return node;
      } else if (potential == null ? void 0 : potential.shadowRoot) {
        return crawlShadows(potential);
      } else {
        return potential || node;
      }
    } else {
      return node;
    }
  };
  const nested_shadow = crawlShadows(el);
  return nested_shadow || el;
};
const getDomElement = (el, getStyle) => {
  const parent = el.parentElement;
  const parentDomElement = parent ? {
    domId: parent.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID),
    webviewId: getWebviewId(),
    oid: parent.getAttribute(EditorAttributes.DATA_ONLOOK_ID),
    instanceId: parent.getAttribute(EditorAttributes.DATA_ONLOOK_INSTANCE_ID),
    rect: parent.getBoundingClientRect()
  } : null;
  const rect = el.getBoundingClientRect();
  const styles = getStyle ? getStyles(el) : null;
  const domElement = {
    domId: el.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID),
    oid: el.getAttribute(EditorAttributes.DATA_ONLOOK_ID),
    webviewId: getWebviewId(),
    instanceId: el.getAttribute(EditorAttributes.DATA_ONLOOK_INSTANCE_ID),
    rect,
    tagName: el.tagName,
    parent: parentDomElement,
    styles
  };
  return jsonClone(domElement);
};
function restoreElementStyle(el) {
  try {
    const saved = el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);
    if (saved) {
      const style = JSON.parse(saved);
      for (const key in style) {
        el.style[key] = style[key];
      }
    }
  } catch (e) {
    console.warn("Error restoring style", e);
  }
}
function getElementLocation(targetEl) {
  var _a2, _b;
  const parent = targetEl.parentElement;
  if (!parent) {
    return;
  }
  const location = {
    type: "index",
    targetDomId: parent.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID),
    targetOid: getInstanceId(parent) || getOid(parent) || null,
    index: Array.from(((_a2 = targetEl.parentElement) == null ? void 0 : _a2.children) || []).indexOf(targetEl),
    originalIndex: Array.from(((_b = targetEl.parentElement) == null ? void 0 : _b.children) || []).indexOf(targetEl)
  };
  return location;
}
const getImmediateTextContent = (el) => {
  const stringArr = Array.from(el.childNodes).filter((node) => node.nodeType === Node.TEXT_NODE).map((node) => node.textContent);
  if (stringArr.length === 0) {
    return;
  }
  return stringArr.join("");
};
const getDomElementByDomId = (domId, style) => {
  const el = elementFromDomId(domId) || document.body;
  return getDomElement(el, style);
};
const getElementAtLoc = (x2, y2, getStyle) => {
  const el = getDeepElement(x2, y2) || document.body;
  return getDomElement(el, getStyle);
};
const getDeepElement = (x2, y2) => {
  const el = document.elementFromPoint(x2, y2);
  if (!el) {
    return;
  }
  const crawlShadows = (node) => {
    if (node == null ? void 0 : node.shadowRoot) {
      const potential = node.shadowRoot.elementFromPoint(x2, y2);
      if (potential == node) {
        return node;
      } else if (potential == null ? void 0 : potential.shadowRoot) {
        return crawlShadows(potential);
      } else {
        return potential || node;
      }
    } else {
      return node;
    }
  };
  const nested_shadow = crawlShadows(el);
  return nested_shadow || el;
};
const updateElementInstance = (domId, instanceId, component) => {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn("Failed to updateElementInstanceId: Element not found");
    return;
  }
  el.setAttribute(EditorAttributes.DATA_ONLOOK_INSTANCE_ID, instanceId);
  el.setAttribute(EditorAttributes.DATA_ONLOOK_COMPONENT_NAME, component);
};
const getParentElement = (domId) => {
  const el = elementFromDomId(domId);
  if (!(el == null ? void 0 : el.parentElement)) {
    return null;
  }
  return getDomElement(el.parentElement, false);
};
const getChildrenCount = (domId) => {
  const el = elementFromDomId(domId);
  if (!el) {
    return 0;
  }
  return el.children.length;
};
const getOffsetParent = (domId) => {
  const el = elementFromDomId(domId);
  if (!el) {
    return null;
  }
  return getDomElement(el.offsetParent, false);
};
function getActionElementByDomId(domId) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn("Element not found for domId:", domId);
    return null;
  }
  return getActionElement(el);
}
function getActionElement(el) {
  const attributes = Array.from(el.attributes).reduce(
    (acc, attr) => {
      acc[attr.name] = attr.value;
      return acc;
    },
    {}
  );
  const oid = getInstanceId(el) || getOid(el) || null;
  if (!oid) {
    console.warn("Element has no oid");
    return null;
  }
  return {
    oid,
    domId: getOrAssignDomId(el),
    tagName: el.tagName.toLowerCase(),
    children: Array.from(el.children).map((child) => getActionElement(child)).filter(Boolean),
    attributes,
    textContent: getImmediateTextContent(el) || null,
    styles: {}
  };
}
function getActionLocation(domId) {
  const el = elementFromDomId(domId);
  if (!el) {
    throw new Error("Element not found for domId: " + domId);
  }
  const parent = el.parentElement;
  if (!parent) {
    throw new Error("Inserted element has no parent");
  }
  const targetOid = getInstanceId(parent) || getOid(parent);
  if (!targetOid) {
    console.warn("Parent element has no oid");
    return null;
  }
  const targetDomId = getOrAssignDomId(parent);
  const index = Array.from(parent.children).indexOf(el);
  if (index === -1) {
    return {
      type: "append",
      targetDomId,
      targetOid
    };
  }
  return {
    type: "index",
    targetDomId,
    targetOid,
    index,
    originalIndex: index
  };
}
function getElementType(domId) {
  const el = document.querySelector(
    `[${EditorAttributes.DATA_ONLOOK_DOM_ID}="${domId}"]`
  );
  if (!el) {
    console.warn("No element found", { domId });
    return { dynamicType: null, coreType: null };
  }
  const dynamicType = el.getAttribute(EditorAttributes.DATA_ONLOOK_DYNAMIC_TYPE) || null;
  const coreType = el.getAttribute(EditorAttributes.DATA_ONLOOK_CORE_ELEMENT_TYPE) || null;
  return { dynamicType, coreType };
}
function setElementType(domId, dynamicType, coreElementType) {
  const el = document.querySelector(`[${EditorAttributes.DATA_ONLOOK_DOM_ID}="${domId}"]`);
  if (el) {
    if (dynamicType) {
      el.setAttribute(EditorAttributes.DATA_ONLOOK_DYNAMIC_TYPE, dynamicType);
    }
    if (coreElementType) {
      el.setAttribute(EditorAttributes.DATA_ONLOOK_CORE_ELEMENT_TYPE, coreElementType);
    }
  }
}
function getFirstOnlookElement() {
  const body = document.body;
  const firstElement = body.querySelector(`[${EditorAttributes.DATA_ONLOOK_ID}]`);
  if (firstElement) {
    return getDomElement(firstElement, true);
  }
  return null;
}
const _CSSManager = class _CSSManager {
  constructor() {
  }
  injectDefaultStyles() {
    try {
      const styleElement = document.createElement("style");
      styleElement.id = EditorAttributes.ONLOOK_DEFAULT_STYLESHEET_ID;
      styleElement.textContent = `
            [${EditorAttributes.DATA_ONLOOK_EDITING_TEXT}="true"] {
                opacity: 0;
            }
        `;
      document.head.appendChild(styleElement);
    } catch (error) {
      console.warn("Error injecting default styles", error);
    }
  }
  static getInstance() {
    if (!_CSSManager.instance) {
      _CSSManager.instance = new _CSSManager();
    }
    return _CSSManager.instance;
  }
  get stylesheet() {
    const styleElement = document.getElementById(
      EditorAttributes.ONLOOK_STYLESHEET_ID
    ) || this.createStylesheet();
    styleElement.textContent = styleElement.textContent || "";
    return cssTree.parse(styleElement.textContent);
  }
  set stylesheet(ast) {
    const styleElement = document.getElementById(
      EditorAttributes.ONLOOK_STYLESHEET_ID
    ) || this.createStylesheet();
    styleElement.textContent = cssTree.generate(ast);
  }
  createStylesheet() {
    const styleElement = document.createElement("style");
    styleElement.id = EditorAttributes.ONLOOK_STYLESHEET_ID;
    document.head.appendChild(styleElement);
    return styleElement;
  }
  clear() {
    this.stylesheet = cssTree.parse("");
  }
  find(ast, selectorToFind) {
    const matchingNodes = [];
    cssTree.walk(ast, {
      visit: "Rule",
      enter: (node) => {
        if (node.type === "Rule") {
          const rule = node;
          if (rule.prelude.type === "SelectorList") {
            rule.prelude.children.forEach((selector) => {
              const selectorText = cssTree.generate(selector);
              if (selectorText === selectorToFind) {
                matchingNodes.push(node);
              }
            });
          }
        }
      }
    });
    return matchingNodes;
  }
  updateStyle(domId, style) {
    const selector = selectorFromDomId(domId, false);
    const ast = this.stylesheet;
    for (const [property, value] of Object.entries(style)) {
      const cssProperty = this.jsToCssProperty(property);
      const matchingNodes = this.find(ast, selector);
      if (!matchingNodes.length) {
        this.addRule(ast, selector, cssProperty, value.value);
      } else {
        matchingNodes.forEach((node) => {
          if (node.type === "Rule") {
            this.updateRule(node, cssProperty, value.value);
          }
        });
      }
    }
    this.stylesheet = ast;
  }
  addRule(ast, selector, property, value) {
    const newRule = {
      type: "Rule",
      prelude: {
        type: "SelectorList",
        children: [
          {
            type: "Selector",
            children: [
              {
                type: "TypeSelector",
                name: selector
              }
            ]
          }
        ]
      },
      block: {
        type: "Block",
        children: [
          {
            type: "Declaration",
            property,
            value: { type: "Raw", value }
          }
        ]
      }
    };
    if (ast.type === "StyleSheet") {
      ast.children.push(newRule);
    }
  }
  updateRule(rule, property, value) {
    let found = false;
    cssTree.walk(rule.block, {
      visit: "Declaration",
      enter: (decl) => {
        if (decl.property === property) {
          decl.value = { type: "Raw", value };
          if (value === "") {
            rule.block.children = rule.block.children.filter(
              (decl2) => decl2.property !== property
            );
          }
          found = true;
        }
      }
    });
    if (!found) {
      if (value === "") {
        rule.block.children = rule.block.children.filter(
          (decl) => decl.property !== property
        );
      } else {
        rule.block.children.push({
          type: "Declaration",
          property,
          value: { type: "Raw", value },
          important: false
        });
      }
    }
  }
  getJsStyle(selector) {
    const ast = this.stylesheet;
    const matchingNodes = this.find(ast, selector);
    const styles = {};
    if (!matchingNodes.length) {
      return styles;
    }
    matchingNodes.forEach((node) => {
      if (node.type === "Rule") {
        cssTree.walk(node, {
          visit: "Declaration",
          enter: (decl) => {
            styles[this.cssToJsProperty(decl.property)] = decl.value.value;
          }
        });
      }
    });
    return styles;
  }
  jsToCssProperty(key) {
    if (!key) {
      return "";
    }
    return key.replace(/([A-Z])/g, "-$1").toLowerCase();
  }
  cssToJsProperty(key) {
    if (!key) {
      return "";
    }
    return key.replace(/-([a-z])/g, (g2) => g2[1].toUpperCase());
  }
  removeStyles(domId, jsStyles) {
    const selector = selectorFromDomId(domId, false);
    const ast = this.stylesheet;
    const matchingNodes = this.find(ast, selector);
    matchingNodes.forEach((node) => {
      if (node.type === "Rule") {
        const cssProperties = jsStyles.map((style) => this.jsToCssProperty(style));
        node.block.children = node.block.children.filter(
          (decl) => !cssProperties.includes(decl.property)
        );
      }
    });
    this.stylesheet = ast;
  }
};
__publicField(_CSSManager, "instance");
let CSSManager = _CSSManager;
const cssManager = CSSManager.getInstance();
function findClosestIndex(container, y2) {
  const children = Array.from(container.children);
  if (children.length === 0) {
    return 0;
  }
  let closestIndex = 0;
  let minDistance = Infinity;
  children.forEach((child, index) => {
    const rect = child.getBoundingClientRect();
    const childMiddle = rect.top + rect.height / 2;
    const distance = Math.abs(y2 - childMiddle);
    if (distance < minDistance) {
      minDistance = distance;
      closestIndex = index;
    }
  });
  const closestRect = children[closestIndex].getBoundingClientRect();
  const closestMiddle = closestRect.top + closestRect.height / 2;
  return y2 > closestMiddle ? closestIndex + 1 : closestIndex;
}
function getInsertLocation(x2, y2) {
  const targetEl = findNearestBlockLevelContainer(x2, y2);
  if (!targetEl) {
    return;
  }
  const display = window.getComputedStyle(targetEl).display;
  const isStackOrGrid = display === "flex" || display === "grid";
  if (isStackOrGrid) {
    const index = findClosestIndex(targetEl, y2);
    return {
      type: "index",
      targetDomId: getOrAssignDomId(targetEl),
      targetOid: getInstanceId(targetEl) || getOid(targetEl) || null,
      index,
      originalIndex: index
    };
  }
  return {
    type: "append",
    targetDomId: getOrAssignDomId(targetEl),
    targetOid: getInstanceId(targetEl) || getOid(targetEl) || null
  };
}
function findNearestBlockLevelContainer(x2, y2) {
  let targetEl = getDeepElement$1(x2, y2);
  if (!targetEl) {
    return null;
  }
  let inlineOnly = true;
  while (targetEl && inlineOnly) {
    inlineOnly = INLINE_ONLY_CONTAINERS.has(targetEl.tagName.toLowerCase());
    if (inlineOnly) {
      targetEl = targetEl.parentElement;
    }
  }
  return targetEl;
}
function insertElement(element, location) {
  const targetEl = elementFromDomId(location.targetDomId);
  if (!targetEl) {
    console.warn(`Target element not found: ${location.targetDomId}`);
    return;
  }
  const newEl = createElement(element);
  switch (location.type) {
    case "append":
      targetEl.appendChild(newEl);
      break;
    case "prepend":
      targetEl.prepend(newEl);
      break;
    case "index":
      if (location.index === void 0 || location.index < 0) {
        console.warn(`Invalid index: ${location.index}`);
        return;
      }
      if (location.index >= targetEl.children.length) {
        targetEl.appendChild(newEl);
      } else {
        targetEl.insertBefore(newEl, targetEl.children.item(location.index));
      }
      break;
    default:
      console.warn(`Invalid position: ${location}`);
      assertNever(location);
  }
  const domEl = getDomElement(newEl, true);
  return domEl;
}
function createElement(element) {
  const newEl = document.createElement(element.tagName);
  newEl.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, "true");
  for (const [key, value] of Object.entries(element.attributes)) {
    newEl.setAttribute(key, value);
  }
  if (element.textContent !== null && element.textContent !== void 0) {
    newEl.textContent = element.textContent;
  }
  for (const [key, value] of Object.entries(element.styles)) {
    newEl.style.setProperty(cssManager.jsToCssProperty(key), value);
  }
  for (const child of element.children) {
    const childEl = createElement(child);
    newEl.appendChild(childEl);
  }
  return newEl;
}
function removeElement(location) {
  const targetEl = elementFromDomId(location.targetDomId);
  if (!targetEl) {
    console.warn(`Target element not found: ${location.targetDomId}`);
    return null;
  }
  let elementToRemove = null;
  switch (location.type) {
    case "append":
      elementToRemove = targetEl.lastElementChild;
      break;
    case "prepend":
      elementToRemove = targetEl.firstElementChild;
      break;
    case "index":
      if (location.index !== -1) {
        elementToRemove = targetEl.children.item(location.index);
      } else {
        console.warn(`Invalid index: ${location.index}`);
        return null;
      }
      break;
    default:
      console.warn(`Invalid position: ${location}`);
      assertNever(location);
  }
  if (elementToRemove) {
    const domEl = getDomElement(elementToRemove, true);
    elementToRemove.style.display = "none";
    return domEl;
  } else {
    console.warn(`No element found to remove at the specified location`);
    return null;
  }
}
function getRemoveActionFromDomId(domId, webviewId) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn("Element not found for domId:", domId);
    return;
  }
  const location = getElementLocation(el);
  if (!location) {
    console.warn("Failed to get location for element:", el);
    return;
  }
  const actionEl = getActionElement(el);
  if (!actionEl) {
    console.warn("Failed to get action element for element:", el);
    return;
  }
  return {
    type: "remove-element",
    targets: [
      {
        webviewId,
        domId: actionEl.domId,
        oid: actionEl.oid
      }
    ],
    location,
    element: actionEl,
    editText: false,
    pasteParams: null,
    codeBlock: null
  };
}
function moveElement(domId, newIndex) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn(`Move element not found: ${domId}`);
    return;
  }
  const movedEl = moveElToIndex(el, newIndex);
  if (!movedEl) {
    console.warn(`Failed to move element: ${domId}`);
    return;
  }
  const domEl = getDomElement(movedEl, true);
  return domEl;
}
function getElementIndex(domId) {
  var _a2;
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn(`Element not found: ${domId}`);
    return -1;
  }
  const htmlElments = Array.from(((_a2 = el.parentElement) == null ? void 0 : _a2.children) || []).filter(isValidHtmlElement);
  const index = htmlElments.indexOf(el);
  return index;
}
function moveElToIndex(el, newIndex) {
  const parent = el.parentElement;
  if (!parent) {
    console.warn("Parent not found");
    return;
  }
  parent.removeChild(el);
  if (newIndex >= parent.children.length) {
    parent.appendChild(el);
    return el;
  }
  const referenceNode = parent.children[newIndex];
  parent.insertBefore(el, referenceNode);
  return el;
}
function getDisplayDirection(element) {
  if (!element || !element.children || element.children.length < 2) {
    return "vertical";
  }
  const children = Array.from(element.children);
  const firstChild = children[0];
  const secondChild = children[1];
  const firstRect = firstChild.getBoundingClientRect();
  const secondRect = secondChild.getBoundingClientRect();
  if (Math.abs(firstRect.left - secondRect.left) < Math.abs(firstRect.top - secondRect.top)) {
    return "vertical";
  } else {
    return "horizontal";
  }
}
function findInsertionIndex(elements, x2, y2, displayDirection) {
  const midPoints = elements.map((el) => {
    const rect = el.getBoundingClientRect();
    return {
      x: rect.left + rect.width / 2,
      y: rect.top + rect.height / 2
    };
  });
  for (let i2 = 0; i2 < midPoints.length; i2++) {
    if (displayDirection === "vertical") {
      if (y2 < midPoints[i2].y) {
        return i2;
      }
    } else {
      if (x2 < midPoints[i2].x) {
        return i2;
      }
    }
  }
  return elements.length;
}
function findGridInsertionIndex(parent, siblings, x2, y2) {
  const parentRect = parent.getBoundingClientRect();
  const gridComputedStyle = window.getComputedStyle(parent);
  const columns = gridComputedStyle.gridTemplateColumns.split(" ").length;
  const rows = gridComputedStyle.gridTemplateRows.split(" ").length;
  const cellWidth = parentRect.width / columns;
  const cellHeight = parentRect.height / rows;
  const gridX = Math.floor((x2 - parentRect.left) / cellWidth);
  const gridY = Math.floor((y2 - parentRect.top) / cellHeight);
  const targetIndex = gridY * columns + gridX;
  return Math.min(Math.max(targetIndex, 0), siblings.length);
}
function createStub(el) {
  const stub = document.createElement("div");
  const styles = window.getComputedStyle(el);
  stub.id = EditorAttributes.ONLOOK_STUB_ID;
  stub.style.width = styles.width;
  stub.style.height = styles.height;
  stub.style.margin = styles.margin;
  stub.style.padding = styles.padding;
  stub.style.borderRadius = styles.borderRadius;
  stub.style.backgroundColor = "rgba(0, 0, 0, 0.2)";
  stub.style.display = "none";
  document.body.appendChild(stub);
}
function moveStub(el, x2, y2) {
  const stub = document.getElementById(EditorAttributes.ONLOOK_STUB_ID);
  if (!stub) {
    return;
  }
  const parent = el.parentElement;
  if (!parent) {
    return;
  }
  let displayDirection = el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION);
  if (!displayDirection) {
    displayDirection = getDisplayDirection(parent);
  }
  const parentStyle = window.getComputedStyle(parent);
  const isGridLayout = parentStyle.display === "grid";
  const siblings = Array.from(parent.children).filter((child) => child !== el && child !== stub);
  let insertionIndex;
  if (isGridLayout) {
    insertionIndex = findGridInsertionIndex(parent, siblings, x2, y2);
  } else {
    insertionIndex = findInsertionIndex(
      siblings,
      x2,
      y2,
      displayDirection
    );
  }
  stub.remove();
  if (insertionIndex >= siblings.length) {
    parent.appendChild(stub);
  } else {
    parent.insertBefore(stub, siblings[insertionIndex]);
  }
  stub.style.display = "block";
}
function removeStub() {
  const stub = document.getElementById(EditorAttributes.ONLOOK_STUB_ID);
  if (!stub) {
    return;
  }
  stub.remove();
}
function getCurrentStubIndex(parent, el) {
  const stub = document.getElementById(EditorAttributes.ONLOOK_STUB_ID);
  if (!stub) {
    return -1;
  }
  const siblings = Array.from(parent.children).filter((child) => child !== el);
  return siblings.indexOf(stub);
}
function startDrag(domId) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn(`Start drag element not found: ${domId}`);
    return null;
  }
  const parent = el.parentElement;
  if (!parent) {
    console.warn("Start drag parent not found");
    return null;
  }
  const htmlChildren = Array.from(parent.children).filter(isValidHtmlElement);
  const originalIndex = htmlChildren.indexOf(el);
  prepareElementForDragging(el);
  createStub(el);
  const pos = getAbsolutePosition(el);
  el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION, JSON.stringify(pos));
  return originalIndex;
}
function drag(domId, dx, dy, x2, y2) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn("Dragging element not found");
    return;
  }
  const styles = window.getComputedStyle(el);
  const pos = JSON.parse(
    el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION) || "{}"
  );
  const left = pos.left + dx - window.scrollX;
  const top = pos.top + dy - window.scrollY;
  el.style.left = `${left}px`;
  el.style.top = `${top}px`;
  el.style.width = styles.width + 1;
  el.style.height = styles.height + 1;
  el.style.position = "fixed";
  moveStub(el, x2, y2);
}
function endDrag(domId) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn("End drag element not found");
    endAllDrag();
    return null;
  }
  const parent = el.parentElement;
  if (!parent) {
    console.warn("End drag parent not found");
    cleanUpElementAfterDragging(el);
    return null;
  }
  const stubIndex = getCurrentStubIndex(parent, el);
  cleanUpElementAfterDragging(el);
  removeStub();
  if (stubIndex === -1) {
    return null;
  }
  const elementIndex = Array.from(parent.children).indexOf(el);
  if (stubIndex === elementIndex) {
    return null;
  }
  return {
    newIndex: stubIndex,
    child: getDomElement(el, false),
    parent: getDomElement(parent, false)
  };
}
function prepareElementForDragging(el) {
  const saved = el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);
  if (saved) {
    return;
  }
  const style = {
    position: el.style.position,
    transform: el.style.transform,
    width: el.style.width,
    height: el.style.height,
    left: el.style.left,
    top: el.style.top
  };
  el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE, JSON.stringify(style));
  el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING, "true");
  if (el.getAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION) !== null) {
    const parent = el.parentElement;
    if (parent) {
      const displayDirection = getDisplayDirection(parent);
      el.setAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION, displayDirection);
    }
  }
}
function cleanUpElementAfterDragging(el) {
  restoreElementStyle(el);
  removeDragAttributes(el);
  getOrAssignDomId(el);
}
function removeDragAttributes(el) {
  el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE);
  el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAGGING);
  el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_DIRECTION);
  el.removeAttribute(EditorAttributes.DATA_ONLOOK_DRAG_START_POSITION);
}
function getAbsolutePosition(element) {
  const rect = element.getBoundingClientRect();
  return {
    left: rect.left + window.scrollX,
    top: rect.top + window.scrollY
  };
}
function endAllDrag() {
  const draggingElements = document.querySelectorAll(
    `[${EditorAttributes.DATA_ONLOOK_DRAGGING}]`
  );
  for (const el of draggingElements) {
    cleanUpElementAfterDragging(el);
  }
  removeStub();
}
function publishStyleUpdate(domId) {
  const domEl = getDomElementByDomId(domId, true);
  if (!domEl) {
    console.warn("No domEl found for style update event");
    return;
  }
  electron.ipcRenderer.sendToHost(WebviewChannels.STYLE_UPDATED, { domEl });
}
function publishInsertElement(location, domEl, editText2) {
  const parent = elementFromDomId(location.targetDomId);
  const layerMap = parent ? buildLayerTree(parent) : null;
  if (!domEl || !layerMap) {
    console.warn("No domEl or layerMap found for insert element event");
    return;
  }
  electron.ipcRenderer.sendToHost(WebviewChannels.ELEMENT_INSERTED, { domEl, layerMap, editText: editText2 });
}
function publishRemoveElement(location) {
  const parent = elementFromDomId(location.targetDomId);
  const layerMap = parent ? buildLayerTree(parent) : null;
  const parentDomEl = parent ? getDomElement(parent, true) : null;
  if (!parentDomEl || !layerMap) {
    console.warn("No parentDomEl or layerMap found for remove element event");
    return;
  }
  electron.ipcRenderer.sendToHost(WebviewChannels.ELEMENT_REMOVED, { parentDomEl, layerMap });
}
function publishMoveElement(domEl) {
  var _a2;
  const parent = (_a2 = elementFromDomId(domEl.domId)) == null ? void 0 : _a2.parentElement;
  const layerMap = parent ? buildLayerTree(parent) : null;
  if (!domEl || !layerMap) {
    console.warn("No domEl or layerMap found for move element event");
    return;
  }
  electron.ipcRenderer.sendToHost(WebviewChannels.ELEMENT_MOVED, { domEl, layerMap });
}
function publishGroupElement(domEl) {
  var _a2;
  const parent = (_a2 = elementFromDomId(domEl.domId)) == null ? void 0 : _a2.parentElement;
  const layerMap = parent ? buildLayerTree(parent) : null;
  if (!domEl || !layerMap) {
    console.warn("No domEl or layerMap found for group element event");
    return;
  }
  electron.ipcRenderer.sendToHost(WebviewChannels.ELEMENT_GROUPED, { domEl, layerMap });
}
function publishUngroupElement(parentEl) {
  var _a2;
  const parent = (_a2 = elementFromDomId(parentEl.domId)) == null ? void 0 : _a2.parentElement;
  const layerMap = parent ? buildLayerTree(parent) : null;
  if (!parentEl || !layerMap) {
    console.warn("No parentEl or layerMap found for ungroup element event");
    return;
  }
  electron.ipcRenderer.sendToHost(WebviewChannels.ELEMENT_UNGROUPED, { parentEl, layerMap });
}
function publishEditText(domEl) {
  var _a2;
  const parent = (_a2 = elementFromDomId(domEl.domId)) == null ? void 0 : _a2.parentElement;
  const layerMap = parent ? buildLayerTree(parent) : null;
  if (!domEl || !layerMap) {
    console.warn("No domEl or layerMap found for edit text event");
    return;
  }
  electron.ipcRenderer.sendToHost(WebviewChannels.ELEMENT_TEXT_EDITED, { domEl, layerMap });
}
function editTextByDomId(domId, content) {
  const el = elementFromDomId(domId);
  if (!el) {
    return null;
  }
  updateTextContent(el, content);
  return getDomElement(el, true);
}
function startEditingText(domId) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn("Start editing text failed. No element for selector:", domId);
    return null;
  }
  const childNodes = Array.from(el.childNodes).filter(
    (node) => node.nodeType !== Node.COMMENT_NODE
  );
  let targetEl = null;
  if (childNodes.length === 0) {
    targetEl = el;
  } else if (childNodes.length === 1 && el.childNodes[0].nodeType === Node.TEXT_NODE) {
    targetEl = el;
  }
  if (!targetEl) {
    console.warn("Start editing text failed. No target element found for selector:", domId);
    return null;
  }
  const originalContent = el.textContent || "";
  prepareElementForEditing(targetEl);
  return { originalContent };
}
function editText(domId, content) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn("Edit text failed. No element for selector:", domId);
    return null;
  }
  prepareElementForEditing(el);
  updateTextContent(el, content);
  return getDomElement(el, true);
}
function stopEditingText(domId) {
  const el = elementFromDomId(domId);
  if (!el) {
    console.warn("Stop editing text failed. No element for selector:", domId);
    return null;
  }
  cleanUpElementAfterEditing(el);
  publishEditText(getDomElement(el, true));
  return { newContent: el.textContent || "", domEl: getDomElement(el, true) };
}
function prepareElementForEditing(el) {
  el.setAttribute(EditorAttributes.DATA_ONLOOK_EDITING_TEXT, "true");
}
function cleanUpElementAfterEditing(el) {
  restoreElementStyle(el);
  removeEditingAttributes(el);
}
function removeEditingAttributes(el) {
  el.removeAttribute(EditorAttributes.DATA_ONLOOK_EDITING_TEXT);
}
function updateTextContent(el, content) {
  el.textContent = content;
}
function onOnlookViewCode(callback) {
  const subscription = (_event, data) => callback(data);
  electron.ipcRenderer.on(MainChannels.VIEW_CODE_IN_ONLOOK, subscription);
  return () => electron.ipcRenderer.removeListener(MainChannels.VIEW_CODE_IN_ONLOOK, subscription);
}
function removeOnlookViewCode(callback) {
  electron.ipcRenderer.removeListener(
    MainChannels.VIEW_CODE_IN_ONLOOK,
    callback
  );
}
function viewCodeInOnlook(args) {
  return electron.ipcRenderer.invoke(MainChannels.VIEW_CODE_IN_ONLOOK, args);
}
function getTheme() {
  try {
    return (window == null ? void 0 : window.localStorage.getItem("theme")) || "light";
  } catch (error) {
    console.warn("Failed to get theme", error);
    return "light";
  }
}
function setTheme(theme) {
  try {
    if (theme === "dark") {
      document.documentElement.classList.add("dark");
      window == null ? void 0 : window.localStorage.setItem("theme", "dark");
      return true;
    } else {
      document.documentElement.classList.remove("dark");
      window == null ? void 0 : window.localStorage.setItem("theme", "light");
      return false;
    }
  } catch (error) {
    console.warn("Failed to set theme", error);
    return false;
  }
}
function setApi() {
  electron.contextBridge.exposeInMainWorld("api", {
    // Misc
    processDom,
    getComputedStyleByDomId,
    updateElementInstance,
    setWebviewId,
    getFirstOnlookElement,
    // Elements
    getElementAtLoc,
    getDomElementByDomId,
    setElementType,
    getElementType,
    getParentElement,
    getChildrenCount,
    getOffsetParent,
    // Actions
    getActionLocation,
    getActionElementByDomId,
    getInsertLocation,
    getRemoveActionFromDomId,
    // Theme
    getTheme,
    setTheme,
    // Drag
    startDrag,
    drag,
    endDrag,
    getElementIndex,
    endAllDrag,
    // Edit text
    startEditingText,
    editText,
    stopEditingText,
    // Onlook IDE
    onOnlookViewCode,
    removeOnlookViewCode,
    viewCodeInOnlook
  });
}
function groupElements(parent, container, children) {
  const parentEl = elementFromDomId(parent.domId);
  if (!parentEl) {
    console.warn("Failed to find parent element", parent.domId);
    return null;
  }
  const containerEl = createContainerElement(container);
  const childrenMap = new Set(children.map((c) => c.domId));
  const childrenWithIndices = Array.from(parentEl.children).map((child, index) => ({
    element: child,
    index,
    domId: getOrAssignDomId(child)
  })).filter(({ domId }) => childrenMap.has(domId));
  if (childrenWithIndices.length === 0) {
    console.warn("No valid children found to group");
    return null;
  }
  const insertIndex = Math.min(...childrenWithIndices.map((c) => c.index));
  parentEl.insertBefore(containerEl, parentEl.children[insertIndex]);
  childrenWithIndices.forEach(({ element }) => {
    const newElement = element.cloneNode(true);
    newElement.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, "true");
    containerEl.appendChild(newElement);
    element.style.display = "none";
    removeIdsFromChildElement(element);
  });
  return getDomElement(containerEl, true);
}
function ungroupElements(parent, container, children) {
  const parentEl = elementFromDomId(parent.domId);
  if (!parentEl) {
    console.warn("Failed to find parent element", parent.domId);
    return null;
  }
  const containerEl = Array.from(parentEl.children).find(
    (child) => child.getAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID) === container.domId
  );
  if (!containerEl) {
    console.warn("Failed to find container element", parent.domId);
    return null;
  }
  Array.from(containerEl.children).forEach((child) => {
    child.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, "true");
    parentEl.insertBefore(child, containerEl);
  });
  containerEl.style.display = "none";
  return getDomElement(parentEl, true);
}
function createContainerElement(target) {
  const containerEl = document.createElement(target.tagName);
  Object.entries(target.attributes).forEach(([key, value]) => {
    containerEl.setAttribute(key, value);
  });
  containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_INSERTED, "true");
  containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID, target.domId);
  containerEl.setAttribute(EditorAttributes.DATA_ONLOOK_ID, target.oid);
  return containerEl;
}
function removeIdsFromChildElement(el) {
  el.removeAttribute(EditorAttributes.DATA_ONLOOK_DOM_ID);
  el.removeAttribute(EditorAttributes.DATA_ONLOOK_ID);
  el.removeAttribute(EditorAttributes.DATA_ONLOOK_INSERTED);
  const children = Array.from(el.children);
  if (children.length === 0) {
    return;
  }
  children.forEach((child) => {
    removeIdsFromChildElement(child);
  });
}
var StyleChangeType = /* @__PURE__ */ ((StyleChangeType2) => {
  StyleChangeType2["Value"] = "value";
  StyleChangeType2["Custom"] = "custom";
  StyleChangeType2["Remove"] = "remove";
  return StyleChangeType2;
})(StyleChangeType || {});
function insertImage(domId, image) {
  cssManager.updateStyle(domId, {
    backgroundImage: { value: `url(${image})`, type: StyleChangeType.Value }
  });
}
function removeImage(domId) {
  cssManager.updateStyle(domId, {
    backgroundImage: { value: "none", type: StyleChangeType.Value }
  });
}
function listenForDomMutation() {
  const targetNode = document.body;
  const config = { childList: true, subtree: true };
  const observer = new MutationObserver((mutationsList) => {
    let added = /* @__PURE__ */ new Map();
    let removed = /* @__PURE__ */ new Map();
    for (const mutation of mutationsList) {
      if (mutation.type === "childList") {
        const parent = mutation.target;
        for (const node of mutation.addedNodes) {
          if (node.nodeType === Node.TEXT_NODE || shouldIgnoreMutatedNode(node)) {
            continue;
          }
          const element = node;
          dedupNewElement(element);
          const layerMap = buildLayerTree(parent);
          if (layerMap) {
            added = new Map([...added, ...layerMap]);
          }
        }
        for (const node of mutation.removedNodes) {
          if (node.nodeType === Node.TEXT_NODE || shouldIgnoreMutatedNode(node)) {
            continue;
          }
          const layerMap = buildLayerTree(parent);
          if (layerMap) {
            removed = new Map([...removed, ...layerMap]);
          }
        }
      }
    }
    if (added.size > 0 || removed.size > 0) {
      electron.ipcRenderer.sendToHost(WebviewChannels.WINDOW_MUTATED, {
        added: Object.fromEntries(added),
        removed: Object.fromEntries(removed)
      });
    }
  });
  observer.observe(targetNode, config);
}
function shouldIgnoreMutatedNode(node) {
  if (node.id === EditorAttributes.ONLOOK_STUB_ID) {
    return true;
  }
  if (node.getAttribute(EditorAttributes.DATA_ONLOOK_INSERTED)) {
    return true;
  }
  return false;
}
function dedupNewElement(newEl) {
  const oid = newEl.getAttribute(EditorAttributes.DATA_ONLOOK_ID);
  if (!oid) {
    return;
  }
  document.querySelectorAll(
    `[${EditorAttributes.DATA_ONLOOK_ID}="${oid}"][${EditorAttributes.DATA_ONLOOK_INSERTED}]`
  ).forEach((targetEl) => {
    const ATTRIBUTES_TO_REPLACE = [
      EditorAttributes.DATA_ONLOOK_DOM_ID,
      EditorAttributes.DATA_ONLOOK_DRAG_SAVED_STYLE,
      EditorAttributes.DATA_ONLOOK_EDITING_TEXT,
      EditorAttributes.DATA_ONLOOK_INSTANCE_ID
    ];
    ATTRIBUTES_TO_REPLACE.forEach((attr) => {
      const targetAttr = targetEl.getAttribute(attr);
      if (targetAttr) {
        newEl.setAttribute(attr, targetAttr);
      }
    });
    targetEl.remove();
  });
}
function listenForEvents() {
  listenForWindowEvents();
  listenForDomMutation();
  listenForEditEvents();
}
function listenForWindowEvents() {
  window.addEventListener("resize", () => {
    electron.ipcRenderer.sendToHost(WebviewChannels.WINDOW_RESIZED);
  });
}
function listenForEditEvents() {
  electron.ipcRenderer.on(WebviewChannels.UPDATE_STYLE, (_2, data) => {
    const { domId, change } = data;
    cssManager.updateStyle(domId, change.updated);
    publishStyleUpdate(domId);
  });
  electron.ipcRenderer.on(WebviewChannels.INSERT_ELEMENT, (_2, data) => {
    const { element, location, editText: editText2 } = data;
    const domEl = insertElement(element, location);
    if (domEl) {
      publishInsertElement(location, domEl, editText2);
    }
  });
  electron.ipcRenderer.on(WebviewChannels.REMOVE_ELEMENT, (_2, data) => {
    const { location } = data;
    removeElement(location);
    publishRemoveElement(location);
  });
  electron.ipcRenderer.on(WebviewChannels.MOVE_ELEMENT, (_2, data) => {
    const { domId, newIndex } = data;
    const domEl = moveElement(domId, newIndex);
    if (domEl) {
      publishMoveElement(domEl);
    }
  });
  electron.ipcRenderer.on(WebviewChannels.EDIT_ELEMENT_TEXT, (_2, data) => {
    const { domId, content } = data;
    const domEl = editTextByDomId(domId, content);
    if (domEl) {
      publishEditText(domEl);
    }
  });
  electron.ipcRenderer.on(WebviewChannels.GROUP_ELEMENTS, (_2, data) => {
    const { parent, container, children } = data;
    const domEl = groupElements(parent, container, children);
    if (domEl) {
      publishGroupElement(domEl);
    }
  });
  electron.ipcRenderer.on(WebviewChannels.UNGROUP_ELEMENTS, (_2, data) => {
    const { parent, container, children } = data;
    const parentDomEl = ungroupElements(parent, container);
    if (parentDomEl) {
      publishUngroupElement(parentDomEl);
    }
  });
  electron.ipcRenderer.on(WebviewChannels.INSERT_IMAGE, (_2, data) => {
    const { domId, image } = data;
    insertImage(domId, image.content);
    publishStyleUpdate(domId);
  });
  electron.ipcRenderer.on(WebviewChannels.REMOVE_IMAGE, (_2, data) => {
    const { domId } = data;
    removeImage(domId);
    publishStyleUpdate(domId);
  });
  electron.ipcRenderer.on(WebviewChannels.CLEAN_AFTER_WRITE_TO_CODE, () => {
    processDom();
  });
}
function handleBodyReady() {
  setApi();
  listenForEvents();
  keepDomUpdated();
  cssManager.injectDefaultStyles();
}
let domUpdateInterval = null;
function keepDomUpdated() {
  if (domUpdateInterval !== null) {
    clearInterval(domUpdateInterval);
    domUpdateInterval = null;
  }
  const interval = setInterval(() => {
    try {
      if (processDom()) {
        clearInterval(interval);
        domUpdateInterval = null;
      }
    } catch (err) {
      clearInterval(interval);
      domUpdateInterval = null;
      console.warn("Error in keepDomUpdated:", err);
    }
  }, 5e3);
  domUpdateInterval = interval;
}
const handleDocumentBody = setInterval(() => {
  var _a2;
  window.onerror = function logError(errorMsg, url, lineNumber) {
    console.log(`Unhandled error: ${errorMsg} ${url} ${lineNumber}`);
  };
  if ((_a2 = window == null ? void 0 : window.document) == null ? void 0 : _a2.body) {
    clearInterval(handleDocumentBody);
    try {
      handleBodyReady();
    } catch (err) {
      console.log("Error in documentBodyInit:", err);
    }
  }
}, 300);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
